webpackJsonp([13],{1365:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var o=function(){function e(e,n,t,o,r){this.snippets={compiled:{},raw:{}},this.loadSnippetsFromRequireContext(this.snippets.raw,r),this.snippets.compiled=this.snippets.raw}return e.prototype.loadSnippetsFromRequireContext=function(e,n){n&&n.keys().forEach(function(t){var o=t.replace("./","").replace(/\W+(\w)/g,function(e){return e[1].toUpperCase()});e[o]=n(t)})},e}();n.BaseDocumentationSection=o},1433:function(e,n,t){function o(e){return t(r(e))}function r(e){var n=a[e];if(!(n+1))throw new Error("Cannot find module '"+e+"'.");return n}var a={"./addFieldPanel.html":250,"./addFieldPanel.js":2356,"./authorComponent.html":251,"./componentArray.example.js":2357,"./controller.js":2358,"./custodianComponent.html":125,"./custodianComponent.js":2359,"./custodianPanel.html":252,"./custodianPanel.js":2360,"./dateRangeComponent.html":253,"./dateRangeComponent.js":2361,"./fileNameComponent.html":254,"./fileTypesComponent.html":255,"./fileTypesComponent.js":2362,"./fileTypesPanel.html":256,"./fileTypesPanel.js":2363,"./keywordComponent.html":257,"./layout.html":2364,"./modalController.js":2365,"./modalLayout.example.html":2366,"./modalLayout.html":258,"./repositoryComponent.html":259,"./repositoryComponent.js":2367,"./repositoryPanel.html":260,"./repositoryPanel.js":2368,"./searchBuilderIdService.js":2369,"./searchBuilderPanelService.js":2370,"./searchGroup.example.html":2371,"./searchQuery.example.js":2372,"./styles.css":2373,"./textComponent.html":261};o.keys=function(){return Object.keys(a)},o.resolve=r,e.exports=o,o.id=1433},1434:function(e,n,t){function o(e){return t(r(e))}function r(e){var n=a[e];if(!(n+1))throw new Error("Cannot find module '"+e+"'.");return n}var a={"./controller.js":2374,"./layout.html":2375,"./modalController.js":2376,"./modalLayout.html":262,"./styles.css":2377};o.keys=function(){return Object.keys(a)},o.resolve=r,e.exports=o,o.id=1434},1435:function(e,n,t){function o(e){return t(r(e))}function r(e){var n=a[e];if(!(n+1))throw new Error("Cannot find module '"+e+"'.");return n}var a={"./controller.js":2378,"./layout.html":2379};o.keys=function(){return Object.keys(a)},o.resolve=r,e.exports=o,o.id=1435},1592:function(e,n,t){"use strict";var o=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)n.hasOwnProperty(t)&&(e[t]=n[t])};return function(n,t){function o(){this.constructor=n}e(n,t),n.prototype=null===t?Object.create(t):(o.prototype=t.prototype,new o)}}(),r=this&&this.__decorate||function(e,n,t,o){var r,a=arguments.length,i=a<3?n:null===o?o=Object.getOwnPropertyDescriptor(n,t):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,n,t,o);else for(var s=e.length-1;s>=0;s--)(r=e[s])&&(i=(a<3?r(i):a>3?r(n,t,i):r(n,t))||i);return a>3&&i&&Object.defineProperty(n,t,i),i},a=this&&this.__metadata||function(e,n){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,n)};Object.defineProperty(n,"__esModule",{value:!0});var i=t(1),s=t(1365),l=t(218),c=function(e){function n(){return e.call(this,null,null,null,null,t(1433))||this}return o(n,e),n}(s.BaseDocumentationSection);c=r([i.Component({selector:"uxd-search-builder-ng1",template:t(1914),styles:[t(2684)],encapsulation:i.ViewEncapsulation.None,changeDetection:i.ChangeDetectionStrategy.OnPush}),l.DocumentationSectionComponent("ComponentsSearchBuilderNg1Component"),a("design:paramtypes",[])],c),n.ComponentsSearchBuilderNg1Component=c},1593:function(e,n,t){"use strict";var o=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)n.hasOwnProperty(t)&&(e[t]=n[t])};return function(n,t){function o(){this.constructor=n}e(n,t),n.prototype=null===t?Object.create(t):(o.prototype=t.prototype,new o)}}(),r=this&&this.__decorate||function(e,n,t,o){var r,a=arguments.length,i=a<3?n:null===o?o=Object.getOwnPropertyDescriptor(n,t):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,n,t,o);else for(var s=e.length-1;s>=0;s--)(r=e[s])&&(i=(a<3?r(i):a>3?r(n,t,i):r(n,t))||i);return a>3&&i&&Object.defineProperty(n,t,i),i},a=this&&this.__metadata||function(e,n){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,n)};Object.defineProperty(n,"__esModule",{value:!0});var i=t(1),s=t(1365),l=t(218),c=function(e){function n(){var n=e.call(this,null,null,null,null,t(1434))||this;return n.codepen={html:n.snippets.raw.layoutHtml,htmlAttributes:{"ng-controller":"SearchHistoryDemoCtrl as vm"},htmlTemplates:[{id:"modalLayout.html",content:n.snippets.raw.modalLayoutHtml}],css:[n.snippets.raw.stylesCss],js:[n.snippets.raw.controllerJs,n.snippets.raw.modalControllerJs]},n}return o(n,e),n}(s.BaseDocumentationSection);c=r([i.Component({selector:"uxd-search-history-ng1",template:t(1915),styles:[t(2685)],encapsulation:i.ViewEncapsulation.None,changeDetection:i.ChangeDetectionStrategy.OnPush}),l.DocumentationSectionComponent("ComponentsSearchHistoryNg1Component"),a("design:paramtypes",[])],c),n.ComponentsSearchHistoryNg1Component=c},1594:function(e,n,t){"use strict";var o=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)n.hasOwnProperty(t)&&(e[t]=n[t])};return function(n,t){function o(){this.constructor=n}e(n,t),n.prototype=null===t?Object.create(t):(o.prototype=t.prototype,new o)}}(),r=this&&this.__decorate||function(e,n,t,o){var r,a=arguments.length,i=a<3?n:null===o?o=Object.getOwnPropertyDescriptor(n,t):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,n,t,o);else for(var s=e.length-1;s>=0;s--)(r=e[s])&&(i=(a<3?r(i):a>3?r(n,t,i):r(n,t))||i);return a>3&&i&&Object.defineProperty(n,t,i),i},a=this&&this.__metadata||function(e,n){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,n)};Object.defineProperty(n,"__esModule",{value:!0});var i=t(1),s=t(1365),l=t(218),c=function(e){function n(){var n=e.call(this,null,null,null,null,t(1435))||this;return n.codepen={html:n.snippets.raw.layoutHtml,htmlAttributes:{"ng-controller":"SearchToolbarDemoCtrl as vm"},js:[n.snippets.raw.controllerJs,n.snippets.raw.modalControllerJs]},n}return o(n,e),n}(s.BaseDocumentationSection);c=r([i.Component({selector:"uxd-search-toolbar-ng1",template:t(1916),changeDetection:i.ChangeDetectionStrategy.OnPush}),l.DocumentationSectionComponent("ComponentsSearchToolbarNg1Component"),a("design:paramtypes",[])],c),n.ComponentsSearchToolbarNg1Component=c},1595:function(e,n,t){"use strict";var o=this&&this.__decorate||function(e,n,t,o){var r,a=arguments.length,i=a<3?n:null===o?o=Object.getOwnPropertyDescriptor(n,t):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,n,t,o);else for(var s=e.length-1;s>=0;s--)(r=e[s])&&(i=(a<3?r(i):a>3?r(n,t,i):r(n,t))||i);return a>3&&i&&Object.defineProperty(n,t,i),i},r=this&&this.__metadata||function(e,n){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,n)};Object.defineProperty(n,"__esModule",{value:!0});var a=t(1),i=t(19),s=t(219),l=t(119),c=t(220),d=t(1592),p=t(1593),h=t(1594),u=t(221),m=t(222),f=[d.ComponentsSearchBuilderNg1Component,p.ComponentsSearchHistoryNg1Component,h.ComponentsSearchToolbarNg1Component],y=[{path:"**",component:c.DocumentationCategoryComponent,data:{category:l.ResolverService.resolveCategoryData(l.DocumentationPage.Components,"Search")}}],v=function(){function e(e,n){n.registerResolver(e)}return e}();v=o([a.NgModule({imports:[u.WrappersModule,m.TabsModule,s.DocumentationComponentsModule,i.RouterModule.forChild(y)],exports:f,declarations:f,entryComponents:f}),r("design:paramtypes",[a.ComponentFactoryResolver,l.ResolverService])],v),n.ComponentsSearchModule=v},1914:function(e,n){e.exports='<uxd-search-builder-wrapper></uxd-search-builder-wrapper>\n\n<hr>\n\n<p> The Search Builder provides a visual way for the user to easily build up complex search queries using predefined components.\n  Click the button below to view all of the code used to produce the sample search builder modal above.</p>\n\n<uxd-search-builder-code-wrapper [snippets]="snippets"></uxd-search-builder-code-wrapper>\n\n<h4 id="search-builder-directive">Search Builder Directive</h4>\n\n<p>The <code>search-builder</code> directive is designed to act as a container for <code>search-group</code> and <code>search-component</code>  directives. It provides a way to access the generated search query object and register the components that can be added.</p>\n\n<uxd-snippet [content]="snippets.compiled.layoutHtml" language="html"></uxd-snippet>\n\n<p>The following attributes are available to configure the behavior of the <code>search-builder</code>:</p>\n<div class="demo-attributes table-responsive">\n  <table class="table m-t">\n    <tbody>\n      <tr>\n        <th>Name</th>\n        <th>Type</th>\n        <th>Binding</th>\n        <th>Description</th>\n        <th>Optional</th>\n      </tr>\n      <tr>\n        <td class="attribute">search-query</td>\n        <td>object</td>\n        <td>variable</td>\n        <td>This should be a binding to an object that will store the current search query generated by the <code>search-builder</code>.\n          If this initially has a value, the <code>search-builder</code> will automatically update to show the correct groups\n          and components with the values specified.</td>\n        <td>false</td>\n      </tr>\n      <tr>\n        <td class="attribute">components</td>\n        <td>array</td>\n        <td>variable</td>\n        <td>This should provide an array containing information on the components that can be added to it. Each component should\n          be given a unique name and a template url.</td>\n        <td>false</td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n<p>The following is an example of how the component array might look:</p>\n\n<uxd-snippet [content]="snippets.compiled.componentArrayExampleJs" language="javascript"></uxd-snippet>\n\n<h4 id="search-group-directive">Search Group Directive</h4>\n\n<p>The <code>search-group</code> directive acts as a container for <code>search-component</code> directives. Each group should\n  represent a specific operator (eg. and, or, not). It also provides a way to the user to add new fields to the groups.</p>\n\n<uxd-snippet [content]="snippets.compiled.searchGroupExampleHtml" language="html"></uxd-snippet>\n\n<p>The following attributes can be used to configure the behavior of a <code>search-group</code>:</p>\n<div class="demo-attributes table-responsive">\n  <table class="table m-t">\n    <tbody>\n      <tr>\n        <th>Name</th>\n        <th>Type</th>\n        <th>Binding</th>\n        <th>Description</th>\n        <th>Optional</th>\n      </tr>\n      <tr>\n        <td class="attribute">group-id</td>\n        <td>string</td>\n        <td>variable</td>\n        <td>This should be a unique id given to each group to identify it in the generated search query.</td>\n        <td>false</td>\n      </tr>\n      <tr>\n        <td class="attribute">group-title</td>\n        <td>string</td>\n        <td>variable</td>\n        <td>This will specify the text that will display at the top of each group.</td>\n        <td>false</td>\n      </tr>\n      <tr>\n        <td class="attribute">operator</td>\n        <td>string</td>\n        <td>variable</td>\n        <td>This will specify the text that will display to the left of each group when more than one field has been added. The\n          color beside the operator label will be set depending on the operator specified. Recommended options are\n          <code>\'and\'</code>, <code>\'or\'</code> and <code>\'not\'</code>.</td>\n        <td>false</td>\n      </tr>\n      <tr>\n        <td class="attribute">button-text</td>\n        <td>string</td>\n        <td>variable</td>\n        <td>This will specify the text that goes along side the add field button.</td>\n        <td>false</td>\n      </tr>\n      <tr>\n        <td class="attribute">add-field</td>\n        <td>function</td>\n        <td>variable</td>\n        <td>This will specify the function to be called when the add field button is clicked. This function should return an\n          object that contains an <code>id</code> property giving the field a unique id, and a <code>component</code> property\n          specifying the name of the component to be added. Additionally this function can return a <code>$q.defer().promise</code>\n          if the type of field will not immediately be known. If a promise is returned a placeholder field will be displayed\n          until the promise is either resolved or rejected.</td>\n        <td>false</td>\n      </tr>\n      <tr>\n        <td class="attribute">remove-field</td>\n        <td>function</td>\n        <td>variable</td>\n        <td>This will specify the function to be called when the remove field button is clicked. This function should accept\n          one argument containing the ID of the component being removed. It should return a boolean, <code>true</code> indicating\n          that the component should be removed and <code>false</code> indicating that the remove action should be cancelled.\n          Additionally this function can return a <code>$q.defer().promise</code> to determine whether or not to remove the\n          field at a later point. The promise can either be resolved with a <code>boolean</code> value or rejected, in which\n          case the field will not be removed.</td>\n        <td>true</td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n\n<h4 id="search-component-directive">Search Component Directive</h4>\n\n<p>The <code>search-component</code> directive should be used to create a specific component that can be added to a <code>search-group</code>.\n  Each <code>search-component</code> is responsible for setting the <code>model</code> property on it’s scope. It is this\n  value that will be displayed in the generated search query. For a <code>search-component</code> that has a single control,\n  for example an <code>input</code>, simply setting the <code>ng-model</code> property will update the value automatically.</p>\n\n<p>The following example will demonstrate the simplest form of <code>search-component</code>:</p>\n\n<uxd-snippet [content]="snippets.compiled.textComponentHtml" language="html"></uxd-snippet>\n\n<p>For a more complex <code>search-component</code>, such as a date range, it may be required to have a controller that will\n  update the <code>model</code> when values are changed. To specify a controller simply add an <code>ng-controller</code>  attribute to the <code>search-component</code> tag.</p>\n\n<p>The following example will demonstrate a more complex <code>search-component</code> that uses a controller to update the\n  <code>model</code>:</p>\n\n<tabset>\n    <tab heading="HTML">\n        <uxd-snippet [content]="snippets.compiled.dateRangeComponentHtml" language="html"></uxd-snippet>\n    </tab>\n    <tab heading="JavaScript">\n        <uxd-snippet [content]="snippets.compiled.dateRangeComponentJs" language="javascript"></uxd-snippet>\n    </tab>\n</tabset>\n\n<h4 id="search-builder-modal">Search Builder Modal</h4>\n\n<p>The Search Builder is designed to be used within a modal. A new modal layout was created specifically for the Search Builder.\n  To utilize the Search Builder modal set the <code>windowClass</code> to <code>\'search-builder-modal-window\'</code> when\n  specifying the modal options.</p>\n\n<p>The modal template should be similar to the following code which has been set up to show a scrollbar when required.</p>\n\n<uxd-snippet [content]="snippets.compiled.modalLayoutExampleHtml" language="html"></uxd-snippet>\n\n<blockquote>\n  <p>Refer to the <a routerLink="/components/scrollbar" fragment="custom-scrollbar-ng1">Scrollbar</a> page for more information on how to configure the scrollbar.</p>\n</blockquote>\n\n<blockquote>\n  <p>Refer to the <a routerLink="/components/modals" fragment="modal-ng1">Modal View</a> page for more information on how to configure the modal.</p>\n</blockquote>\n\n<h4 id="search-query-structure">Search Query Structure</h4>\n\n<p>The structure of the generated search query is an object that contains child objects for each group that has components.\n  The format is as follows:</p>\n\n<ul>\n  <li>group id\n    <ul>\n      <li>component id\n        <ul>\n          <li>component name</li>\n          <li>component value</li>\n        </ul>\n      </li>\n      <li>component id\n        <ul>\n          <li>component name</li>\n          <li>component value</li>\n        </ul>\n      </li>\n    </ul>\n  </li>\n  <li>group id\n    <ul>\n      <li>component id\n        <ul>\n          <li>component name</li>\n          <li>component value</li>\n        </ul>\n      </li>\n      <li>component id\n        <ul>\n          <li>component name</li>\n          <li>component value</li>\n        </ul>\n      </li>\n    </ul>\n  </li>\n</ul>\n\n<p>An example of a search query is:</p>\n\n<uxd-snippet [content]="snippets.compiled.searchQueryExampleJs" language="javascript"></uxd-snippet>\n'},1915:function(e,n){e.exports='<uxd-search-history-wrapper></uxd-search-history-wrapper>\n\n<hr>\n\n<p>Search History can be saved and updated with the use of the <code>localStorage</code> object. Data\n  stored here will have no expiration time and can be easily accessed from any page when required.</p>\n\n<p>Using our above example you can click the <code><span class="hpe-icon hpe-history" aria-hidden="true"></span></code> icon\n  to see details of the last 10 searches.</p>\n\n<p>The <code>localStorage</code> object has the following methods which we use in our example above:</p>\n<div class="demo-attributes table-responsive">\n  <table class="table m-t">\n    <tbody>\n      <tr>\n        <th>Name</th>\n        <th>Description</th>\n      </tr>\n      <tr>\n        <td class="attribute">setItem</td>\n        <td>This method takes 2 parameters, a <code>key name</code> and <code>key value</code> pair, and will add the key to\n          the storage or update it if it already exists.</td>\n      </tr>\n      <tr>\n        <td class="attribute">getItem</td>\n        <td>This method takes a <code>key name</code> as a parameter and returns its value (if it exists).</td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n\n<blockquote>\n  <p><strong>Note</strong>: Refer to the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Storage">Storage API</a>\n    for full documentation</p>\n</blockquote>\n\n<p>You can see the code used in our example by selecting the appropriate tabs below:</p>\n\n<tabset>\n  <tab heading="HTML">\n    <uxd-snippet [content]="snippets.compiled.layoutHtml" language="html"></uxd-snippet>\n  </tab>\n  <tab heading="JavaScript">\n    <uxd-snippet [content]="snippets.compiled.controllerJs" language="javascript"></uxd-snippet>\n  </tab>\n  <tab heading="Modal HTML">\n    <uxd-snippet [content]="snippets.compiled.modalLayoutHtml" language="html"></uxd-snippet>\n  </tab>\n  <tab heading="Modal JavaScript">\n    <uxd-snippet [content]="snippets.compiled.modalControllerJs" language="javascript"></uxd-snippet>\n  </tab>\n  <tab heading="CSS">\n    <uxd-snippet [content]="snippets.compiled.stylesCss" language="css"></uxd-snippet>\n  </tab>\n</tabset>'},1916:function(e,n){e.exports='<uxd-search-toolbar-wrapper></uxd-search-toolbar-wrapper>\n\n<hr>\n\n<p>The Search Toolbar is contained in the <code>search-toolbar</code> directive and the <code>.expand-input</code> class.</p>\n\n<p>Search Toolbar takes the following attributes:</p>\n<div class="demo-attributes table-responsive">\n<table class="table m-t">\n <tbody><tr>\n   <th>Name</th>\n   <th>Type</th>\n   <th>Binding</th>\n   <th>Description</th>\n   <th>Optional</th>\n </tr>\n <tr>\n   <td class="attribute">search-typeahead</td>\n   <td>array</td>\n   <td>variable</td>\n   <td>Name of the list where the typeahead data is stored.</td>\n   <td>false</td>\n </tr>\n <tr>\n   <td class="attribute">place-holder</td>\n   <td>string</td>\n   <td>literal</td>\n   <td>Placeholder text for an input.</td>\n   <td>false</td>\n </tr>\n <tr>\n   <td class="attribute">close-search</td>\n   <td>string</td>\n   <td>literal</td>\n   <td>Should be set to a value which when clicked closes the input text.</td>\n   <td>false</td>\n </tr>\n <tr>\n   <td class="attribute">on-search</td>\n   <td>function</td>\n   <td>variable</td>\n   <td>Defines the function to be called when the enter key is pressed. The function will be called with the current text entered in the field as an argument.</td>\n   <td>false</td>\n </tr>\n <tr>\n   <td class="attribute">on-focus</td>\n   <td>function</td>\n   <td>variable</td>\n   <td>Defines the function to be called when the search bar is focused.</td>\n   <td>true</td>\n </tr>\n</tbody></table>\n</div>\n<p>An example of the required HTML is as follows:</p>\n\n<tabset>\n    <tab heading="HTML">\n        <uxd-snippet [content]="snippets.compiled.layoutHtml" language="html"></uxd-snippet>\n    </tab>\n    <tab heading="JavaScript">\n        <uxd-snippet [content]="snippets.compiled.controllerJs" language="javascript"></uxd-snippet>\n    </tab>\n</tabset>'},2356:function(e,n){e.exports="angular.module('app').controller('AddFieldPanelCtrl', AddFieldPanelCtrl);\n\nAddFieldPanelCtrl.$inject = ['$scope', 'searchBuilderPanel', 'searchBuilderId'];\n\nfunction AddFieldPanelCtrl($scope, searchBuilderPanel, searchBuilderId) {\n    var vm = this;\n\n    vm.searchQuery = $scope.$parent.vm.searchQuery || {};\n\n    //store the filter text\n    vm.filterText = '';\n\n    //store all the possible fields\n    vm.fields = [{\n        name: 'Author',\n        component: 'author'\n    }, {\n        name: 'Custodian',\n        component: 'custodian'\n    }, {\n        name: 'Date Range',\n        component: 'daterange'\n    }, {\n        name: 'File Name',\n        component: 'filename'\n    }, {\n        name: 'File Type',\n        component: 'filetypes'\n    }, {\n        name: 'Repository',\n        component: 'repository'\n    }, {\n        name: 'Text',\n        component: 'text'\n    }];\n\n    vm.selectField = function (field) {\n        //resolve the deferred object\n        searchBuilderPanel.closePanel({\n            id: searchBuilderId.generateComponentId(field.component, vm.searchQuery),\n            component: field.component\n        });\n    };\n}"},2357:function(e,n){e.exports="vm.components = [{\n    name: 'author',\n    templateUrl: 'authorComponent.html'\n}, {\n    name: 'custodian',\n    templateUrl: 'custodianComponent.html'\n}];"},2358:function(e,n){e.exports="angular.module('app').controller('SearchBuilderDemoCtrl', SearchBuilderDemoCtrl);\n\nSearchBuilderDemoCtrl.$inject = ['$modal'];\n\nfunction SearchBuilderDemoCtrl($modal) {\n    var vm = this;\n\n    // store a stringified version of the search query object\n    vm.searchQuery = JSON.stringify({\n        \"keywords\": {\n            \"keyword-0\": {\n                \"component\": \"keyword\",\n                \"value\": null\n            }\n        }\n    }, null, 4);\n\n\n    vm.openModal = function () {\n\n        var modalInstance = $modal.open({\n            animation: false,\n            templateUrl: 'modalLayout.html',\n            controller: 'SearchBuilderDemoModalCtrl',\n            controllerAs: 'vm',\n            keyboard: 'true',\n            size: 'lg',\n            windowClass: 'search-builder-modal-window',\n            resolve: {\n                searchQuery: function () {\n                    //provide the modal with the existing search query if there is one\n                    return JSON.parse(vm.searchQuery);\n                }\n            }\n        });\n\n        modalInstance.result.then(function (result) {\n            if (result === \"cancel\") return;\n\n            //store the search query as a stringified version of the object\n            vm.searchQuery = JSON.stringify(result, null, 4);\n        });\n    };\n}"},2359:function(e,n){e.exports="angular.module('app').controller('CustodianComponentCtrl', CustodianComponentCtrl);\n\nCustodianComponentCtrl.$inject = ['$scope', 'searchBuilderPanel'];\n\nfunction CustodianComponentCtrl($scope, searchBuilderPanel) {\n    var vm = this;\n\n    //use this to allow the side panel to select options\n    vm.deferred = null;\n\n    vm.selectOptions = {\n        placeholder: 'Select Custodians'\n    };\n\n    vm.custodians = [\n        'Flora Morris',\n        'Micheal Gilbert',\n        'Isabella Goodman',\n        'Eleanor Diaz',\n        'Ellen Holt',\n        'Kate Manning',\n        'Ryan Fisher',\n        'Lily White',\n        'Bernice Harrison',\n        'Eddie Smith',\n        'Violet Schneider',\n        'Jordan Burns',\n        'Ellen Tate',\n        'Rena Gomes',\n        'Ann Garcia'\n    ];\n\n    vm.showPanel = function () {\n        searchBuilderPanel.setPanelHeader('Select Custodians');\n        searchBuilderPanel.setPanelTemplate('custodianPanel.html');\n\n        //pass in all custodians and the currently selected custodians\n        vm.deferred = searchBuilderPanel.openPanel({\n            custodians: vm.custodians,\n            selected: $scope.model\n        });\n\n        //wait for an update on selected repositories\n        vm.deferred.then(function (selectedCustodians) {\n            $scope.model = selectedCustodians;\n        });\n    };\n\n}"},2360:function(e,n){e.exports="angular.module('app').controller('CustodianPanelCtrl', CustodianPanelCtrl);\n\nCustodianPanelCtrl.$inject = ['$scope', 'searchBuilderPanel'];\n\nfunction CustodianPanelCtrl($scope, searchBuilderPanel) {\n    var vm = this;\n\n    //store the filter text\n    vm.filterText = '';\n\n    //store all the possible fields\n    vm.custodians = [];\n\n    vm.selectCustodian = function (custodian) {\n        custodian.checked = !custodian.checked;\n    };\n\n    //when the panel is dismissed resolve the deferred object\n    searchBuilderPanel.onDismiss(function (deferred) {\n        var selectedCustodians = vm.custodians.filter(function (custodian) {\n            return custodian.checked;\n        });\n\n        //we only want to return custodians names\n        var custodians = [];\n\n        selectedCustodians.forEach(function (custodian) {\n            custodians.push(custodian.name);\n        });\n\n        if (deferred) deferred.resolve(custodians);\n    });\n\n    //check any items already selected in the search component\n    prepareItems();\n\n    function prepareItems() {\n        var data = searchBuilderPanel.getData();\n\n        var custodians = data.custodians;\n\n        custodians.forEach(function (custodian) {\n            vm.custodians.push({\n                name: custodian,\n                checked: false\n            });\n        });\n\n        //if there are no selected custodians then stop here\n        if (!data.selected) return;\n\n        data.selected.forEach(function (selected) {\n            vm.custodians.forEach(function (custodian) {\n                //if it is a match set the checked value to true\n                if (custodian.name === selected) custodian.checked = true;\n            });\n        });\n    }\n}"},2361:function(e,n){e.exports="angular.module('app').controller('DateRangeComponentCtrl', DateRangeComponentCtrl);\n\nfunction DateRangeComponentCtrl() {\n    var vm = this;\n\n    vm.fromOpened = false;\n    vm.toOpened = false;\n\n    vm.fromOpen = function (event) {\n        vm.fromOpened = true;\n        event.stopPropagation();\n    };\n\n    vm.toOpen = function (event) {\n        vm.toOpened = true;\n        event.stopPropagation();\n    };\n}"},2362:function(e,n){e.exports='angular.module(\'app\').controller(\'FileTypesComponentCtrl\', FileTypesComponentCtrl);\n\nFileTypesComponentCtrl.$inject = [\'$scope\', \'searchBuilderPanel\'];\n\nfunction FileTypesComponentCtrl($scope, searchBuilderPanel) {\n\n    var vm = this;\n\n    //use this to allow the side panel to select options\n    vm.deferred = null;\n\n    vm.selectOptions = {\n        placeholder: \'Select File Types\'\n    };\n\n    vm.fileTypes = ["AVI", "BMP", "CSV", "DOC", "EXE", "GIF", "JPG", "MOV", "PDF", "PNG", "PPT", "RTF", "TXT", "XLS", "ZIP"];\n\n    vm.showPanel = function () {\n        searchBuilderPanel.setPanelHeader(\'Select File Types\');\n        searchBuilderPanel.setPanelTemplate(\'fileTypesPanel.html\');\n\n        //pass in any currently selected file types\n        vm.deferred = searchBuilderPanel.openPanel({\n            fileTypes: vm.fileTypes,\n            selected: $scope.model\n        });\n\n        //wait for an update on selected repositories\n        vm.deferred.then(function (selectedFileTypes) {\n            $scope.model = selectedFileTypes;\n        });\n    };\n}'},2363:function(e,n){e.exports="angular.module('app').controller('FileTypesPanelCtrl', FileTypesPanelCtrl);\n\nFileTypesPanelCtrl.$inject = ['$scope', 'searchBuilderPanel'];\n\nfunction FileTypesPanelCtrl($scope, searchBuilderPanel) {\n    var vm = this;\n\n    //store the filter text\n    vm.filterText = '';\n\n    //store all the possible fields\n    vm.fileTypes = [];\n\n    vm.selectFileType = function (fileType) {\n        fileType.checked = !fileType.checked;\n    };\n\n    //when the panel is dismissed resolve the deferred object\n    searchBuilderPanel.onDismiss(function (deferred) {\n        var selectedFileTypes = vm.fileTypes.filter(function (fileType) {\n            return fileType.checked;\n        });\n\n        //we only want to return file types names\n        var fileTypes = [];\n\n        selectedFileTypes.forEach(function (fileType) {\n            fileTypes.push(fileType.name);\n        });\n\n        if (deferred) deferred.resolve(fileTypes);\n    });\n\n    //check any items already selected in the search component\n    prepareItems();\n\n    function prepareItems() {\n        var data = searchBuilderPanel.getData();\n\n        var fileTypes = data.fileTypes;\n\n        fileTypes.forEach(function (fileType) {\n            vm.fileTypes.push({\n                name: fileType,\n                checked: false\n            });\n        });\n\n        //if there are no selected file types then stop here\n        if (!data.selected) return;\n\n        data.selected.forEach(function (selected) {\n            vm.fileTypes.forEach(function (fileType) {\n                //if it is a match set the checked value to true\n                if (fileType.name === selected) fileType.checked = true;\n            });\n        });\n    }\n}"},2364:function(e,n){e.exports='<button type="button" class="btn button-primary" ng-click="vm.openModal()">\n  <span class="hpe-icon hpe-deployment" aria-hidden="true"></span>&nbsp;Launch Search Builder Modal\n</button>'},2365:function(e,n){e.exports="angular.module(\"app\").controller(\"SearchBuilderDemoModalCtrl\", SearchBuilderDemoModalCtrl);\n\nSearchBuilderDemoModalCtrl.$inject = ['$modalInstance', '$scope', 'searchBuilderPanel', 'searchBuilderId', 'searchQuery'];\n\nfunction SearchBuilderDemoModalCtrl($modalInstance, $scope, searchBuilderPanel, searchBuilderId, searchQuery) {\n    var vm = this;\n\n    //show previous search query where possible\n    vm.searchQuery = searchQuery ? searchQuery : {};\n\n    // scrollbar conguration\n    vm.scrollBarConfig = {\n        resizeSensor: true,\n        enableKeyboardNavigation: true\n    };\n\n    //use a service to store these values - make them more accessible by all modal contents\n    vm.panelService = searchBuilderPanel;\n\n    // modal data\n    vm.searchPercentage = 0;\n    vm.type = 'spark-primary';\n    vm.searchEstimateLabel = \"<span class='spark-label hidden-xxxs'><span class='medium light'>MATCHING ITEMS</span></span>\";\n    updateApproxLabel('Unavailable');\n\n    //must provide information on all possible components\n    vm.components = [{\n        name: 'author',\n        templateUrl: 'authorComponent.html'\n    }, {\n        name: 'custodian',\n        templateUrl: 'custodianComponent.html'\n    }, {\n        name: 'daterange',\n        templateUrl: 'dateRangeComponent.html'\n    }, {\n        name: 'keyword',\n        templateUrl: 'keywordComponent.html'\n    }, {\n        name: 'filename',\n        templateUrl: 'fileNameComponent.html'\n    }, {\n        name: 'filetypes',\n        templateUrl: 'fileTypesComponent.html'\n    }, {\n        name: 'repository',\n        templateUrl: 'repositoryComponent.html'\n    }, {\n        name: 'text',\n        templateUrl: 'textComponent.html'\n    }, {\n        name: 'custodians',\n        templateUrl: 'custodianComponent.html'\n    }];\n\n    // modal properties\n    vm.ok = function () {\n        $modalInstance.close(vm.searchQuery);\n    };\n\n    vm.cancel = function () {\n        $modalInstance.dismiss(\"cancel\");\n    };\n\n    //ensure we dismiss any open panel if the modal is closing\n    $scope.$on('modal.closing', function () {\n        searchBuilderPanel.closePanel();\n    });\n\n    //adding a simple field that will be the same component everytime\n    vm.addKeywordField = function () {\n        return {\n            id: searchBuilderId.generateComponentId('keyword', vm.searchQuery),\n            component: 'keyword'\n        };\n    };\n\n    //adding a field that may be a different component everytime\n    vm.addCustomField = function () {\n\n        //set the appropriate panel content\n        vm.panelService.setPanelHeader('Add Field');\n        vm.panelService.setPanelTemplate('addFieldPanel.html');\n\n        //the open panel function returns a deferred object which will be resolved or rejected accordingly\n        return vm.panelService.openPanel();\n    };\n\n    //this emulates the number of search results - and fakes approximate number of matching documents\n    $scope.$watch('vm.searchQuery', function (nv, ov) {\n        if (!angular.equals(nv, ov)) {\n            var complexity = vm.calculateComplexity(vm.searchQuery);\n\n            if (complexity === 0) {\n                vm.searchPercentage = 0;\n                updateApproxLabel('Unavailable');\n                return;\n            }\n\n            vm.searchPercentage = Math.max(100 - (complexity * 10), 0);\n\n            //set the color of the spark chart based on the search percentage\n            if (vm.searchPercentage > 70) vm.type = 'spark-critical';\n            else if (vm.searchPercentage > 50) vm.type = 'spark-warning';\n            else vm.type = 'spark-ok';\n\n            //update the label to the correct number of items\n            updateApproxLabel('Approx ' + vm.searchPercentage + 'k items');\n        }\n    }, true);\n\n    // this function returns dummy data for the number of search results based on search complexity\n    vm.calculateComplexity = function (node) {\n        var count = 0;\n\n        for (var key in node) {\n            if (key === 'value') {\n                if (!node[key] || (typeof node[key] === 'string' && node[key].trim().length === 0) ||\n                    (Array.isArray(node[key]) && node[key].length === 0)) {\n                    return 0;\n                }\n                return 1;\n            }\n\n            if (typeof node[key] === 'object')\n                count += vm.calculateComplexity(node[key]);\n        }\n\n        return count;\n    };\n\n    function updateApproxLabel(value) {\n        vm.approxItemLabel = \"<span class='spark-label hidden-xxxs'><span class='medium light'>\" + value + \"</span></span>\";\n    }\n}"},2366:function(e,n){e.exports='<div class="dismiss">\n    <button class="btn btn-icon button-dark btn-circular btn-close" ng-click="vm.cancel()">\n        <i class="hpe-icon hpe-close"></i>\n    </button>\n</div>\n\n<div class="search-builder-header">\n    <div class="search-builder-header-inline">\n        <div class="search-icon"></div>\n        <h1 class="search-builder-title">Search builder</h1>\n    </div>\n</div>\n\n<div class="search-builder-scroll-container">\n    <div class="search-builder-scroller" scroll-config="vm.scrollBarConfig" scroll-pane scroll-name="search-builder">\n        <div class="search-builder-body">\n\n            \x3c!-- Search Builder Should Go Here --\x3e\n\n        </div>\n    </div>\n</div>\n\n<div class="search-builder-footer">\n    <button type="button" class="btn button-primary m-r-xs" ng-click="vm.ok()">Search</button>\n    <button type="button" class="btn button-secondary" ng-click="vm.cancel()">Cancel</button>\n</div>'},2367:function(e,n){e.exports="angular.module('app').controller('RepositoryComponentCtrl', RepositoryComponentCtrl);\n\nRepositoryComponentCtrl.$inject = ['$scope', 'searchBuilderPanel'];\n\nfunction RepositoryComponentCtrl($scope, searchBuilderPanel) {\n\n    var vm = this;\n\n    //use this to allow the side panel to select options\n    vm.deferred = null;\n\n    vm.selectOptions = {\n        placeholder: 'Select Repositories'\n    };\n\n    vm.repositories = [\n        \"Filesystem\",\n        \"Records Manager\",\n        \"Email\",\n        \"Legacy Email\",\n        \"Archives\",\n        \"Legacy Archives\",\n        \"Miscellaneous\"\n    ];\n\n    vm.showPanel = function () {\n        searchBuilderPanel.setPanelHeader('Select Repositories');\n        searchBuilderPanel.setPanelTemplate('repositoryPanel.html');\n\n        //pass in any currently selected repositories\n        vm.deferred = searchBuilderPanel.openPanel({\n            repositories: vm.repositories,\n            selected: $scope.model\n        });\n\n        //wait for an update on selected repositories\n        vm.deferred.then(function (selectedRepositories) {\n            $scope.model = selectedRepositories;\n        });\n    };\n}"},2368:function(e,n){e.exports="angular.module('app').controller('RepositoryPanelCtrl', RepositoryPanelCtrl);\n\nRepositoryPanelCtrl.$inject = ['$scope', 'searchBuilderPanel'];\n\nfunction RepositoryPanelCtrl($scope, searchBuilderPanel) {\n    var vm = this;\n\n    //store the filter text\n    vm.filterText = '';\n\n    //store all the possible fields\n    vm.repositories = [];\n\n    vm.selectRepository = function (repository) {\n        repository.checked = !repository.checked;\n    };\n\n    //when the panel is dismissed resolve the deferred object\n    searchBuilderPanel.onDismiss(function (deferred) {\n        var selectedRepositories = vm.repositories.filter(function (repo) {\n            return repo.checked;\n        });\n\n        //we only want to return repository names\n        var repositoryNames = [];\n\n        selectedRepositories.forEach(function (repo) {\n            repositoryNames.push(repo.name);\n        });\n\n        if (deferred) deferred.resolve(repositoryNames);\n    });\n\n    //check any items already selected in the search component\n    prepareItems();\n\n    function prepareItems() {\n        var data = searchBuilderPanel.getData();\n\n        var repositories = data.repositories;\n\n        repositories.forEach(function (repository) {\n            vm.repositories.push({\n                name: repository,\n                checked: false\n            });\n        });\n\n        //if there are no selected repositories then stop here\n        if (!data.selected) return;\n\n        data.selected.forEach(function (selected) {\n            vm.repositories.forEach(function (repository) {\n                //if it is a match set the checked value to true\n                if (repository.name === selected) repository.checked = true;\n            });\n        });\n    }\n}"},2369:function(e,n){e.exports="angular.module('app').service('searchBuilderId', searchBuilderId);\n\nfunction searchBuilderId() {\n    var vm = this;\n\n    vm.generateComponentId = function (componentName, searchQuery) {\n        //initialise or increments\n\n        vm.existingIds = [];\n\n        //Get all IDs which have currently been assigned for each component\n        for (var groupName in searchQuery) {\n            var group = searchQuery[groupName];\n\n            //build up list of all component ids\n            for (var component in group) vm.existingIds.push(component);\n        }\n\n        var index = 0;\n        var componentId;\n\n        //setting upper limit to avoid an infinte loop\n        while (index < 1000) {\n            var desiredId = componentName + \"-\" + index;\n\n            if (vm.existingIds.indexOf(desiredId) === -1) {\n                componentId = desiredId;\n                break;\n            }\n\n            index++;\n        }\n\n        return componentId;\n\n    };\n\n    return vm;\n}"},2370:function(e,n){e.exports="angular.module('app').service('searchBuilderPanel', searchBuilderPanel);\n\nsearchBuilderPanel.$inject = ['$q'];\n\nfunction searchBuilderPanel($q) {\n    var vm = this;\n\n    //store basic panel properties\n    vm.panelOpen = false;\n    vm.panelWidth = 400;\n    vm.panelSide = 'right';\n\n    //store content properties\n    vm.panelHeader = '';\n    vm.panelTemplate = '';\n\n    //store a deferred object to allow returning of values\n    vm.deferred = null;\n\n    //allow the storing of some data while the panel is open\n    vm.data = null;\n\n    // allow custom on dismiss event\n    vm.dismissEventHandlers = [];\n\n    //action functions\n    vm.openPanel = function (data) {\n        vm.deferred = $q.defer();\n\n        //store any new data - replace any exisiting data\n        vm.data = data;\n\n        //reset dismiss event handlers\n        vm.dismissEventHandlers = [];\n\n        //show panel\n        vm.panelOpen = true;\n\n        return vm.deferred.promise;\n    };\n\n    vm.closePanel = function (result) {\n        //if deferred is not null then either resolve or reject deferred\n        if (vm.deferred !== null) {\n            if (result) vm.deferred.resolve(result);\n            else vm.deferred.reject();\n        }\n\n        //we no longer need the deferred object - it has been resolved or rejected\n        vm.deferred = null;\n\n        //hide the panel\n        vm.panelOpen = false;\n\n        //remove any template so everything is reinstantiated correctly\n        vm.setPanelHeader('');\n        vm.setPanelTemplate('');\n    };\n\n    vm.onDismiss = function (eventHandler) {\n\n        //if an argument was passed then we can assume that this is subscribing to the dismiss event\n        if (eventHandler) {\n            vm.dismissEventHandlers.push(eventHandler);\n            return;\n        }\n\n        //allow a handler to resolve deferred\n        var resolved = false;\n\n        //otherwise call all event handlers and pass them the deferred object in case they want to resolve it\n        for (var i = 0; i < vm.dismissEventHandlers.length; i++) {\n            var handler = vm.dismissEventHandlers[i];\n\n            //call function with deferred\n            var didResolved = handler(vm.deferred);\n\n            if (didResolved === true) resolved = true;\n        }\n\n        //if deferred has not yet been resolved then reject\n        if (resolved === false && vm.deferred) vm.deferred.reject();\n\n        //remove any template so everything is reinstantiated correctly\n        vm.setPanelHeader('');\n        vm.setPanelTemplate('');\n    };\n\n    //setters\n    vm.setPanelHeader = function (header) {\n        vm.panelHeader = header;\n    };\n\n    vm.setPanelTemplate = function (template) {\n        vm.panelTemplate = template;\n    };\n\n    vm.setData = function (data) {\n        vm.data = data;\n    };\n\n    //getters\n    vm.getPanelWidth = function () {\n        return vm.panelWidth;\n    };\n\n    vm.getPanelSide = function () {\n        return vm.panelSide;\n    };\n\n    vm.getPanelHeader = function () {\n        return vm.panelHeader;\n    };\n\n    vm.getPanelTemplate = function () {\n        return vm.panelTemplate;\n    };\n\n    vm.getData = function () {\n        return vm.data;\n    };\n\n    return vm;\n}"},2371:function(e,n){e.exports='<search-builder search-query="vm.searchQuery" components="vm.components">\n  <search-group group-id="\'keywords\'" group-title="\'Text Keywords\'" operator="\'or\'"\n    button-text="\'Add text keywords\'" add-field="vm.addKeywordField"></search-group>\n  <search-group group-id="\'locations\'" group-title="\'ANY of the following\'" operator="\'or\'"\n    button-text="\'Add a field\'" add-field="vm.addCustomField"></search-group>\n  <search-group group-id="\'type\'" group-title="\'ALL of the following\'" operator="\'and\'"\n    button-text="\'Add a field\'" add-field="vm.addCustomField"></search-group>\n  <search-group group-id="\'exclusions\'" group-title="\'NONE of the following\'" operator="\'not\'"\n    button-text="\'Add a field\'" add-field="vm.addCustomField"></search-group>\n</search-builder>'},2372:function(e,n){e.exports='{\n    "keywords": {\n        "keyword-0": {\n            "component": "keyword",\n            "value": "Austin"\n        },\n        "keyword-1": {\n            "component": "keyword",\n            "value": "Dallas"\n        }\n    },\n    "locations": {\n        "repository-0": {\n            "component": "repository",\n            "value": [\n                "Email",\n                "Archives"\n            ]\n        }\n    },\n    "type": {\n        "daterange-0": {\n            "component": "daterange",\n            "value": {\n                "from": "2016-03-02T00:00:00.000Z",\n                "to": "2016-03-22T00:00:00.000Z"\n            }\n        },\n        "filetypes-0": {\n            "component": "filetypes",\n            "value": [\n                "DOC",\n                "PDF",\n                "PPT"\n            ]\n        }\n    }\n}'},2373:function(e,n){e.exports=".search-builder-title-icon {\n  font-size: 33px;\n  margin-right: 15px;\n}\n\n.add-field-list {\n  list-style-type: none;\n  padding: 0;\n  margin: 8px 5px;\n}\n\n.add-field-list .field-name {\n  font-size: 17px;\n  padding: 3px 10px;\n  cursor: pointer;\n}\n\n.add-field-list .field-name:hover {\n  background-color: #f2f2f2;\n}\n\n.body-dark .add-field-list .field-name:hover {\n  background-color: #262626;\n}\n\n.add-field-list .field-name .repository-check {\n  margin-right: 10px;\n  transition: opacity 0.2s linear;\n}\n\n.add-field-list .field-name.option-deselected .option-check {\n  opacity: 0;\n}\n\n.add-field-list .field-name.option-deselected:hover .option-check {\n  opacity: 0.5;\n}\n\n.add-field-list .field-name.option-selected .option-check {\n  opacity: 1;\n}\n\n.show-panel-btn {\n  cursor: pointer;\n}"},2374:function(e,n){e.exports="angular.module('app').controller('SearchHistoryDemoCtrl', SearchHistoryDemoCtrl);\n\nSearchHistoryDemoCtrl.$inject = ['$scope', '$modal'];\n\nfunction SearchHistoryDemoCtrl($scope, $modal) {\n    var vm = this;\n\n    vm.scrollConfig = {\n        autoReinitialise: true,\n        showOnlyOnHover: false,\n        enableKeyboardNavigation: true,\n        isScrollableH: false,\n        scrollMargin: 5\n    };\n\n    vm.searches = [\n        {\n            icon: 'hpe-search',\n            text: '\"periwinkle documents\" AND (\"Emma Hart\" OR \"ehart\")',\n            any: 'PDF, DOC, DOCX, XLS, PPT',\n            all: '16/03/2016 - 18/11/2016',\n            exclude: '\"Recycle Bin\", \"Trash\"'\n        }, {\n            icon: 'hpe-search',\n            text: '\"attendance record\" AND \"Tim Walsh\"',\n            any: 'XLS, XLSX',\n            all: 'File Archives, Time Off Docs',\n            exclude: '\"Recycle Bin\", \"Trash\"'\n        }, {\n            icon: 'hpe-folder',\n            text: 'Helena\\'s Workbook'\n        }, {\n            icon: 'hpe-user',\n            text: 'Lauren Scott'\n        }, {\n            icon: 'hpe-search',\n            text: '\"meeting notes\"',\n            exclude: '\"Recycle Bin\", \"Trash\"'\n        }, {\n            icon: 'hpe-search',\n            text: '\"time off allowance\"',\n            exclude: '\"Recycle Bin\", \"Trash\"'\n        }, {\n            icon: 'hpe-folder',\n            text: 'Gabriel\\'s Workbook'\n        }, {\n            icon: 'hpe-search',\n            text: '\"hr links\" AND (\"hr connect\" OR \"hr@company.com\")',\n            any: \"HR, Human Resources, HR Connect\",\n            all: \"12/09/2016 - 22/10/2016\",\n            exclude: '\"Mail\"'\n        }, {\n            icon: 'hpe-user-manager',\n            text: 'Joshua Smith'\n        }, {\n            icon: 'hpe-mail',\n            text: '\"weekly rota\"',\n            any: \"Joshua Smith, Michael Tucker\",\n            all: \"10/11/2016\",\n            exclude: \"Donny Piper\"\n        }\n    ];\n\n    storeSearches();\n\n    vm.getHistory = function () {\n        vm.searches = JSON.parse(localStorage.getItem('mySearches'));\n    };\n\n    vm.openModal = function () {\n        var modalInstance = $modal.open({\n            animation: false,\n            templateUrl: 'search-history-ng1/modalLayout.html',\n            controller: 'SearchHistoryModalDemoCtrl',\n            controllerAs: 'vm',\n            keyboard: 'true',\n            size: 'md',\n            windowClass: 'square-modal-window'\n        });\n\n        modalInstance.result.then(function (result) {\n            if (result === \"cancel\") return;\n\n            vm.searches = JSON.parse(localStorage.getItem('mySearches'));\n            vm.searches.unshift(result);\n            vm.searches.pop();\n\n            storeSearches();\n        });\n    };\n\n    vm.search = function (search) {\n        vm.searches.unshift(search);\n        vm.searches.pop();\n        storeSearches();\n    };\n\n    function storeSearches() {\n        localStorage.setItem('mySearches', JSON.stringify(vm.searches));\n    }\n}"},2375:function(e,n){e.exports='<div class="btn-group" dropdown>\n    <button type="button" class="btn button-secondary" ng-click="vm.openModal()" disabled>NEW SEARCH</button>\n    <button type="button" class="btn button-secondary dropdown-toggle" dropdown-toggle aria-haspopup="true"\n        aria-expanded="false" ng-click="vm.getHistory()">\n        <span class="hpe-icon hpe-history" aria-hidden="true"></span>\n    </button>\n    <ul class="dropdown-menu search-history-container" role="menu">\n        <div class="search-history-scrollpane" scroll-config="vm.scrollConfig"\n            scroll-pane scroll-name="searchHistoryScroller">\n            <li ng-repeat="search in vm.searches track by $index" class="search-history-item" ng-click="vm.search(search)">\n                <div class="search-history">\n                    <i class="hpe-icon hpe-lg search-history-icon text-primary" ng-class="search.icon" aria-hidden="true"></i>\n                    <div class="search-history-detail">\n                        <p ng-bind="search.text"></p>\n                        <p class="search-criteria" ng-if="search.any">ANY OF <span ng-bind="search.any"></span></p>\n                        <p class="search-criteria" ng-if="search.all">ALL OF <span ng-bind="search.all"></span></p>\n                        <p class="search-criteria" ng-if="search.exclude">NONE OF <span ng-bind="search.exclude"></span></p>\n                    </div>\n                </div>\n                <hr>\n            </li>\n        </div>\n    </ul>\n</div>'},2376:function(e,n){e.exports='angular.module("app").controller(\'SearchHistoryDemoModalCtrl\', SearchHistoryDemoModalCtrl);\n\nSearchHistoryDemoModalCtrl.$inject = [\'$modalInstance\'];\n\nfunction SearchHistoryDemoModalCtrl($modalInstance) {\n    var vm = this;\n\n    vm.selectOptions = {\n        placeholder: \'Select a type\',\n        scroll: false\n    };\n\n    vm.types = ["String", "User", "File", "Mail"];\n\n    vm.selectedType = "";\n    vm.text = "";\n    vm.any = "";\n    vm.all = "";\n    vm.exclude = "";\n\n    var typeIcon = {\n        string: \'hpe-search\',\n        user: \'hpe-user\',\n        file: \'hpe-folder\',\n        mail: \'hpe-mail\'\n    };\n\n    vm.search = function () {\n        var searchObj = {\n            icon: typeIcon[vm.selectedType.toLowerCase()],\n            text: vm.text,\n            any: vm.any,\n            all: vm.all,\n            exclude: vm.exclude\n        };\n        $modalInstance.close(searchObj);\n    };\n\n    vm.cancel = function () {\n        $modalInstance.dismiss("cancel");\n    };\n}'},2377:function(e,n){e.exports=".search-history-container {\n  width: 350px;\n  height: 600px;\n  overflow: auto;\n}\n\n.search-history-scrollpane {\n  height: 100%;\n}\n\n.search-history-container .search-history {\n\tdisplay: flex;\n\tflex-direction: row;\n  padding: 10px 10px 8px 15px;\n}\n\n.search-history-container .search-history .search-history-icon {\n\tflex: none;\n  vertical-align: middle;\n  margin-top: 3px;\n} \n\n.search-history-container .search-history .search-history-detail {\n\tflex: 1;\n  padding: 0px 15px;\n  overflow: hidden;\n}\n\n.search-history-container .search-history .search-history-detail p {\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n  height: 25px;\n  margin-bottom: 3px;\n}\n\n.search-history-container .search-history .search-history-detail .search-criteria {\n\tfont-size: 13px;\n}\n\n.search-history-container .search-history .search-history-detail .search-criteria span {\n \tfont-size: 16px;\n  margin-left: 5px;\n}\n\n.search-history-container .search-history .search-history-detail .search-criteria:last-of-type span {\n\tcolor: #CE6A79;\n  font-size: 16px;\n  margin-left: 5px;\n}\n\n.search-history-container li:last-of-type hr {\n\tdisplay: none;\n}\n\n.search-history-container li hr {\n\tmargin: 0px;\n}\n\n.search-history-container li:hover {\n\tbackground-color: #F6F7F8;\n\tcursor: pointer;\n}\n\n.search-history-modal-header {\n\tdisplay: flex;\n\tbackground-color: #f2f2f2;\n\tpadding: 20px;\n}\n\n.search-history-modal-header-title {\n\tmargin-top: 0px;\n\tcolor: black;\n}\n\n.search-history-modal-content {\n\tpadding: 0px 20px 10px 20px;\n}\n\n.search-history-modal-content .section {\n\tmargin-top: 20px;\n}\n\n.search-history-modal-footer {\n\tpadding: 20px;\n\ttext-align: right;\n}"},2378:function(e,n){e.exports="angular.module('app').controller('SearchToolbarDemoCtrl', SearchToolbarDemoCtrl);\n\nfunction SearchToolbarDemoCtrl() {\n    var vm = this;\n\n    vm.list = [];\n    for (var i = 0; i < 15; i += 1) {\n        vm.list.push(chance.name());\n    }\n\n    vm.search = function (text) {\n        // Search logic goes here\n    };\n}"},2379:function(e,n){e.exports='<div class="row">\n    <div class="col-sm-12">\n        <search-toolbar place-holder="Search..."\n            on-search="vm.search"\n            close-search="Cancel"\n            search-typeahead="vm.list">\n        </search-toolbar>\n    </div>\n</div>'},2684:function(e,n){e.exports=".search-icon {\n  width: 30px;\n  height: 30px;\n  background-image: url('assets/img/IconSearchColorized.png');\n  background-size: 100% 100%;\n  margin-top: 8px;\n  margin-right: 15px;\n  min-width: 30px;\n}\n.search-builder-header-inline {\n  display: flex;\n}\n.search-builder-spark-padding {\n  padding-top: 6px;\n  min-width: 210px;\n}\n@media (max-width: 440px) {\n  .search-builder-spark-padding {\n    display: none;\n  }\n}\n.search-builder-title-icon {\n  font-size: 33px;\n  margin-right: 15px;\n}\n.add-field-list {\n  list-style-type: none;\n  padding: 0;\n  margin: 8px 5px;\n}\n.add-field-list .field-name {\n  font-size: 17px;\n  padding: 3px 10px;\n  cursor: pointer;\n}\n.add-field-list .field-name:hover {\n  background-color: #f2f2f2;\n}\n.body-dark .add-field-list .field-name:hover {\n  background-color: #262626;\n}\n.add-field-list .field-name .repository-check {\n  margin-right: 10px;\n  transition: opacity 0.2s linear;\n}\n.add-field-list .field-name.option-deselected .option-check {\n  opacity: 0;\n}\n.add-field-list .field-name.option-deselected:hover .option-check {\n  opacity: 0.5;\n}\n.add-field-list .field-name.option-selected .option-check {\n  opacity: 1;\n}\n.show-panel-btn {\n  cursor: pointer;\n}\n/* Code Modal */\n.code-modal-body {\n  height: 520px;\n  overflow-y: hidden;\n}\n.code-modal-list {\n  list-style-type: none;\n  width: 100%;\n  padding: 0;\n}\n.code-modal-list .code-section {\n  font-size: 18px;\n  padding: 10px 20px;\n  color: #fff;\n  transition: background-color 0.3s linear;\n  cursor: pointer;\n}\n.code-modal-list .code-section:hover,\n.code-modal-list .code-section.active {\n  background-color: rgba(0, 0, 0, 0.2);\n}\n"},2685:function(e,n){e.exports=".search-history-container {\n  width: 350px;\n  height: 600px;\n  overflow: auto;\n}\n.search-history-scrollpane {\n  height: 100%;\n}\n.search-history-container .search-history {\n  display: flex;\n  flex-direction: row;\n  padding: 10px 10px 8px 15px;\n}\n.search-history-container .search-history .search-history-icon {\n  flex: none;\n  vertical-align: middle;\n  margin-top: 3px;\n}\n.search-history-container .search-history .search-history-detail {\n  flex: 1;\n  padding: 0px 15px;\n  overflow: hidden;\n}\n.search-history-container .search-history .search-history-detail p {\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n  height: 25px;\n  margin-bottom: 3px;\n}\n.search-history-container .search-history .search-history-detail .search-criteria {\n  font-size: 13px;\n}\n.search-history-container .search-history .search-history-detail .search-criteria span {\n  font-size: 16px;\n  margin-left: 5px;\n}\n.search-history-container .search-history .search-history-detail .search-criteria:last-of-type span {\n  color: #CE6A79;\n  font-size: 16px;\n  margin-left: 5px;\n}\n.search-history-container li:last-of-type hr {\n  display: none;\n}\n.search-history-container li hr {\n  margin: 0px;\n}\n.search-history-container li:hover {\n  background-color: #F6F7F8;\n  cursor: pointer;\n}\n.search-history-modal-header {\n  display: flex;\n  background-color: #f2f2f2;\n  padding: 20px;\n}\n.search-history-modal-header-title {\n  margin-top: 0px;\n  color: black;\n}\n.search-history-modal-content {\n  padding: 0px 20px 10px 20px;\n}\n.search-history-modal-content .section {\n  margin-top: 20px;\n}\n.search-history-modal-footer {\n  padding: 20px;\n  text-align: right;\n}\n"}});