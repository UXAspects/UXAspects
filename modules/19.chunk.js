webpackJsonp([19],{1645:function(e,n,t){"use strict";var o=this&&this.__decorate||function(e,n,t,o){var i,a=arguments.length,r=a<3?n:null===o?o=Object.getOwnPropertyDescriptor(n,t):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,n,t,o);else for(var d=e.length-1;d>=0;d--)(i=e[d])&&(r=(a<3?i(r):a>3?i(n,t,r):i(n,t))||r);return a>3&&r&&Object.defineProperty(n,t,r),r};Object.defineProperty(n,"__esModule",{value:!0});var i=t(1),a=t(218),r=function(){function e(){this.htmlCode=t(2502),this.jsCodeShort=t(2501),this.jsCode=t(2503),this.template=t(2504),this.codepen={html:this.htmlCode,htmlAttributes:{"ng-controller":"TreeGridAsyncDemoCtrl as vm"},htmlTemplates:[{id:"template.html",content:this.template}],js:[this.jsCode]}}return e}();r=o([i.Component({selector:"uxd-components-tree-grid-asynchronous-loading",template:t(1964),changeDetection:i.ChangeDetectionStrategy.OnPush}),a.DocumentationSectionComponent("ComponentsTreeGridAsynchronousLoadingNg1Component")],r),n.ComponentsTreeGridAsynchronousLoadingNg1Component=r},1646:function(e,n,t){"use strict";var o=this&&this.__decorate||function(e,n,t,o){var i,a=arguments.length,r=a<3?n:null===o?o=Object.getOwnPropertyDescriptor(n,t):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,n,t,o);else for(var d=e.length-1;d>=0;d--)(i=e[d])&&(r=(a<3?i(r):a>3?i(n,t,r):i(n,t))||r);return a>3&&r&&Object.defineProperty(n,t,r),r};Object.defineProperty(n,"__esModule",{value:!0});var i=t(1),a=t(218),r=function(){function e(){this.sampleHtml=t(2510),this.sampleJs=t(2511),this.jsCode1=t(2506),this.jsCode2=t(2507),this.jsCode3=t(2508),this.jsCode4=t(2509),this.actionsJs=t(2505),this.actionsHtml=t(1966),this.displayPanel=t(1967),this.displayPanelFooter=t(1968),this.sortExampleJs=t(2512),this.codepen={html:this.sampleHtml,htmlAttributes:{"ng-controller":"TreeGridCtrl as vm"},htmlTemplates:[{id:"actions.html",content:this.actionsHtml},{id:"displayPanel.html",content:this.displayPanel},{id:"displayPanelFooter.html",content:this.displayPanelFooter}],js:[this.sampleJs,this.actionsJs]}}return e}();r=o([i.Component({selector:"uxd-components-tree-grid-ng1",template:t(1965),changeDetection:i.ChangeDetectionStrategy.OnPush}),a.DocumentationSectionComponent("ComponentsTreeGridNg1Component")],r),n.ComponentsTreeGridNg1Component=r},1647:function(e,n,t){"use strict";var o=this&&this.__decorate||function(e,n,t,o){var i,a=arguments.length,r=a<3?n:null===o?o=Object.getOwnPropertyDescriptor(n,t):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,n,t,o);else for(var d=e.length-1;d>=0;d--)(i=e[d])&&(r=(a<3?i(r):a>3?i(n,t,r):i(n,t))||r);return a>3&&r&&Object.defineProperty(n,t,r),r};Object.defineProperty(n,"__esModule",{value:!0});var i=t(1),a=t(218),r=function(){function e(){this.htmlCode=t(2513),this.jsCode=t(2514),this.codepen={html:this.htmlCode,htmlAttributes:{"ng-controller":"TreeViewCompanionViewCtrl as vm"},js:[this.jsCode]}}return e}();r=o([i.Component({selector:"uxd-components-tree-view-companion-view-ng1",template:t(1969),changeDetection:i.ChangeDetectionStrategy.OnPush}),a.DocumentationSectionComponent("ComponentsTreeViewCompanionViewNg1Component")],r),n.ComponentsTreeViewCompanionViewNg1Component=r},1648:function(e,n,t){"use strict";var o=this&&this.__decorate||function(e,n,t,o){var i,a=arguments.length,r=a<3?n:null===o?o=Object.getOwnPropertyDescriptor(n,t):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,n,t,o);else for(var d=e.length-1;d>=0;d--)(i=e[d])&&(r=(a<3?i(r):a>3?i(n,t,r):i(n,t))||r);return a>3&&r&&Object.defineProperty(n,t,r),r};Object.defineProperty(n,"__esModule",{value:!0});var i=t(1),a=t(218),r=function(){function e(){this.htmlCode=t(2515),this.jsCode=t(2516),this.snippet=t(2517),this.codepen={html:this.htmlCode,htmlAttributes:{"ng-controller":"TreeViewDocumentationCtrl as vm"},js:[this.jsCode]}}return e}();r=o([i.Component({selector:"uxd-components-tree-view-ng1",template:t(1970),changeDetection:i.ChangeDetectionStrategy.OnPush}),a.DocumentationSectionComponent("ComponentsTreeViewNg1Component")],r),n.ComponentsTreeViewNg1Component=r},1649:function(e,n,t){"use strict";var o=this&&this.__decorate||function(e,n,t,o){var i,a=arguments.length,r=a<3?n:null===o?o=Object.getOwnPropertyDescriptor(n,t):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,n,t,o);else for(var d=e.length-1;d>=0;d--)(i=e[d])&&(r=(a<3?i(r):a>3?i(n,t,r):i(n,t))||r);return a>3&&r&&Object.defineProperty(n,t,r),r},i=this&&this.__metadata||function(e,n){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,n)};Object.defineProperty(n,"__esModule",{value:!0});var a=t(1),r=t(19),d=t(219),s=t(119),l=t(220),c=t(1648),p=t(1647),h=t(1645),u=t(1646),m=t(222),f=t(221),g=[c.ComponentsTreeViewNg1Component,p.ComponentsTreeViewCompanionViewNg1Component,u.ComponentsTreeGridNg1Component,h.ComponentsTreeGridAsynchronousLoadingNg1Component],b=[{path:"**",component:l.DocumentationCategoryComponent,data:{category:s.ResolverService.resolveCategoryData(s.DocumentationPage.Components,"Tree View")}}],v=function(){function e(e,n){n.registerResolver(e)}return e}();v=o([a.NgModule({imports:[f.WrappersModule,m.TabsModule,d.DocumentationComponentsModule,r.RouterModule.forChild(b)],exports:g,declarations:g,entryComponents:g}),i("design:paramtypes",[a.ComponentFactoryResolver,s.ResolverService])],v),n.ComponentsTreeViewModule=v},1964:function(e,n){e.exports='<uxd-tree-grid-asynchronous-loading-wrapper></uxd-tree-grid-asynchronous-loading-wrapper>\n\n<hr>\n\n<p>This example demonstrates asynchronous loading in the tree grid. The <code>data</code> attribute is bound to a function which\n    returns a promise for the child items of the provided data item.</p>\n\n<p>The <code>tree-data</code> attribute is used to examine and control the tree grid. The buttons above the grid use it to locate\n    all “folder” type rows, and invoke the <code>contract</code>, <code>expand</code> or <code>reload</code> functions on\n    them. It is also watched for changes made by the controls in the Priority column, and an array of the high priority items\n    is maintained in the controller.</p>\n\n<tabset>\n    <tab heading="HTML">\n        <uxd-snippet [code]="htmlCode"></uxd-snippet>\n    </tab>\n    <tab heading="JavaScript">\n        <uxd-snippet language="javascript" [code]="jsCodeShort"></uxd-snippet>\n    </tab>\n    <tab heading="Priority Template HTML">\n        <uxd-snippet [code]="template"></uxd-snippet>\n    </tab>\n</tabset>'},1965:function(e,n){e.exports='<uxd-tree-grid-wrapper></uxd-tree-grid-wrapper>\n\n<hr>\n\n<p>The tree grid component allows hierarchical data to be displayed and navigated along with the benefits of a tabular\n  presentation. It shares familiar functionality with the list views, such as keyboard navigation and multiple\n  selection, as well as the ability to configure columns to fit the source data.</p>\n\n<p>The source for the example above is as follows:</p>\n\n<tabset>\n  <tab heading="HTML">\n    <uxd-snippet [code]="sampleHtml"></uxd-snippet>\n  </tab>\n  <tab heading="JavaScript">\n    <uxd-snippet language="javascript" [code]="sampleJs"></uxd-snippet>\n  </tab>\n</tabset>\n\n<h4>Actions</h4>\n\n<tabset>\n  <tab heading="HTML">\n    <uxd-snippet [code]="actionsHtml"></uxd-snippet>\n  </tab>\n  <tab heading="JavaScript">\n    <uxd-snippet language="javascript" [code]="actionsJs"></uxd-snippet>\n  </tab>\n</tabset>\n\n<h4>Display Panel</h4>\n\n<tabset>\n  <tab heading="Display Panel HTML">\n    <uxd-snippet [code]="displayPanel"></uxd-snippet>\n  </tab>\n  <tab heading="Display Panel Footer HTML">\n    <uxd-snippet [code]="displayPanelFooter"></uxd-snippet>\n  </tab>\n</tabset>\n\n<p>The attributes which can be applied to the <code>treegrid</code> directive are described in more detail below.</p>\n\n<div class="demo-attributes table-responsive">\n  <table class="table m-t">\n    <tr>\n      <th>Name</th>\n      <th>Type</th>\n      <th>Binding</th>\n      <th>Description</th>\n      <th>Optional</th>\n    </tr>\n    <tr>\n      <td class="attribute">data</td>\n      <td>array or function</td>\n      <td>variable</td>\n      <td>\n        <p>The data source of the tree grid. For smaller data sets, the entire hierachy may be loaded and passed to\n          the <code>data</code> attribute as an array of objects. Each object may have an array of child objects;\n          the name of the property containing this array must be specified in the <code>options</code> parameter.\n          Any other properties may be mapped to columns in the tree grid using the <code>columns</code> configuration.</p>\n        <p>For larger data sets, the tree grid can load the children of an item asynchronously. In this case, a function\n          may be provided to the <code>data</code> attribute. The argument to this function is the parent object\n          for which children should be loaded; this will be undefined when loading the top level of items. The\n          return value should be either an array of objects or a promise which resolves to an array of objects,\n          representing the immediate children of the parent. In this mode, the <code>hasChildren</code> function\n          must be defined in the <code>options</code> parameter, to determine which rows may be expanded.</p>\n      </td>\n      <td>false</td>\n    </tr>\n    <tr>\n      <td class="attribute">columns</td>\n      <td>array</td>\n      <td>variable</td>\n      <td>A list of the columns to be presented in the tree grid, along with details of how to present the data in\n        that column. It is important to define at least one column, since there is no default behaviour.</td>\n      <td>false</td>\n    </tr>\n    <tr>\n      <td class="attribute">tree-data</td>\n      <td>array</td>\n      <td>variable</td>\n      <td>This will be bound to a hierarchy of objects representing the current tree state. It can be used to access\n        the data objects which are currently loaded into the grid, which is useful in asynchronous mode since items\n        dynamically retrieved from a web service do not have to be manually tracked in the controller. It also\n        provides information on the state of the item\'s row in the tree grid.</td>\n      <td>false</td>\n    </tr>\n    <tr>\n      <td class="attribute">selected</td>\n      <td>array</td>\n      <td>variable</td>\n      <td>This array will contain the objects currently selected in the tree grid. This is a standard multiple selection\n        component, so the techniques described in <a routerLink="/components/tables" fragment="multiple-select-actions-ng1">Multiple Selection Actions</a>        may also be applied to the tree grid.</td>\n      <td>true</td>\n    </tr>\n    <tr>\n      <td class="attribute">current-row</td>\n      <td>object</td>\n      <td>variable</td>\n      <td>\n        <p>This object is bound to the row in the tree grid with focus. The current row is the most recently clicked,\n          or the row which is highlighted when using keyboard navigation. The object contains the following properties:</p>\n        <ul>\n          <li><code>element</code> - the <code>tr</code> element representing the current row in the tree grid.</li>\n          <li><code>item</code> - the source data item for the current row.</li>\n          <li><code>row</code> - the row object with the properties described in the Tree Data section.</li>\n        </ul>\n      </td>\n      <td>true</td>\n    </tr>\n    <tr>\n      <td class="attribute">options</td>\n      <td>object</td>\n      <td>variable</td>\n      <td>Configuration options which can be used to customise the appearance and behaviour of the tree grid. Most\n        importantly, the property which contains child nodes can be set here. This is also where the icon set and\n        expander graphics can be customised.</td>\n      <td>false</td>\n    </tr>\n  </table>\n</div>\n\n<h4>Column Definition</h4>\n\n<p>The <code>columns</code> attribute receives an array of objects with the following properties:</p>\n\n<div class="demo-attributes table-responsive">\n  <table class="table m-t">\n    <tr>\n      <th>Name</th>\n      <th>Type</th>\n      <th>Description</th>\n      <th>Optional</th>\n    </tr>\n    <tr>\n      <td class="attribute">name</td>\n      <td>string</td>\n      <td>The text which appears in the column header.</td>\n      <td>false</td>\n    </tr>\n    <tr>\n      <td class="attribute">value</td>\n      <td>string or function</td>\n      <td>\n        <ul>\n          <li>As a string, the name of a property in the source data object to display in the column.</li>\n          <li>As a function, this will be called to provide the value to display in the column. The argument to the\n            function will be the data object to render, and the return value should be a string.</li>\n        </ul>\n      </td>\n      <td>true</td>\n    </tr>\n    <tr>\n      <td class="attribute">template</td>\n      <td>string</td>\n      <td>Instead of the <code>value</code> property, this may specify the URL or identifier of an Angular template\n        to render in the column. In the scope of the template, the <code>item</code> property will contain the\n        data object to render. The <code>row</code> property is also available with the properties described in\n        the Tree Data section. If controller logic is required in the template, the Angular <code>ng-controller</code>        attribute may be used within the template markup. Note that the first column should not be a template.</td>\n      <td>true</td>\n    </tr>\n    <tr>\n      <td class="attribute">headerClass</td>\n      <td>string</td>\n      <td>One or more (space-separated) CSS classes to apply to the header <code>th</code> element. A common use may\n        be to align the text using the built-in <code>text-center</code> or <code>text-right</code> classes.</td>\n      <td>true</td>\n    </tr>\n    <tr>\n      <td class="attribute">cellClass</td>\n      <td>string</td>\n      <td>One or more (space-separated) CSS classes to apply to the <code>td</code> elements in the column. A common\n        use may be to align the text using the built-in <code>text-center</code> or <code>text-right</code> classes.</td>\n      <td>true</td>\n    </tr>\n    <tr>\n      <td class="attribute">width</td>\n      <td>string</td>\n      <td>The width of the column. Values which are valid on the CSS <code>width</code> property are accepted here.\n        This is provided as an alternative to specifying width in CSS via the <code>headerClass</code> property.</td>\n      <td>true</td>\n    </tr>\n    <tr>\n      <td class="attribute">tooltip</td>\n      <td>string</td>\n      <td>Text to display as a tooltip when hovering over cells in this column. The source data object is available\n        as <code>item</code> for the purposes of binding.</td>\n      <td>true</td>\n    </tr>\n    <tr>\n      <td class="attribute">tooltipPlacement</td>\n      <td>string</td>\n      <td>Position of the tooltip relative to the cell. Value may be "top", "bottom", "left", or "right".</td>\n      <td>true</td>\n    </tr>\n  </table>\n</div>\n\n<h4>Tree Data Definition</h4>\n\n<p>The <code>tree-data</code> attribute receives an array of objects with the following properties:</p>\n\n<div class="demo-attributes table-responsive">\n  <table class="table m-t">\n    <tr>\n      <th>Name</th>\n      <th>Type</th>\n      <th>Description</th>\n      <th>Optional</th>\n    </tr>\n    <tr>\n      <td class="attribute">dataItem</td>\n      <td>object</td>\n      <td>A reference to the custom data object representing the row in the tree grid.</td>\n      <td>false</td>\n    </tr>\n    <tr>\n      <td class="attribute">children</td>\n      <td>array</td>\n      <td>An array containing objects of the same format describing the child items of the row. This property is read\n        only; to add or remove rows in the tree grid, update the source data and reload.</td>\n      <td>false</td>\n    </tr>\n    <tr>\n      <td class="attribute">expanded</td>\n      <td>boolean</td>\n      <td>Whether the row is expanded in the tree grid. This will be true when the row has been expanded and child\n        items have completed loading. This property is read only.</td>\n      <td>false</td>\n    </tr>\n    <tr>\n      <td class="attribute">expanding</td>\n      <td>boolean</td>\n      <td>Whether the row is currently loading children; applies in asynchronous mode. This property is read only.</td>\n      <td>false</td>\n    </tr>\n    <tr>\n      <td class="attribute">level</td>\n      <td>number</td>\n      <td>The depth of the row in the tree grid. The top level items will have the value 0. This property is read only.</td>\n      <td>false</td>\n    </tr>\n    <tr>\n      <td class="attribute">api</td>\n      <td>object</td>\n      <td>\n        <p>Contains functions which may be used to control the row. The following functions are available:</p>\n        <ul>\n          <li><code>expand()</code> - expands the row, if not already expanded. Returns a promise which resolves when\n            the child rows are fully loaded.</li>\n          <li><code>contract()</code> - contracts the row, if expanded.</li>\n          <li><code>reload()</code> - reloads the child items, expanding the row if not already expanded. Returns a\n            promise which resolves when the child rows are fully loaded.</li>\n          <li><code>getValueForColumn(colIndex)</code> - returns the row display value for the column at <code>colIndex</code>            (0-based index).</li>\n        </ul>\n      </td>\n      <td>false</td>\n    </tr>\n  </table>\n</div>\n\n<p>The following function may be useful in searching the <code>tree-data</code> structure for specific items:</p>\n\n<uxd-snippet language="javascript" [code]="jsCode1"></uxd-snippet>\n\n<h4>Options</h4>\n\n<p>The <code>options</code> attribute receives an object with the following properties:</p>\n\n<div class="demo-attributes table-responsive">\n  <table class="table m-t">\n    <tr>\n      <th>Name</th>\n      <th>Type</th>\n      <th>Description</th>\n      <th>Optional</th>\n    </tr>\n    <tr>\n      <td class="attribute">childrenProperty</td>\n      <td>string</td>\n      <td>If the value of the <code>data</code> attribute is an array, then this must be set to the name of an array\n        property on the source data objects which contains the child objects, defining the hierarchy. If the array\n        is present and contains items, an expander will be rendered on the corresponding row to show or hide the\n        children.</td>\n      <td>true</td>\n    </tr>\n    <tr>\n      <td class="attribute">hasChildren</td>\n      <td>function</td>\n      <td>If the value of the <code>data</code> attribute is a function (asynchronous operation), then this must be\n        set to a function which returns true if the provided object may have children and should therefore display\n        an expander on its row.</td>\n      <td>true</td>\n    </tr>\n    <tr>\n      <td class="attribute">maxDepth</td>\n      <td>number</td>\n      <td>The expansion depth limit. After this is reached, expanders will not display even if the data object contains\n        children. Default is 5.</td>\n      <td>true</td>\n    </tr>\n    <tr>\n      <td class="attribute">expandTopLevel</td>\n      <td>boolean</td>\n      <td>Set to true if the top-level rows should initially appear expanded. Default is false.</td>\n      <td>true</td>\n    </tr>\n    <tr>\n      <td class="attribute">expander</td>\n      <td>object</td>\n      <td>\n        <p>Defines the appearance of the expanders (buttons which toggle display of child rows). This object contains\n          the following properties:\n        </p>\n        <ul>\n          <li><code>type</code> - the type of image to display, either <code>class</code> to use one of the standard\n            <a routerLink="/css/icons">UX Aspects Icons</a> or <code>url</code> to use an icon image.</li>\n          <li><code>contracted</code> - the image to show when the row is in a contracted state. Either a CSS class\n            or an image URL, according to the <code>type</code>.</li>\n          <li><code>expanded</code> - the image to show when the row is in a expanded state. Either a CSS class or\n            an image URL, according to the <code>type</code>.</li>\n          <li><code>expanding</code> - the image to show when the the row is loading children in asynchronous mode.\n            Either a CSS class or an image URL, according to the <code>type</code>.</li>\n        </ul>\n      </td>\n      <td>true</td>\n    </tr>\n    <tr>\n      <td class="attribute">icons</td>\n      <td>object</td>\n      <td>\n        <p>Configures the set of icons which appear on the left of the first column. This object contains the following\n          properties:</p>\n        <ul>\n          <li><code>type</code> - the type of image to display, either <code>class</code> to use one of the standard\n            <a routerLink="/css/icons">UX Aspects Icons</a> or <code>url</code> to use an icon image.</li>\n          <li><code>get</code> - a function which returns the appropriate icon for the data object. The first argument\n            is the data object itself, and the second is a boolean indicating whether the row is expanded or not.\n            The function should return either a CSS class or an image URL, according to the <code>type</code>.</li>\n        </ul>\n      </td>\n      <td>true</td>\n    </tr>\n    <tr>\n      <td class="attribute">sort</td>\n      <td>function</td>\n      <td>\n        <p>\n          Defines the sort order of the rows at each level. This function takes two parameters <code>a</code> and <code>b</code>\n          representing a pair of rows in the grid, and should return: -1 if <code>a</code> is ordered before <code>b</code>;\n          0 if <code>a</code> and <code>b</code> are of equal order; 1 if <code>a</code> is ordered after <code>b</code>.\n        </p>\n        <p>\n          The function parameters are of the type described above in Tree Data Definition. Therefore the sort function\n          can access the source data object\'s properties via the <code>dataItem</code> property.\n        </p>\n        <p>\n          See below for an example sorting function suitable for the tree grid:\n        </p>\n        <uxd-snippet [content]="sortExampleJs" language="javascript"></uxd-snippet>\n      </td>\n      <td>false</td>\n    </tr>\n  </table>\n</div>\n\n<h4>Options Examples</h4>\n\n<p>An example <code>options</code> definition with alternative expanders and icons:</p>\n\n<uxd-snippet language="javascript" [code]="jsCode2"></uxd-snippet>\n\n<p>An example <code>options</code> definition using images:</p>\n\n<uxd-snippet language="javascript" [code]="jsCode3"></uxd-snippet>\n\n<h4>Events</h4>\n\n<p>To reload the tree grid to its initial state, issue the <code>treegrid.reload</code> event.</p>\n\n<uxd-snippet language="javascript" [code]="jsCode4"></uxd-snippet>'},1966:function(e,n){e.exports='<div ng-controller="TreeGridActionsCtrl as vm" class="item-actions">\n    <list-hover-actions>\n        <list-hover-action name="Share" icon="hpe-share" click="vm.share(item)"></list-hover-action>\n        <list-hover-action name="View Details" icon="hpe-view" click="vm.goToDetails(item)"></list-hover-action>\n        <list-hover-action name="Delete" icon="hpe-trash" click="vm.delete(item)"></list-hover-action>\n    </list-hover-actions>\n</div>'},1967:function(e,n){e.exports='<div class="m-md">\n    <p>Created on <span ng-bind="item.date.toLocaleDateString()"></span></p>\n    <div ng-if="item.type === \'folder\'">\n        <p>Folder contents:</p>\n        <ul>\n            <li ng-repeat="child in item.nodes" ng-bind="child.title"></li>\n        </ul>\n    </div>\n    <div ng-if="item.type === \'item\'">\n        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque neque risus...</p>\n    </div>\n</div>'},1968:function(e,n){e.exports='<div class="pull-right p-b-md">\n    <span class="btn-pair">\n    <button class="btn button-secondary" ng-disabled="!previousBtnStatus" ng-click="previous()" tabindex="1"><i class="hpe-icon hpe-previous"></i>Previous</button>\n    <button class="btn button-secondary" ng-disabled="!nextBtnStatus" ng-click="next()" tabindex="1">Next<i class="hpe-icon hpe-next"></i></button>\n  </span>\n</div>'},1969:function(e,n){e.exports='<uxd-tree-view-companion-view-wrapper></uxd-tree-view-companion-view-wrapper>\n\n<hr>\n\n<p>The code for this example is shown below:</p>\n\n<tabset>\n    <tab heading="HTML">\n        <uxd-snippet [code]="htmlCode"></uxd-snippet>\n    </tab>\n    <tab heading="JavaScript">\n        <uxd-snippet language="javascript" [code]="jsCode"></uxd-snippet>\n    </tab>\n</tabset>'},1970:function(e,n){e.exports='<uxd-tree-view-wrapper></uxd-tree-view-wrapper>\n\n<hr>\n\n<p>The Tree View is created using the <code>tree-view</code> directive. It allows tree content to be displayed in a familiar\n    Explorer-like format and supports dynamic data and editing of content, and is designed for use with an accompanying List\n    View or Detail View.</p>\n\n<tabset>\n    <tab heading="HTML">\n        <uxd-snippet [code]="htmlCode"></uxd-snippet>\n    </tab>\n    <tab heading="JavaScript">\n        <uxd-snippet language="javascript" [code]="jsCode"></uxd-snippet>\n    </tab>\n</tabset>\n\n<p>The data to be displayed in the Tree View should be set to the <code>data</code> attribute of the directive. It should adhere\n    to the following interface:</p>\n\n<div class="demo-attributes table-responsive">\n    <table class="table m-t">\n        <tr>\n            <th>Name</th>\n            <th>Type</th>\n            <th>Description</th>\n        </tr>\n        <tr>\n            <td class="attribute">title</td>\n            <td>string</td>\n            <td>The name of the item, which will be displayed in the tree.</td>\n        </tr>\n        <tr>\n            <td class="attribute">allowChildren</td>\n            <td>boolean</td>\n            <td>Whether child nodes are possible for this node.</td>\n        </tr>\n        <tr>\n            <td class="attribute">type</td>\n            <td>string</td>\n            <td>Used to configure the appearance (see Icon Configuration below for more details).</td>\n        </tr>\n        <tr>\n            <td class="attribute">nodes</td>\n            <td>array</td>\n            <td>A collection of child objects, following the same interface.</td>\n        </tr>\n    </table>\n</div>\n\n<p>You can watch this data object for changes within your own controller, allowing you to save changes if needed.</p>\n\n<p>Additionally you can attach a <code>permissions</code> object to a node to control how users will interact with it. If not\n    supplied, these values will default to <code>true</code>.</p>\n\n<ul>\n    <li><code>add</code></li>\n    <li><code>edit</code></li>\n    <li><code>delete</code></li>\n</ul>\n\n<h4>Exposed Functions</h4>\n\n<p>In the accompanying View, you can add controls to add or delete items from the Tree View. Pass functions defining these to\n    the Tree View via the <code>add-item</code> and <code>delete-item</code> attributes. These functions will be decorated\n    within the Tree View, so you can define custom logic inside them. The <code>add-item</code> function can return an item\n    in the format defined above and it will be included in the tree. The <code>delete</code> function can return a boolean\n    indicating if the delete is permitted or successful, depending on the intended usage of the tree.</p>\n\n<p>If no functions are provided, the Tree View will display small inline editing buttons to allow basic interaction.</p>\n\n<p>Alternatively, you can pass the <code>read-only</code> attribute to the tree to disable adding, editing and deleting for\n    all nodes. Otherwise this can be configured on a per-node basis using the <code>permissions</code> object described above.</p>\n\n<h4>Icon Configuration</h4>\n\n<p>The Tree View supports extensible types. By default, <code>folder</code> and <code>item</code> types are defined. To display\n    custom icons for your application, define a mapping as shown, using the types you will set on your node objects and icons\n    from the Elements Icon set. You can define <code>collapsed</code> and <code>expanded</code> alternative icons for nodes\n    which you expect to use as containers.</p>\n\n<uxd-snippet [code]="snippet" language="js"></uxd-snippet>\n\n<h4>Options</h4>\n\n<p>You can pass a configuration object to the <code>options</code> attribute of the directive to control:</p>\n\n<div class="demo-attributes table-responsive">\n    <table class="table m-t">\n        <tr>\n            <th>Name</th>\n            <th>Type</th>\n            <th>Description</th>\n        </tr>\n        <tr>\n            <td class="attribute">showTreeLines</td>\n            <td>boolean</td>\n            <td>Toggles the display of the dashed lines that outline the tree structure. Defaults to true.</td>\n        </tr>\n        <tr>\n            <td class="attribute">openOnSelect</td>\n            <td>boolean</td>\n            <td>Sets if nodes should expand when selected. Defaults to false.</td>\n        </tr>\n        <tr>\n            <td class="attribute">loadHeight</td>\n            <td>number</td>\n            <td>The number of pixels that indicates the initial height of the tree. This optional parameter can be set to prevent\n                the page flicker during tree load. The user should pass an appropriate value to the <code>loadHeight</code>                option.</td>\n        </tr>\n    </table>\n</div>'},2501:function(e,n){e.exports='angular.module("app").controller("TreeGridAsyncDemoCtrl", TreeGridAsyncDemoCtrl);\n\nTreeGridAsyncDemoCtrl.$inject = ["$scope", "$q", "$timeout"];\n\nfunction TreeGridAsyncDemoCtrl($scope, $q, $timeout) {\n    var vm = this;\n\n    var topLevelFolder = [{\n        type: "folder",\n        dataPage: 0,\n        document: "Folder 1",\n        name: "",\n        dateString: ""\n    }, {\n        type: "folder",\n        dataPage: 1,\n        document: "Folder 2",\n        name: "",\n        dateString: ""\n    }, {\n        type: "folder",\n        dataPage: 2,\n        document: "Folder 3",\n        name: "",\n        dateString: ""\n    }];\n\n    // Asynchronous loading function\n    // parent is the item being expanded, or undefined if the top level is being requested\n    vm.loadData = function (parent) {\n        var deferred = $q.defer();\n        if (!parent) {\n            // Load top level items\n            $timeout(function () {\n                deferred.resolve(topLevelFolder);\n            }, 1000);\n        } else {\n            // Load children of parent\n            $timeout(function () {\n                var children = vm.sourceData[parent.dataPage];\n                deferred.resolve(children);\n            }, 2000);\n        }\n        return deferred.promise;\n    };\n\n    vm.columns = [{\n        name: "NAME",\n        value: "document",\n        width: "40%"\n    }, {\n        name: "AUTHOR",\n        value: "name",\n        width: "20%"\n    }, {\n        name: "DATE",\n        value: "dateString",\n        width: "20%"\n    }, {\n        name: "PRIORITY",\n        template: "template.html",\n        width: "20%",\n        headerClass: "text-center",\n        cellClass: "text-center"\n    }];\n\n    vm.selected = null;\n\n    vm.options = {\n        hasChildren: function (dataItem) {\n            return dataItem.type === "folder";\n        }\n    };\n\n    vm.inProgress = false;\n\n    vm.expandAllFolders = function () {\n        var folders = findRows(vm.treeData, "type", "folder");\n        var promises = [];\n        vm.inProgress = true;\n        // Call expand on each folder\n        for (var i = 0; i < folders.length; i += 1) {\n            var promise = folders[i].api.expand();\n            promises.push(promise);\n        }\n        // Unset inProgress when all promises are complete\n        $q.all(promises).finally(function () {\n            vm.inProgress = false;\n        });\n    };\n\n    vm.contractAllFolders = function () {\n        var folders = findRows(vm.treeData, "type", "folder");\n        // Call contract on each folder\n        for (var i = 0; i < folders.length; i += 1) {\n            folders[i].api.contract();\n        }\n    };\n\n    vm.reloadAllFolders = function () {\n        var folders = findRows(vm.treeData, "type", "folder");\n        var promises = [];\n        vm.inProgress = true;\n        // Call reload on each folder\n        for (var i = 0; i < folders.length; i += 1) {\n            var promise = folders[i].api.reload();\n            promises.push(promise);\n        }\n        // Unset inProgress when all promises are complete\n        $q.all(promises).finally(function () {\n            vm.inProgress = false;\n        });\n    };\n\n    vm.highPriorityItems = [];\n\n    // Deep watch of the tree-data structure\n    $scope.$watch("vm.treeData", function () {\n        if (vm.treeData) {\n            vm.highPriorityItems = findRows(vm.treeData, "priority", "High");\n        }\n    }, true);\n\n    // Recursively searches the tree-data structure for items of interest\n    function findRows(treeData, property, value) {\n        var results = [];\n        for (var i = 0; i < treeData.length; i += 1) {\n            if (treeData[i].dataItem[property] === value) {\n                results.push(treeData[i]);\n            }\n            if (treeData[i].children.length > 0) {\n                results = results.concat(findRows(treeData[i].children, property, value));\n            }\n        }\n        return results;\n    }\n\n    vm.sourceData = [\n        [{\n                "id": 0,\n                "name": "Jayden Hampton",\n                "dateString": "Today",\n                "document": "Document 1.pdf"\n            },\n            // ...\n        ]\n    ];\n\n}'},2502:function(e,n){e.exports='<div class="m-b-md">\n    <button class="btn button-secondary m-r-xs" ng-click="vm.expandAllFolders()" ng-disabled="vm.inProgress"><i class="hpe-icon hpe-down"></i> Expand All Folders</button>\n    <button class="btn button-secondary m-r-xs" ng-click="vm.contractAllFolders()" ng-disabled="vm.inProgress"><i class="hpe-icon hpe-next"></i> Contract All Folders</button>\n    <button class="btn button-secondary m-r-xs" ng-click="vm.reloadAllFolders()" ng-disabled="vm.inProgress"><i class="hpe-icon hpe-refresh"></i> Reload All Folders</button>\n</div>\n<treegrid data="vm.loadData" columns="vm.columns" tree-data="vm.treeData" selected="vm.selected" options="vm.options"></treegrid>\n<p class="m-t-md">High priority: <span ng-repeat="item in vm.highPriorityItems" ng-bind="item.dataItem.document + ($last ? \'.\' : \', \')"></span></p>'},2503:function(e,n){e.exports='angular.module("app").controller("TreeGridAsyncDemoCtrl", TreeGridAsyncDemoCtrl);\n\nTreeGridAsyncDemoCtrl.$inject = ["$scope", "$q", "$timeout"];\n\nfunction TreeGridAsyncDemoCtrl($scope, $q, $timeout) {\n    var vm = this;\n\n    var topLevelFolder = [{\n        type: "folder",\n        dataPage: 0,\n        document: "Folder 1",\n        name: "",\n        dateString: ""\n    }, {\n        type: "folder",\n        dataPage: 1,\n        document: "Folder 2",\n        name: "",\n        dateString: ""\n    }, {\n        type: "folder",\n        dataPage: 2,\n        document: "Folder 3",\n        name: "",\n        dateString: ""\n    }];\n\n    // Asynchronous loading function\n    // parent is the item being expanded, or undefined if the top level is being requested\n    vm.loadData = function (parent) {\n        var deferred = $q.defer();\n        if (!parent) {\n            // Load top level items\n            $timeout(function () {\n                deferred.resolve(topLevelFolder);\n            }, 1000);\n        } else {\n            // Load children of parent\n            $timeout(function () {\n                var children = vm.sourceData[parent.dataPage];\n                deferred.resolve(children);\n            }, 2000);\n        }\n        return deferred.promise;\n    };\n\n    vm.columns = [{\n        name: "NAME",\n        value: "document",\n        width: "40%"\n    }, {\n        name: "AUTHOR",\n        value: "name",\n        width: "20%"\n    }, {\n        name: "DATE",\n        value: "dateString",\n        width: "20%"\n    }, {\n        name: "PRIORITY",\n        template: "template.html",\n        width: "20%",\n        headerClass: "text-center",\n        cellClass: "text-center"\n    }];\n\n    vm.selected = null;\n\n    vm.options = {\n        hasChildren: function (dataItem) {\n            return dataItem.type === "folder";\n        }\n    };\n\n    vm.inProgress = false;\n\n    vm.expandAllFolders = function () {\n        var folders = findRows(vm.treeData, "type", "folder");\n        var promises = [];\n        vm.inProgress = true;\n        // Call expand on each folder\n        for (var i = 0; i < folders.length; i += 1) {\n            var promise = folders[i].api.expand();\n            promises.push(promise);\n        }\n        // Unset inProgress when all promises are complete\n        $q.all(promises).finally(function () {\n            vm.inProgress = false;\n        });\n    };\n\n    vm.contractAllFolders = function () {\n        var folders = findRows(vm.treeData, "type", "folder");\n        // Call contract on each folder\n        for (var i = 0; i < folders.length; i += 1) {\n            folders[i].api.contract();\n        }\n    };\n\n    vm.reloadAllFolders = function () {\n        var folders = findRows(vm.treeData, "type", "folder");\n        var promises = [];\n        vm.inProgress = true;\n        // Call reload on each folder\n        for (var i = 0; i < folders.length; i += 1) {\n            var promise = folders[i].api.reload();\n            promises.push(promise);\n        }\n        // Unset inProgress when all promises are complete\n        $q.all(promises).finally(function () {\n            vm.inProgress = false;\n        });\n    };\n\n    vm.highPriorityItems = [];\n\n    // Deep watch of the tree-data structure\n    $scope.$watch("vm.treeData", function () {\n        if (vm.treeData) {\n            vm.highPriorityItems = findRows(vm.treeData, "priority", "High");\n        }\n    }, true);\n\n    // Recursively searches the tree-data structure for items of interest\n    function findRows(treeData, property, value) {\n        var results = [];\n        for (var i = 0; i < treeData.length; i += 1) {\n            if (treeData[i].dataItem[property] === value) {\n                results.push(treeData[i]);\n            }\n            if (treeData[i].children.length > 0) {\n                results = results.concat(findRows(treeData[i].children, property, value));\n            }\n        }\n        return results;\n    }\n\n    vm.sourceData = [\n        [{\n                "id": 0,\n                "name": "Jayden Hampton",\n                "dateString": "Today",\n                "document": "Document 1.pdf"\n            },\n            {\n                "id": 2,\n                "name": "Lura Bell",\n                "dateString": "20 Jan 2017",\n                "document": "Document 3.doc"\n            },\n            {\n                "id": 3,\n                "name": "Jackson Zimmerman",\n                "dateString": "17 Feb 2016",\n                "document": "Document 4.pdf"\n            },\n            {\n                "id": 4,\n                "name": "Brandon Kelley",\n                "dateString": "9 Feb 2017",\n                "document": "Document 5.xls"\n            },\n            {\n                "id": 5,\n                "name": "Jackson Zimmerman",\n                "dateString": "Today",\n                "document": "Document 6.doc"\n            },\n            {\n                "id": 6,\n                "name": "Walter Cortez",\n                "dateString": "Today",\n                "document": "Document 7.html"\n            },\n            {\n                "id": 7,\n                "name": "Herbert Padilla",\n                "dateString": "20 Jan 2017",\n                "document": "Document 8.html"\n            },\n            {\n                "id": 8,\n                "name": "Maud Grant",\n                "dateString": "17 Feb 2016",\n                "document": "Document 9.ppt"\n            },\n            {\n                "id": 9,\n                "name": "Emma Lynch",\n                "dateString": "9 Feb 2017",\n                "document": "Document 10.pdf"\n            }\n        ],\n        [{\n                "id": 10,\n                "name": "Mike Marsh",\n                "dateString": "Today",\n                "document": "Document 11.pdf"\n            },\n            {\n                "id": 11,\n                "name": "Herbert Padilla",\n                "dateString": "10 Feb 2017",\n                "document": "Document 12.pdf"\n            },\n            {\n                "id": 12,\n                "name": "Eunice Harvey",\n                "dateString": "Today",\n                "document": "Document 13.pdf"\n            },\n            {\n                "id": 13,\n                "name": "Eunice Tyler",\n                "dateString": "17 Feb 2016",\n                "document": "Document 14.doc"\n            },\n            {\n                "id": 14,\n                "name": "Cordelia Moore",\n                "dateString": "9 Feb 2017",\n                "document": "Document 15.pdf"\n            },\n            {\n                "id": 15,\n                "name": "Jeanette Fowler",\n                "dateString": "Today",\n                "document": "Document 16.ppt"\n            },\n            {\n                "id": 16,\n                "name": "Lura Bell",\n                "dateString": "10 Feb 2017",\n                "document": "Document 17.xls"\n            },\n            {\n                "id": 17,\n                "name": "Landon Green",\n                "dateString": "20 Jan 2017",\n                "document": "Document 18.ppt"\n            },\n            {\n                "id": 18,\n                "name": "Eunice Harvey",\n                "dateString": "Today",\n                "document": "Document 19.pdf"\n            },\n            {\n                "id": 19,\n                "name": "Alex Martinez",\n                "dateString": "9 Feb 2017",\n                "document": "Document 20.xls"\n            }\n        ],\n        [{\n                "id": 20,\n                "name": "Herbert Padilla",\n                "dateString": "Today",\n                "document": "Document 21.xls"\n            },\n            {\n                "id": 21,\n                "name": "Alex Martinez",\n                "dateString": "10 Feb 2017",\n                "document": "Document 22.xls"\n            },\n            {\n                "id": 22,\n                "name": "Landon Green",\n                "dateString": "20 Jan 2017",\n                "document": "Document 23.xls"\n            },\n            {\n                "id": 23,\n                "name": "Landon Green",\n                "dateString": "17 Feb 2016",\n                "document": "Document 24.doc"\n            },\n            {\n                "id": 24,\n                "name": "Agnes Bates",\n                "dateString": "Today",\n                "document": "Document 25.pdf"\n            },\n            {\n                "id": 25,\n                "name": "Herbert Padilla",\n                "dateString": "Today",\n                "document": "Document 26.pdf"\n            },\n            {\n                "id": 26,\n                "name": "Jeanette Fowler",\n                "dateString": "10 Feb 2017",\n                "document": "Document 27.xls"\n            },\n            {\n                "id": 27,\n                "name": "Cordelia Moore",\n                "dateString": "20 Jan 2017",\n                "document": "Document 28.xls"\n            },\n            {\n                "id": 28,\n                "name": "Agnes Bates",\n                "dateString": "17 Feb 2016",\n                "document": "Document 29.xls"\n            },\n            {\n                "id": 29,\n                "name": "Maud Grant",\n                "dateString": "9 Feb 2017",\n                "document": "Document 30.doc"\n            }\n        ]\n    ];\n\n}'},2504:function(e,n){e.exports='<div class="btn-group" ng-click="$event.stopPropagation()" ng-if="item.type !== \'folder\'">\n    <button type="button" class="btn btn-sm button-toggle-primary" ng-model="item.priority" btn-radio="\'Low\'">Low</button>\n    <button type="button" class="btn btn-sm button-toggle-primary" ng-model="item.priority" btn-radio="\'Medium\'">Medium</button>\n    <button type="button" class="btn btn-sm button-toggle-primary" ng-model="item.priority" btn-radio="\'High\'">High</button>\n</div>'},2505:function(e,n){e.exports='angular.module("app").controller("TreeGridActionsCtrl", TreeGridActionsCtrl);\n\nfunction TreeGridActionsCtrl() {\n  var vm = this;\n\n  vm.share = function(item) {\n    // Action button behaviour goes here\n  };\n\n  vm.goToDetails = function(item) {\n    // Action button behaviour goes here\n  };\n\n  vm.delete = function(item) {\n    // Action button behaviour goes here\n  };\n}'},2506:function(e,n){e.exports="function findItems(treeData, property, value) {\n    var results = [];\n    for (var i = 0; i < treeData.length; i += 1) {\n        if (treeData[i].dataItem[property] === value) {\n            results.push(treeData[i].dataItem);\n        }\n        if (treeData[i].children.length > 0) {\n            results = results.concat(findItems(treeData[i].children, property, value));\n        }\n    }\n    return results;\n}"},2507:function(e,n){e.exports='vm.options = {\n    childrenProperty: "nodes",\n    expander: {\n        type: "class",\n        contracted: "hpe-add",\n        expanded: "hpe-subtract"\n    },\n    icons: {\n        type: "class",\n        get: function (item, expanded) {\n            // Use the childrenProperty to determine if it\'s a folder\n            if (item.hasOwnProperty("nodes")) {\n                return expanded ? "hpe-folder-open" : "hpe-folder";\n            }\n            // Use file extension to select icon\n            if (item.name.toLowerCase().endsWidth(".pdf")) {\n                return "hpe-document-pdf";\n            }\n            if (item.name.toLowerCase().endsWidth(".msg")) {\n                return "hpe-mail";\n            }\n            // ...\n            return "hpe-document";\n        }\n    }\n};'},2508:function(e,n){e.exports='vm.options = {\n    childrenProperty: "nodes",\n    expander: {\n        type: "url",\n        contracted: "../img/ExpanderContracted16x16.png",\n        expanded: "../img/ExpanderExpanded16x16.png",\n        expanding: "../img/ExpanderExpanding16x16.png"\n    },\n    icons: {\n        type: "url",\n        get: function (item, expanded) {\n            // Use a specific property to select icon type\n            switch (item.type) {\n                case "email":\n                    return expanded ? "../img/IconEmail16x16.png" : "../img/IconEmailOpen16x16.png";\n                case "pdf":\n                    return "../img/IconPdf16x16.png";\n                case "word":\n                    return "../img/IconDoc16x16.png";\n                    // ...\n            }\n            return "../img/IconUnknown16x16.png";\n        }\n    }\n};'},2509:function(e,n){e.exports='$scope.$broadcast("treegrid.reload");'},2510:function(e,n){e.exports='<checkbox ng-model="vm.enableDisplayPanel" class="pull-right">Display Panel</checkbox>\n<treegrid data="vm.data" columns="vm.columns" selected="vm.selected" current-row="vm.currentRow" options="vm.options"></treegrid>\n<p class="m-t-md">Selected items: <span ng-repeat="item in vm.selected" ng-bind="item.title + ($last ? \'.\' : \', \')"></span></p>'},2511:function(e,n){e.exports="angular.module(\"app\").controller(\"TreeGridCtrl\", TreeGridCtrl);\n\nTreeGridCtrl.$inject = [\"$scope\", \"$displayPanel\"];\n\nfunction TreeGridCtrl($scope, $displayPanel) {\n  var vm = this;\n\n  vm.data = [{\n    id: 1,\n    title: 'Documents',\n    date: new Date('2013-02-16'),\n    type: 'folder',\n    nodes: [{\n      id: 12,\n      title: 'Pictures',\n      date: new Date('2013-05-28'),\n      type: 'folder',\n      nodes: [{\n        title: 'Alcazar',\n        date: new Date('2014-05-15'),\n        type: 'item'\n      }, {\n        title: 'Citadel',\n        date: new Date('2015-09-02'),\n        type: 'item'\n      }, {\n        title: 'Donjon',\n        date: new Date('2014-04-10'),\n        type: 'item'\n      }]\n    }, {\n      id: 11,\n      title: 'Word files',\n      date: new Date('2013-09-25'),\n      type: 'folder',\n      nodes: [{\n        id: 111,\n        title: 'Accounts',\n        date: new Date('2013-10-04'),\n        type: 'folder',\n        nodes: [{\n          title: 'Castle',\n          date: new Date('2014-05-15'),\n          type: 'item'\n        }, {\n          title: 'Estate',\n          date: new Date('2015-08-03'),\n          type: 'item'\n        }, {\n          title: 'Manor',\n          date: new Date('2014-05-30'),\n          type: 'item'\n        }, {\n          title: 'Mansion',\n          date: new Date('2014-04-23'),\n          type: 'item'\n        }, {\n          title: 'Villa',\n          date: new Date('2015-09-21'),\n          type: 'item'\n        }]\n      }]\n    }]\n  }, {\n    id: 2,\n    title: 'Emails',\n    date: new Date('2013-03-17'),\n    type: 'folder',\n    nodes: [{\n      id: 21,\n      title: 'Inbox',\n      date: new Date('2013-03-17'),\n      type: 'folder',\n      nodes: []\n    }, {\n      id: 22,\n      title: 'Outbox',\n      date: new Date('2013-03-17'),\n      type: 'folder',\n      nodes: []\n    }]\n  }, {\n    id: 3,\n    title: 'Empty',\n    date: new Date('2016-06-02'),\n    type: 'folder',\n    nodes: []\n  }];\n\n  vm.columns = [{\n    name: \"TITLE\",\n    value: \"title\",\n    width: \"50%\"\n  }, {\n    name: \"DATE\",\n    value: function (dataItem) {\n      return dataItem.date ? dataItem.date.toLocaleDateString() : \"\";\n    },\n    width: \"25%\",\n    tooltip: \"{{item.date | date : 'fullDate'}}\"\n  }, {\n    name: \"ACTIONS\",\n    template: \"actions.html\",\n    width: \"25%\",\n    headerClass: \"text-center\",\n    cellClass: \"item-actions text-center\"\n  }];\n\n  vm.selected = null;\n\n  vm.options = {\n    childrenProperty: \"nodes\"\n  };\n\n  // Display Panel\n  vm.enableDisplayPanel = false;\n  $scope.$watch(\"vm.enableDisplayPanel\", function(nv) {\n    if (nv && vm.currentRow) {\n      showDisplayPanel(vm.currentRow);\n    }\n    else {\n      hideDisplayPanel();\n    }\n  });\n\n  // Watch the row with focus to show and update the display panel\n  $scope.$watch(\"vm.currentRow\", function(nv) {\n    if (vm.enableDisplayPanel && nv) {\n      showDisplayPanel(nv);\n    }\n  });\n\n  // Events triggered by \"Previous\" and \"Next\" buttons\n  $scope.$on(\"$displayPanelPrevious\", function() {\n    $displayPanel.movePrev();\n  });\n  $scope.$on(\"$displayPanelNext\", function() {\n    $displayPanel.moveNext();\n  });\n\n  var displayPanelScope = $scope.$new(true);\n  function showDisplayPanel(row) {\n    displayPanelScope.item = row.item;\n    var modalOptions = {\n      title: row.item.title,\n      main: \"displayPanel.html\",\n      footer: \"displayPanelFooter.html\",\n      modalColumns: \"col-lg-6 col-md-7 col-sm-9 col-xs-10\",\n      top: 50,\n      scope: displayPanelScope\n    };\n    var enablePrev = (row.element.prevAll(\"tr\").length > 0);\n    var enableNext = (row.element.nextAll(\"tr\").length > 0);\n    $displayPanel.open(row.element, modalOptions, false, enablePrev, enableNext);\n  }\n\n  function hideDisplayPanel() {\n    if ($displayPanel.panelOpen()) {\n      $displayPanel.close({ animate: false });\n    }\n  }\n\n}"},2512:function(e,n){e.exports="var sortByDate = function(a, b) {\n    if (a.dataItem.date < b.dataItem.date) {\n        return -1;\n    }\n    if (a.dataItem.date > b.dataItem.date) {\n        return 1;\n    }\n    return 0;\n};"},2513:function(e,n){e.exports='<tree-view data="vm.data" selected="vm.selected" add-item="vm.addItem" icons="vm.iconConfig" delete="vm.deleteFn" options="vm.treeOptions"></tree-view>\n\n<hr>\n\n<p>This panel illustrates how a View accompanying a Tree View can interact with the tree. Within this context, if the selected\n    node is changed, the tree will update, allowing drill-down in both contexts.</p>\n\n<br>\n<br>\n<h4>Find Node</h4>\n\n<form role="form" class="form-inline ng-pristine ng-valid m-b" novalidate="">\n    <div class="form-group m-r">\n        <label class="form-label sr-only">Title</label>\n        <input placeholder="Title" ng-model="vm.findText" class="form-control">\n    </div>\n    <button class="btn button-secondary" ng-click="vm.findNodeByTitle(vm.findText)">Find</button>\n</form>\n\n<br>\n<h4>Selected Node</h4>\n\n<em ng-show="!vm.selected.title">None</em>\n<span ng-bind="vm.selected.title"></span>\n<pre ng-show="vm.selected.title">{{ vm.selected | json:2 }}</pre>\n\n<br>\n<br>\n<h4>Add a New Node</h4>\n\n<form role="form" class="form-inline ng-pristine ng-valid m-b" novalidate="">\n    <div class="form-group m-r">\n        <label class="form-label sr-only">New Item Name</label>\n        <input placeholder="New item name" ng-model="vm.newValue.title" class="form-control">\n    </div>\n\n    <div class="form-group m-r">\n        <div class="check">\n            <checkbox ng-model="vm.newValue.allowChildren">Folder</checkbox>\n        </div>\n    </div>\n    <button class="button btn button-accent" ng-disabled="!vm.selected.allowChildren" ng-click="vm.addItem()"><span class="hpe-icon hpe-add" aria-hidden="true"></span>&nbsp;New Item</button>\n</form>\n\n<br>\n<h4>Remove Node</h4>\n\n<button class="button btn button-secondary" ng-click="vm.deleteFn()" ng-disabled="!vm.selected.title">Delete</button>'},2514:function(e,n){e.exports="angular.module('app').controller('TreeViewCompanionViewCtrl', TreeViewCompanionViewCtrl);\n\nfunction TreeViewCompanionViewCtrl() {\n    var vm = this;\n\n    vm.selected = { id: \"0\", title: \"\" };\n\n    vm.newValue = {\n      allowChildren: false,\n      title: \"\",\n    };\n\n    vm.iconConfig = {\n      folder: \"hpe-folder\",\n      item: \"hpe-document\"\n    };\n\n    vm.treeOptions = {\n      showTreeLines: false,\n      openOnSelect: false\n    };\n\n    vm.findNodeByTitle = function(title) {\n      vm.selected = findItem(title, vm.data);\n    };\n\n    vm.addItem = function() {\n      return {\n          id: -1,\n          allowChildren: vm.newValue.allowChildren,\n          title: vm.newValue.title || 'New User Defined Item',\n          type: vm.newValue.allowChildren ? 'folder' : 'item',\n          nodes: []\n        };\n    };\n\n    vm.deleteFn = function() {\n      return true;\n    };\n\n    function findItem(title, data) {\n      var result = null;\n      for (var i = 0; i < data.length; i += 1) {\n        if (data[i].title.toLowerCase() === title.toLowerCase()) {\n          result = data[i];\n        }\n        else if (data[i].nodes) {\n          result = findItem(title, data[i].nodes);\n        }\n        if (result !== null) break;\n      }\n      return result;\n    }\n\n    vm.data = [{\n      'id': 1,\n      'title': 'Documents',\n      'allowChildren': true,\n      'type': 'folder',\n      'nodes': [{\n        'id': 12,\n        'title': 'Pictures',\n        'allowChildren': true,\n        'type': 'folder',\n        'nodes': [{\n          'title': 'Alcazar',\n          'type': 'item'\n        }, {\n          'title': 'Citadel',\n          'type': 'item'\n        }, {\n          'title': 'Donjon',\n          'type': 'item'\n        }]\n      }, {\n        'id': 11,\n        'title': 'Word files',\n        'allowChildren': true,\n        'type': 'folder',\n        'nodes': [{\n          'id': 111,\n          'title': 'Accounts',\n          'allowChildren': true,\n          'type': 'folder',\n          'nodes': [{\n            'title': 'Castle',\n            'type': 'item'\n          }, {\n            'title': 'Estate',\n            'type': 'item'\n          }, {\n            'title': 'Manor',\n            'type': 'item'\n          }, {\n            'title': 'Mansion',\n            'type': 'item'\n          }, {\n            'title': 'Villa',\n            'type': 'item'\n          }]\n        }]\n      }]\n    }, {\n      'id': 2,\n      'title': 'Emails',\n      'allowChildren': true,\n      'type': 'folder',\n      'nodes': [{\n        'id': 21,\n        'title': 'Inbox',\n        'allowChildren': true,\n        'type': 'folder',\n        'nodes': []\n      }, {\n        'id': 22,\n        'title': 'Outbox',\n        'allowChildren': true,\n        'type': 'folder',\n        'nodes': []\n      }]\n    }, {\n      'id': 3,\n      'title': 'Permissions Examples',\n      'allowChildren': true,\n      'type': 'folder',\n      'nodes': [{\n        'id': 32,\n        'title': 'Add Disabled',\n        'permissions': {\n          add: false,\n          edit: true,\n          delete: true\n        },\n        'allowChildren': true,\n        'type': 'folder',\n        'nodes': []\n      }, {\n        'id': 31,\n        'title': 'Edit Disabled',\n        'permissions': {\n          edit: false,\n          add: true,\n          delete: true\n        },\n        'allowChildren': true,\n        'type': 'folder',\n        'nodes': []\n      }, {\n        'id': 33,\n        'title': 'Delete Disabled',\n        'permissions': {\n          delete: false,\n          add: true,\n          edit: true\n        },\n        'allowChildren': true,\n        'type': 'folder',\n        'nodes': []\n      }]\n    }];\n}"},2515:function(e,n){e.exports='<tree-view data="vm.data" selected="vm.selected" add-item="vm.addItem" icons="vm.iconConfig" delete="vm.deleteFn" options="vm.treeOptions"></tree-view>'},2516:function(e,n){e.exports="angular.module('app').controller('TreeViewDocumentationCtrl', TreeViewDocumentationCtrl);\n\n  function TreeViewDocumentationCtrl() {\n    var vm = this;\n\n    vm.selected = {\n      id: '0',\n      title: ''\n    };\n\n    vm.newValue = {\n      allowChildren: false,\n      title: '',\n    };\n\n    vm.iconConfig = {\n      folder: {\n        collapsed: 'hpe-folder',\n        expanded: 'hpe-folder-open'\n      },\n      item: 'hpe-document',\n      'default': 'hpe-3d'\n    };\n\n    vm.treeOptions = {\n      showTreeLines: false,\n      openOnSelect: false,\n      loadHeight: 72\n    };\n\n    vm.addItem = function () {\n      var item = {\n        id: -1,\n        allowChildren: vm.newValue.allowChildren,\n        title: vm.newValue.title || 'New User Defined Item',\n        type: vm.newValue.allowChildren ? 'folder' : 'item',\n        nodes: []\n      };\n\n      return item;\n    };\n\n    vm.deleteFn = function () {\n      return true;\n    };\n\n    vm.data = [{\n      'id': 1,\n      'title': 'Documents',\n      'allowChildren': true,\n      'type': 'folder',\n      'nodes': [{\n        'id': 12,\n        'title': 'Pictures',\n        'allowChildren': true,\n        'type': 'folder',\n        'nodes': [{\n          'title': 'Alcazar',\n          'type': 'item'\n        }, {\n          'title': 'Citadel',\n          'type': 'item'\n        }, {\n          'title': 'Donjon',\n          'type': 'item'\n        }]\n      }, {\n        'id': 11,\n        'title': 'Word files',\n        'allowChildren': true,\n        'type': 'folder',\n        'nodes': [{\n          'id': 111,\n          'title': 'Accounts',\n          'allowChildren': true,\n          'type': 'folder',\n          'nodes': [{\n            'title': 'Castle',\n            'type': 'item'\n          }, {\n            'title': 'Estate',\n            'type': 'item'\n          }, {\n            'title': 'Manor',\n            'type': 'item'\n          }, {\n            'title': 'Mansion',\n            'type': 'item'\n          }, {\n            'title': 'Villa',\n            'type': 'item'\n          }]\n        }]\n      }]\n    }, {\n      'id': 2,\n      'title': 'Emails',\n      'allowChildren': true,\n      'type': 'folder',\n      'nodes': [{\n        'id': 21,\n        'title': 'Inbox',\n        'allowChildren': true,\n        'type': 'folder',\n        'nodes': []\n      }, {\n        'id': 22,\n        'title': 'Outbox',\n        'allowChildren': true,\n        'type': 'folder',\n        'nodes': []\n      }]\n    }, {\n      'id': 3,\n      'title': 'Permissions Examples',\n      'allowChildren': true,\n      'type': 'folder',\n      'nodes': [{\n        'id': 32,\n        'title': 'Add Disabled',\n        'permissions': {\n          add: false,\n          edit: true,\n          delete: true\n        },\n        'allowChildren': true,\n        'type': 'folder',\n        'nodes': []\n      }, {\n        'id': 31,\n        'title': 'Edit Disabled',\n        'permissions': {\n          edit: false,\n          add: true,\n          delete: true\n        },\n        'allowChildren': true,\n        'type': 'folder',\n        'nodes': []\n      }, {\n        'id': 33,\n        'title': 'Delete Disabled',\n        'permissions': {\n          delete: false,\n          add: true,\n          edit: true\n        },\n        'allowChildren': true,\n        'type': 'folder',\n        'nodes': []\n      }]\n    }];\n\n  }"},2517:function(e,n){e.exports='vm.iconConfig = {\n    folder: {\n        collapsed:"hpe-folder",\n        expanded:"hpe-folder-open"\n    },\n    item: "hpe-document"\n};'}});