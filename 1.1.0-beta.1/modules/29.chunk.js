webpackJsonp([29],{1679:function(e,o,t){"use strict";var n=this&&this.__decorate||function(e,o,t,n){var a,l=arguments.length,r=l<3?o:null===n?n=Object.getOwnPropertyDescriptor(o,t):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,o,t,n);else for(var s=e.length-1;s>=0;s--)(a=e[s])&&(r=(l<3?a(r):l>3?a(o,t,r):a(o,t))||r);return l>3&&r&&Object.defineProperty(o,t,r),r};Object.defineProperty(o,"__esModule",{value:!0});var a=t(1),l=t(218),r=function(){function e(){this.htmlCode=t(2566),this.codepen={html:this.htmlCode}}return e}();r=n([a.Component({selector:"uxd-css-forms-basic-form",template:t(1997)}),l.DocumentationSectionComponent("CssBasicFormComponent")],r),o.CssBasicFormComponent=r},1680:function(e,o,t){"use strict";var n=this&&this.__decorate||function(e,o,t,n){var a,l=arguments.length,r=l<3?o:null===n?n=Object.getOwnPropertyDescriptor(o,t):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,o,t,n);else for(var s=e.length-1;s>=0;s--)(a=e[s])&&(r=(l<3?a(r):l>3?a(o,t,r):a(o,t))||r);return l>3&&r&&Object.defineProperty(o,t,r),r};Object.defineProperty(o,"__esModule",{value:!0});var a=t(1),l=t(218),r=function(){function e(){this.htmlCode=t(2567),this.codepen={html:this.htmlCode}}return e}();r=n([a.Component({selector:"uxd-css-forms-form-validation-field-by-field",template:t(1998)}),l.DocumentationSectionComponent("CssFormValidationFieldByFieldComponent")],r),o.CssFormValidationFieldByFieldComponent=r},1681:function(e,o,t){"use strict";var n=this&&this.__decorate||function(e,o,t,n){var a,l=arguments.length,r=l<3?o:null===n?n=Object.getOwnPropertyDescriptor(o,t):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,o,t,n);else for(var s=e.length-1;s>=0;s--)(a=e[s])&&(r=(l<3?a(r):l>3?a(o,t,r):a(o,t))||r);return l>3&&r&&Object.defineProperty(o,t,r),r};Object.defineProperty(o,"__esModule",{value:!0});var a=t(1),l=t(218),r=function(){function e(){this.htmlCode=t(2568),this.jsCode=t(2569),this.codepen={html:this.htmlCode,js:[this.jsCode]}}return e}();r=n([a.Component({selector:"uxd-css-forms-form-validation-on-submit",template:t(1999)}),l.DocumentationSectionComponent("CssFormValidationOnSubmitComponent")],r),o.CssFormValidationOnSubmitComponent=r},1682:function(e,o,t){"use strict";var n=this&&this.__decorate||function(e,o,t,n){var a,l=arguments.length,r=l<3?o:null===n?n=Object.getOwnPropertyDescriptor(o,t):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,o,t,n);else for(var s=e.length-1;s>=0;s--)(a=e[s])&&(r=(l<3?a(r):l>3?a(o,t,r):a(o,t))||r);return l>3&&r&&Object.defineProperty(o,t,r),r},a=this&&this.__metadata||function(e,o){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,o)};Object.defineProperty(o,"__esModule",{value:!0});var l=t(1),r=t(19),s=t(222),i=t(219),c=t(119),d=t(220),m=t(120),p=t(221),u=t(1681),f=t(1680),h=t(1684),b=t(1683),v=t(1679),y=[v.CssBasicFormComponent,b.CssHorizontalFormComponent,h.CssInlineFormComponent,f.CssFormValidationFieldByFieldComponent,u.CssFormValidationOnSubmitComponent],g=[{path:"**",component:d.DocumentationCategoryComponent,data:{category:c.ResolverService.resolveCategoryData(c.DocumentationPage.Css,"Forms")}}],w=function(){function e(e,o){o.registerResolver(e)}return e}();w=n([l.NgModule({imports:[m.CheckboxModule,p.WrappersModule,i.DocumentationComponentsModule,s.TabsModule,r.RouterModule.forChild(g)],exports:y,declarations:y,entryComponents:y}),a("design:paramtypes",[l.ComponentFactoryResolver,c.ResolverService])],w),o.CssFormsModule=w},1683:function(e,o,t){"use strict";var n=this&&this.__decorate||function(e,o,t,n){var a,l=arguments.length,r=l<3?o:null===n?n=Object.getOwnPropertyDescriptor(o,t):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,o,t,n);else for(var s=e.length-1;s>=0;s--)(a=e[s])&&(r=(l<3?a(r):l>3?a(o,t,r):a(o,t))||r);return l>3&&r&&Object.defineProperty(o,t,r),r};Object.defineProperty(o,"__esModule",{value:!0});var a=t(1),l=t(218),r=function(){function e(){this.htmlCode1=t(2570),this.htmlCode2=t(2571),this.htmlCode3=t(2572),this.codepenSnippet=t(2e3),this.codepen={html:this.codepenSnippet}}return e}();r=n([a.Component({selector:"uxd-css-forms-horizontal-form",template:t(2001)}),l.DocumentationSectionComponent("CssHorizontalFormComponent")],r),o.CssHorizontalFormComponent=r},1684:function(e,o,t){"use strict";var n=this&&this.__decorate||function(e,o,t,n){var a,l=arguments.length,r=l<3?o:null===n?n=Object.getOwnPropertyDescriptor(o,t):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,o,t,n);else for(var s=e.length-1;s>=0;s--)(a=e[s])&&(r=(l<3?a(r):l>3?a(o,t,r):a(o,t))||r);return l>3&&r&&Object.defineProperty(o,t,r),r};Object.defineProperty(o,"__esModule",{value:!0});var a=t(1),l=t(218),r=function(){function e(){this.htmlCode1=t(2573),this.htmlCode2=t(2574),this.codepenSnippet=t(2002),this.codepen={html:this.codepenSnippet}}return e}();r=n([a.Component({selector:"uxd-css-forms-inline-form",template:t(2003)}),l.DocumentationSectionComponent("CssInlineFormComponent")],r),o.CssInlineFormComponent=r},1997:function(e,o){e.exports='<div class="row demo">\n    <div class="col-sm-6 col-xs-12">\n        <form role="form" novalidate>\n            <div class="form-group">\n                <label class="form-label">Email</label>\n                <input type="email" placeholder="Enter email" class="form-control">\n            </div>\n            <div class="form-group">\n                <label class="form-label">Password</label>\n                <input type="password" placeholder="Enter password" class="form-control">\n            </div>\n            <div>\n                <ux-checkbox [(value)]="checked">Remember Me</ux-checkbox>\n                <button class="btn button-primary pull-right" type="submit">Log in\n                </button>\n            </div>\n        </form>\n    </div>\n</div>\n\n<hr>\n\n<p>Individual controls should be wrapped in <code>.form-group</code> for spacing.<br>\nForm labels are contained in the .form-label.  As you see above, the form will stack vertically.</p>\n\n<uxd-snippet [code]="htmlCode"></uxd-snippet>'},1998:function(e,o){e.exports='<uxd-form-validation-field-by-field-wrapper></uxd-form-validation-field-by-field-wrapper>\n\n<hr>\n\n<p>The form above demonstrates validation of a field’s content as the user enters the field.</p>\n\n<p>The user will be prompted if the field contains an error and may only click the ‘Submit’ button when the entire form contains \nno errors (see the <code>ng-disabled</code> attribute on the button in the HTML below).</p>\n\n<p>The form layout is created with the use of classes such as <code>form-group</code>, <code>form-label</code> etc. which are described in our ‘Basic Form’ documentation.</p>\n\n<p>Notice how any <code>div</code> tag which contains an <code>input</code> that requires validation implements the <code>form-group-validate</code> and <code>has-feedback</code> (used to show warning icon) classes. \nInputs that require validation must have their <code>name</code> and <code>ng-model</code> attributes set.</p>\n\n<p>A <code>required</code> attribute can be specified if the input is required.</p>\n\n<p>The input <code>type</code> attribute also specifies our desired type such as <code>text</code>, <code>email</code> etc. and the input will only be valid when the users input matches this.</p>\n\n<p>To display a ‘warning’ icon we add the <code>form-control-feedback</code> class in a span tag. \nWe then use the <code>ng-show</code> attribute to only show the warning icon when required.</p>\n\n<p>For example, to access the validity of a desired input, specify the form <code>name</code> followed by the input <code>name</code>. \nYou can then access the inputs properties (states) such as <code>$valid</code>, <code>$touched</code> etc. using the properties provided by <code>ng-model</code>. \nThis can be seen in the HTML code sample below.</p>\n\n<blockquote>\n  <p><strong>Note</strong>: Refer to the <a routerLink="/css/icons">Icons</a>  page for an example of how to use icons.</p>\n</blockquote>\n\n<p>To display ‘warning’ text we add the <code>validation-error-text</code> class in a <code>span</code> tag. \nWe then use <code>ng-show</code> as mentioned in the paragraph above to toggle the visibility of this text.</p>\n\n<p>The HTML code below shows how to implement the form used above:</p>\n\n<uxd-snippet [code]="htmlCode"></uxd-snippet>'},1999:function(e,o){e.exports='<uxd-form-validation-on-submit-wrapper></uxd-form-validation-on-submit-wrapper>\n\n<hr>\n\n<p>The form demonstrated above can be used to validate each field when the user clicks the ‘Submit’ button. \nThe user will be shown any affected fields with focus being on the first affected field.</p>\n\n<p>If you wish you use a Form with Validation on submit, any <code>div</code> tag which contains an <code>input</code> that requires validation \nmust implement the <code>form-group-validate-on-submit</code> class, rather than the ‘form-group-validate’ class used for field-by-field validation.</p>\n\n<p>Inputs requiring validation must set the <code>ng-class</code> attribute, applying the <code>on-submit</code> class only when the form has been submitted i.e. <code>submitted=true</code>. \n<code>submitted</code> is only set to true when the ‘Submit’ button has been clicked, as seen in our HTML sample below.</p>\n\n<p>When the submit button is initially clicked and there are fields with errors, it will be disabled until each field is corrected.</p>\n\n<blockquote>\n  <p><strong>Note</strong>: you must set the <code>ng-class</code> attribute and only apply the <code>disabled</code> class when the form has been submitted but still has errors (<code>$invalid</code>), for this to work correctly.</p>\n</blockquote>\n\n<p>See the above documentation on field-by-field validation for information on how to show error text and error icons, \nhowever you must also add <code>submitted</code> to the <code>ng-show</code> expression to only show these when the form has been submitted.</p>\n\n<p>Notice how the ‘Telephone’ input field involves setting a <code>pattern</code> attribute that makes the field invalid unless the user input follows that pattern.</p>\n\n<p>The HTML code below shows how to implement the form used above:</p>\n\n<tabset>\n    <tab heading="HTML">\n        <uxd-snippet [code]="htmlCode"></uxd-snippet>\n    </tab>\n    <tab heading="JavaScript">\n        <uxd-snippet language="javascript" [code]="jsCode"></uxd-snippet>\n    </tab>\n</tabset>\n\n<br>\n\n<blockquote>\n  <p><strong>Note</strong>: if you wish to disable the default validation error text (which appears as a tooltip), \nyou must give your form a unique ID as seen in the HTML sample above. You must then put the code seen in the Javascript tab into your controller, \nspecifying the form ID as the <code>.element</code> parameter. We use a <code>$timeout</code> to ensure the page has fully loaded before executing the code.</p>\n</blockquote>\n\n\n\n\n\n\n\n'},2e3:function(e,o){e.exports='<form class="form-horizontal demo" role="form" novalidate>\n    <div class="row">\n        <div class="col-sm-6 col-xs-12">\n            <div class="form-group">\n                <label class="control-label form-label col-sm-2">Email</label>\n\n                <div class="col-sm-6">\n                    <input type="email" placeholder="Enter email" class="form-control">\n                </div>\n            </div>\n            <div class="form-group">\n                <label class="control-label form-label col-sm-2">Password</label>\n\n                <div class="col-sm-6">\n                    <input type="password" placeholder="Enter password" class="form-control">\n                </div>\n            </div>\n            <div class="form-group">\n                <div class="col-sm-offset-2 col-sm-10">\n                    <checkbox ng-model="checked">Remember me</checkbox>\n                </div>\n            </div>\n            <div class="form-group">\n                <div class="col-sm-offset-2 col-sm-10">\n                    <button class="btn button-primary" type="submit">Log in\n                    </button>\n                </div>\n            </div>\n        </div>\n    </div>\n</form>'},2001:function(e,o){e.exports='<form class="form-horizontal demo" role="form" novalidate>\n    <div class="form-group">\n        <label class="control-label form-label col-sm-2">Email</label>\n\n        <div class="col-sm-6">\n            <input type="email" placeholder="Enter email" class="form-control">\n        </div>\n    </div>\n    <div class="form-group">\n        <label class="control-label form-label col-sm-2">Password</label>\n\n        <div class="col-sm-6">\n            <input type="password" placeholder="Enter password" class="form-control">\n        </div>\n    </div>\n    <div class="form-group">\n        <div class="col-sm-offset-2 col-sm-10">\n            <ux-checkbox [(value)]="checked">Remember Me</ux-checkbox>\n        </div>\n    </div>\n    <div class="form-group">\n        <div class="col-sm-offset-2 col-sm-10">\n            <button class="btn button-primary" type="submit">Log in\n            </button>\n        </div>\n    </div>\n</form>\n\n<hr>\n\n<p>To make a Horizontal Form you must first add the <code>.form-horizontal</code> to the surrounding <code>form</code>.</p>\n\n<uxd-snippet [code]="htmlCode1"></uxd-snippet>\n\n<p>Each control must also be wrapped in <code>.form-group</code>. Think of each <code>.form-group</code> as a new row in our form. \nFor controls with labels we must add <code>.control-label</code>, <code>.form-label</code> and column width <code>.col-sm-*</code> classes. \nWe also need to specify the width the control can take up so we wrap the control in a div and give it a column width <code>.col-sm-*</code>.</p>\n\n<uxd-snippet [code]="htmlCode2"></uxd-snippet>\n\n<p>For controls that don’t have a left hand label, such as the check box in our example, it is still wrapped in <code>.form-group</code> \nbut we must wrap the control in a <code>div</code> with the same column width <code>.col-sm-*</code> as the above controls and specify an offset \n<code>.col-sm-offset-*</code> the same size as the label column width <code>.col-sm-*</code>.</p>\n\n<uxd-snippet [code]="htmlCode3"></uxd-snippet>'},2002:function(e,o){e.exports='<form role="form" class="form-inline" novalidate>\n    <div class="form-group">\n        <label class="form-label sr-only">Email</label>\n        <input type="email" placeholder="Enter email" class="form-control">\n    </div>\n    <div class="form-group">\n        <label class="form-label sr-only">Password</label>\n        <input type="password" placeholder="Enter password" class="form-control">\n    </div>\n    <checkbox ng-model="checked">Remember me</checkbox>\n    <button class="btn button-primary m-l-sm" type="submit">Log in\n    </button>\n</form>'},2003:function(e,o){e.exports='<form role="form" class="form-inline" novalidate>\n    <div class="form-group">\n        <label class="form-label sr-only">Email</label>\n        <input type="email" placeholder="Enter email" class="form-control">\n    </div>\n    <div class="form-group">\n        <label class="form-label sr-only">Password</label>\n        <input type="password" placeholder="Enter password" class="form-control">\n    </div>\n    <ux-checkbox [(value)]="checked">Remember Me</ux-checkbox>\n    <button class="btn button-primary m-l-sm" type="submit">Log in\n    </button>\n</form>\n\n<hr>\n\n<p>To make a Inline Form you must first add the <code>.form-inline</code> to the surrounding <code>form</code>.</p>\n\n<uxd-snippet [code]="htmlCode1"></uxd-snippet>\n\n<p>The structure of the form is very similar to that of the Basic Form with the exception of labels. \nWhilst it is uncommon to have labels visible on inline forms it may be useful for screen readers so by \nadding <code>.sr-only</code> to any labels that you do not want to be visible will mean that they will still be there for screen readers.</p>\n\n<uxd-snippet [code]="htmlCode2"></uxd-snippet>'},2566:function(e,o){e.exports='<div class="col-sm-6 col-xs-12">\n    <form role="form" novalidate>\n        <div class="form-group">\n            <label class="form-label">Email</label>\n            <input type="email" placeholder="Enter email" class="form-control">\n        </div>\n        <div class="form-group">\n            <label class="form-label">Password</label>\n            <input type="password" placeholder="Enter password" class="form-control">\n        </div>\n        <div>\n            <checkbox ng-model="checked">Remember me</checkbox>\n            <button class="btn button-primary pull-right" type="submit">Log in\n            </button>\n        </div>\n    </form>\n</div>'},2567:function(e,o){e.exports='<div class="row">\n    <div class="col-sm-6 col-xs-12">\n        <form role="form" name="validationform" autocomplete="off">\n            <div class="form-group-validate has-feedback">\n                <label class="form-label">Project name *</label>\n                <input type="text" placeholder="Enter project name" class="form-control" name="projectname" ng-model="projectname" required>\n                <span class="hpe-icon hpe-alert form-control-feedback" ng-show="validationform.projectname.$invalid && (validationform.projectname.$touched || validationform.projectname.$dirty)" aria-hidden="true"></span>\n                <span class="validation-error-text" ng-show="validationform.projectname.$invalid && (validationform.projectname.$touched || validationform.projectname.$dirty)">Required - enter a project name</span>\n            </div>\n            <div class="form-group">\n                <label class="form-label">Description</label>\n                <textarea class="form-control" rows="4" placeholder="Enter description"></textarea>\n            </div>\n            <div class="form-group-validate has-feedback">\n                <label class="form-label">Owner\'s email *</label>\n                <input type="email" placeholder="Enter owner\'s email" class="form-control" name="owneremail" ng-model="owneremail" required>\n                <span class="hpe-icon hpe-alert form-control-feedback" ng-show="validationform.owneremail.$invalid && (validationform.owneremail.$touched || validationform.owneremail.$dirty)" aria-hidden="true"></span>\n                <span class="validation-error-text" ng-show="validationform.owneremail.$invalid && (validationform.owneremail.$dirty || validationform.owneremail.$touched)">Required - enter a valid email</span>\n            </div>\n            <div>\n                <button class="btn button-primary pull-right" type="submit" ng-disabled="validationform.$invalid">Submit\n                </button>\n            </div>\n        </form>\n    </div>\n</div>'},2568:function(e,o){e.exports='<div class="row demo">\n    <div class="col-sm-6 col-xs-12">\n        <form role="form" name="validationformsubmit" id="form-submit" autocomplete="off">\t\n            <div class="form-group-validate-on-submit has-feedback">\t\n                <label class="form-label">Username *</label>\t\n                <input type="text" placeholder="Enter username" class="form-control" name="username" ng-model="username" ng-class="{\'on-submit\': submitted}" required>\t\n                <span class="hpe-icon hpe-alert form-control-feedback" ng-show="submitted && validationformsubmit.username.$invalid" aria-hidden="true"></span>\n                <span class="validation-error-text" ng-show="submitted && validationformsubmit.username.$invalid">Required - enter a username</span>\n            </div>\n            <div class="form-group">\n                <label class="form-label">Bio</label>\n                <textarea class="form-control" rows="4" placeholder="Enter bio" type="text"></textarea>\n            </div>\n            <div class="form-group-validate-on-submit has-feedback">\n                <label class="form-label">Telephone *</label>\n                <input type="text" pattern="(0[1-9][0-9]{9})|(\\+44[1-9][0-9]{9})" placeholder="Enter telephone number" class="form-control" name="telephone" ng-model="telephone" ng-class="{\'on-submit\': submitted}" required>\n                <span class="hpe-icon hpe-alert form-control-feedback" ng-show="submitted && validationformsubmit.telephone.$invalid" aria-hidden="true"></span>\n                <span class="validation-error-text" ng-show="submitted && validationformsubmit.telephone.$invalid">Required - enter a valid UK telephone number</span>\n            </div>\n            <div>\n                <button class="btn button-primary pull-right" type="submit" ng-click="submitted=true" ng-class="{\'disabled\': submitted && validationformsubmit.$invalid}">Submit\n                </button>\n            </div>\n        </form>\n    </div>\n</div>'},2569:function(e,o){e.exports="angular.module('app').controller('FormsCtrl', [\"$timeout\", FormsCtrl]);\n\nfunction FormsCtrl($timeout) {\n    var fc = this;\n\n    $timeout(function() {\n        angular.element('#form-submit').validate(function(evt) {\n            evt.preventDefault();\n        });\n    });      \n}"},2570:function(e,o){e.exports='<form class="form-horizontal" role="form">\n    ...\n</form>'},2571:function(e,o){e.exports='<div class="form-group">\n    <label for="email" class="control-label form-label col-sm-2">Email</label>\n    <div class="col-sm-6">\n        <input type="email" name="email" placeholder="Enter email" class="form-control">\n    </div>\n</div>'},2572:function(e,o){e.exports='<div class="form-group">\n    <div class="col-sm-offset-2 col-sm-10">\n        <checkbox ng-model="checked">Remember me</checkbox>\n    </div>\n</div>'},2573:function(e,o){e.exports='<form class="form-inline" role="form">\n    ...\n</form>'},2574:function(e,o){e.exports='<div class="form-group">\n    <label class="form-label sr-only" for="email">Email</label>\n    <input type="email" name="email" placeholder="Enter email" class="form-control">\n</div>'}});