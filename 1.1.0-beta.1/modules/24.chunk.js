webpackJsonp([24],{1533:function(e,t,n){"use strict";var a=this&&this.__decorate||function(e,t,n,a){var o,i=arguments.length,c=i<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,n):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(e,t,n,a);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(c=(i<3?o(c):i>3?o(t,n,c):o(t,n))||c);return i>3&&c&&Object.defineProperty(t,n,c),c};Object.defineProperty(t,"__esModule",{value:!0});var o=n(1),i=n(218),c=function(){function e(){this.htmlCode=n(2215),this.customFacetHtmlCode=n(2213),this.customFacetJsCode=n(2214)}return e}();c=a([o.Component({selector:"uxd-components-custom-facets-ng1",template:n(1869)}),i.DocumentationSectionComponent("ComponentsCustomFacetsNg1Component")],c),t.ComponentsCustomFacetsNg1Component=c},1534:function(e,t,n){"use strict";var a=this&&this.__decorate||function(e,t,n,a){var o,i=arguments.length,c=i<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,n):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(e,t,n,a);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(c=(i<3?o(c):i>3?o(t,n,c):o(t,n))||c);return i>3&&c&&Object.defineProperty(t,n,c),c};Object.defineProperty(t,"__esModule",{value:!0});var o=n(1),i=n(218),c=function(){function e(){this.htmlCode=n(2216),this.jsCode=n(2217)}return e}();c=a([o.Component({selector:"uxd-components-dynamic-facets-ng1",template:n(1870)}),i.DocumentationSectionComponent("ComponentsDynamicFacetsNg1Component")],c),t.ComponentsDynamicFacetsNg1Component=c},1535:function(e,t,n){"use strict";var a=this&&this.__decorate||function(e,t,n,a){var o,i=arguments.length,c=i<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,n):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(e,t,n,a);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(c=(i<3?o(c):i>3?o(t,n,c):o(t,n))||c);return i>3&&c&&Object.defineProperty(t,n,c),c};Object.defineProperty(t,"__esModule",{value:!0});var o=n(1),i=n(218),c=function(){function e(){this.htmlCode=n(2219),this.jsCode=n(2220),this.cssCode=n(2218),this.codepen={html:this.htmlCode,js:[this.jsCode],css:[this.cssCode]}}return e}();c=a([o.Component({selector:"uxd-components-facet-line-chart-ng1",template:n(1871)}),i.DocumentationSectionComponent("ComponentsFacetLineChartNg1Component")],c),t.ComponentsFacetLineChartNg1Component=c},1536:function(e,t,n){"use strict";var a=this&&this.__decorate||function(e,t,n,a){var o,i=arguments.length,c=i<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,n):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(e,t,n,a);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(c=(i<3?o(c):i>3?o(t,n,c):o(t,n))||c);return i>3&&c&&Object.defineProperty(t,n,c),c};Object.defineProperty(t,"__esModule",{value:!0});var o=n(1),i=n(218),c=function(){function e(){this.facetContainerCode=n(2221),this.facetCode=n(2225),this.facetOptionHtmlCode=n(2222),this.facetOptionJsCode=n(2223),this.facetVisibility=n(2224)}return e}();c=a([o.Component({selector:"uxd-components-facets-ng1",template:n(1872)}),i.DocumentationSectionComponent("ComponentsFacetsNg1Component")],c),t.ComponentsFacetsNg1Component=c},1537:function(e,t,n){"use strict";var a=this&&this.__decorate||function(e,t,n,a){var o,i=arguments.length,c=i<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,n):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(e,t,n,a);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(c=(i<3?o(c):i>3?o(t,n,c):o(t,n))||c);return i>3&&c&&Object.defineProperty(t,n,c),c},o=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var i=n(1),c=n(19),l=n(219),s=n(119),r=n(220),d=n(1536),p=n(1534),u=n(1533),h=n(1535),m=n(1538),f=n(221),v=n(222),g=[d.ComponentsFacetsNg1Component,p.ComponentsDynamicFacetsNg1Component,u.ComponentsCustomFacetsNg1Component,h.ComponentsFacetLineChartNg1Component,m.ComponentsProgrammaticSelectionNg1Component],b=[{path:"**",component:r.DocumentationCategoryComponent,data:{category:s.ResolverService.resolveCategoryData(s.DocumentationPage.Components,"Facets")}}],y=function(){function e(e,t){t.registerResolver(e)}return e}();y=a([i.NgModule({imports:[f.WrappersModule,v.TabsModule,l.DocumentationComponentsModule,c.RouterModule.forChild(b)],exports:g,declarations:g,entryComponents:g}),o("design:paramtypes",[i.ComponentFactoryResolver,s.ResolverService])],y),t.ComponentsFacetsModule=y},1538:function(e,t,n){"use strict";var a=this&&this.__decorate||function(e,t,n,a){var o,i=arguments.length,c=i<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,n):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(e,t,n,a);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(c=(i<3?o(c):i>3?o(t,n,c):o(t,n))||c);return i>3&&c&&Object.defineProperty(t,n,c),c};Object.defineProperty(t,"__esModule",{value:!0});var o=n(1),i=n(218),c=function(){function e(){}return e}();c=a([o.Component({selector:"uxd-components-programmatic-selection",template:n(1873)}),i.DocumentationSectionComponent("ComponentsProgrammaticSelectionNg1Component")],c),t.ComponentsProgrammaticSelectionNg1Component=c},1869:function(e,t){e.exports='<p>Custom Facets allow for any control, such as a Date Picker, to be used as part of a faceted search.</p>\n\n<p>To include a Custom Facet in a <code>facet-container</code>, use the <code>facet-custom</code> directive in place of a <code>facet</code>    directive. The required attributes are:</p>\n\n<div class="demo-attributes table-responsive">\n    <table class="table m-t">\n        <tbody>\n            <tr>\n                <th>Name</th>\n                <th>Type</th>\n                <th>Binding</th>\n                <th>Description</th>\n                <th>Optional</th>\n            </tr>\n            <tr>\n                <td class="attribute">name</td>\n                <td>string</td>\n                <td>variable</td>\n                <td>A string name for the facet.</td>\n                <td>false</td>\n            </tr>\n            <tr>\n                <td class="attribute">model</td>\n                <td>object</td>\n                <td>variable</td>\n                <td>An object in the controller context which contains the computed value of the custom facet.</td>\n                <td>false</td>\n            </tr>\n            <tr>\n                <td class="attribute">select</td>\n                <td>function</td>\n                <td>variable</td>\n                <td>A function called when the value of <code>model</code> changes.</td>\n                <td>false</td>\n            </tr>\n            <tr>\n                <td class="attribute">deselect</td>\n                <td>function</td>\n                <td>variable</td>\n                <td>A function called when the facet is deselected.</td>\n                <td>false</td>\n            </tr>\n            <tr>\n                <td class="attribute">display</td>\n                <td>function</td>\n                <td>variable</td>\n                <td>A function which computes a display name for the facet when selected.</td>\n                <td>false</td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n\n<p>\n    The <code>select</code> and <code>deselect</code> functions are not called with parameters, so should be defined from\n    the parent context to read either the value of the property passed as\n    <code>model</code> or another property as appropriate.\n</p>\n\n<uxd-snippet language="html" [code]="htmlCode"></uxd-snippet>\n\n<p>\n    Inside this directive, define the required control. The key feature is to ensure the computed value of the control is set\n    to the same property as was passed as the <code>model</code> attribute for the directive. This means the custom facet\n    is single select, and should implement its own clearing functionality if required.\n</p>\n\n<p>\n    Below is an example of how this directive can be used to implement a Date Picker facet (using the Date Picker directive).\n    Note that the <code>vm.date</code> property is shared between the custom facet and the datepicker.\n</p>\n\n<tabset>\n    <tab heading="HTML">\n        <uxd-snippet language="html" [code]="customFacetHtmlCode"></uxd-snippet>\n    </tab>\n\n    <tab heading="Javascript">\n        <uxd-snippet language="javascript" [code]="customFacetJsCode"></uxd-snippet>\n    </tab>\n</tabset>'},1870:function(e,t){e.exports='<p>\n    When there are a large number of facet options, the Dynamic Facet can be used to replace the regular scrollable list with\n    a text search, supporting dropdown typeahead. This is configurable to fallback to the standard scrollable list, when\n    the number of items in the list falls beneath a certain threshold.\n</p>\n\n<p>\n    To use the Dynamic Facet, use the <code>facet-dynamic</code> directive instead of the <code>facet</code> directive. Set\n    the\n    <code>facet-options</code> attribute with an object containing a <code>title</code> attribute, and an <code>options</code>    property containing collection of objects that follow the interface for the <code>facet-option</code> defined above.\n    The Dynamic Facet can be used in the same <code>facet-container</code> as the standard <code>facet</code> directive.\n</p>\n\n<p>\n    To configure the behaviour of the control, set the <code>display-configuration</code> attribute, which expects an object\n    of the following format:\n</p>\n\n<div class="demo-attributes table-responsive">\n    <table class="table">\n        <tbody>\n            <tr>\n                <th>Property</th>\n                <th>Description</th>\n            </tr>\n            <tr>\n                <td class="attribute">minCharacters</td>\n                <td>How many characters should be typed before a dropdown is shown (default: 3)</td>\n            </tr>\n            <tr>\n                <td class="attribute">maxDisplayableItems</td>\n                <td>How many entries to show in the typeahead dropdown (default: show all matches)</td>\n            </tr>\n            <tr>\n                <td class="attribute">minIndividualItems</td>\n                <td>How many Facet Options should be displayed regardless of whether a typeahead is visible (default: 0). Items\n                    shown as Facet Options will not be listed in the typeahead dropdown.</td>\n            </tr>\n            <tr>\n                <td class="attribute">maxIndividualItems</td>\n                <td>When there are fewer than this many items, a list of Facet Options will be shown instead of a text input\n                    (default: 0).</td>\n            </tr>\n            <tr>\n                <td class="attribute">showZero</td>\n                <td>When true any Facet Options with a count of zero will be visible (default: false).</td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n\n<p>The maximum number of characters expected by this text area is defined by the <code>max-length</code>directive.</p>\n\n<p>The maximum number of lines the text input is allowed to grow to can be set using the <code>max-lines</code> attribute. If\n    the number of lines exceeds this value then a scrollbar will appear.</p>\n\n<p>To prevent the user from taking a new line using the return key set the <code>disable-return</code> attribute to false.</p>\n\n<p>The values presented in the dropdown can also be changed dynamically. This is optional behaviour, but useful if you wish\n    to perform additional server requests on demand. The function supplied to <code>update-callback</code> will be triggered\n    every time the contents of the text input are modified. The function will be called with:</p>\n\n<ul>\n    <li><code>textInput</code> - the text value in the search control.</li>\n    <li><code>optionList</code> - the array of options the control can filter from.</li>\n</ul>\n\n<p>The function must return:</p>\n\n<ul>\n    <li><code>optionList</code> - the array of options, with the contents modified, added or removed as required.</li>\n</ul>\n\n<p>Set the <code>placeholder</code> attribute to a string property to set the placeholder text that will be shown in the text\n    search input control.</p>\n\n<p>Below is an example for the use of this directive:</p>\n\n<tabset>\n    <tab heading="HTML">\n        <uxd-snippet language="html" [code]="htmlCode"></uxd-snippet>\n    </tab>\n    <tab heading="Javascript">\n        <uxd-snippet language="javascript" [code]="jsCode"></uxd-snippet>\n    </tab>\n</tabset>'},1871:function(e,t){e.exports='<uxd-facet-line-chart-wrapper></uxd-facet-line-chart-wrapper>\n\n<hr>\n\n<p>A flot chart can be manipulated by other controls as seen in the example above which uses a facet to change the dataset displayed and another facet to change the date range.</p>\n\n<p>When the date range is changed the chart will only show points on the chart that fall between those dates. It will also recalculate the ticks on the Y axis to show a more appropriate scale based on the visible points. This may also be desired when using a Timeline Chart. In the sample code below the function <code>updateChartYAxis</code> is responsible for calculating a new Y axis scale. This function should be used as a basis to provide such functionality for any chart that needs to rescale its Y axis.</p>\n\n<tabset>\n    <tab heading="HTML">\n        <uxd-snippet language="html" [code]="htmlCode"></uxd-snippet>\n    </tab>\n    <tab heading="Javascript">\n        <uxd-snippet language="javascript" [code]="jsCode"></uxd-snippet>\n    </tab>\n    <tab heading="CSS">\n        <uxd-snippet language="css" [code]="cssCode"></uxd-snippet>        \n    </tab>\n</tabset>'},1872:function(e,t){e.exports='<p>\n    Facets are contained inside a <code>facet-container</code> element. A <code>facet-container</code> element can have many\n    <code>facet</code> elements underneath it. The <code>facet-container</code> must have the <code>select-title</code> and\n    <code>clear-text</code> attributes set. <code>select-title</code> should be set to the value which appears above the\n    selected facets. <code>clear-text</code> should be set to the value which appears in the clear all link. In addition\n    to these options the <code>no-items-text</code> attribute can be set which will display the specified text when no facet\n    options have been selected. <code>no-items-text</code> is an optional attribute.\n</p>\n\n<p>\n    The <code>clear-all-fn</code> is an optional attribute in this directive that defines a function expression called when\n    the clearAll is clicked. This option will override the default function expression provided in UX Aspects and can be used\n    to define a user method.\n</p>\n\n<uxd-snippet language="html" [code]="facetContainerCode"></uxd-snippet>\n\n<p>A <code>facet</code> element may have the following attributes:</p>\n\n<div class="demo-attributes table-responsive">\n    <table class="table m-t">\n        <tbody>\n            <tr>\n                <th>Name</th>\n                <th>Type</th>\n                <th>Binding</th>\n                <th>Description</th>\n                <th>Optional</th>\n            </tr>\n            <tr>\n                <td class="attribute">name</td>\n                <td>string</td>\n                <td>variable</td>\n                <td>The facet title.</td>\n                <td>false</td>\n            </tr>\n            <tr>\n                <td class="attribute">facet-scroll</td>\n                <td>string</td>\n                <td>literal</td>\n                <td>Set to "on" to enable a scrollbar for the facet options, or "off" to disable it. Default: on.</td>\n                <td>true</td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n\n<uxd-snippet language="html" [code]="facetCode"></uxd-snippet>\n\n<p>\n    A <code>facet</code> element can contain many <code>facet-option</code> elements. <code>facet-option</code> elements\n    can have the following attributes:\n</p>\n\n<div class="demo-attributes table-responsive">\n    <table class="table m-t">\n        <tbody>\n            <tr>\n                <th>Name</th>\n                <th>Type</th>\n                <th>Binding</th>\n                <th>Description</th>\n                <th>Optional</th>\n            </tr>\n            <tr>\n                <td class="attribute">name</td>\n                <td>string</td>\n                <td>variable</td>\n                <td>A bindable property which will be displayed as the option.</td>\n                <td>false</td>\n            </tr>\n            <tr>\n                <td class="attribute">count</td>\n                <td>number</td>\n                <td>variable</td>\n                <td>An optional bindable property which will appear alongside the name in braces. Note that the count should\n                    update as facets are applied.</td>\n                <td>true</td>\n            </tr>\n            <tr>\n                <td class="attribute">select</td>\n                <td>function</td>\n                <td>variable</td>\n                <td>A function expression which will be called when the option is selected. This function should perform any\n                    filtering that is required and update counts as necessary. The select count should update as facets are\n                    applied, based on the number of items selected which will be displayed on the toolbar in selection mode.</td>\n                <td>false</td>\n            </tr>\n            <tr>\n                <td class="attribute">deselect</td>\n                <td>function</td>\n                <td>variable</td>\n                <td>a function expression which will be called when the option is deselected. This function should perform any\n                    filtering that is required and update counts as necessary. The select count should update as facets are\n                    applied, based on the number of items selected which will be displayed on the toolbar in selection mode.</td>\n                <td>false</td>\n            </tr>\n            <tr>\n                <td class="attribute">load-delay</td>\n                <td>number</td>\n                <td>variable</td>\n                <td>An optional property to specify a delay in milliseconds to load the facets.</td>\n                <td>true</td>\n            </tr>\n            <tr>\n                <td class="attribute">disabled</td>\n                <td>boolean</td>\n                <td>variable</td>\n                <td>If true the <code>facet-option</code> will appear disabled and clicking on it will have no effect (default:\n                    false).\n                </td>\n                <td>true</td>\n            </tr>\n            <tr>\n                <td class="attribute">show-zero</td>\n                <td>boolean</td>\n                <td>variable</td>\n                <td>If true the <code>facet-option</code> will be visible even if the count is 0 (default: false).</td>\n                <td>true</td>\n            </tr>\n            <tr>\n                <td class="attribute">selected-aria-label</td>\n                <td>boolean</td>\n                <td>variable</td>\n                <td>A property which accepts a string used in assistive technologies to indicate whether the facet option is\n                    selected.\n                </td>\n                <td>true</td>\n            </tr>\n            <tr>\n                <td class="attribute">simplified</td>\n                <td>boolean</td>\n                <td>variable</td>\n                <td>By default the style of the checkboxes will be simplified, setting this to false will use the standard checkbox\n                    style.\n                </td>\n                <td>true</td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n\n<tabset>\n    <tab heading="HTML">\n        <uxd-snippet language="html" [code]="facetOptionHtmlCode"></uxd-snippet>\n    </tab>\n\n    <tab heading="Javascript">\n        <uxd-snippet language="javascript" [code]="facetOptionJsCode"></uxd-snippet>\n    </tab>\n</tabset>\n\n<div class="demo-attributes table-responsive">\n    <table class="table">\n        <tbody>\n            <tr>\n                <th>Property</th>\n                <th>Description</th>\n            </tr>\n            <tr>\n                <td class="attribute">updateSelectCounts()</td>\n                <td>A function expression which will be called when facet option is selected (<code>select</code>) or deselected\n                    (\n                    <code>deselect</code>). This will update the count based on the number of items that are selected in\n                    selection mode when the filtering is done on facets.</td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n\n<h4 id="showing-and-hiding">Showing and Hiding</h4>\n\n<p>\n    If the visibility of the facet container can be toggled, then the <code>facet-reinitialise</code> event may be broadcast\n    by the controller in order to prevent display issues with the facet options when they become visible. For example, if\n    visibility of the facets is controlled by a boolean variable, the following code will broadcast the event at the appropriate\n    time.\n</p>\n\n<uxd-snippet language="javascript" [code]="facetVisibility"></uxd-snippet>'},1873:function(e,t){e.exports='<p>\n    To enable programmatic selection of facets, pass an empty object to the <code>api</code> attribute of the <code>facet-container</code>    element. This object will be populated with a list of objects representing the facets in the container, allowing access\n    to the <code>select</code> and <code>deselect</code> methods of their facet-options.\n</p>\n\n<p>\n    This is compatible with standard Facets, Dynamic Facets, and Custom Facets. Note that when using Custom Facets, the value\n    of the <code>model</code> needs to be changed independently of these functions.\n</p>\n\n<blockquote>\n    <p>\n        An example of the use of programmatic selection can be seen in the Filter Popover Controller in the \n        <a routerLink="/components/tables" fragment="detail-row-header-ng1">Detail Row Header</a> documentation.\n    </p>\n</blockquote>'},2213:function(e,t){e.exports='<facet-container select-title="Selected:" clear-text="Clear All">\n      \x3c!--...--\x3e\n    <facet-custom name=" \'DATE MODIFIED\' " select="vm.dateFacetSelect" deselect="vm.dateFacetDeselect" model="vm.date" display="vm.dateFacetDisplayFn">\n        <div class="input-group date m-nil" style="padding: 10px;">\n            <span class="input-group-addon" ng-click="vm.dateFacetOpen($event)">\n              <i class="hpe-icon hpe-calendar" aria-hidden="true"></i>\n            </span>\n            <input type="text" class="form-control" ng-model="vm.date" datepicker-popup="dd MMMM yyyy"\n            ng-click="vm.dateFacetOpen($event)" is-open="vm.dateFacetOpened" aria-label="Selected date">\n        </div>\n    </facet-custom>\n     \x3c!--...--\x3e\n</facet-container>'},2214:function(e,t){e.exports='angular.module("app").controller("TestCtrl", TestCtrl);\n\nfunction TestCtrl() {\n    var vm = this;\n\n    vm.date = "";\n    vm.dateFacetOpened = false;\n\n    vm.dateFacetOpen = function ($event) {\n        $event.preventDefault();\n        $event.stopPropagation();\n        vm.dateFacetOpened = true;\n        vm.prevdate = vm.date;\n    };\n\n    vm.change = function () {\n        var customdate = new Date(vm.date);\n        if (isNaN(customdate)) {\n            vm.date = new Date();\n        } else if (vm.date !== vm.prevdate) {\n            vm.date = new Date(vm.date);\n            vm.prevdate = vm.date;\n        }\n    };\n\n    var selectedDateFilter = function (data) {\n        if (vm.compareDate === "") return true;\n        return data.date.getDate().toString() + data.date.getMonth().toString() + data.date.getFullYear().toString() === vm.compareDate;\n    };\n\n    var customFilters = [];\n    var currentDate = "";\n\n    var applyCustomFilter = function () {\n        //Pushing the filter to the set of selected filters\n        vm.filters.push(customFilters);\n\n        //Updating counts and loading page with selected filter\n        vm.updateCounts();\n        vm.updateSelectCounts();\n        vm.loadPage();\n    };\n\n    vm.dateFacetDeselect = function () {\n        //Store the current date, and select with this date.\n        currentDate = vm.date;\n\n        //make this empty to clear the date field\n        vm.date = "";\n\n        customFilters.splice(0, 1);\n        vm.filters.push(customFilters);\n        applyCustomFilter();\n    };\n\n    vm.dateFacetSelect = function () {\n\n        if (vm.date !== "")\n            vm.compareDate = vm.date.getDate().toString() + vm.date.getMonth().toString() + vm.date.getFullYear().toString();\n        else vm.compareDate = ""; //Returns all the values\n\n        customFilters.push(selectedDateFilter);\n        applyCustomFilter();\n    };\n\n    vm.dateFacetDisplayFn = function () {\n        vm.date = currentDate;\n\n        if (vm.date !== "")\n            return vm.date.getDate().toString() + " - " + (vm.date.getMonth() + 1).toString() + " - " + vm.date.getFullYear().toString();\n    };\n\n}'},2215:function(e,t){e.exports='<facet-custom name=" \'DATE MODIFIED\' " select="vm.dateFacetSelect" deselect="vm.dateFacetDeselect" model="vm.date" display="vm.dateFacetDisplayFn">\n\x3c!-- ....  --\x3e\n</facet-custom>'},2216:function(e,t){e.exports='<facet-container>\n    \x3c!--...--\x3e\n    <facet-dynamic name="vm.facetOptions.title" facet-options="vm.facetOptions" display-configuration="vm.facetLongListConfig"\n                   placeholder=" \'Find Author\' " update-callback="vm.longListCallback" max-length="100" max-lines="3" disable-return="\'false\'" >\n    </facet-dynamic>\n    \x3c!--...--\x3e\n</facet-container>'},2217:function(e,t){e.exports='angular.module("app").controller("TestCtrl", ["exampleDataService", TestCtrl]);\n\nfunction TestCtrl(exampleDataService) {\n    var vm = this;\n\n    vm.service = exampleDataService;\n\n    //Example configuration\n    vm.facetLongListConfig = {\n        minCharacters: 3,\n        minIndividualItems: 0,\n        maxIndividualItems: 10,\n        maxDisplayableItems: 10,\n        showZero: false\n    };\n\n    vm.facetOptions = {\n        title: "Author",\n        options: vm.service.users.sort().map(function (user) {\n            //Logic to filter the matching names\n            return {\n                name: user,\n                filter: function (data) {\n                    return data.name === user;\n                }\n            };\n        })\n    };\n\n    vm.facetOptions.options.forEach(function (option) {\n        option.select = function () {\n            console.log("Facet Selected");\n            //Implement logic when facet is selected\n        };\n\n        option.deselect = function () {\n            console.log("Facet Deselected");\n            //Implement logic when facet is deselected\n        };\n    });\n\n    vm.longListCallback = function (textInput, optionList) {\n        return optionList;\n    };\n}'},2218:function(e,t){e.exports="/*\n  Flot Line Chart With Facet Panel\n*/\n\n.flot-facet-container {\n    overflow: hidden;\n}\n\n.flot-facet-container .flot-chart-facet-container {\n    display: block;\n    height: 500px;\n}\n\n.flot-facet-container .flot-side-panel {\n    height: 500px;\n    box-shadow: -5px 0px 12px #ccc;\n    border: 1px solid #ddd;\n}\n\n.flot-facet-container .flot-side-panel .date-range-label {\n    padding: 0;\n    margin: 6px 0;\n}\n\n.flot-facet-container .flot-side-panel .warning-text {\n    color: #ff454f;\n    text-align: center;\n    margin-top: 10px;\n}\n\n.flot-facet-container .flot-side-panel .no-indent {\n    padding-left: 0;\n}"},2219:function(e,t){e.exports='<div ng-controller="FacetCtrl as lc" class="container-fluid">\n    <div class="row">\n        <div class="col-md-12 m-t-md">\n            <div class="row flot-facet-container">\n                <div class="col-sm-8">\n                    <div class="flot-chart-facet-container">\n                        <flot dataset="lc.lineChart.data" options="lc.lineChart.lineoptions" on-plot-click="lc.lineChart.onPlotClick(event,pos,item)"\n                            on-hover-click="lc.lineChart.onPlotHover(event,pos,item)">\n                        </flot>\n                    </div>\n                </div>\n                <div class="col-sm-4 flot-side-panel">\n                    <facet-container select-title="Selected:" clear-text="Clear All">\n\n                        <facet-custom name=" \'Date Range\' " select="lc.selectDateRange" deselect="lc.deselectDateRange" model="lc.dateRangeModel"\n                            display="lc.displayDateRange">\n                            <br />\n                            <label class="col-sm-2 date-range-label">From</label>\n                            <div class="col-sm-10 input-group date m-nil m-b-sm">\n                                <span class="input-group-addon" ng-click="lc.dateStartOpen($event)">\n                          <i class="hpe-icon hpe-calendar" aria-hidden="true"></i>\n                        </span>\n                                <input type="text" class="form-control" ng-model="lc.dateStart" datepicker-popup="dd MMMM yyyy" ng-click="lc.dateStartOpen($event)"\n                                    is-open="lc.dateStartIsOpen" ng-change="lc.dateStartUpdate()" aria-label="Selected start date"\n                                />\n                            </div>\n\n                            <label class="col-sm-2 date-range-label">To</label>\n                            <div class="col-sm-10 input-group date m-nil">\n                                <span class="input-group-addon" ng-click="lc.dateEndOpen($event)">\n                          <i class="hpe-icon hpe-calendar" aria-hidden="true"></i>\n                        </span>\n                                <input type="text" class="form-control" ng-model="lc.dateEnd" datepicker-popup="dd MMMM yyyy" ng-click="lc.dateEndOpen($event)"\n                                    is-open="lc.dateEndIsOpen" ng-change="lc.dateEndUpdate()" aria-label="Selected end date"\n                                />\n                            </div>\n                            <p class="text-center text-muted m-t-sm"><small>Choose a date range between 1st January 2012 - 1st January 2016</small></p>\n                            <p class="warning-text" ng-show="lc.invalidDate">Invalid Date Range</p>\n                        </facet-custom>\n\n                        <facet-custom name=" \'User Type\' " select="lc.userTypeSelect" deselect="lc.userTypeDeselect" model="lc.userTypeModel" display="lc.userTypeDisplay">\n\n                            <div role="radiogroup">\n                                <div class="radio">\n                                    <radiobutton class="no-indent" ng-model="lc.selectedUserType" ng-value="lc.userTypeOptions.ldap">LDAP</radiobutton>\n                                </div>\n                                <div class="radio">\n                                    <radiobutton class="no-indent" ng-model="lc.selectedUserType" ng-value="lc.userTypeOptions.imap">IMAP</radiobutton>\n                                </div>\n                                <div class="radio">\n                                    <radiobutton class="no-indent" ng-model="lc.selectedUserType" ng-value="lc.userTypeOptions.eca">ECA</radiobutton>\n                                </div>\n                                <div class="radio">\n                                    <radiobutton class="no-indent" ng-model="lc.selectedUserType" ng-value="lc.userTypeOptions.admin">Admin</radiobutton>\n                                </div>\n                            </div>\n\n                        </facet-custom>\n\n                    </facet-container>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>'},2220:function(e,t){e.exports='angular.module(\'app\').controller(\'FacetCtrl\', FacetCtrl);\n\nFacetCtrl.$inject = [\'$scope\'];\n\nfunction FacetCtrl($scope) {\n    var lc = this;\n\n    var flotChartColors = {\n        primary: "rgb(1, 169, 130)",\n        secondary1: "rgb(96, 121, 141)",\n        secondary2: "rgb(97, 71, 103)",\n        secondary3: "rgb(135, 123, 117)",\n        secondary4: "rgb(97, 125, 120)",\n        secondary5: "rgb(204, 204, 204)",\n        gridColor: "#999999",\n        tickColor: "#D4D4D4",\n        white: "#FFFFFF",\n        transparent: "rgba(0, 0, 0, 0)",\n        borderColor: "#E5E5E5"\n    };\n\n    //default dates\n    var minimumDate = 1325376000000,\n        maximumDate = 1451606400000,\n        startDate = 1427846400000,\n        endDate = 1446336000000,\n        step = 2311200000,\n        selectedUserModel = \'LDAP\';\n\n    var ldapData = getPointsWithinRange(minimumDate, maximumDate, step, 15, 75);\n    var imapData = getPointsWithinRange(minimumDate, maximumDate, step, 15, 75);\n    var ecaData = getPointsWithinRange(minimumDate, maximumDate, step, 15, 75);\n    var adminData = getPointsWithinRange(minimumDate, maximumDate, step, 15, 75);\n\n    //set the initial selection\n    var chartData = ldapData;\n\n    /*\n    This function should be used to calculate new Y axis minimum and maximum values\n    when the data changes to provide a more suitable range\n    */\n\n    function updateChartYAxis() {\n        var start = lc.lineChart.lineoptions.xaxis.min;\n        var end = lc.lineChart.lineoptions.xaxis.max;\n\n        var min, max;\n\n        for (var i = 0; i < chartData.length; i++) {\n            var x = chartData[i][0];\n            var y = chartData[i][1];\n\n            if (x >= start && x <= end) {\n                if (!min || y < min) min = y;\n                if (!max || y > max) max = y;\n            }\n        }\n\n        //add some extra space above and beneath\n        min -= 5;\n        max += 5;\n\n        //update the chart\n        lc.lineChart.lineoptions.yaxis.min = min;\n        lc.lineChart.lineoptions.yaxis.max = max;\n    }\n\n    /*\n    Date Range Facet\n    */\n\n    lc.dateRangeModel = \'\';\n    lc.invalidDate = false;\n\n    var dateChanged = false;\n\n    lc.selectDateRange = function () {\n        //update date range\n        updateChart(lc.dateStart, lc.dateEnd);\n\n        if (lc.dateStart.getTime() > lc.dateEnd.getTime()) lc.invalidDate = true;\n        else lc.invalidDate = false;\n    };\n\n    lc.deselectDateRange = function () {\n\n        //check if the user has changed the date rather than deselected\n        if (dateChanged) {\n            lc.invalidDate = false;\n            dateChanged = false;\n            return;\n        }\n\n        //if user deselected or hit clear all then reset the values to their default\n        lc.dateRangeModel = \'\';\n        lc.dateStart = new Date(minimumDate);\n        lc.dateEnd = new Date(maximumDate);\n        lc.invalidDate = false;\n\n        //redraw the charts taking into account the default values\n        updateChart(lc.dateStart, lc.dateEnd);\n\n    };\n\n    lc.displayDateRange = function () {\n\n        //convert the dates to readable strings\n        var startDate = lc.dateStart;\n        var endDate = lc.dateEnd;\n\n        var monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "June", "July", "Aug", "Sept", "Oct", "Nov", "Dec"];\n\n        var formattedFrom = startDate.getDate() + \' \' +\n            monthNames[startDate.getMonth()] + \' \' +\n            startDate.getFullYear();\n\n        var formattedTo = endDate.getDate() + \' \' +\n            monthNames[endDate.getMonth()] + \' \' +\n            endDate.getFullYear();\n\n        return \'From \' + formattedFrom + " to " + formattedTo;\n    };\n\n    function updateChart(startDate, endDate) {\n        //set the charts new start x and y axis\n        lc.lineChart.lineoptions.xaxis.min = startDate.getTime();\n        lc.lineChart.lineoptions.xaxis.max = endDate.getTime();\n\n        //show a more appropriate Y axis range based on the values\n        updateChartYAxis();\n    }\n\n    /*\n    Start Date Range Control\n    */\n\n    lc.dateStartIsOpen = false;\n    lc.dateStart = new Date(minimumDate);\n\n    lc.dateStartOpen = function ($event) {\n        //show date picker and make sure other date picker is hidden\n        lc.dateEndIsOpen = false;\n        lc.dateStartIsOpen = !lc.dateStartIsOpen;\n        $event.preventDefault();\n        $event.stopPropagation();\n    };\n\n    lc.dateStartUpdate = function () {\n        dateChanged = true;\n\n        if (lc.dateStart.getTime() < minimumDate) lc.dateStart = new Date(minimumDate);\n        if (lc.dateStart.getTime() > maximumDate) lc.dateStart = new Date(maximumDate);\n\n        lc.dateRangeModel = JSON.stringify({\n            start: lc.dateStart,\n            end: lc.dateEnd\n        });\n    };\n\n    /*\n    End Date Range Control\n    */\n\n    lc.dateEndIsOpen = false;\n    lc.dateEnd = new Date(maximumDate);\n\n    lc.dateEndOpen = function ($event) {\n        //show date picker and make sure other date picker is hidden\n        lc.dateStartIsOpen = false;\n        lc.dateEndIsOpen = !lc.dateEndIsOpen;\n        $event.preventDefault();\n        $event.stopPropagation();\n    };\n\n    lc.dateEndUpdate = function () {\n        dateChanged = true;\n\n        if (lc.dateEnd.getTime() < minimumDate) lc.dateEnd = new Date(minimumDate);\n        if (lc.dateEnd.getTime() > maximumDate) lc.dateEnd = new Date(maximumDate);\n\n        lc.dateRangeModel = JSON.stringify({\n            start: lc.dateStart,\n            end: lc.dateEnd\n        });\n    };\n\n    /*\n    User Type Facet\n    */\n\n    lc.userTypeModel = \'LDAP\';\n    lc.selectedUserType = \'LDAP\';\n    lc.revertUser = false;\n\n    lc.userTypeOptions = {\n        ldap: \'LDAP\',\n        imap: \'IMAP\',\n        eca: \'ECA\',\n        admin: \'Admin\'\n    };\n\n    $scope.$watch(\'lc.selectedUserType\', function (newValue, oldValue) {\n        if (newValue !== oldValue) {\n\n            //if we are deselecting then we want to revert the user\n            if (lc.revertUser) {\n                lc.revertUser = false;\n                selectedUserModel = null;\n            } else lc.userTypeModel = newValue;\n        }\n    });\n\n    lc.userTypeSelect = function () {\n\n        //store the new selected user model\n        selectedUserModel = lc.userTypeModel;\n\n        //based on the user type show the data and change the color\n        switch (lc.userTypeModel) {\n\n            case \'LDAP\':\n                chartData = ldapData;\n                lc.lineChart.lineoptions.colors = [flotChartColors.primary];\n                break;\n\n            case \'IMAP\':\n                chartData = imapData;\n                lc.lineChart.lineoptions.colors = [flotChartColors.secondary1];\n                break;\n\n            case \'ECA\':\n                chartData = ecaData;\n                lc.lineChart.lineoptions.colors = [flotChartColors.secondary2];\n                break;\n\n            case \'Admin\':\n                chartData = adminData;\n                lc.lineChart.lineoptions.colors = [flotChartColors.secondary3];\n                break;\n        }\n\n        //update the chart data\n        lc.lineChart.data[0].data = chartData;\n\n        //update the y axis range\n        updateChartYAxis();\n    };\n\n    lc.userTypeDeselect = function () {\n        //if we are deselecting then reset\n        if (lc.userTypeModel === selectedUserModel) {\n\n            //set the user model to empty string to remove selected label\n            lc.userTypeModel = \'\';\n\n            //reset chart data\n            chartData = ldapData;\n            lc.lineChart.lineoptions.colors = [flotChartColors.primary];\n            lc.lineChart.data[0].data = chartData;\n\n            //update the y axis range\n            updateChartYAxis();\n\n            //update redio buttons\n            lc.selectedUserType = \'LDAP\';\n            lc.revertUser = true;\n        } else {\n            lc.revertUser = false;\n        }\n    };\n\n    lc.userTypeDisplay = function () {\n        return lc.userTypeModel;\n    };\n\n    /*\n    Set up line chart for example\n    */\n\n    lc.lineChart = {\n        data: [{\n            label: "line",\n            data: ldapData\n        }],\n        lineoptions: {\n            series: {\n                lines: {\n                    show: true,\n                    lineWidth: 3,\n                    fill: false\n                },\n                shadowSize: 0,\n                highlightColor: [flotChartColors.secondary]\n            },\n            xaxis: {\n                tickDecimals: 0,\n                mode: \'time\',\n                timeformat: "%b %y",\n                tickColor: flotChartColors.transparent,\n                min: minimumDate,\n                max: maximumDate\n            },\n            yaxis: {},\n            colors: [flotChartColors.primary],\n            grid: {\n                color: [flotChartColors.gridColor],\n                hoverable: true,\n                clickable: true,\n                tickColor: [flotChartColors.tickColor],\n                borderWidth: 1,\n                borderColor: flotChartColors.borderColor\n            },\n            legend: {\n                show: false\n            },\n            tooltip: {\n                show: true,\n                snap: true,\n                shifts: {\n                    x: 0,\n                    y: -47\n                },\n                content: "x: %x, y: %y"\n            }\n        }\n    };\n\n    /*\n    Get Sample Random Data\n    */\n    function getPointsWithinRange(rangeStart, rangeEnd, step, low, high) {\n        var points = [];\n\n        for (var i = rangeStart; i <= rangeEnd; i += step) {\n            var randomPoint = Math.floor(Math.random() * (high - low + 1) + low);\n            points.push([i, randomPoint]);\n        }\n        return points;\n    }\n\n}'},2221:function(e,t){e.exports='<facet-container select-title="Selected:" clear-text="Clear All" no-items-text="None selected"\n   clear-all-fn="vm.clearAllFn()">\n  \x3c!--facet elements....  --\x3e\n</facet-container>'},2222:function(e,t){e.exports='<facet-option ng-repeat="option" name="option.name" select="option.select()" count="option.count"\n   deselect="option.deselect()" show-zero="option.showZero" disabled="option.disabled">\n</facet-option>'},2223:function(e,t){e.exports='angular.module("app").controller("ListViewCtrl", ListViewCtrl);\n\nfunction ListViewCtrl($state, items, exampleDataService, $rootScope, multipleSelectProvider) {\n    var vm = this;\n    // ........\n\n    vm.service = exampleDataService;\n    vm.totalItems = vm.service.getTotal();\n    vm.currentPage = 1;\n    vm.pageSize = 50;\n    vm.items = items;\n    vm.filters = [];\n    vm.facets = [];\n    vm.dropdownFilters = [];\n    // .........\n    vm.multiprovider = multipleSelectProvider;\n    // ..........\n    vm.facets.push(usersFacet);\n    vm.facets.push(extFacet);\n    vm.generateFacetObjects();\n    vm.generateFilters();\n    vm.clearAllFn = function () {\n        // ...\n    };\n}\n\nListViewCtrl.prototype.generateFacetObjects = function () {\n    var vm = this;\n    // .........\n    option.select = function () {\n        // .........\n        vm.updateSelectCounts();\n        vm.loadPage();\n    };\n\n    option.deselect = function () {\n        // ..........\n        vm.updateSelectCounts();\n        vm.loadPage();\n    };\n\n    option.count = vm.getCount(option);\n    option.disabled = false;\n    option.showZero = true;\n};\n\nListViewCtrl.prototype.updateSelectCounts = function () {\n    var vm = this;\n\n    vm.count = 0;\n    //sort out filters\n    var filters = filters || [];\n\n    vm.filters.forEach(function (filterListToBeOred) {\n        if (filterListToBeOred.length > 0) {\n            filters.push(function (data) {\n                return filterListToBeOred.some(function (filter) {\n                    return filter(data);\n                });\n            });\n        }\n    });\n\n    vm.items = vm.service.getPage(vm.currentPage - 1, vm.pageSize, filters);\n\n    for (var i = 0; i < vm.items.length; i++) {\n        if (vm.multiprovider.isSelected(vm.items[i])) {\n            vm.count = vm.count + 1;\n        }\n    }\n\n    vm.multiprovider.state.count = vm.count;\n};'},2224:function(e,t){e.exports='$scope.$watch("vm.showFacets", function (nv) {\n  if (nv) {\n    $scope.$broadcast("facet-reinitialise");\n  }\n});'},2225:function(e,t){e.exports='<facet name="facet.title">\n  \x3c!--facet options....  --\x3e\n</facet>'}});