(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[8924],{51380:c=>{c.exports={snippet:'<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ux-progress-bar</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>m-b-md<span class="token punctuation">"</span></span> <span class="token attr-name">[value]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>value<span class="token punctuation">"</span></span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{ value }}%<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ux-progress-bar</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-primary<span class="token punctuation">"</span></span> <span class="token attr-name">(click)</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>randomize()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Random<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>',example:'<ux-progress-bar class="m-b-md" [value]="value" max="100">\n    <span>{{ value }}%</span>\n</ux-progress-bar>\n\n<button type="button" class="btn btn-primary" (click)="randomize()">Random</button>'}},71305:c=>{c.exports={snippet:'<span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@angular/core\'</span><span class="token punctuation">;</span>\n\n@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">selector</span><span class="token operator">:</span> <span class="token string">\'app-root\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">templateUrl</span><span class="token operator">:</span> <span class="token string">\'./app.component.html\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppComponent</span> <span class="token punctuation">{</span>\n\n    <span class="token literal-property property">value</span><span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>\n\n    <span class="token function">randomize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n',example:"import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html'\n})\nexport class AppComponent {\n\n    value: number = 15;\n\n    randomize() {\n        this.value = Math.floor((Math.random() * 100) + 1);\n    }\n}\n"}},53908:(c,m,a)=>{var l={"./app.html":51380,"./app.ts":71305,"docs/app/pages/components/components-sections/progress/progress-bar/snippets/app.html":51380,"docs/app/pages/components/components-sections/progress/progress-bar/snippets/app.ts":71305};function e(p){var o=i(p);return a(o)}function i(p){if(!a.o(l,p)){var o=new Error("Cannot find module '"+p+"'");throw o.code="MODULE_NOT_FOUND",o}return l[p]}e.keys=function(){return Object.keys(l)},e.resolve=i,c.exports=e,e.id=53908},88924:(c,m,a)=>{"use strict";a.r(m),a.d(m,{ComponentsProgressModule:()=>A});var l=a(40239),e=a(96215),i=a(3745),p=a(73875),o=a(74427),d=a(48342),g=a(20391),v=a(34610),n=a(55062),b=a(30642),h=a(28009),f=a(39327),y=a(75079),x=a(52796),Z=a(73962),T=a(33403);let r=class extends g.u{constructor(){super(a(53908)),this.value=15,this.playground={files:{"app.component.html":this.snippets.raw.appHtml,"app.component.ts":this.snippets.raw.appTs},modules:[{imports:["ProgressBarModule"],library:"@ux-aspects/ux-aspects"}]}}randomize(){this.value=Math.floor(100*Math.random()+1)}};r.\u0275fac=function(u){return new(u||r)},r.\u0275cmp=n.Xpm({type:r,selectors:[["uxd-progress-bar"]],features:[n.qOj],decls:45,vars:5,consts:[["max","100",1,"m-b-md",3,"value"],["aria-hidden","true"],["type","button",1,"btn","btn-primary",3,"click"],["tableTitle","Inputs"],["uxd-api-property","","name","value","type","number"],["uxd-api-property","","name","min","type","number","defaultValue","0"],["uxd-api-property","","name","max","type","number","defaultValue","100"],["uxd-api-property","","name","trackColor","type","string","defaultValue","grey7"],["uxd-api-property","","name","barColor","type","string","defaultValue","accent"],[3,"minimal"],["heading","HTML"],["language","html",3,"content"],["heading","JavaScript"],["language","javascript",3,"content"]],template:function(u,t){1&u&&(n.TgZ(0,"ux-progress-bar",0)(1,"span",1),n._uU(2),n.qZA()(),n.TgZ(3,"button",2),n.NdJ("click",function(){return t.randomize()}),n._uU(4,"Random"),n.qZA(),n._UZ(5,"hr"),n.TgZ(6,"p"),n._uU(7," A progress bar can be created by using the "),n.TgZ(8,"code"),n._uU(9,"ux-progress-bar"),n.qZA(),n._uU(10," component. Custom content can be added to the bar by adding HTML inside the "),n.TgZ(11,"code"),n._uU(12,"ux-progress-bar"),n.qZA(),n._uU(13," tag.\n"),n.qZA(),n.TgZ(14,"p"),n._uU(15," Additional contextual information can be provided to screen readers by adding an "),n.TgZ(16,"code"),n._uU(17,"aria-valuetext"),n.qZA(),n._uU(18," attribute to the "),n.TgZ(19,"code"),n._uU(20,"ux-progress-bar"),n.qZA(),n._uU(21,".\n"),n.qZA(),n.TgZ(22,"p"),n._uU(23," The following attributes can be used to configure the appearance and behavior of the progress bar:\n"),n.qZA(),n.TgZ(24,"uxd-api-properties",3)(25,"tr",4),n._uU(26," The value the bar should represent. This will be compared to the "),n.TgZ(27,"code"),n._uU(28,"max"),n.qZA(),n._uU(29," value to determine the width of the bar. "),n.qZA(),n.TgZ(30,"tr",5),n._uU(31," The lower limit of the bar. "),n.qZA(),n.TgZ(32,"tr",6),n._uU(33," The upper limit of the bar. "),n.qZA(),n.TgZ(34,"tr",7),n._uU(35," The color of the track. "),n.qZA(),n.TgZ(36,"tr",8),n._uU(37," The color of the bar. "),n.qZA()(),n.TgZ(38,"p"),n._uU(39,"The following code can be used to create the example above:"),n.qZA(),n.TgZ(40,"ux-tabset",9)(41,"ux-tab",10),n._UZ(42,"uxd-snippet",11),n.qZA(),n.TgZ(43,"ux-tab",12),n._UZ(44,"uxd-snippet",13),n.qZA()()),2&u&&(n.Q6J("value",t.value),n.xp6(2),n.hij("",t.value,"%"),n.xp6(38),n.Q6J("minimal",!1),n.xp6(2),n.Q6J("content",t.snippets.compiled.appHtml),n.xp6(2),n.Q6J("content",t.snippets.compiled.appTs))},dependencies:[b.$,h.S,f.j,y.G,x.R,Z.A,T.i],encapsulation:2}),r=(0,d.gn)([(0,v.cG)("ComponentsProgressBarComponent")],r);const C=[r],U=[{path:"**",component:p.R,data:{category:o.N.resolveCategoryData(o.I.Components,"Progress")}}];let A=(()=>{class s{constructor(t,k){k.registerResolver(t,C)}}return s.\u0275fac=function(t){return new(t||s)(n.LFG(n._Vd),n.LFG(o.N))},s.\u0275mod=n.oAB({type:s}),s.\u0275inj=n.cJS({imports:[i.N,e.q7U,l.Bz.forChild(U),e.f_l]}),s})()}}]);