webpackJsonp([43],{1624:function(n,a,s){"use strict";Object.defineProperty(a,"__esModule",{value:!0});var t=function(){function n(n){var a=this;this.snippets={compiled:{},raw:{}},n.keys().forEach(function(s){var t=s.replace("./","").replace(/\W+(\w)/g,function(n){return n[1].toUpperCase()}),o=n(s);o.snippet&&(a.snippets.compiled[t]=o.snippet),o.example&&(a.snippets.raw[t]=o.example)})}return n}();a.BaseDocumentationSection=t},1634:function(n,a,s){"use strict";!function(n){for(var s in n)a.hasOwnProperty(s)||(a[s]=n[s])}(s(1640))},1640:function(n,a,s){"use strict";function t(n,a){return"rgba("+n.concat(a).join(",")+")"}function o(n,a){return Math.floor(Math.random()*(a-n+1))+n}function p(n){return{backgroundColor:t(n,.4),borderColor:t(n,1),pointBackgroundColor:t(n,1),pointBorderColor:"#fff",pointHoverBackgroundColor:"#fff",pointHoverBorderColor:t(n,.8)}}function e(n){return{backgroundColor:t(n,.6),borderColor:t(n,1),hoverBackgroundColor:t(n,.8),hoverBorderColor:t(n,1)}}function c(n){return{backgroundColor:n.map(function(n){return t(n,.6)}),borderColor:n.map(function(){return"#fff"}),pointBackgroundColor:n.map(function(n){return t(n,1)}),pointBorderColor:n.map(function(){return"#fff"}),pointHoverBackgroundColor:n.map(function(n){return t(n,1)}),pointHoverBorderColor:n.map(function(n){return t(n,1)})}}function i(n){return{backgroundColor:n.map(function(n){return t(n,.6)}),borderColor:n.map(function(n){return t(n,1)}),hoverBackgroundColor:n.map(function(n){return t(n,.8)}),hoverBorderColor:n.map(function(n){return t(n,1)})}}function l(){return[o(0,255),o(0,255),o(0,255)]}function u(n){return g.defaultColors[n]||l()}function r(n){for(var a=new Array(n),s=0;s<n;s++)a[s]=g.defaultColors[s]||l();return a}function k(n,a,s){return"pie"===n||"doughnut"===n?c(r(s)):"polarArea"===n?i(r(s)):"line"===n||"radar"===n?p(u(a)):"bar"===n||"horizontalBar"===n?e(u(a)):u(a)}var d=this&&this.__decorate||function(n,a,s,t){var o,p=arguments.length,e=p<3?a:null===t?t=Object.getOwnPropertyDescriptor(a,s):t;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)e=Reflect.decorate(n,a,s,t);else for(var c=n.length-1;c>=0;c--)(o=n[c])&&(e=(p<3?o(e):p>3?o(a,s,e):o(a,s))||e);return p>3&&e&&Object.defineProperty(a,s,e),e},h=this&&this.__metadata||function(n,a){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(n,a)},f=s(0),m=s(1643),g=function(){function n(n){this.labels=[],this.options={},this.chartClick=new f.EventEmitter,this.chartHover=new f.EventEmitter,this.initFlag=!1,this.element=n}return n.prototype.ngOnInit=function(){this.ctx=this.element.nativeElement.getContext("2d"),this.cvs=this.element.nativeElement,this.initFlag=!0,(this.data||this.datasets)&&this.refresh()},n.prototype.ngOnChanges=function(n){this.initFlag&&(n.hasOwnProperty("data")||n.hasOwnProperty("datasets")?(n.data?this.updateChartData(n.data.currentValue):this.updateChartData(n.datasets.currentValue),this.chart.update()):this.refresh())},n.prototype.ngOnDestroy=function(){this.chart&&(this.chart.destroy(),this.chart=void 0)},n.prototype.getChartBuilder=function(n){var a=this,s=this.getDatasets(),t=Object.assign({},this.options);!1===this.legend&&(t.legend={display:!1}),t.hover=t.hover||{},t.hover.onHover||(t.hover.onHover=function(n){n&&!n.length||a.chartHover.emit({active:n})}),t.onClick||(t.onClick=function(n,s){a.chartClick.emit({event:n,active:s})});var o={type:this.chartType,data:{labels:this.labels,datasets:s},options:t};return new m.Chart(n,o)},n.prototype.updateChartData=function(n){Array.isArray(n[0].data)?this.chart.data.datasets.forEach(function(a,s){a.data=n[s].data,n[s].label&&(a.label=n[s].label)}):this.chart.data.datasets[0].data=n},n.prototype.getDatasets=function(){var n=this,a=void 0;if((!this.datasets||!this.datasets.length&&this.data&&this.data.length)&&(a=Array.isArray(this.data[0])?this.data.map(function(a,s){return{data:a,label:n.labels[s]||"Label "+s}}):[{data:this.data,label:"Label 0"}]),(this.datasets&&this.datasets.length||a&&a.length)&&(a=(this.datasets||a).map(function(a,s){var t=Object.assign({},a);return n.colors&&n.colors.length?Object.assign(t,n.colors[s]):Object.assign(t,k(n.chartType,s,t.data.length)),t})),!a)throw new Error("ng-charts configuration error,\n      data or datasets field are required to render char "+this.chartType);return a},n.prototype.refresh=function(){this.ngOnDestroy(),this.chart=this.getChartBuilder(this.ctx)},n}();g.defaultColors=[[255,99,132],[54,162,235],[255,206,86],[231,233,237],[75,192,192],[151,187,205],[220,220,220],[247,70,74],[70,191,189],[253,180,92],[148,159,177],[77,83,96]],d([f.Input(),h("design:type",Array)],g.prototype,"data",void 0),d([f.Input(),h("design:type",Array)],g.prototype,"datasets",void 0),d([f.Input(),h("design:type",Array)],g.prototype,"labels",void 0),d([f.Input(),h("design:type",Object)],g.prototype,"options",void 0),d([f.Input(),h("design:type",String)],g.prototype,"chartType",void 0),d([f.Input(),h("design:type",Array)],g.prototype,"colors",void 0),d([f.Input(),h("design:type",Boolean)],g.prototype,"legend",void 0),d([f.Output(),h("design:type",f.EventEmitter)],g.prototype,"chartClick",void 0),d([f.Output(),h("design:type",f.EventEmitter)],g.prototype,"chartHover",void 0),g=d([f.Directive({selector:"canvas[baseChart]",exportAs:"base-chart"}),h("design:paramtypes",[f.ElementRef])],g),a.BaseChartDirective=g;var v=function(){function n(){}return n}();v=d([f.NgModule({declarations:[g],exports:[g],imports:[]})],v),a.ChartsModule=v},3445:function(n,a,s){"use strict";var t=this&&this.__decorate||function(n,a,s,t){var o,p=arguments.length,e=p<3?a:null===t?t=Object.getOwnPropertyDescriptor(a,s):t;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)e=Reflect.decorate(n,a,s,t);else for(var c=n.length-1;c>=0;c--)(o=n[c])&&(e=(p<3?o(e):p>3?o(a,s,e):o(a,s))||e);return p>3&&e&&Object.defineProperty(a,s,e),e},o=this&&this.__metadata||function(n,a){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(n,a)};Object.defineProperty(a,"__esModule",{value:!0});var p=s(0),e=s(23),c=s(3446),i=s(323),l=s(322),u=s(325),r=s(172),k=s(324),d=s(3451),h=s(1634),f=[c.ChartsLiveChartNg1Component,d.ChartsLiveChartComponent],m=[{path:"**",component:i.DocumentationCategoryComponent,data:{category:r.ResolverService.resolveCategoryData(r.DocumentationPage.Charts,"Live Chart")}}],g=function(){function n(n,a){a.registerResolver(n)}return n}();g=t([p.NgModule({imports:[k.TabsModule,u.WrappersModule,h.ChartsModule,l.DocumentationComponentsModule,e.RouterModule.forChild(m)],exports:f,declarations:f,entryComponents:f}),o("design:paramtypes",[p.ComponentFactoryResolver,r.ResolverService])],g),a.ChartsLiveChartsModule=g},3446:function(n,a,s){"use strict";var t=this&&this.__extends||function(){var n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,a){n.__proto__=a}||function(n,a){for(var s in a)a.hasOwnProperty(s)&&(n[s]=a[s])};return function(a,s){function t(){this.constructor=a}n(a,s),a.prototype=null===s?Object.create(s):(t.prototype=s.prototype,new t)}}(),o=this&&this.__decorate||function(n,a,s,t){var o,p=arguments.length,e=p<3?a:null===t?t=Object.getOwnPropertyDescriptor(a,s):t;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)e=Reflect.decorate(n,a,s,t);else for(var c=n.length-1;c>=0;c--)(o=n[c])&&(e=(p<3?o(e):p>3?o(a,s,e):o(a,s))||e);return p>3&&e&&Object.defineProperty(a,s,e),e},p=this&&this.__metadata||function(n,a){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(n,a)};Object.defineProperty(a,"__esModule",{value:!0});var e=s(0),c=s(321),i=s(101),l=s(1624),u=function(n){function a(a){var t=n.call(this,s(3447))||this;t.livedata=[],t.codepen={html:t.snippets.raw.chartHtml,htmlAttributes:{"ng-controller":"LiveChartCtrl as lc"},js:[t.snippets.raw.chartJs]};var o={primary:a.getColor("chart1").toRgb(),gridColor:a.getColor("grey4").toHex(),tickColor:a.getColor("grey6").toHex(),borderColor:a.getColor("grey2").setAlpha(.5).toRgba(),white:"#FFFFFF"};return t.series=[{data:t.getRandomData(),lines:{fill:!0,lineWidth:1,fillColor:{colors:[{opacity:.1},{opacity:.1}]}},shadowSize:0}],t.options={grid:{color:[o.gridColor],tickColor:[o.tickColor],borderWidth:{top:0,bottom:1,left:1,right:0},borderColor:{bottom:[o.borderColor],left:[o.borderColor]},minBorderMargin:20,labelMargin:10,backgroundColor:{colors:[[o.white],[o.white]]},margin:{top:8,bottom:20,left:20},markings:function(n){for(var a=[],s=n.xaxis,t=Math.floor(s.min);t<s.max;t+=2*s.tickSize)a.push({xaxis:{from:t,to:t+s.tickSize},color:[o.white]});return a}},colors:[o.primary],xaxis:{tickFormatter:function(){return""}},yaxis:{min:0,max:110},legend:{show:!0}},setInterval(function(){t.series[0].data=t.getRandomData()},40),t}return t(a,n),a.prototype.getRandomData=function(){for(this.livedata.length&&(this.livedata=this.livedata.slice(1));this.livedata.length<300;){var n=this.livedata.length?this.livedata[this.livedata.length-1]:50,a=n+10*Math.random()-5;this.livedata.push(a<0?0:a>100?100:a)}for(var s=[],t=0;t<this.livedata.length;++t)s.push([t,this.livedata[t]]);return s},a}(l.BaseDocumentationSection);u=o([e.Component({selector:"uxd-charts-live-chart-ng1",template:s(3450),changeDetection:e.ChangeDetectionStrategy.OnPush}),c.DocumentationSectionComponent("ChartsLiveChartNg1Component"),p("design:paramtypes",[i.ColorService])],u),a.ChartsLiveChartNg1Component=u},3447:function(n,a,s){function t(n){return s(o(n))}function o(n){var a=p[n];if(!(a+1))throw new Error("Cannot find module '"+n+"'.");return a}var p={"./chart.html":3448,"./chart.js":3449};t.keys=function(){return Object.keys(p)},t.resolve=o,n.exports=t,t.id=3447},3448:function(n,a){n.exports={snippet:'<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flot-chart<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>flot</span> <span class="token attr-name">dataset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lc.liveChart.series<span class="token punctuation">"</span></span> <span class="token attr-name">options</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lc.liveChart.options<span class="token punctuation">"</span></span> <span class="token attr-name">on-plot-click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lc.liveChart.onPlotClick(event,pos,item)<span class="token punctuation">"</span></span>\n        <span class="token attr-name">on-hover-click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lc.liveChart.onPlotHover(event,pos,item)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>flot</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>',example:'<div class="flot-chart">\n    <flot dataset="lc.liveChart.series" options="lc.liveChart.options" on-plot-click="lc.liveChart.onPlotClick(event,pos,item)"\n        on-hover-click="lc.liveChart.onPlotHover(event,pos,item)">\n    </flot>\n</div>'}},3449:function(n,a){n.exports={snippet:'angular<span class="token punctuation">.</span><span class="token function">module</span><span class="token punctuation">(</span><span class="token string">\'app\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">controller</span><span class="token punctuation">(</span><span class="token string">\'LiveChartCtrl\'</span><span class="token punctuation">,</span> LiveChartCtrl<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nLiveChartCtrl<span class="token punctuation">.</span>$inject <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'$interval\'</span><span class="token punctuation">,</span> <span class="token string">\'$colorService\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">LiveChartCtrl</span><span class="token punctuation">(</span>$interval<span class="token punctuation">,</span> $colorService<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">var</span> lc <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">var</span> flotChartColors <span class="token operator">=</span> <span class="token punctuation">{</span>\n        primary<span class="token punctuation">:</span> $colorService<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token string">\'chart1\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toRgb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        gridColor<span class="token punctuation">:</span> $colorService<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token string">\'grey4\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        tickColor<span class="token punctuation">:</span> $colorService<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token string">\'grey6\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        borderColor<span class="token punctuation">:</span> $colorService<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token string">\'grey2\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAlpha</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toRgba</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        white<span class="token punctuation">:</span> <span class="token string">"#FFFFFF"</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">var</span> livedata <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> maximum <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">function</span> <span class="token function">getRandomData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>livedata<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            livedata <span class="token operator">=</span> livedata<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">while</span> <span class="token punctuation">(</span>livedata<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> maximum<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">var</span> previous <span class="token operator">=</span> livedata<span class="token punctuation">.</span>length <span class="token operator">?</span> livedata<span class="token punctuation">[</span>livedata<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">;</span>\n            <span class="token keyword">var</span> y <span class="token operator">=</span> previous <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">;</span>\n            livedata<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>y <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token punctuation">:</span> y <span class="token operator">></span> <span class="token number">100</span> <span class="token operator">?</span> <span class="token number">100</span> <span class="token punctuation">:</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment" spellcheck="true">// zip the generated y values with the x values</span>\n\n        <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> livedata<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>i<span class="token punctuation">,</span> livedata<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">return</span> res<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    lc<span class="token punctuation">.</span>liveChart <span class="token operator">=</span> <span class="token punctuation">{</span>\n        series<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n            data<span class="token punctuation">:</span> <span class="token function">getRandomData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            lines<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                fill<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n                lineWidth<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n                fillColor<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                    colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n                        opacity<span class="token punctuation">:</span> <span class="token number">0.1</span>\n                    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n                        opacity<span class="token punctuation">:</span> <span class="token number">0.1</span>\n                    <span class="token punctuation">}</span><span class="token punctuation">]</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            shadowSize<span class="token punctuation">:</span> <span class="token number">0</span>\n        <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n            grid<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                color<span class="token punctuation">:</span> <span class="token punctuation">[</span>flotChartColors<span class="token punctuation">.</span>gridColor<span class="token punctuation">]</span><span class="token punctuation">,</span>\n                tickColor<span class="token punctuation">:</span> <span class="token punctuation">[</span>flotChartColors<span class="token punctuation">.</span>tickColor<span class="token punctuation">]</span><span class="token punctuation">,</span>\n                borderWidth<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                    <span class="token string">"top"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n                    <span class="token string">"bottom"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n                    <span class="token string">"left"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n                    <span class="token string">"right"</span><span class="token punctuation">:</span> <span class="token number">0</span>\n                <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                borderColor<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                    <span class="token string">"bottom"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>flotChartColors<span class="token punctuation">.</span>borderColor<span class="token punctuation">]</span><span class="token punctuation">,</span>\n                    <span class="token string">"left"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>flotChartColors<span class="token punctuation">.</span>borderColor<span class="token punctuation">]</span>\n                <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                minBorderMargin<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>\n                labelMargin<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>\n                backgroundColor<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                    colors<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n                        <span class="token punctuation">[</span>flotChartColors<span class="token punctuation">.</span>white<span class="token punctuation">]</span><span class="token punctuation">,</span>\n                        <span class="token punctuation">[</span>flotChartColors<span class="token punctuation">.</span>white<span class="token punctuation">]</span>\n                    <span class="token punctuation">]</span>\n                <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                margin<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                    top<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span>\n                    bottom<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>\n                    left<span class="token punctuation">:</span> <span class="token number">20</span>\n                <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                markings<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>axes<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">var</span> markings <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n                    <span class="token keyword">var</span> xaxis <span class="token operator">=</span> axes<span class="token punctuation">.</span>xaxis<span class="token punctuation">;</span>\n                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> x <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>xaxis<span class="token punctuation">.</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> xaxis<span class="token punctuation">.</span>max<span class="token punctuation">;</span> x <span class="token operator">+=</span> xaxis<span class="token punctuation">.</span>tickSize <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        markings<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n                            xaxis<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                                <span class="token keyword">from</span><span class="token punctuation">:</span> x<span class="token punctuation">,</span>\n                                to<span class="token punctuation">:</span> x <span class="token operator">+</span> xaxis<span class="token punctuation">.</span>tickSize\n                            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                            color<span class="token punctuation">:</span> <span class="token punctuation">[</span>flotChartColors<span class="token punctuation">.</span>white<span class="token punctuation">]</span>\n                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span>\n                    <span class="token keyword">return</span> markings<span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            colors<span class="token punctuation">:</span> <span class="token punctuation">[</span>flotChartColors<span class="token punctuation">.</span>primary<span class="token punctuation">]</span><span class="token punctuation">,</span>\n            xaxis<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                tickFormatter<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            yaxis<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                min<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n                max<span class="token punctuation">:</span> <span class="token number">110</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            legend<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                show<span class="token punctuation">:</span> <span class="token boolean">true</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token function">$interval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        lc<span class="token punctuation">.</span>liveChart<span class="token punctuation">.</span>series<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token function">getRandomData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n<span class="token punctuation">}</span>',example:"angular.module('app').controller('LiveChartCtrl', LiveChartCtrl);\n\nLiveChartCtrl.$inject = ['$interval', '$colorService'];\n\nfunction LiveChartCtrl($interval, $colorService) {\n\n    var lc = this;\n\n    var flotChartColors = {\n        primary: $colorService.getColor('chart1').toRgb(),\n        gridColor: $colorService.getColor('grey4').toHex(),\n        tickColor: $colorService.getColor('grey6').toHex(),\n        borderColor: $colorService.getColor('grey2').setAlpha(0.5).toRgba(),\n        white: \"#FFFFFF\"\n    };\n\n    var livedata = [];\n    var maximum = 300;\n\n    function getRandomData() {\n\n        if (livedata.length) {\n            livedata = livedata.slice(1);\n        }\n\n        while (livedata.length < maximum) {\n            var previous = livedata.length ? livedata[livedata.length - 1] : 50;\n            var y = previous + Math.random() * 10 - 5;\n            livedata.push(y < 0 ? 0 : y > 100 ? 100 : y);\n        }\n\n        // zip the generated y values with the x values\n\n        var res = [];\n        for (var i = 0; i < livedata.length; ++i) {\n            res.push([i, livedata[i]]);\n        }\n\n        return res;\n    }\n\n    lc.liveChart = {\n        series: [{\n            data: getRandomData(),\n            lines: {\n                fill: true,\n                lineWidth: 1,\n                fillColor: {\n                    colors: [{\n                        opacity: 0.1\n                    }, {\n                        opacity: 0.1\n                    }]\n                }\n            },\n            shadowSize: 0\n        }],\n        options: {\n            grid: {\n                color: [flotChartColors.gridColor],\n                tickColor: [flotChartColors.tickColor],\n                borderWidth: {\n                    \"top\": 0,\n                    \"bottom\": 1,\n                    \"left\": 1,\n                    \"right\": 0\n                },\n                borderColor: {\n                    \"bottom\": [flotChartColors.borderColor],\n                    \"left\": [flotChartColors.borderColor]\n                },\n                minBorderMargin: 20,\n                labelMargin: 10,\n                backgroundColor: {\n                    colors: [\n                        [flotChartColors.white],\n                        [flotChartColors.white]\n                    ]\n                },\n                margin: {\n                    top: 8,\n                    bottom: 20,\n                    left: 20\n                },\n                markings: function (axes) {\n                    var markings = [];\n                    var xaxis = axes.xaxis;\n                    for (var x = Math.floor(xaxis.min); x < xaxis.max; x += xaxis.tickSize * 2) {\n                        markings.push({\n                            xaxis: {\n                                from: x,\n                                to: x + xaxis.tickSize\n                            },\n                            color: [flotChartColors.white]\n                        });\n                    }\n                    return markings;\n                }\n            },\n            colors: [flotChartColors.primary],\n            xaxis: {\n                tickFormatter: function () {\n                    return \"\";\n                }\n            },\n            yaxis: {\n                min: 0,\n                max: 110\n            },\n            legend: {\n                show: true\n            }\n        }\n\n    };\n\n    $interval(function () {\n        lc.liveChart.series[0].data = getRandomData();\n    }, 40);\n\n\n}"}},3450:function(n,a){n.exports='<div class="flot-chart">\n    <ux-flot-ng1 [dataset]="series" [options]="options"></ux-flot-ng1>\n</div>\n\n<hr>\n\n<div class="demo-attributes table-responsive">\n<table class="table">\n    <tbody><tr>\n        <th>Property</th>\n        <th>Type</th>\n        <th>Description</th>\n        <th>Optional</th>\n    </tr>\n    <tr>\n        <td class="attribute">data</td>\n        <td>number or array</td>\n        <td>Coordinates in the Live chart.</td>\n        <td>false</td>\n    </tr>\n    <tr>\n        <td class="attribute">series</td>\n        <td>string</td>\n        <td>Defines the chart type and its layout. Values include \'lines\', \'bar\' and \'points\'.</td>\n        <td>false</td>\n    </tr>\n</tbody></table>\n</div>\n\n<p>The following attributes should be defined within <code>series</code></p>\n\n\n<div class="demo-attributes table-responsive">\n<table class="table">\n    <tbody><tr>\n        <th>Property</th>\n        <th>Type</th>\n        <th>Description</th>\n        <th>Optional</th>\n    </tr>\n    <tr>\n        <td class="attribute">lineWidth</td>\n        <td>number</td>\n        <td>Defines the thickness of the line chart.</td>\n        <td>true</td>\n    </tr>\n    <tr>\n        <td class="attribute">show</td>\n        <td>boolean</td>\n        <td>If set to true displays the chart.</td>\n        <td>false</td>\n    </tr>\n    <tr>\n        <td class="attribute">fillColor</td>\n        <td>array</td>\n        <td>Specifies the colors of the fill. For Line chart this produces area graphs. If more than one color is specified this will produce a gradient.</td>\n        <td>true</td>\n    </tr>\n    <tr>\n        <td class="attribute">fill</td>\n        <td>boolean or number</td>\n        <td>If set to true fills the chart with colors in the fillColors property. A number between 0 and 1 defines the opacity of the fill.</td>\n        <td>true</td>\n    </tr>\n    <tr>\n        <td class="attribute">shadowSize</td>\n        <td>number</td>\n        <td>Default size of shadows in pixels. Set it to 0 to remove shadows.</td>\n        <td>true</td>\n    </tr>\n</tbody></table>\n</div>\n\n<p>Live Charts are defined by the <code>flot</code> directive. The dataset and options attribute define the live chart data and options respectively.\nDataset and Options are defined within the LiveChartCtrl.</p>\n\n<tabset>\n    <tab heading="HTML">\n        <uxd-snippet language="html" [content]="snippets.compiled.chartHtml"></uxd-snippet>\n    </tab>\n    \n    <tab heading="Javascript">\n        <uxd-snippet language="javascript" [content]="snippets.compiled.chartJs"></uxd-snippet>\n    </tab>\n</tabset>\n\n<div class="demo-attributes table-responsive">\n<table class="table">\n  <tbody><tr>\n    <th>Property</th>\n    <th>Type</th>\n    <th>Description</th>\n    <th>Optional</th>\n  </tr>\n  <tr>\n    <td class="attribute">markings</td>\n    <td>array</td>\n    <td>Markings used to draw simple lines and rectangular areas in the background of the plot. It can be an array of ranges in the form of &#123; xaxis: &#123; from, to &#125;, yaxis: &#123; from, to &#125; &#125; or a function(above example) that returns this range.</td>\n    <td>true</td>\n  </tr>\n</tbody></table>\n</div>\n\n<blockquote>\n  <p><strong>Note</strong>: Refer to the <a routerLink="/charts/flot-options">Flot Options</a> page for details of chart options.</p>\n</blockquote>\n\n<p>To support users of assistive technologies, provide a text summary of the chart with an <code>aria-label</code> or <code>span</code> hidden with the <code>sr-only</code> class. For live charts the most appropriate information to convey will vary depending on the chart’s purpose, but may typically be the highest or most recent data point.</p>\n\n<blockquote>\n    <p><strong>Note</strong>: To upgrade this component to use in an Angular 4 application use: <code>upgradeAdapter.upgradeNg1Component(\'uxFlotNg1\')</code></p>\n</blockquote>'},3451:function(n,a,s){"use strict";var t=this&&this.__extends||function(){var n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,a){n.__proto__=a}||function(n,a){for(var s in a)a.hasOwnProperty(s)&&(n[s]=a[s])};return function(a,s){function t(){this.constructor=a}n(a,s),a.prototype=null===s?Object.create(s):(t.prototype=s.prototype,new t)}}(),o=this&&this.__decorate||function(n,a,s,t){var o,p=arguments.length,e=p<3?a:null===t?t=Object.getOwnPropertyDescriptor(a,s):t;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)e=Reflect.decorate(n,a,s,t);else for(var c=n.length-1;c>=0;c--)(o=n[c])&&(e=(p<3?o(e):p>3?o(a,s,e):o(a,s))||e);return p>3&&e&&Object.defineProperty(a,s,e),e},p=this&&this.__metadata||function(n,a){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(n,a)};Object.defineProperty(a,"__esModule",{value:!0});var e=s(0),c=s(321),i=s(101),l=s(1634),u=s(1624),r=function(n){function a(a){var t=n.call(this,s(3452))||this;t.plunk={files:{"app.component.ts":t.snippets.raw.liveChartTs,"app.component.html":t.snippets.raw.liveChartHtml,"app.component.css":t.snippets.raw.liveChartCss},modules:[{library:"chart.js"},{imports:["ChartsModule"],library:"ng2-charts"},{imports:["ColorServiceModule"],library:"ux-aspects"}],mappings:[{alias:"chart.js",source:"https://unpkg.com/chart.js@2.5.0/dist/Chart.min.js"},{alias:"ng2-charts",source:"https://unpkg.com/ng2-charts@1.5.0/bundles/ng2-charts.umd.min.js"}]},t.lineChartLegend=!1,t.livedata=[];var o=a.getColor("grey6").toHex(),p=a.getColor("chart1").toRgb(),e=a.getColor("chart1").setAlpha(.1).toRgba();a.getColor("chart1").setAlpha(.06).toRgba(),a.getColor("chart1").setAlpha(.5).toRgba();return t.updateChartData(),t.lineChartOptions={maintainAspectRatio:!1,responsive:!0,animation:!1,elements:{line:{tension:0}},scales:{xAxes:[{type:"linear",position:"bottom",ticks:{min:0,max:299,step:50,fontSize:0},gridLines:{color:o}}],yAxes:[{ticks:{min:0,max:100,stepSize:25},gridLines:{color:o}}]},tooltips:{enabled:!1}},t.lineChartColors=[{borderColor:p,backgroundColor:e,pointBackgroundColor:"transparent",pointBorderColor:"transparent"}],setInterval(function(){t.updateChartData()},40),t}return t(a,n),a.prototype.updateChartData=function(){this.lineChartData=new Array,this.lineChartData.push({data:this.getRandomData(),borderWidth:1})},a.prototype.getRandomData=function(){for(this.livedata.length&&(this.livedata=this.livedata.slice(1));this.livedata.length<300;){var n=this.livedata.length?this.livedata[this.livedata.length-1]:50,a=n+10*Math.random()-5;this.livedata.push(a<0?0:a>100?100:a)}for(var s=[],t=0;t<this.livedata.length;++t)s.push({x:t,y:this.livedata[t]});return s},a}(u.BaseDocumentationSection);o([e.ViewChild(l.BaseChartDirective),p("design:type",l.BaseChartDirective)],r.prototype,"baseChart",void 0),r=o([e.Component({selector:"uxd-charts-live-chart",template:s(3456)}),c.DocumentationSectionComponent("ChartsLiveChartComponent"),p("design:paramtypes",[i.ColorService])],r),a.ChartsLiveChartComponent=r},3452:function(n,a,s){function t(n){return s(o(n))}function o(n){var a=p[n];if(!(a+1))throw new Error("Cannot find module '"+n+"'.");return a}var p={"./live-chart.css":3453,"./live-chart.html":3454,"./live-chart.ts":3455};t.keys=function(){return Object.keys(p)},t.resolve=o,n.exports=t,t.id=3452},3453:function(n,a){n.exports={snippet:'<span class="token selector">.demo-chart-container</span> <span class="token punctuation">{</span>\n    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>\n    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>\n    <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>',example:".demo-chart-container {\n    display: block;\n    position: relative;\n    height: 200px;\n}"}},3454:function(n,a){n.exports={snippet:'<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demo-chart-container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">baseChart</span> \n            <span class="token attr-name">[datasets]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lineChartData<span class="token punctuation">"</span></span>\n            <span class="token attr-name">[options]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lineChartOptions<span class="token punctuation">"</span></span>\n            <span class="token attr-name">[legend]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lineChartLegend<span class="token punctuation">"</span></span>\n            <span class="token attr-name">[colors]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lineChartColors<span class="token punctuation">"</span></span>\n            <span class="token attr-name">chartType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>line<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>',example:'<div class="demo-chart-container">\n\n    <canvas baseChart \n            [datasets]="lineChartData"\n            [options]="lineChartOptions"\n            [legend]="lineChartLegend"\n            [colors]="lineChartColors"\n            chartType="line">\n    </canvas>\n\n</div>'}},3455:function(n,a){n.exports={snippet:'<span class="token keyword">import</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span> ViewChild <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@angular/core\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ColorService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'ux-aspects\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> BaseChartDirective <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'ng2-charts\'</span><span class="token punctuation">;</span>\n\n@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    selector<span class="token punctuation">:</span> <span class="token string">\'app\'</span><span class="token punctuation">,</span>\n    templateUrl<span class="token punctuation">:</span> <span class="token string">\'./src/app.component.html\'</span><span class="token punctuation">,</span>\n    styleUrls<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'./src/app.component.css\'</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppComponent</span> <span class="token punctuation">{</span>\n\n    <span class="token comment" spellcheck="true">// access the chart directive properties</span>\n    @<span class="token function">ViewChild</span><span class="token punctuation">(</span>BaseChartDirective<span class="token punctuation">)</span> baseChart<span class="token punctuation">:</span> BaseChartDirective<span class="token punctuation">;</span>\n\n    <span class="token comment" spellcheck="true">// configure the directive data</span>\n    lineChartData<span class="token punctuation">:</span> Chart<span class="token punctuation">.</span>ChartDataSets<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    lineChartOptions<span class="token punctuation">:</span> Chart<span class="token punctuation">.</span>ChartOptions<span class="token punctuation">;</span>\n    lineChartLegend<span class="token punctuation">:</span> boolean <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    lineChartColors<span class="token punctuation">:</span> any<span class="token punctuation">;</span>\n\n    livedata<span class="token punctuation">:</span> number<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n    <span class="token function">constructor</span><span class="token punctuation">(</span>colorService<span class="token punctuation">:</span> ColorService<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n        <span class="token keyword">let</span> gridColor <span class="token operator">=</span> colorService<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token string">\'grey6\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> lineBorderColor <span class="token operator">=</span> colorService<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token string">\'chart1\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toRgb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> lineFillColor <span class="token operator">=</span> colorService<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token string">\'chart1\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAlpha</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toRgba</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> lineForecastFillColor <span class="token operator">=</span> colorService<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token string">\'chart1\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAlpha</span><span class="token punctuation">(</span><span class="token number">0.06</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toRgba</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> pointBorderColor <span class="token operator">=</span> colorService<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token string">\'chart1\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAlpha</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toRgba</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment" spellcheck="true">// set the initial chart data</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateChartData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">this</span><span class="token punctuation">.</span>lineChartOptions <span class="token operator">=</span> <span class="token punctuation">{</span>\n            maintainAspectRatio<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n            responsive<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n            animation<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n            elements<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                line<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                    tension<span class="token punctuation">:</span> <span class="token number">0</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            scales<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                xAxes<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n                    type<span class="token punctuation">:</span> <span class="token string">\'linear\'</span><span class="token punctuation">,</span>\n                    position<span class="token punctuation">:</span> <span class="token string">\'bottom\'</span><span class="token punctuation">,</span>\n                    ticks<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                        min<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n                        max<span class="token punctuation">:</span> <span class="token number">299</span><span class="token punctuation">,</span>\n                        step<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>\n                        fontSize<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">/* Hide Labels on X Axis */</span>\n                    <span class="token punctuation">}</span> <span class="token keyword">as</span> Chart<span class="token punctuation">.</span>LinearTickOptions<span class="token punctuation">,</span>\n                    gridLines<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                        color<span class="token punctuation">:</span> gridColor\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n                yAxes<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n                    ticks<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                        min<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n                        max<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>\n                        stepSize<span class="token punctuation">:</span> <span class="token number">25</span>\n                    <span class="token punctuation">}</span> <span class="token keyword">as</span> Chart<span class="token punctuation">.</span>LinearTickOptions<span class="token punctuation">,</span>\n                    gridLines<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                        color<span class="token punctuation">:</span> gridColor\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span><span class="token punctuation">]</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            tooltips<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                enabled<span class="token punctuation">:</span> <span class="token boolean">false</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">this</span><span class="token punctuation">.</span>lineChartColors <span class="token operator">=</span> <span class="token punctuation">[</span>\n            <span class="token punctuation">{</span>\n                borderColor<span class="token punctuation">:</span> lineBorderColor<span class="token punctuation">,</span>\n                backgroundColor<span class="token punctuation">:</span> lineFillColor<span class="token punctuation">,</span>\n                pointBackgroundColor<span class="token punctuation">:</span> <span class="token string">\'transparent\'</span><span class="token punctuation">,</span>\n                pointBorderColor<span class="token punctuation">:</span> <span class="token string">\'transparent\'</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n        <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n            <span class="token comment" spellcheck="true">// update chart data every 40ms</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateChartData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">updateChartData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n        <span class="token comment" spellcheck="true">// instatiate new array to trigger change detection</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>lineChartData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token operator">&lt;</span>Chart<span class="token punctuation">.</span>ChartDataSets<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">this</span><span class="token punctuation">.</span>lineChartData<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            data<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getRandomData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            borderWidth<span class="token punctuation">:</span> <span class="token number">1</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">getRandomData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> number<span class="token punctuation">,</span> y<span class="token punctuation">:</span> number<span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>livedata<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>livedata <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>livedata<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>livedata<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">let</span> previous <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>livedata<span class="token punctuation">.</span>length <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>livedata<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>livedata<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">;</span>\n            <span class="token keyword">let</span> y <span class="token operator">=</span> previous <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">;</span>\n\n            <span class="token keyword">this</span><span class="token punctuation">.</span>livedata<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>y <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token punctuation">:</span> y <span class="token operator">></span> <span class="token number">100</span> <span class="token operator">?</span> <span class="token number">100</span> <span class="token punctuation">:</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment" spellcheck="true">// zip the generated y values with the x values</span>\n        <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>livedata<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n                x<span class="token punctuation">:</span> i<span class="token punctuation">,</span>\n                y<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>livedata<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">return</span> res<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>',example:"import { Component, ViewChild } from '@angular/core';\nimport { ColorService } from 'ux-aspects';\nimport { BaseChartDirective } from 'ng2-charts';\n\n@Component({\n    selector: 'app',\n    templateUrl: './src/app.component.html',\n    styleUrls: ['./src/app.component.css']\n})\nexport class AppComponent {\n\n    // access the chart directive properties\n    @ViewChild(BaseChartDirective) baseChart: BaseChartDirective;\n\n    // configure the directive data\n    lineChartData: Chart.ChartDataSets[];\n    lineChartOptions: Chart.ChartOptions;\n    lineChartLegend: boolean = false;\n    lineChartColors: any;\n\n    livedata: number[] = [];\n\n    constructor(colorService: ColorService) {\n\n        let gridColor = colorService.getColor('grey6').toHex();\n        let lineBorderColor = colorService.getColor('chart1').toRgb();\n        let lineFillColor = colorService.getColor('chart1').setAlpha(0.1).toRgba();\n        let lineForecastFillColor = colorService.getColor('chart1').setAlpha(0.06).toRgba();\n        let pointBorderColor = colorService.getColor('chart1').setAlpha(0.5).toRgba();\n\n        // set the initial chart data\n        this.updateChartData();\n\n        this.lineChartOptions = {\n            maintainAspectRatio: false,\n            responsive: true,\n            animation: false,\n            elements: {\n                line: {\n                    tension: 0\n                }\n            },\n            scales: {\n                xAxes: [{\n                    type: 'linear',\n                    position: 'bottom',\n                    ticks: {\n                        min: 0,\n                        max: 299,\n                        step: 50,\n                        fontSize: 0 /* Hide Labels on X Axis */\n                    } as Chart.LinearTickOptions,\n                    gridLines: {\n                        color: gridColor\n                    }\n                }],\n                yAxes: [{\n                    ticks: {\n                        min: 0,\n                        max: 100,\n                        stepSize: 25\n                    } as Chart.LinearTickOptions,\n                    gridLines: {\n                        color: gridColor\n                    }\n                }]\n            },\n            tooltips: {\n                enabled: false\n            }\n        };\n\n        this.lineChartColors = [\n            {\n                borderColor: lineBorderColor,\n                backgroundColor: lineFillColor,\n                pointBackgroundColor: 'transparent',\n                pointBorderColor: 'transparent'\n            }\n        ];\n\n        setInterval(() => {\n            // update chart data every 40ms\n            this.updateChartData();\n        }, 40);\n    }\n\n    updateChartData() {\n\n        // instatiate new array to trigger change detection\n        this.lineChartData = new Array<Chart.ChartDataSets>();\n\n        this.lineChartData.push({\n            data: this.getRandomData(),\n            borderWidth: 1\n        });\n    }\n\n    getRandomData(): { x: number, y: number}[] {\n\n        if (this.livedata.length) {\n            this.livedata = this.livedata.slice(1);\n        }\n\n        while (this.livedata.length < 300) {\n            let previous = this.livedata.length ? this.livedata[this.livedata.length - 1] : 50;\n            let y = previous + Math.random() * 10 - 5;\n\n            this.livedata.push(y < 0 ? 0 : y > 100 ? 100 : y);\n        }\n\n        // zip the generated y values with the x values\n        let res = [];\n        for (let i = 0; i < this.livedata.length; ++i) {\n            res.push({\n                x: i,\n                y: this.livedata[i]\n            });\n        }\n\n        return res;\n    }\n\n}"}},3456:function(n,a){n.exports='<div class="demo-chart-container">\n\n    <canvas baseChart \n            [datasets]="lineChartData"\n            [options]="lineChartOptions"\n            [legend]="lineChartLegend"\n            [colors]="lineChartColors"\n            chartType="line">\n    </canvas>\n\n</div>\n\n<hr>\n\n<p>\n    Live Charts can be added using the <code>ng2-charts</code> library. \n    The <code>chart.js</code> library needs to be imported and the <code>ChartsModule</code> needs to be added to the appropriate NgModule.\n</p>\n\n<br>\n\n<p>The <code>baseChart</code> directive should be added to a <code>canvas</code> element and the following attributes can be used to customize the chart behavior and appearance:</p>\n\n\n<table class="table">\n\n    <thead>\n        <tr>\n            <th>Name</th>\n            <th>Type</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n\n    <tbody>\n\n        <tr>\n            <td><b>@Input</b> datasets</td>\n            <td><b>object[]</b></td>\n            <td>Contains the data and properties for each data set to be displayed in the chart.</td>\n        </tr>\n\n        <tr>\n            <td><b>@Input</b> chartType</td>\n            <td><b>string</b></td>\n            <td>Indicates the type of the chart. Possible options are: <code>line</code>, <code>bar</code>, <code>radar</code>, <code>pie</code>, <code>polarArea</code>, <code>doughnut</code></td>\n        </tr>\n\n        <tr>\n            <td><b>@Input</b> options</td>\n            <td><b>ChartOptions</b></td>\n            <td>Configures the appearance and behavior of all aspects of the chart.</td>\n        </tr>\n\n        <tr>\n            <td><b>@Input</b> colors</td>\n            <td><b>object[]</b></td>\n            <td>Configure the color values to be used within the chart.</td>\n        </tr>\n\n        <tr>\n            <td><b>@Input</b> legend</td>\n            <td><b>boolean</b></td>\n            <td>Determines whether or not the legend should be displayed.</td>\n        </tr>\n\n        <tr>\n            <td><b>@Output</b> chartClick</td>\n            <td></td>\n            <td>Fires when click on a chart has occurred, returns information regarding active points and labels</td>\n        </tr>\n\n        <tr>\n            <td><b>@Output</b> chartHover</td>\n            <td></td>\n            <td>Fires when mousemove (hover) on a chart has occurred, returns information regarding active points and labels.</td>\n        </tr>\n\n    </tbody>\n</table>\n\n<p>Complete documentation on the directive and chart options can be found at the documentation links below.</p>\n\n<p>The following code can be used to create the example above: </p>\n\n<tabset>\n\n    <tab heading="HTML">\n        <uxd-snippet language="html" [content]="snippets.compiled.liveChartHtml"></uxd-snippet>\n    </tab>\n    \n    <tab heading="TypeScript">\n        <uxd-snippet language="javascript" [content]="snippets.compiled.liveChartTs"></uxd-snippet>\n    </tab>\n    \n    <tab heading="CSS">\n        <uxd-snippet language="css"[content]="snippets.compiled.liveChartCss"></uxd-snippet>\n    </tab>\n\n</tabset>\n\n<br>\n\n<blockquote>\n\n    <p class="m-b-nil">\n        <b>Dependencies: </b>\n        <a class="hyperlink" href="https://www.npmjs.com/package/ng2-charts">ng2-charts</a>, \n        <a class="hyperlink" href="https://www.npmjs.com/package/chart.js">chart.js</a>\n    </p>\n\n    <p class="m-b-nil">\n        <b>Type Definitions: </b>\n        <a class="hyperlink" href="https://www.npmjs.com/package/@types/chart.js">@types/chart.js</a>\n    </p>\n\n    <p class="m-b-nil">\n        <b>Modules: </b>\n        <span>ChartsModule</span>\n    </p>\n\n\n    <p class="m-b-nil">\n        <b>Documentation: </b>\n        <a class="hyperlink" href="http://valor-software.com/ng2-charts/">Angular Directive Documentation</a>, \n        <a class="hyperlink" href="http://www.chartjs.org/docs/">Chart Library Documentation</a>\n    </p>\n</blockquote>'}});