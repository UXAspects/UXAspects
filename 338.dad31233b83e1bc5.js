(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[338],{52534:O=>{O.exports={snippet:'<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>component-list-container<span class="token punctuation">"</span></span> <span class="token attr-name">[formGroup]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>component-list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>component-list-component<span class="token punctuation">"</span></span>\n            <span class="token attr-name">[class.hoverable]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>items.length > 1<span class="token punctuation">"</span></span>\n            <span class="token attr-name">formArrayName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>items<span class="token punctuation">"</span></span>\n            <span class="token attr-name">*ngFor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>let item of items.controls; let idx = index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>component-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span>\n                    <span class="token attr-name">[focusIf]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>\n                    <span class="token attr-name">[formControlName]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>idx<span class="token punctuation">"</span></span>\n                    <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Enter text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>component-remove<span class="token punctuation">"</span></span>\n                    <span class="token attr-name">uxFocusIndicator</span>\n                    <span class="token attr-name">*ngIf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>items.controls.length > 1<span class="token punctuation">"</span></span>\n                    <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Remove field<span class="token punctuation">"</span></span>\n                    <span class="token attr-name">(click)</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>remove(idx)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ux-icon</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>close<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ux-icon</span><span class="token punctuation">></span></span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n\n\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span>\n        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>component-actions<span class="token punctuation">"</span></span>\n        <span class="token attr-name">[tabIndex]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form.invalid ? -1 : 0<span class="token punctuation">"</span></span>\n        <span class="token attr-name">[class.disabled]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form.invalid<span class="token punctuation">"</span></span>\n        <span class="token attr-name">(click)</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>component-add-btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ux-icon</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ux-icon</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>component-add-text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Add a field<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>',example:'<form class="component-list-container" [formGroup]="form">\n\n    <div class="component-list">\n\n        <div class="component-list-component"\n            [class.hoverable]="items.length > 1"\n            formArrayName="items"\n            *ngFor="let item of items.controls; let idx = index">\n\n            <div class="component-content">\n                <input class="form-control"\n                    [focusIf]="true"\n                    [formControlName]="idx"\n                    placeholder="Enter text">\n\n                <button class="component-remove"\n                    uxFocusIndicator\n                    *ngIf="items.controls.length > 1"\n                    aria-label="Remove field"\n                    (click)="remove(idx)">\n                    <ux-icon name="close"></ux-icon>\n                </button>\n            </div>\n\n\n        </div>\n    </div>\n\n    <button type="button"\n        class="component-actions"\n        [tabIndex]="form.invalid ? -1 : 0"\n        [class.disabled]="form.invalid"\n        (click)="add()">\n        <span class="component-add-btn">\n            <ux-icon name="add"></ux-icon>\n        </span>\n        <span class="component-add-text">Add a field</span>\n    </button>\n\n</form>'}},46498:O=>{O.exports={snippet:'<span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@angular/core\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> FormArray<span class="token punctuation">,</span> FormControl<span class="token punctuation">,</span> FormGroup<span class="token punctuation">,</span> Validators <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@angular/forms\'</span><span class="token punctuation">;</span>\n\n@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">selector</span><span class="token operator">:</span> <span class="token string">\'app-root\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">templateUrl</span><span class="token operator">:</span> <span class="token string">\'./app.component.html\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppComponent</span> <span class="token punctuation">{</span>\n\n    form <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormGroup</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">FormArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n            <span class="token keyword">new</span> <span class="token class-name">FormControl</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>Validators<span class="token punctuation">.</span>required<span class="token punctuation">]</span><span class="token punctuation">)</span>\n        <span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">get</span> <span class="token function">items</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> FormArray <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>form<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">\'items\'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> FormArray<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>form<span class="token punctuation">.</span>valid<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FormControl</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>Validators<span class="token punctuation">.</span>required<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">remove</span><span class="token punctuation">(</span>index<span class="token operator">:</span> number<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">removeAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n',example:"import { Component } from '@angular/core';\nimport { FormArray, FormControl, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html'\n})\nexport class AppComponent {\n\n    form = new FormGroup({\n        items: new FormArray([\n            new FormControl(null, [Validators.required])\n        ])\n    });\n\n    get items(): FormArray {\n        return this.form.get('items') as FormArray;\n    }\n\n    add(): void {\n        if (this.form.valid) {\n            this.items.push(new FormControl(null, [Validators.required]));\n        }\n    }\n\n    remove(index: number): void {\n        if (this.items.length > 1) {\n            this.items.removeAt(index);\n        }\n    }\n}\n"}},45939:(O,T,u)=>{var g={"./app.html":52534,"./app.ts":46498,"docs/app/pages/components/components-sections/component-list/component-list/snippets/app.html":52534,"docs/app/pages/components/components-sections/component-list/component-list/snippets/app.ts":46498};function i(y){var x=C(y);return u(x)}function C(y){if(!u.o(g,y)){var x=new Error("Cannot find module '"+y+"'");throw x.code="MODULE_NOT_FOUND",x}return g[y]}i.keys=function(){return Object.keys(g)},i.resolve=C,O.exports=i,i.id=45939},10338:(O,T,u)=>{"use strict";u.r(T),u.d(T,{ComponentsListModule:()=>B});var g=u(60177),i=u(18326),C=u(80120),y=u(51950),x=u(1718),V=u(11950),G=u(4564),J=u(49420),H=u(68381),z=u(34308),p=u(54438),L=u(78776),q=u(66187),A=u(31115),M=u(68389),P=u(54977),D=u(28227);function Y(b,j){if(1&b){const h=p.RV6();p.j41(0,"button",15),p.bIt("click",function(){p.eBV(h);const N=p.XpG().index,K=p.XpG();return p.Njj(K.remove(N))}),p.nrm(1,"ux-icon",16),p.k0s()}}function $(b,j){if(1&b&&(p.j41(0,"div",11)(1,"div",12),p.nrm(2,"input",13),p.DNE(3,Y,2,0,"button",14),p.k0s()()),2&b){const h=j.index,f=p.XpG();p.AVh("hoverable",f.items.length>1),p.R7$(2),p.Y8G("focusIf",!0)("formControlName",h),p.R7$(),p.Y8G("ngIf",f.items.controls.length>1)}}let I=class X extends H.j{get items(){return this.form.get("items")}constructor(){super(u(45939)),this.playground={files:{"app.component.html":this.snippets.raw.appHtml,"app.component.ts":this.snippets.raw.appTs},modules:[{imports:["FocusIfModule"],library:"@ux-aspects/ux-aspects"}]},this.form=new i.gE({items:new i.Yp([new i.MJ(null,[i.k0.required])])})}add(){this.form.valid&&this.items.push(new i.MJ(null,[i.k0.required]))}remove(j){this.items.length>1&&this.items.removeAt(j)}static#n=this.\u0275fac=function(h){return new(h||X)};static#t=this.\u0275cmp=p.VBU({type:X,selectors:[["uxd-component-list"]],features:[p.Vt3],decls:24,vars:8,consts:[[1,"component-list-container",3,"formGroup"],[1,"component-list"],["class","component-list-component","formArrayName","items",3,"hoverable",4,"ngFor","ngForOf"],["type","button","uxFocusIndicator","",1,"component-actions",3,"click","tabIndex"],[1,"component-add-btn"],["name","add"],[1,"component-add-text"],[3,"minimal"],["heading","HTML"],[3,"content"],["heading","TypeScript"],["formArrayName","items",1,"component-list-component"],[1,"component-content"],["placeholder","Enter text",1,"form-control",3,"focusIf","formControlName"],["class","component-remove","uxFocusIndicator","","aria-label","Remove field",3,"click",4,"ngIf"],["uxFocusIndicator","","aria-label","Remove field",1,"component-remove",3,"click"],["name","close"]],template:function(h,f){1&h&&(p.j41(0,"form",0)(1,"div",1),p.DNE(2,$,4,5,"div",2),p.k0s(),p.j41(3,"button",3),p.bIt("click",function(){return f.add()}),p.j41(4,"span",4),p.nrm(5,"ux-icon",5),p.k0s(),p.j41(6,"span",6),p.EFF(7,"Add a field"),p.k0s()()(),p.nrm(8,"hr"),p.j41(9,"p"),p.EFF(10," A component list can be used to dynamically add and remove components. It uses Angular's "),p.j41(11,"code"),p.EFF(12,"FormGroup"),p.k0s(),p.EFF(13," and "),p.j41(14,"code"),p.EFF(15,"FormArray"),p.k0s(),p.EFF(16," to store the fields and apply validation rules which can be used to determine whether or not we should be allowed to add additional fields.\n"),p.k0s(),p.j41(17,"p"),p.EFF(18," The following code can be used to create the example above:\n"),p.k0s(),p.j41(19,"ux-tabset",7)(20,"ux-tab",8),p.nrm(21,"uxd-snippet",9),p.k0s(),p.j41(22,"ux-tab",10),p.nrm(23,"uxd-snippet",9),p.k0s()()),2&h&&(p.Y8G("formGroup",f.form),p.R7$(2),p.Y8G("ngForOf",f.items.controls),p.R7$(),p.AVh("disabled",f.form.invalid),p.Y8G("tabIndex",f.form.invalid?-1:0),p.R7$(16),p.Y8G("minimal",!1),p.R7$(2),p.Y8G("content",f.snippets.compiled.appHtml),p.R7$(2),p.Y8G("content",f.snippets.compiled.appTs))},dependencies:[L.b,g.Sq,g.bT,q.N,A.J,i.qT,i.me,i.BC,i.cb,M.R,i.j4,i.JD,i.v8,P.f,D.j],encapsulation:2})};I=(0,J.Cg)([(0,z.zo)("ComponentsComponentListComponent")],I);const E=[I],U=[{path:"**",component:V.i,data:{category:G.a.resolveCategoryData(G.E.Components,"Component List")}}];let B=(()=>{class b{constructor(h,f){f.registerResolver(h,E)}static#n=this.\u0275fac=function(f){return new(f||b)(p.KVO(p.OM3),p.KVO(G.a))};static#t=this.\u0275mod=p.$C({type:b});static#a=this.\u0275inj=p.G2t({imports:[y.NhY,g.MD,x.f,y.aqz,i.YN,y.opy,i.X1,C.iI.forChild(U),y.w9h]})}return b})()},49420:(O,T,u)=>{"use strict";function x(n,t,s,a){var c,e=arguments.length,o=e<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,s):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(n,t,s,a);else for(var l=n.length-1;l>=0;l--)(c=n[l])&&(o=(e<3?c(o):e>3?c(t,s,o):c(t,s))||o);return e>3&&o&&Object.defineProperty(t,s,o),o}u.d(T,{Cg:()=>x}),"function"==typeof SuppressedError&&SuppressedError}}]);