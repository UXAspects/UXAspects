{"version":3,"sources":["ng://@ux-aspects/ux-aspects/components/breadcrumbs/breadcrumbs.component.ts","ng://@ux-aspects/ux-aspects/components/breadcrumbs/breadcrumbs.module.ts","ng://@ux-aspects/ux-aspects/directives/resize/resize.service.ts","ng://@ux-aspects/ux-aspects/directives/resize/resize.directive.ts","ng://@ux-aspects/ux-aspects/directives/resize/resize.module.ts","ng://@ux-aspects/ux-aspects/components/card-tabs/card-tab/card-tab-content.directive.ts","null","ng://@ux-aspects/ux-aspects/components/card-tabs/card-tabs.service.ts","ng://@ux-aspects/ux-aspects/components/card-tabs/card-tab/card-tab.component.ts","ng://@ux-aspects/ux-aspects/components/card-tabs/card-tabset/card-tabset.component.ts","ng://@ux-aspects/ux-aspects/components/card-tabs/card-tabs.module.ts","ng://@ux-aspects/ux-aspects/components/checkbox/checkbox.component.ts","ng://@ux-aspects/ux-aspects/components/checkbox/checkbox.module.ts","ng://@ux-aspects/ux-aspects/components/column-sorting/column-sorting.component.ts","ng://@ux-aspects/ux-aspects/components/column-sorting/column-sorting.directive.ts","ng://@ux-aspects/ux-aspects/components/column-sorting/column-sorting.module.ts","ng://@ux-aspects/ux-aspects/components/dashboard/dashboard.service.ts","ng://@ux-aspects/ux-aspects/components/dashboard/dashboard.component.ts","ng://@ux-aspects/ux-aspects/components/dashboard/widget/dashboard-widget.component.ts","ng://@ux-aspects/ux-aspects/directives/drag/drag.directive.ts","ng://@ux-aspects/ux-aspects/components/dashboard/drag-handle/drag-handle.directive.ts","ng://@ux-aspects/ux-aspects/directives/drag/drag.module.ts","ng://@ux-aspects/ux-aspects/components/dashboard/dashboard.module.ts","ng://@ux-aspects/ux-aspects/components/spin-button/spin-button.component.ts","ng://@ux-aspects/ux-aspects/components/spin-button/spin-button.module.ts","ng://@ux-aspects/ux-aspects/components/time-picker/time-format.pipe.ts","ng://@ux-aspects/ux-aspects/components/time-picker/time-picker.component.ts","ng://@ux-aspects/ux-aspects/components/time-picker/time-picker.module.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/date-time-picker.utils.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/date-time-picker.config.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/date-time-picker.service.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/date-time-picker.component.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/day-view/day-view.service.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/day-view/day-view.component.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/header/header.component.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/month-view/month-view.service.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/month-view/month-view.component.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/time-view/time-view.component.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/year-view/year-view.service.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/year-view/year-view.component.ts","ng://@ux-aspects/ux-aspects/directives/focus-if/focus-if.directive.ts","ng://@ux-aspects/ux-aspects/directives/focus-if/focus-if.module.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/date-time-picker.module.ts","ng://@ux-aspects/ux-aspects/components/ebox/ebox.component.ts","ng://@ux-aspects/ux-aspects/components/ebox/ebox.module.ts","ng://@ux-aspects/ux-aspects/components/facets/facet-events.ts","ng://@ux-aspects/ux-aspects/components/facets/facet-container.component.ts","ng://@ux-aspects/ux-aspects/components/facets/base/facet-base/facet-base.component.ts","ng://@ux-aspects/ux-aspects/components/facets/base/facet-header/facet-header.component.ts","ng://@ux-aspects/ux-aspects/components/facets/facet-check-list/facet-check-list.component.ts","ng://@ux-aspects/ux-aspects/components/facets/facet-typeahead-list/facet-typeahead-list.component.ts","ng://@ux-aspects/ux-aspects/components/tooltip/tooltip.component.ts","ng://@ux-aspects/ux-aspects/components/tooltip/tooltip.service.ts","ng://@ux-aspects/ux-aspects/components/tooltip/tooltip.directive.ts","ng://@ux-aspects/ux-aspects/components/tooltip/tooltip.module.ts","ng://@ux-aspects/ux-aspects/directives/reorderable/reorderable-handle.directive.ts","ng://@ux-aspects/ux-aspects/directives/reorderable/reorderable-model.directive.ts","ng://@ux-aspects/ux-aspects/directives/reorderable/dragula.ts","ng://@ux-aspects/ux-aspects/directives/reorderable/reorderable.service.ts","ng://@ux-aspects/ux-aspects/directives/reorderable/reorderable.directive.ts","ng://@ux-aspects/ux-aspects/directives/reorderable/reorderable.module.ts","ng://@ux-aspects/ux-aspects/components/facets/facets.module.ts","ng://@ux-aspects/ux-aspects/components/facets/models/facet.ts","ng://@ux-aspects/ux-aspects/components/filters/filter-container.component.ts","ng://@ux-aspects/ux-aspects/components/filters/filter-base/filter-base.component.ts","ng://@ux-aspects/ux-aspects/components/filters/filter-dropdown/filter-dropdown.component.ts","ng://@ux-aspects/ux-aspects/components/filters/filter-dynamic/filter-dynamic.component.ts","ng://@ux-aspects/ux-aspects/components/filters/filter.module.ts","ng://@ux-aspects/ux-aspects/components/flippable-card/flippable-card.component.ts","ng://@ux-aspects/ux-aspects/components/flippable-card/flippable-card.module.ts","ng://@ux-aspects/ux-aspects/components/floating-action-buttons/floating-action-buttons.service.ts","ng://@ux-aspects/ux-aspects/components/floating-action-buttons/floating-action-buttons.component.ts","ng://@ux-aspects/ux-aspects/components/floating-action-buttons/floating-action-button.component.ts","ng://@ux-aspects/ux-aspects/components/floating-action-buttons/floating-action-buttons.module.ts","ng://@ux-aspects/ux-aspects/components/hierarchy-bar/hierarchy-bar.service.ts","ng://@ux-aspects/ux-aspects/components/hierarchy-bar/hierarchy-bar.component.ts","ng://@ux-aspects/ux-aspects/directives/click-outside/click-outside.directive.ts","ng://@ux-aspects/ux-aspects/directives/click-outside/click-outside.module.ts","ng://@ux-aspects/ux-aspects/components/popover/popover.component.ts","ng://@ux-aspects/ux-aspects/components/popover/popover.directive.ts","ng://@ux-aspects/ux-aspects/components/popover/popover.module.ts","ng://@ux-aspects/ux-aspects/components/hierarchy-bar/hierarchy-bar.module.ts","ng://@ux-aspects/ux-aspects/components/side-panel/side-panel.service.ts","ng://@ux-aspects/ux-aspects/components/side-panel/side-panel.component.ts","ng://@ux-aspects/ux-aspects/components/item-display-panel/item-display-panel.component.ts","ng://@ux-aspects/ux-aspects/components/item-display-panel/item-display-panel.module.ts","ng://@ux-aspects/ux-aspects/components/wizard/wizard-step.component.ts","ng://@ux-aspects/ux-aspects/components/wizard/wizard.component.ts","ng://@ux-aspects/ux-aspects/components/wizard/wizard.module.ts","ng://@ux-aspects/ux-aspects/components/marquee-wizard/marquee-wizard.service.ts","ng://@ux-aspects/ux-aspects/components/marquee-wizard/marquee-wizard-step.component.ts","ng://@ux-aspects/ux-aspects/components/marquee-wizard/marquee-wizard.component.ts","ng://@ux-aspects/ux-aspects/components/marquee-wizard/marquee-wizard.module.ts","ng://@ux-aspects/ux-aspects/components/navigation/navigation.component.ts","ng://@ux-aspects/ux-aspects/components/navigation/navigation-item/navigation-item.component.ts","ng://@ux-aspects/ux-aspects/components/navigation/navigation.module.ts","ng://@ux-aspects/ux-aspects/services/color/color.service.ts","ng://@ux-aspects/ux-aspects/services/color/color.module.ts","ng://@ux-aspects/ux-aspects/components/notification/notification.service.ts","ng://@ux-aspects/ux-aspects/components/notification/notification-list.component.ts","ng://@ux-aspects/ux-aspects/components/notification/notification.module.ts","ng://@ux-aspects/ux-aspects/components/number-picker/number-picker.component.ts","ng://@ux-aspects/ux-aspects/components/number-picker/number-picker.module.ts","ng://@ux-aspects/ux-aspects/components/page-header/custom-menu/custom-menu.directive.ts","ng://@ux-aspects/ux-aspects/components/page-header/page-header.service.ts","ng://@ux-aspects/ux-aspects/components/page-header/page-header.component.ts","ng://@ux-aspects/ux-aspects/components/page-header/icon-menu/icon-menu.component.ts","ng://@ux-aspects/ux-aspects/components/page-header/navigation/navigation-dropdown-item/navigation-dropdown-item.component.ts","ng://@ux-aspects/ux-aspects/components/page-header/navigation/navigation-item/navigation-item.component.ts","ng://@ux-aspects/ux-aspects/components/page-header/navigation/navigation.component.ts","ng://@ux-aspects/ux-aspects/directives/menu-navigation/menu-navigation.service.ts","ng://@ux-aspects/ux-aspects/directives/menu-navigation/menu-navigation-item.directive.ts","ng://@ux-aspects/ux-aspects/directives/menu-navigation/menu-navigation.directive.ts","ng://@ux-aspects/ux-aspects/directives/menu-navigation/menu-navigation-toggle.directive.ts","ng://@ux-aspects/ux-aspects/directives/menu-navigation/menu-navigation.module.ts","ng://@ux-aspects/ux-aspects/components/page-header/page-header.module.ts","ng://@ux-aspects/ux-aspects/components/progress-bar/progress-bar.component.ts","ng://@ux-aspects/ux-aspects/components/progress-bar/progress-bar.module.ts","ng://@ux-aspects/ux-aspects/components/radiobutton/radiobutton.component.ts","ng://@ux-aspects/ux-aspects/components/radiobutton/radiobutton.module.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-builder.service.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-builder-group/search-builder-group.service.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-builder-group/search-builder-group.component.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-builder-outlet/search-builder-outlet.directive.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-components/base-search.component.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-components/text/text.component.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-components/date/date.component.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-components/date-range/date-range.component.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-components/select/select.component.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-builder.component.ts","ng://@ux-aspects/ux-aspects/components/typeahead/typeahead-event.ts","ng://@ux-aspects/ux-aspects/components/typeahead/typeahead-key.service.ts","ng://@ux-aspects/ux-aspects/components/typeahead/typeahead.service.ts","ng://@ux-aspects/ux-aspects/components/typeahead/typeahead.component.ts","ng://@ux-aspects/ux-aspects/directives/infinite-scroll/infinite-scroll-load-button.directive.ts","ng://@ux-aspects/ux-aspects/directives/infinite-scroll/infinite-scroll-loading.directive.ts","ng://@ux-aspects/ux-aspects/directives/infinite-scroll/infinite-scroll.directive.ts","ng://@ux-aspects/ux-aspects/directives/infinite-scroll/infinite-scroll.module.ts","ng://@ux-aspects/ux-aspects/directives/scroll/scroll-into-view.service.ts","ng://@ux-aspects/ux-aspects/directives/scroll/scroll-into-view-if.directive.ts","ng://@ux-aspects/ux-aspects/directives/scroll/scroll-into-view.directive.ts","ng://@ux-aspects/ux-aspects/directives/scroll/scroll.module.ts","ng://@ux-aspects/ux-aspects/components/typeahead/typeahead-highlight.directive.ts","ng://@ux-aspects/ux-aspects/components/typeahead/typeahead.module.ts","ng://@ux-aspects/ux-aspects/components/select/select.component.ts","ng://@ux-aspects/ux-aspects/components/tag-input/tag-input-event.ts","ng://@ux-aspects/ux-aspects/components/tag-input/tag-input.component.ts","ng://@ux-aspects/ux-aspects/components/tag-input/tag-input.module.ts","ng://@ux-aspects/ux-aspects/components/select/select.module.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-builder.module.ts","ng://@ux-aspects/ux-aspects/components/side-panel/side-panel-close.directive.ts","ng://@ux-aspects/ux-aspects/components/side-panel/side-panel.module.ts","ng://@ux-aspects/ux-aspects/components/slider/slider.component.ts","ng://@ux-aspects/ux-aspects/components/slider/slider.module.ts","ng://@ux-aspects/ux-aspects/components/spark/spark.component.ts","ng://@ux-aspects/ux-aspects/components/spark/spark.module.ts","ng://@ux-aspects/ux-aspects/components/tabset/tabset.service.ts","ng://@ux-aspects/ux-aspects/components/tabset/tabset.component.ts","ng://@ux-aspects/ux-aspects/components/tabset/tab/tab.component.ts","ng://@ux-aspects/ux-aspects/components/tabset/tab/tab-heading.directive.ts","ng://@ux-aspects/ux-aspects/components/tabset/tab/tab-focus.directive.ts","ng://@ux-aspects/ux-aspects/components/tabset/tabset.module.ts","ng://@ux-aspects/ux-aspects/components/timeline/timeline.component.ts","ng://@ux-aspects/ux-aspects/components/timeline/timeline-event/timeline-event.component.ts","ng://@ux-aspects/ux-aspects/components/timeline/timeline.module.ts","ng://@ux-aspects/ux-aspects/components/toggleswitch/toggleswitch.component.ts","ng://@ux-aspects/ux-aspects/components/toggleswitch/toggleswitch.module.ts","ng://@ux-aspects/ux-aspects/components/toolbar-search/toolbar-search-button.directive.ts","ng://@ux-aspects/ux-aspects/components/toolbar-search/toolbar-search-field.directive.ts","ng://@ux-aspects/ux-aspects/components/toolbar-search/toolbar-search.component.ts","ng://@ux-aspects/ux-aspects/components/toolbar-search/toolbar-search.module.ts","ng://@ux-aspects/ux-aspects/services/audio/audio.service.ts","ng://@ux-aspects/ux-aspects/services/audio/audio.module.ts","ng://@ux-aspects/ux-aspects/services/frame-extraction/frame-extraction.service.ts","ng://@ux-aspects/ux-aspects/services/frame-extraction/frame-extraction.module.ts","ng://@ux-aspects/ux-aspects/components/media-player/media-player.service.ts","ng://@ux-aspects/ux-aspects/components/media-player/media-player.component.ts","ng://@ux-aspects/ux-aspects/components/media-player/extensions/base-extension.directive.ts","ng://@ux-aspects/ux-aspects/components/media-player/extensions/timeline/timeline.component.ts","ng://@ux-aspects/ux-aspects/components/media-player/extensions/controls/controls.component.ts","ng://@ux-aspects/ux-aspects/pipes/duration/duration.pipe.ts","ng://@ux-aspects/ux-aspects/pipes/duration/duration.module.ts","ng://@ux-aspects/ux-aspects/pipes/file-size/file-size.pipe.ts","ng://@ux-aspects/ux-aspects/pipes/file-size/file-size.module.ts","ng://@ux-aspects/ux-aspects/components/media-player/media-player.module.ts","ng://@ux-aspects/ux-aspects/components/virtual-scroll/directives/virtual-scroll-loading.directive.ts","ng://@ux-aspects/ux-aspects/components/virtual-scroll/directives/virtual-scroll-load-button.directive.ts","ng://@ux-aspects/ux-aspects/components/virtual-scroll/directives/virtual-scroll-cell.directive.ts","ng://@ux-aspects/ux-aspects/components/virtual-scroll/virtual-scroll.component.ts","ng://@ux-aspects/ux-aspects/components/virtual-scroll/virtual-scroll.module.ts","ng://@ux-aspects/ux-aspects/directives/auto-grow/auto-grow.directive.ts","ng://@ux-aspects/ux-aspects/directives/auto-grow/auto-grow.module.ts","ng://@ux-aspects/ux-aspects/directives/fixed-header-table/fixed-header-table.directive.ts","ng://@ux-aspects/ux-aspects/directives/fixed-header-table/fixed-header-table.module.ts","ng://@ux-aspects/ux-aspects/directives/float-label/float-label.directive.ts","ng://@ux-aspects/ux-aspects/directives/float-label/float-label.module.ts","ng://@ux-aspects/ux-aspects/directives/help-center/help-center.service.ts","ng://@ux-aspects/ux-aspects/directives/help-center/help-center-item.directive.ts","ng://@ux-aspects/ux-aspects/directives/help-center/help-center.module.ts","ng://@ux-aspects/ux-aspects/directives/hover-action/hover-action.service.ts","ng://@ux-aspects/ux-aspects/directives/hover-action/hover-action-container.directive.ts","ng://@ux-aspects/ux-aspects/directives/hover-action/hover-action.directive.ts","ng://@ux-aspects/ux-aspects/directives/hover-action/hover-action.module.ts","ng://@ux-aspects/ux-aspects/directives/layout-switcher/layout-switcher-item.directive.ts","ng://@ux-aspects/ux-aspects/directives/layout-switcher/layout-switcher.directive.ts","ng://@ux-aspects/ux-aspects/directives/layout-switcher/layout-switcher.module.ts","ng://@ux-aspects/ux-aspects/directives/selection/strategies/selection.strategy.ts","ng://@ux-aspects/ux-aspects/directives/selection/strategies/row-selection.strategy.ts","ng://@ux-aspects/ux-aspects/directives/selection/strategies/simple-selection.strategy.ts","ng://@ux-aspects/ux-aspects/directives/selection/selection.service.ts","ng://@ux-aspects/ux-aspects/directives/selection/selection-item.directive.ts","ng://@ux-aspects/ux-aspects/directives/selection/selection.directive.ts","ng://@ux-aspects/ux-aspects/directives/selection/selection.module.ts","ng://@ux-aspects/ux-aspects/pipes/string-filter/string-filter.pipe.ts","ng://@ux-aspects/ux-aspects/pipes/string-filter/string-filter.module.ts","ng://@ux-aspects/ux-aspects/services/persistent-data/adapters/cookie-adapter.ts","ng://@ux-aspects/ux-aspects/services/persistent-data/adapters/local-storage-adapter.ts","ng://@ux-aspects/ux-aspects/services/persistent-data/adapters/session-storage-adapter.ts","ng://@ux-aspects/ux-aspects/services/persistent-data/persistent-data.service.ts","ng://@ux-aspects/ux-aspects/services/persistent-data/persistent-data.module.ts","ng://@ux-aspects/ux-aspects/services/persistent-data/adapters/storage-adapter.ts","ng://@ux-aspects/ux-aspects/hybrid/components/contacts/contacts.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/expand-input/expand-input.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/floating-action-button/floating-action-button.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/flot/flot.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/grid/grid.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/hierarchy-bar/hierarchy-bar.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/marquee-wizard/marquee-wizard.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/nested-donut/nested-donut.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/organization-chart/organization-chart.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/partition-map/partition-map.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/peity-chart/peity-bar-chart.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/peity-chart/peity-line-chart.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/peity-chart/peity-pie-chart.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/peity-chart/peity-updating-line-chart.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/sankey-chart/sankey.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/search-toolbar/search-toolbar.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/select-table/select-table.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/slider-chart/slider-chart.directive.ts","ng://@ux-aspects/ux-aspects/hybrid/components/social-chart/social-chart.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/sort-direction-toggle/sort-direction-toggle.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/tree-grid/tree-grid.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/thumbnail/thumbnail.component.ts","ng://@ux-aspects/ux-aspects/hybrid/services/navigation-menu/navigation-menu.service.ts","ng://@ux-aspects/ux-aspects/hybrid/services/pdf/pdf.service.ts","ng://@ux-aspects/ux-aspects/hybrid/services/time-ago/time-ago.service.ts","ng://@ux-aspects/ux-aspects/hybrid/hybrid.module.ts"],"names":["BreadcrumbsComponent","prototype","clickCrumb","event","crumb","onClick","call","Component","args","selector","template","Input","BreadcrumbsModule","NgModule","imports","CommonModule","RouterModule","exports","declarations","ResizeService","rendererFactory","_ngZone","this","Subscription","_renderer","createRenderer","ngOnDestroy","_subscription","unsubscribe","addResizeListener","nativeElement","_this","subject","BehaviorSubject","width","offsetWidth","height","offsetHeight","displayMode","window","getComputedStyle","getPropertyValue","iframe","createElement","setStyle","setAttribute","appendChild","waitUntilReady","iframeDoc","contentDocument","contentWindow","attachListener","add","fromEvent","subscribe","run","next","readyState","addEventListener","callback","setTimeout","Injectable","RendererFactory2","NgZone","ResizeDirective","_elementRef","_resizeService","EventEmitter","ngOnInit","pipe","debounceTime","throttle","uxResize","emit","Directive","providers","ElementRef","Output","ResizeModule","CardTabContentDirective","extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__extends","__","constructor","create","__assign","assign","t","s","i","n","arguments","length","__values","o","m","Symbol","iterator","value","done","__read","r","e","ar","push","error","__spread","concat","CardTabsService","tabs$","filter","tabs","tab$","find","tab","addTab","removeTab","_tab","select","setPosition","position","position$","CardTabComponent","_tabService","map","changeDetection","ChangeDetectionStrategy","OnPush","ContentChild","read","TemplateRef","CardTabsetComponent","tabService","lower","upper","getValue","direction","element","moveIntoView","resize","dimensions","_width","_innerWidth","tablist","scrollWidth","bounds","previous","offset","Math","min","max","offsetLeft","_a","marginLeft","marginRight","viewportStart","abs","viewportEnd","cardWidth","parseFloat","HostBinding","type","ViewChild","CardTabsModule","CHECKBOX_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","CheckboxComponent","multi","uniqueCheckboxId","_checkboxId","_value","indeterminate","indeterminateValue","ariaChecked","valueChange","onChangeCallback","onTouchedCallback","defineProperty","id","toggle","disabled","clickable","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","CheckboxModule","FormsModule","ColumnSortingComponent","ColumnSortingState","initParent","parent","_parent","events","idx","findIndex","column","key","state","NoSort","orderNumber","stateChange","changeState","Ascending","Descending","toggleColumn","exportAs","ColumnSortingDirective","Subject","ngAfterViewInit","components","forEach","component","singleSort","order","splice","ContentChildren","ColumnSortingModule","DashboardService","defaultOptions","dimensions$","delay","distinctUntilChanged","visible","x","y","layout$","setLayoutData","bind","stacked$","stacked","updateWhenStacked","widgets$","renderDashboard","options$","options","columns","addWidget","widget","removeWidget","_widget","setDimensions","getLayoutData","widgets","col","getColumn","row","getRow","colSpan","getColumnSpan","rowSpan","getRowSpan","target","setColumn","setRow","setColumnSpan","setRowSpan","_rowHeight","rowHeight","columnWidth","minWidth","setDashboardLayout","_actionWidget","render","undefined","setWidgetPosition","setDashboardHeight","getWidgetsByOrder","sort","w1","w2","w1Position","w2Position","success","floor","getPositionAvailable","Error","columnSpan","ignoreWidget","spaces","getOccupiedSpaces","block","reduce","forEachBlock","onResizeStart","action","_mouseEvent","bringToFront","onResizeDrag","mousePosX","pageX","pageXOffset","mousePosY","pageY","pageYOffset","handle","getBoundingClientRect","mouseX","left","mouseY","top","ActionDirection","Right","Left","difference","Bottom","Top","minHeight","TopLeft","TopRight","BottomLeft","BottomRight","currentWidth","currentHeight","setBounds","setPlaceholderBounds","updateWidgetPositions","onResizeEnd","placeholder","placeholder$","commitWidgetChanges","shiftWidgetsUp","onDragStart","setWidgetOrigin","cacheWidgets","onDragEnd","_widgetOrigin","onDrag","restoreWidgets","shiftWidgets","getRowHeight","_cache","ignoreActionWidget","match","wgt","widgetsToMove","this_1","space","array","indexOf","unmovedWidgets","slice","grid","getRequiredSpacesFromPoint","every","gridSpace","getColumnCount","canWidgetMoveRight","validatePlaceholderPosition","canWidgetMoveLeft","distance","moveWidgetDown","shiftDirection","getWidgetsAtPosition","getColumnWidth","performMove","targetSpaces","moveable","ignoreResizing","Rounding","RoundDownBelowHalf","RoundUpOverHalf","getPlaceholderColumn","getPlaceholderRow","getPlaceholderColumnSpan","getPlaceholderRowSpan","rowCount","padding","getColumnFromPx","Move","RoundDown","upperLimit","overflow","getRowFromPx","ceil","rounding","half","RoundUp","getRowCount","emptyRow","sendToBack","stable","DashboardComponent","dashboardService","layout","layoutChange","dashboardElement","onResize","DashboardWidgetComponent","regular","update","_columnSpan","_rowSpan","console","warn","random","toString","getStackableValue","_column","_row","setStackableValue","zIndex","dragstart","drag","dragend","property","DragDirective","elementRef","ngZone","mousedown$","mousemove$","document","mouseup$","preventDefault","takeUntil","moveevent","DashboardDragHandleDirective","_super","tslib_1.__extends","DragModule","DECLARATIONS","SPIN_BUTTON_VALUE_ACCESSOR","SpinButtonComponent","scroll","scrolling","deltaY","triggerDecrement","triggerIncrement","increment","decrement","encapsulation","ViewEncapsulation","None","SpinButtonModule","TimeFormatPipe","transform","Pipe","name","TIME_PICKER_VALUE_ACCESSOR","TimePickerComponent","Date","value$","date","getHours","hour","showMeridian","getMeridianTime","getMinutes","getSeconds","meridians","checkValidity","valid$","valid","isValid","setHour","setHours","setMinute","minute","setMinutes","setSeconds","seconds","incrementHour","arrowkey","arrowkeys","hourStep","decrementHour","incrementMinute","minuteStep","decrementMinute","incrementSecond","secondStep","decrementSecond","selectMeridian","meridian","_meridian","getTime","hourChange","parseInt","currentHour","isNaN","minuteChange","currentMinute","secondChange","second","currentSecond","host","aria-label","TimePickerModule","gridify","items","range","start","end","list","compareDays","day1","day2","getDate","getMonth","getFullYear","dateComparator","dateOne","dateTwo","timezoneComparator","zoneOne","zoneTwo","months","monthsShort","month","substring","weekdaysShort","weekday","DateTimePickerService","_config","DatePickerMode","Day","getCurrentTimezone","showDate","showTime","showTimezone","showSeconds","showSpinners","weekdays","nowBtnText","timezones","ModeDirection","selected$","setViewportMonth","setViewportYear","date$","month$","year$","year","setDate","day","setMonth","setFullYear","setDateToNow","setViewportMode","mode","mode$","goToChildMode","modeDirection","Descend","Year","Month","goToParentMode","Ascend","goToNext","headerEvent$","DatePickerHeaderEvent","Next","goToPrevious","Previous","setHeader","header","header$","getTimezoneOffset","timezone","setTimezone","timezone$","DateTimePickerConfig","DateTimePickerComponent","datepicker","dateChange","timezoneChange","showDate$","showTime$","showTimezone$","showSeconds$","showMeridian$","showSpinners$","weekdays$","nowBtnText$","timezones$","setToNow","DayViewService","_datepicker","combineLatest","_b","createDayGrid","setFocus","focused$","getDay","dates","dateRange","isToday","isActive","isCurrentMonth","grid$","selectedDay","first","DayViewComponent","datePicker","dayService","trackWeekByFn","index","trackDayByFn","item","focusDate","dayOffset","getTabbable","focused","_item","HeaderComponent","ascend","MonthViewService","createMonthGrid","currentMonth","currentYear","activeMonth","activeYear","isActiveMonth","selectedMonth","MonthViewComponent","_datePicker","monthService","focusMonth","monthOffset","targetMonth","targetYear","trackRowByFn","trackMonthByFn","TimeViewComponent","selectTimezone","_timezone","incrementTimezone","currentZone","zone","decrementTimezone","YearViewService","_year","createYearGrid","_event","goToNextDecade","goToPreviousDecade","decade","getDecade","isCurrentYear","isActiveYear","YearViewComponent","yearService","focusYear","yearOffset","trackYearByFn","FocusIfDirective","focus","_timeout","clearTimeout","focusIfDelay","FocusIfModule","DateTimePickerModule","EboxComponent","EboxModule","EboxContentDirective","EboxHeaderDirective","FacetSelect","facet","FacetDeselect","FacetDeselectAll","FacetContainerComponent","selectFacet","facets","facetsChange","triggerEvent","deselectFacet","selectedFacet","deselectAllFacets","FacetBaseComponent","facetContainer","selected","_onDestroy","_","deselectAll","complete","selectedChange","toggleFacetSelection","isFacetSelected","decorators","Host","FacetHeaderComponent","toggleExpand","canExpand","expanded","expandedChange","tabindex","(click)","(keyup.enter)","maxResults","minCharacters","FacetTypeaheadListComponent","prop","Observable","typeaheadOptions","from","title","toUpperCase","includes","searchQuery","of","_defaultTypeaheadConfig","typeaheadConfig","selectOption","typeaheadOption","scrollToFocused","dropdown","_nativeElement","querySelector","activeElement","elementBounds","dropdownBounds","scrollTop","bottom","FacetTypeaheadHighlight","regex","RegExp","replace","uniqueTooltipId","TooltipComponent","_changeDetectorRef","reposition$","reposition","setContent","content","isTemplateRef","markForCheck","setPlacement","placement","setClass","customClass","setContext","context","setRole","role","ChangeDetectorRef","TooltipService","TooltipDirective","_viewContainerRef","_overlay","_scrollDispatcher","_tooltipService","onMouseEnter","onMouseLeave","onFocus","onBlur","shown$","_type","tooltip","_instance","hide","isOpen","show","ngOnChanges","changes","firstChange","currentValue","isVisible","destroyOverlay","_overlayRef","dispose","_showTimeoutId","overlayRef","createOverlay","_portal","createPortal","createInstance","shown","isOpenChange","detectChanges","hasAttached","detach","setAriaDescribedBy","hidden","updatePosition","instance","attach","ComponentPortal","strategy","connectedTo","getOrigin","getOverlayPosition","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionStrategy","panelClass","scrollStrategy","scrollStrategies","scrollThrottle","hasBackdrop","originX","originY","overlayX","overlayY","isArray","showTriggers","hideTriggers","isFocused","removeAttribute","ViewContainerRef","Overlay","ScrollDispatcher","Renderer2","TooltipModule","OverlayModule","ObserversModule","entryComponents","ReorderableHandleDirective","ReorderableModelDirective","global","dragula","((dragulaNamespace)).default","dragulaNamespace","ReorderableService","getUniqueGroupName","_uniqueGroupId","register","groupName","container","_groups","ReorderableGroup","unregister","group","isEmpty","destroy","initialize","getGroup","moves","canMove","_containers","getModelForElement","tslib_1.__values","model","getModelFromElement","containers","c","mirrorContainer","on","source","dragEnd","sibling","drop","cancel","clone","cloned","containerElement","isSameNode","ReorderableDirective","_service","reorderableGroup","_container","_subscriptions","onDrop","reorderCancel","onClone","dragging","reorderStart","reorderableModel","changed","classList","contains","reorderableModelChange","models","_model","uxReorderableModel","removeClass","reorderEnd","setTableCellWidths","captureCanvases","addClass","reorderingDisabled","handles","_handle","tagName","sourceCells","children","targetCells","cell","style","sourceCanvases","querySelectorAll","canvas","getContext","drawImage","descendants","ReorderableModule","FacetCheckListComponent","TypeaheadModule","forRoot","Facet","data","count","FilterContainerComponent","addFilter","filters","FilterAddEvent","filtersChange","removeFilter","FilterRemoveEvent","removeAll","FilterRemoveAllEvent","FilterBaseComponent","filtersContainer","_filter","initial","FilterDropdownComponent","selectFilter","FilterDynamicComponent","getItems","typeaheadItems","maxIndividualItems","showTypeahead","clickOff","hideDropdown","nodeName","parentElement","(document:click)","BsDropdownDirective","BsDropdownModule","FlippableCardComponent","setFlipped","flipped","flippedChange","toggleFlipped","clickTrigger","trigger","hoverEnter","hoverExit","[class.horizontal]","[class.vertical]","HostListener","FlippableCardModule","FlippableCardBackDirective","FlippableCardFrontDirective","FloatingActionButtonsService","open","open$","close","FloatingActionButtonsComponent","fab","tooltips","preserveWhitespaces","animations","transition","query","opacity","stagger","animate","FloatingActionButtonComponent","primary","Attribute","FloatingActionButtonsModule","HierarchyBarService","setRootNode","root","_root","_nodes","getNodeList","nodes$","getSelectedChildren","selectNode","node","getChildren","loading","children$","observer","child","nodes","current","_child","HierarchyBarComponent","hierarchyBar","scrollIntoView","nodelist","overflow$","overflowAmount_1","overflowNodes$","scrollLeft","viewProviders","ViewChildren","ClickOutsideDirective","click","uxClickOutside","ClickOutsideModule","uniquePopoverId","PopoverComponent","setTitle","PopoverDirective","onKeyDown","_ariaDescribedBy","hasAttribute","clickOutside$","onClickOutside","keyCode","ESCAPE","PopoverModule","HierarchyBarModule","SidePanelService","SidePanelComponent","service","inline","attachTo","cssWidth","openChange","openPanel","closePanel","clickHandler","closeOnExternalClick","class","ItemDisplayPanelComponent","_itemDisplayPanelSubscription","visibleChange","ItemDisplayPanelFooterDirective","ItemDisplayPanelContentDirective","WizardStepComponent","_visited","visitedChange","_active","visited","WizardComponent","QueryList","_step","stepChange","step","invalidIndicator","stepChanging","StepChangingEvent","getCurrentStep","steps","onNext","onPrevious","finish","onFinishing","Promise","resolve","onFinish","onCancel","active","gotoStep","stepIndex","toArray","stp","isLastStep","reset","getStepAtIndex","[class]","to","MarqueeWizardStepComponent","_marqueeWizardService","_valid","setCompleted","completed","completedChange","MarqueeWizardService","MarqueeWizardComponent","marqueeWizardService","validChange","description","then","MarqueeWizardModule","WizardModule","NavigationComponent","NavigationItemComponent","_router","_activatedRoute","level","_navigationEnd","NavigationEnd","hasActiveLink","link","_children","parentListElement","levelClass","getLevelClass","ngAfterContentInit","setIndentWithoutArrow","_childrenChanges","tree","createUrlTree","relativeTo","queryParams","snapshot","fragment","some","indentWithoutArrow","Optional","SkipSelf","Router","ActivatedRoute","NavigationModule","ColorService","colorSets","keppel","_colorSet","colorClassSet","setColors","colorValueSet","_colors","getColorValueByHex","_html","_element","className","innerHTML","body","getColorValue","parentNode","removeChild","color","hex","g","ThemeColor","rgba","backgroundColor","getColor","themeColor","resolveColorName","getRed","getGreen","getBlue","getAlpha","getColorSet","setColorSet","colorSet","colorName","toLowerCase","toRgba","a","_r","_g","parse","rgbaMatch","shortHexMatch","longHexMatch","toHex","red","green","blue","toRgb","setRed","setGreen","setBlue","setAlpha","alpha","accent","secondary","alternate1","alternate2","alternate3","vibrant1","vibrant2","grey1","grey2","grey3","grey4","grey5","grey6","grey7","grey8","chart1","chart2","chart3","chart4","chart5","chart6","ok","warning","critical","partition1","partition9","partition10","partition11","partition12","partition13","partition14","social-chart-node","social-chart-edge","microFocus","cerulean","aqua","aquamarine","fuchsia","indigo","dark-blue","white","slightly-gray","bright-gray","gray","silver","dim-gray","dark-gray","black","crimson-negative","apricot","yellow","green-positive","ultramarine","skyblue","pale-aqua","pale-green","lime","orange","magenta","pale-purple","dark-ultramarine","steelblue","arctic-blue","emerald","olive","goldenrod","purple","pale-eggplant","pale-amber","pale-lemon","pale-emerald","plum","copper","amber","leaf-green","forest-green","ColorServiceModule","NotificationService","_colorService","duration","spacing","iconColor","templateRef","notificationRef","notifications","notifications$","unshift","dismiss","getHistory","dismissAll","NotificationListComponent","_notificationService","notificationRefs","NotificationModule","NUMBER_PICKER_VALUE_ACCESSOR","NumberPickerComponent","Infinity","_propagateChange","_min","_max","_disabled","onScroll","wheelDelta","[class.has-error]","NumberPickerModule","PageHeaderCustomMenuDirective","PageHeaderService","getRoot","selectedRoot$","secondary$","isParentOf","selectParents","deselect","items$","setItems","setParent","setSecondaryNavigation","enabled","PageHeaderComponent","_pageHeaderService","condensed","_crumbs","crumbs","_familyBackground","_familyForeground","secondaryNavigation","secondaryNavigationAutoselect","goBack","backClick","PageHeaderIconMenuComponent","activeIconMenu$","menu","_isOpen","keydownHandler","menuNavigationToggle","stopPropagation","PageHeaderNavigationDropdownItemComponent","_hover$","dropdownOpen","button","hoverStart","hoverLeave","PageHeaderNavigationItemComponent","onHidden","dropdowns","PageHeaderNavigationComponent","resizeService","updateSelectedIndicator","menuItems","indicatorVisible","styles","indicatorX","indicatorWidth","MenuNavigationService","MenuNavigationItemDirective","active$","setActive","activated","MenuNavigationDirective","_document","_itemsOrdered","toggleButton","keyEnter","focusFirst","moveFirst","handled","movePrevious","moveNext","toggleButtonPosition","moveToToggleButton","moveLast","navigatedOut","activeIndex","nextIndex","menuOpen","Inject","DOCUMENT","MenuNavigationToggleDirective","_menuOpen","menuOpenChange","isKeyMatch","menuPosition","EXPORTS","PageHeaderModule","MenuNavigationModule","ProgressBarComponent","ProgressBarModule","RADIOBUTTON_VALUE_ACCESSOR","RadioButtonComponent","uniqueRadioId","_radioButtonId","option","RadioButtonModule","SearchBuilderService","registerComponent","_components","cmp","registerComponents","getComponent","config","setQuery","getQuery","queryHasChanged","queryChange","setValid","_validation","validationChange","keys","generateComponentId","_componentId","SearchBuilderGroupService","_searchBuilderService","init","_id","remove","field","SearchBuilderGroupComponent","searchBuilderGroupService","removeField","SearchBuilderOutletDirective","_componentFactoryResolver","componentDefinition","uxSearchBuilderOutlet","componentFactory","resolveComponentFactory","_componentRef","createComponent","uxSearchBuilderOutletContext","ComponentFactoryResolver","BaseSearchComponent","_searchBuilderGroupService","validate","validation","SearchTextComponent","label","SearchDateComponent","SearchDateRangeComponent","fromValue","toValue","fromLabel","toLabel","fromPlaceholder","toPlaceholder","SearchSelectComponent","multiple","dropDirection","allowNull","maxHeight","pageSize","SearchBuilderComponent","_querySubscription","_validSubscription","TypeaheadOptionEvent","TypeaheadKeyService","handleKey","typeahead","moveHighlight","TypeaheadService","uniqueId","TypeaheadComponent","typeaheadElement","_cdRef","getKey","getDisplay","getDisplayHtml","loadOptionsCallback","pageNum","initOptions","highlighted$","highlightedChange","highlightedElement$","visibleOptions$","highlightedElement","visibleOptions","highlightedElementChange","loadingTemplate","_defaultLoadingTemplate","optionTemplate","_defaultOptionTemplate","noOptionsTemplate","_defaultNoOptionsTemplate","openOnFilterChange","updateOptions","mousedownHandler","clicking","mouseupHandler","optionMousedownHandler","optionClickHandler","display","displayText","displayHtml","length_1","matchIndex","highlight","substr","isInfiniteScroll","optionSelected","disabledOptions","selectedOption","newIndex","indexOfVisibleOption","highlighted","inBounds","selectFirst","normalisedInput_1","optionKey_1","el","[class.open]","[class.drop-up]","[style.maxHeight]","InfiniteScrollLoadButtonDirective","_template","_viewContainer","load","_load","asObservable","_visible","createEmbeddedView","clickTarget","getNextElementSibling","listen","clear","nextSibling","nodeType","InfiniteScrollLoadingDirective","_templateRef","InfiniteScrollDirective","_canLoadManually","_isLoading","_isExhausted","_loadButtonEnabled","isLoading","isExhausted","loadButtonEnabled","_collection","collectionChange","_scrollElement","loadOnScroll","_updateRequests","filterOperator","request","check","auditTime","doRequest","attachEventHandlers","canLoad","_loadButtonQuery","loadButton","_loadingIndicatorQuery","attachLoadButtonEvents","loadOnInit","loadNextPage","previousValue","detachEventHandlers","pageNumber","_nextPageNum","_pages","collection","reload","page","reloadPage","HTMLHtmlElement","_scrollEventSub","_domObserver","MutationObserver","observe","childList","subtree","disconnect","_loadButtonSubscriptions","needsData","beginLoading","loadResult","subscription_1","setPageItems","endLoading","reason","endLoadingWithError","scrollHeight","clientHeight","InfiniteScrollLoadingEvent","loadingEvent","defaultPrevented","loadedEvent","InfiniteScrollLoadedEvent","loadErrorEvent","InfiniteScrollLoadErrorEvent","_defaultPrevented","exhausted","InfiniteScrollModule","ScrollIntoViewService","elem","scrollParent","offsetTop","offsetBottom","ScrollIntoViewIfDirective","_scrollIntoViewService","condition","ScrollIntoViewDirective","uxScrollIntoView","scrollIntoViewOptions","ScrollModule","TypeaheadHighlightDirective","SELECT_VALUE_ACCESSOR","SelectComponent","_typeaheadKeyService","propagateChange","input","_input$","inputChange","_dropdownOpen","dropdownOpenChange","onInput","filter$","onFilter","obj","inputClickHandler","selectInputText","inputBlurHandler","singleTypeahead","singleInput","inputKeyHandler","singleOptionSelected","TagInputEvent","tag","TAGINPUT_VALUE_ACCESSOR","TagInputComponent","TAGINPUT_VALIDATOR","NG_VALIDATORS","Number","MAX_VALUE","getTagDisplay","removeTagAt","canRemoveTagAt","_tags","_onChangeHandler","tagsChange","_input","tagTemplate","_defaultTagTemplate","connectTypeahead","typeaheadQuery","selectedIndex","tags","_onTouchedHandler","_typeaheadSubscription","tagRangeError","minTags","maxTags","given","validationErrors","keyHandler","inputCursorPos","tagInput","selectionStart","hasSelection","selectionEnd","tagSelected","isValidTagIndex","inputLength","canNavigateLeft","canNavigateRight","commitTypeahead","commitInput","backspace","moveSelection","tagDelimiters","getKeyChar","focusOutHandler","tagClickHandler","tagClickEvent","tagClick","selectTagAt","showTypeaheadOnClick","inputFocusHandler","selectInput","inputPasteHandler","addOnPaste","clipboardData","getData","commit","typeaheadOptionSelectedHandler","addTag","freeInput","newTags","splitTagInput","allValid","newTags_1","newTags_1_1","newTag","validateTag","newTags_2","newTags_2_1","createTag","isValidSelectIndex","isSelected","tagIndex","tagRemovingEvent","tagRemoving","tagRemoved","enforceTagLimits","isInputVisible","hasFocus","tagValue","inputPattern","inputValid","tagPattern","test","pattern","createTagHandler","displayValue","tagAddingEvent","tagAdding","tagAdded","tagValues","escapedDelimiters","delimiterRegex","split","[class.disabled]","[class.focus]","[class.invalid]","TagInputModule","SelectModule","SearchBuilderModule","SidePanelCloseDirective","SliderComponent","colorService","SliderType","SliderStyle","SliderSize","SliderSnap","SliderThumb","SliderTickType","SliderThumbEvent","SliderCalloutTrigger","size","middle","hover","Value","Button","callout","background","formatter","keyboard","major","minor","aria","thumb","lowerThumb","upperThumb","track","Wide","ticks","snap","labels","colors","higher","updateValues","setThumbState","Lower","Upper","ngDoCheck","detectValueChange","updateTooltipPosition","snapToNearestTick","snapTarget","forwards","getThumbState","closest","getTickDistances","tick","setThumbValue","validateValue","Major","snapToEnd","getThumbValue","getFormattedValue","thumbs","updateTooltips","thumbEvent","DragStart","DragEnd","MouseOver","MouseLeave","getAriaValueText","_tick","Persistent","Drag","Hover","Dynamic","getTooltip","updateTooltipText","getTooltipElement","lowerTooltip","upperTooltip","thumbWidth","tooltipElement","Narrow","tooltipWidth","tooltipPosition","Range","preventTooltipOverlap","trackWidth","diff","clamp","updateThumbPosition","eventPosition","MouseEvent","clientX","touches","trackBounds","fraction","snapToTick","updateOrder","Minor","lowerLimit","tickOne","tickTwo","tickDistances","deepMerge","updateTrackColors","updateTicks","lowerValue","low","upperValue","high","toFixed","lowerPosition","upperPosition","tracks","setValue","majorOptions","minorOptions","majorTicks","getTicks","showTicks","minorTicks","unionTicks","join","getSteps","output","showLabels","tk","t1","t2","destination","value1","value2","isSliderValue","obj1","obj2","SliderModule","SparkComponent","_theme","_trackColor","_barColor","values","total","val","SparkModule","TabsetService","selectAtIndex","selectNextTab","tabs_1","tabs_1_1","selectFirstTab","selectPreviousTab","reverse","selectLastTab","tabIndex","TabsetComponent","tabset","arrowLeft","arrowUp","arrowRight","arrowDown","[class.tabs-left]","[class.tabs-right]","uniqueTabId","TabComponent","_tabset","TabHeadingDirective","headingRef","TabFocusDirective","uxTabFocus","TabsetModule","TimelineComponent","TimelineEventComponent","TimelineModule","TOGGLESWITCH_VALUE_ACCESSOR","ToggleSwitchComponent","uniqueToggleSwitchId","_toggleSwitchId","ToggleSwitchModule","ToolbarSearchButtonDirective","clicked","KEYS","ToolbarSearchFieldDirective","_ngModel","blur","submit","text","NgModel","ToolbarSearchComponent","_expanded","params","initialWidth","search","createPlaceholder","animationStart","toState","enablePlaceholder","animationDone","_placeholder","visibility","insertBefore","AudioService","_http","getAudioFileMetadata","mediaElement","src","responseType","ResponseContentType","Blob","response","filename","lastIndexOf","extension","blob","getWaveformFromUrl","url","AudioContext","_audioContext","createVolumeNode","createAnalyserNode","ArrayBuffer","getAudioBuffer","arrayBuffer","audioBuffer","createBufferSource","dataPoints","channels","_audioBuffer","numberOfChannels","channelIdx","getChannelData","Float32Array","getWaveformPoints","skip","waveform","points","channel","getOfflineAudioContext","decodeAudioData","OfflineAudioContext","sampleRate","disconnectSource","_audioBufferSource","buffer","connect","_analyserNode","_gainNode","createGain","createAnalyser","Http","AudioServiceModule","HttpModule","FrameExtractionService","createVideoPlayer","videoPlayer","preload","createCanvas","goToFrame","time","currentTime","getThumbnail","subscription","image","toDataURL","getFrameThumbnail","frameSubscription","getFrameThumbnails","frames","apply","frame","FrameExtractionModule","MediaPlayerService","_frameExtractionService","interval","setInterval","buffered","_mediaPlayer","clearInterval","_quietMode","quietModeEvent","audioTracks","autoplay","TimeRanges","crossOrigin","currentSrc","defaultMuted","defaultPlaybackRate","ended","loop","muted","networkState","paused","playbackRate","played","seekable","seeking","textTracks","TextTrackList","videoTracks","VideoTrackList","volume","_fullscreen","fullscreenEvent","setMediaPlayer","hostElement","mediaPlayer","_hostElement","initEvent","togglePlay","loaded","play","pause","canPlayType","addTextTrack","kind","language","requestFullscreen","webkitRequestFullscreen","msRequestFullscreen","mozRequestFullScreen","exitFullscreen","webkitExitFullscreen","msExitFullscreen","mozCancelFullScreen","fullscreenChange","fullscreen","webkitIsFullScreen","mozFullScreen","msFullscreenElement","toggleFullscreen","getFrames","MediaPlayerComponent","mediaPlayerService","_audioService","switchMap","hovering","quietMode","_playerRef","audioMetadata","playingEvent","playing","pauseEvent","mediaClickEvent","loadedMetadataEvent","(keydown.Space)","[class.standard]","[class.fullscreen]","[class.quiet]","[class.hover]","[class.video]","[class.audio]","(mouseenter)","(mouseleave)","(document:webkitfullscreenchange)","(document:mozfullscreenchange)","(document:MSFullscreenChange)","MediaPlayerBaseExtensionDirective","MediaPlayerTimelineExtensionComponent","durationChangeEvent","scrub","timeUpdateEvent","progressEvent","updateScrub","timelineRef","offsetX","mouseDown","(document:mouseup)","MediaPlayerControlsExtensionComponent","_volume","_previousVolume","playEvent","volumeChangeEvent","mouseenter$","volumeIcon","mouseenterContainer$","volumeContainer","mouseleaveContainer$","volumeActive","timer","toggleMute","setFullscreen","goToStart","goToEnd","dragStart","volumeDragging","dragMove","volumeSlider","DurationPipe","minutes","hours","days","pad","DurationPipeModule","FileSizePipe","log","pow","FileSizePipeModule","VirtualScrollLoadingDirective","VirtualScrollLoadButtonDirective","VirtualScrollCellDirective","VirtualScrollComponent","_height","cellHeight","setupObservable","renderCells","isFirstChange","loadingComplete","cells","getVisibleCells","startCell","endCell","getTotalHeight","AutoGrowDirective","maximum","AutoGrowModule","FixedHeaderTableDirective","_tableHead","_tableBody","setLayout","tablePaging","getTable","scrollbar","clientWidth","tableHeight","FixedHeaderTableModule","FloatLabelDirective","_eventHandles","inputFocus","inputBlur","raised","hasText","getAttribute","_focused","eventHandle","FloatLabelModule","HelpCenterService","registerItem","unregisterItem","itm","HelpCenterItemDirective","_helpCenterService","uxHelpCenterItem","HelpCenterModule","HoverActionService","_actions","actn","setContainer","setFocusState","updateVisibility","setHoverState","_hovered","containerHasFocus","focusActionAtIndex","actionHasFocus","getFocusedActionIndex","getFocusedAction","HoverActionContainerDirective","_hoverActionService","onHover","onLeave","[class.hover-action-container-active]","[tabindex]","HoverActionDirective","[class.hover-action-active]","[class.hover-action-focused]","LayoutSwitcherItemDirective","getLayout","getConfig","activate","_embeddedView","deactivate","LayoutSwitcherDirective","updateActiveLayout","getActiveLayout","_layouts","maxWidth","_activeLayout","requestAnimationFrame","SelectionStrategy","selectionService","mousedown","keydown","_i","selectAll","dataset","RowSelectionStrategy","ctrlKey","shiftKey","multipleSelect","singleSelect","KeyCode","UpArrow","DownArrow","navigate","Spacebar","setSelectionStart","clearSelection","_selection","getSelectedItems","setSelectionEnd","startIdx","endIdx","activateSibling","SimpleSelectionStrategy","SelectionService","Set","_simpleStrategy","_rowStrategy","selections","selection","selectionHasMutated","delete","has","selection$","setMode","trim","setDisabled","SelectionItemDirective","_selectionService","_selected","uxSelectionItem","clickEnabled","keyboardEnabled","SelectionDirective","uxSelectionChange","SelectionModule","StringFilterPipe","it","StringFilterModule","CookieAdapter","getItem","cookie","setItem","removeItem","eqPos","toUTCString","getSupported","LocalStorageAdapter","localStorage","err","SessionStorageAdapter","sessionStorage","PersistentDataService","PersistentDataStorageType","LocalStorage","getAdapter","Cookie","SessionStorage","PersistentDataModule","StorageAdapter","ContactsNg1Component","injector","Injector","UpgradeComponent","ExpandInputNg1Component","FloatingActionButtonNg1Component","FlotNg1Component","GridNg1Component","HierarchyBarNg1Component","MarqueeWizardNg1Component","NestedDonutNg1Component","OrganizationChartNg1Component","PartitionMapNg1Component","PeityBarChartNg1Component","PeityLineChartNg1Component","PeityPieChartNg1Component","PeityUpdatingLineChartNg1Component","SankeyNg1Component","SearchToolbarNg1Component","SelectTableNg1Component","SLIDER_CHART_VALUE_ACCESSOR","SliderChartNg1Component","SocialChartNg1Component","SortDirectionToggleNg1Component","TreeGridNg1Component","ThumbnailNg1Component","NavigationMenuService","_navigationMenuService","collapseAtWidth","setCollapseAtWidth","setDefaultCollapseAtWidth","navigationMenuServiceFactory","get","navigationMenuServiceProvider","useFactory","deps","PdfService","_pdfService","createTable","rows","pdfServiceFactory","pdfServiceProvider","TimeAgoService","_timeAgoService","setStrings","strings","timeSince","past","present","timeSinceNow","moment","timeAgoServiceFactory","timeAgoServiceProvider"],"mappings":"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","sourcesContent":["import { Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'ux-breadcrumbs',\n    template: `<nav aria-label=\"Breadcrumb\">\n    <ol class=\"breadcrumb\">\n        <li *ngFor=\"let crumb of crumbs\">\n\n            <!-- If there is a router link then use a tag -->\n            <a *ngIf=\"crumb.routerLink || crumb.onClick\"\n                tabindex=\"0\"\n                [routerLink]=\"crumb.routerLink\"\n                [fragment]=\"crumb.fragment\"\n                [queryParams]=\"crumb.queryParams\"\n                (click)=\"clickCrumb($event, crumb)\">\n                {{ crumb.title }}\n            </a>\n\n            <!-- If there is not router link then display text in a span -->\n            <span *ngIf=\"!crumb.routerLink && !crumb.onClick\">{{ crumb.title }}</span>\n        </li>\n    </ol>\n</nav>`\n})\n\nexport class BreadcrumbsComponent {\n\n    @Input() crumbs: Breadcrumb[];\n\n    clickCrumb(event: MouseEvent, crumb: Breadcrumb) {\n        if (crumb.onClick) {\n            crumb.onClick.call(null, event);\n        }\n    }\n}\n\nexport interface Breadcrumb {\n    title: string;\n    routerLink?: string;\n    fragment?: string;\n    queryParams?: any;\n    onClick?: (event: MouseEvent) => void;\n}","import { NgModule } from '@angular/core';\n\nimport { BreadcrumbsComponent } from './breadcrumbs.component';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n    imports: [\n        CommonModule, \n        RouterModule\n    ],\n    exports: [BreadcrumbsComponent],\n    declarations: [BreadcrumbsComponent]\n})\nexport class BreadcrumbsModule { }\n","import { Injectable, NgZone, OnDestroy, Renderer2, RendererFactory2 } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\n\n\n@Injectable()\nexport class ResizeService implements OnDestroy {\n\n    private _renderer: Renderer2;\n    private _subscription = new Subscription();\n\n    constructor(rendererFactory: RendererFactory2, private _ngZone: NgZone) {\n        this._renderer = rendererFactory.createRenderer(null, null);\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    addResizeListener(nativeElement: HTMLElement): BehaviorSubject<ResizeDimensions> {\n\n        // create a behavior subject subject\n        const subject = new BehaviorSubject<ResizeDimensions>({ width: nativeElement.offsetWidth, height: nativeElement.offsetHeight });\n\n        // determine the style of the element\n        const displayMode = window.getComputedStyle(nativeElement).getPropertyValue('display');\n\n        // create the iframe element\n        const iframe: HTMLIFrameElement = this._renderer.createElement('iframe');\n\n        // style the iframe to be invisible but fill containing element\n        this._renderer.setStyle(iframe, 'position', 'absolute');\n        this._renderer.setStyle(iframe, 'width', '100%');\n        this._renderer.setStyle(iframe, 'height', '100%');\n        this._renderer.setStyle(iframe, 'top', '0');\n        this._renderer.setStyle(iframe, 'right', '0');\n        this._renderer.setStyle(iframe, 'bottom', '0');\n        this._renderer.setStyle(iframe, 'left', '0');\n        this._renderer.setStyle(iframe, 'z-index', '-1');\n        this._renderer.setStyle(iframe, 'opacity', '0');\n        this._renderer.setStyle(iframe, 'border', 'none');\n        this._renderer.setStyle(iframe, 'margin', '0');\n        this._renderer.setStyle(iframe, 'pointer-events', 'none');\n        this._renderer.setStyle(iframe, 'overflow', 'hidden');\n\n        // ensure the iframe ignores any tabbing\n        this._renderer.setAttribute(iframe, 'tabindex', '-1');\n\n        // statically positioned elements need changed to relative for this method to work\n        if (displayMode !== 'relative' && displayMode !== 'absolute' && displayMode !== 'fixed') {\n            this._renderer.setStyle(nativeElement, 'position', 'relative');\n        }\n\n        // add the iframe to the container element\n        this._renderer.appendChild(nativeElement, iframe);\n\n        this.waitUntilReady(iframe, () => {\n            const iframeDoc = iframe.contentDocument || iframe.contentWindow.document as Document;\n\n            const attachListener = () => {\n\n                // watch for any future resizes - run inside ngzone as an iframe event listener is not patched\n                this._subscription.add(fromEvent(iframe.contentWindow, 'resize').subscribe((event: ResizeDimensions) =>\n                    this._ngZone.run(() => subject.next({ width: nativeElement.offsetWidth, height: nativeElement.offsetHeight }))\n                ));\n            };\n\n            if (iframeDoc.readyState === 'complete') {\n                attachListener();\n            } else {\n\n                // wait for iframe to load\n                iframe.addEventListener('load', () => attachListener());\n            }\n        });\n\n\n        return subject;\n    }\n\n    private waitUntilReady(iframe: HTMLIFrameElement, callback: () => void) {\n        if (iframe.contentDocument || iframe.contentWindow) {\n            callback.call(this);\n        } else {\n            setTimeout(() => this.waitUntilReady(iframe, callback));\n        }\n    }\n}\n\nexport interface ResizeDimensions {\n    width: number;\n    height: number;\n}","import { Directive, ElementRef, EventEmitter, Input, NgZone, OnDestroy, OnInit, Output } from '@angular/core';\nimport { debounceTime } from 'rxjs/operators';\nimport { Subscription } from 'rxjs/Subscription';\nimport { ResizeDimensions, ResizeService } from './resize.service';\n\n@Directive({\n    selector: '[uxResize]',\n    providers: [ResizeService]\n})\nexport class ResizeDirective implements OnInit, OnDestroy {\n\n    @Input() throttle: number = 0;\n    @Output() uxResize: EventEmitter<ResizeDimensions> = new EventEmitter<ResizeDimensions>();\n\n    private _subscription: Subscription;\n\n    constructor(private _elementRef: ElementRef, private _resizeService: ResizeService, private _ngZone: NgZone) { }\n\n    ngOnInit(): void {\n        this._subscription = this._resizeService.addResizeListener(this._elementRef.nativeElement)\n            .pipe(debounceTime(this.throttle))\n            .subscribe((event: ResizeDimensions) => this._ngZone.run(() => this.uxResize.emit(event)));\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n}","import { NgModule } from '@angular/core';\n\nimport { ResizeDirective } from './resize.directive';\nimport { ResizeService } from './resize.service';\n\n@NgModule({\n    exports: [ResizeDirective],\n    declarations: [ResizeDirective],\n    providers: [ResizeService]\n})\nexport class ResizeModule { }\n","import { Directive } from '@angular/core';\n\n@Directive({\n  selector: '[uxCardTabContent]'\n})\nexport class CardTabContentDirective { }\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { filter } from 'rxjs/operators';\nimport { CardTabComponent } from './card-tab/card-tab.component';\n\n@Injectable()\nexport class CardTabsService implements OnDestroy {\n\n  tab$ = new BehaviorSubject<CardTabComponent>(null);\n  tabs$ = new BehaviorSubject<CardTabComponent[]>([]);\n  position$ = new BehaviorSubject<string>('top');\n\n  private _subscription: Subscription;\n\n  constructor() {\n\n    // when a tab is added or removed ensure we always select one if any are available\n    this._subscription = this.tabs$.pipe(\n      filter(tabs => !this.tab$.value || !tabs.find(tab => tab === this.tab$.value)),\n    ).subscribe(tabs => this.tab$.next(tabs.length > 0 ? tabs[0] : null));\n  }\n\n  ngOnDestroy(): void {\n    this._subscription.unsubscribe();\n  }\n\n  /**\n   * Add a tab to the list of tabs\n   */\n  addTab(tab: CardTabComponent): void {\n    this.tabs$.next([...this.tabs$.value, tab]);\n  }\n\n  /**\n   * Remove a tab from the list\n   */\n  removeTab(tab: CardTabComponent): void {\n    this.tabs$.next(this.tabs$.value.filter(_tab => _tab !== tab));\n  }\n\n  /**\n   * Select the tab\n   */\n  select(tab: CardTabComponent): void {\n    this.tab$.next(tab);\n  }\n\n  /**\n   * Set the position of the tab content\n   */\n  setPosition(position: string): void {\n    this.position$.next(position);\n  }\n}\n","import { ChangeDetectionStrategy, Component, ContentChild, OnDestroy, TemplateRef } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { map } from 'rxjs/operators';\nimport { CardTabsService } from '../card-tabs.service';\nimport { CardTabContentDirective } from './card-tab-content.directive';\n\n@Component({\n  selector: 'ux-card-tab',\n  template: `<ng-content *ngIf=\"active$ | async\"></ng-content>`,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CardTabComponent implements OnDestroy {\n\n  active$: Observable<boolean> = this._tabService.tab$.pipe(map(tab => tab === this));\n  @ContentChild(CardTabContentDirective, { read: TemplateRef }) content: TemplateRef<any>;\n\n  constructor(private _tabService: CardTabsService) {\n    this._tabService.addTab(this);\n  }\n\n  ngOnDestroy(): void {\n    this._tabService.removeTab(this);\n  }\n\n}\n","import { Component, ElementRef, HostBinding, Input, ViewChild } from '@angular/core';\nimport { ResizeDimensions } from '../../../directives/resize';\nimport { CardTabComponent } from '../card-tab/card-tab.component';\nimport { CardTabsService } from '../card-tabs.service';\n\n@Component({\n  selector: 'ux-card-tabset',\n  template: `<div class=\"card-tab-content\" role=\"tabpanel\" *ngIf=\"(tabService.tab$ | async)\">\n    <ng-content></ng-content>\n</div>\n\n<div class=\"card-tabs\" #tabs>\n\n    <button class=\"card-tabs-paging-btn card-tabs-paging-btn-previous\" aria-label=\"Previous Tabs\" (click)=\"previous()\" *ngIf=\"offset < bounds.lower\">\n        <i class=\"hpe-icon hpe-previous\"></i>\n    </button>\n\n    <div class=\"card-tabs-list\" role=\"tablist\" #tablist (uxResize)=\"resize($event)\" [style.transform]=\"'translateX(' + offset + 'px)'\">\n\n        <div class=\"card-tab\"\n            role=\"tab\"\n            tabindex=\"0\" #card\n            *ngFor=\"let tab of tabService.tabs$ | async\"\n            [ngClass]=\"tabService.position$ | async\"\n            [class.active]=\"tab.active$ | async\"\n            [attr.aria-selected]=\"tab.active$ | async\"\n            (click)=\"select(tab, card)\"\n            (focus)=\"tabs.scrollLeft = 0\"\n            (keydown.enter)=\"select(tab, card)\">\n\n            <ng-container [ngTemplateOutlet]=\"tab.content\"></ng-container>\n        </div>\n\n    </div>\n\n    <button class=\"card-tabs-paging-btn card-tabs-paging-btn-next\" aria-label=\"Next Tabs\" (click)=\"next()\" *ngIf=\"offset > bounds.upper\">\n        <i class=\"hpe-icon hpe-next\"></i>\n    </button>\n</div>`,\n  providers: [CardTabsService]\n})\nexport class CardTabsetComponent {\n\n  @HostBinding('class')\n  @Input() set position(direction: string) {\n    this.tabService.setPosition(direction);\n  }\n\n  get position(): string {\n    return this.tabService.position$.getValue();\n  }\n\n  @ViewChild('tablist') tablist: ElementRef;\n\n  offset: number = 0;\n  bounds: CardTabsBounds = { lower: 0, upper: 0 };\n\n  private _width: number;\n  private _innerWidth: number;\n\n  constructor(public tabService: CardTabsService) {}\n\n  select(tab: CardTabComponent, element: HTMLElement): void {\n    // select the tab\n    this.tabService.select(tab);\n\n    // ensure the tab is moved into view if required\n    this.moveIntoView(element);\n  }\n\n  resize(dimensions: ResizeDimensions): void {\n    this._width = dimensions.width;\n    this._innerWidth = this.tablist.nativeElement.scrollWidth;\n\n    this.bounds.lower = 0;\n    this.bounds.upper = -(this._innerWidth - this._width);\n  }\n\n  previous(): void {\n    this.offset += this._width;\n\n    // ensure it remains within the allowed bounds\n    this.offset = Math.min(this.offset, this.bounds.lower);\n  }\n\n  next(): void {\n    this.offset -= this._width;\n\n    // ensure it remains within the allowed bounds\n    this.offset = Math.max(this.offset, this.bounds.upper);\n  }\n\n  private moveIntoView(element: HTMLElement): void {\n\n    // if we dont have the dimensions we cant check\n    if (!this._width || !this._innerWidth) {\n      return;\n    }\n\n    // get the current element bounds\n    const { offsetLeft, offsetWidth } = element;\n    const { marginLeft, marginRight } = getComputedStyle(element);\n\n    // calculate the visible area\n    const viewportStart = Math.abs(this.offset);\n    const viewportEnd = viewportStart + this._width;\n    const cardWidth = parseFloat(marginLeft) + offsetWidth + parseFloat(marginRight);\n\n    // if we need to move to the left - figure out how much\n    if (offsetLeft < viewportStart) {\n      this.offset -= (offsetLeft - parseFloat(marginLeft)) - viewportStart;\n    }\n    \n    // if we need to move to the right - figure out how much\n    if ((offsetLeft + cardWidth) > viewportEnd) {\n      this.offset -= (offsetLeft + cardWidth) - viewportEnd;\n    }\n  }\n}\n\nexport interface CardTabsBounds {\n  lower: number;\n  upper: number;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ResizeModule } from '../../directives/resize/index';\nimport { CardTabContentDirective } from './card-tab/card-tab-content.directive';\nimport { CardTabComponent } from './card-tab/card-tab.component';\nimport { CardTabsetComponent } from './card-tabset/card-tabset.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ResizeModule\n  ],\n  declarations: [CardTabsetComponent, CardTabComponent, CardTabContentDirective],\n  exports: [CardTabsetComponent, CardTabComponent, CardTabContentDirective]\n})\nexport class CardTabsModule { }\n","import { Component, EventEmitter, Input, Output, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const CHECKBOX_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => CheckboxComponent),\n    multi: true\n};\n\nlet uniqueCheckboxId = 0;\n\n@Component({\n    selector: 'ux-checkbox',\n    template: `<label [attr.for]=\"inputId\"\n       class=\"ux-checkbox\"\n       [class.ux-checkbox-checked]=\"value === true\"\n       [class.ux-checkbox-indeterminate]=\"indeterminate\"\n       [class.ux-checkbox-simplified]=\"simplified\"\n       [class.ux-checkbox-disabled]=\"disabled\"\n       [class.ux-checkbox-focused]=\"focused\">\n\n    <div class=\"ux-checkbox-container\">\n        <input type=\"checkbox\"\n               class=\"ux-checkbox-input\"\n               [id]=\"inputId\"\n               [required]=\"required\"\n               [checked]=\"value\"\n               [attr.value]=\"value\"\n               [disabled]=\"disabled\"\n               [attr.name]=\"name\"\n               [tabindex]=\"tabindex\"\n               [indeterminate]=\"indeterminate\"\n               [attr.aria-label]=\"ariaLabel\"\n               [attr.aria-labelledby]=\"ariaLabelledby\"\n               [attr.aria-checked]=\"ariaChecked\"\n               (focus)=\"focused = true\"\n               (blur)=\"focused = false\"\n               (change)=\"$event.stopPropagation()\"\n               (click)=\"toggle()\">\n    </div>\n\n    <span class=\"ux-checkbox-label\">\n        <ng-content></ng-content>\n    </span>\n</label>\n`,\n    providers: [CHECKBOX_VALUE_ACCESSOR]\n})\nexport class CheckboxComponent implements ControlValueAccessor {\n\n    private _checkboxId: string = `ux-checkbox-${++uniqueCheckboxId}`;\n\n    @Input() id: string = this._checkboxId;\n    @Input() name: string | null;\n    @Input() required: boolean;\n    @Input() tabindex: number = 0;\n    @Input() clickable: boolean = true;\n    @Input() simplified: boolean = false;\n    @Input() indeterminateValue: any = -1;\n    @Input() disabled: boolean = false;\n    @Input('aria-label') ariaLabel: string = '';\n    @Input('aria-labelledby') ariaLabelledby: string = null;\n\n    @Output() valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    @Input()\n    get value() {\n        return this._value;\n    }\n\n    set value(value: any) {\n        this._value = value;\n\n        // determine if it is in the indeterminate state\n        this.indeterminate = this._value === this.indeterminateValue;\n\n        // determine the checked state\n        this.ariaChecked = this.indeterminate ? 'mixed' : this._value;\n\n        // invoke change event\n        this.valueChange.emit(this._value);\n\n        // call callback\n        this.onChangeCallback(this._value);\n        this.onTouchedCallback();\n    }\n\n    get inputId(): string { \n        return `${this.id || this._checkboxId}-input`;\n    }\n\n    private _value: any = false;\n\n    indeterminate: boolean = false;\n    ariaChecked: boolean | string;\n    focused: boolean = false;\n\n    onTouchedCallback: () => void = () => { };\n    onChangeCallback: (_: any) => void = () => { };\n\n    toggle(): void {\n\n        if (this.disabled || !this.clickable) {\n            return;\n        }\n\n        if (this.value === this.indeterminateValue) {\n            this.value = true;\n            return;\n        }\n\n        // toggle the checked state\n        this.value = !this.value;\n    }\n\n    // Functions required to update ngModel\n\n    writeValue(value: any): void {\n        if (value !== this._value) {\n            this._value = value;\n        }\n    }\n\n    registerOnChange(fn: any): void {\n        this.onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this.onTouchedCallback = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n}\n","import { NgModule } from '@angular/core';\nimport {FormsModule} from '@angular/forms';\n\nimport { CheckboxComponent } from './checkbox.component';\n\n@NgModule({\n    imports: [FormsModule],\n    exports: [CheckboxComponent],\n    declarations: [CheckboxComponent]\n})\nexport class CheckboxModule { }\n","import { ColumnSortingDirective, ColumnSortingOrder } from './column-sorting.directive';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n    selector: 'ux-column-sorting',\n    template: `<div class=\"ux-column-sorting\">\n    <i class=\"ux-column-sorting-icon hpe-icon\" \n        [class.hpe-ascend]=\"state === columnSortingState.Ascending\" \n        [class.hpe-descend]=\"state === columnSortingState.Descending\" \n        [class.column-sorting-icon-hidden]=\"state === columnSortingState.NoSort\"></i>\n    <p class=\"ux-column-sorting-number\">{{ orderNumber }}</p>\n</div>`,\n    exportAs: 'ux-column-sorting'\n})\nexport class ColumnSortingComponent {\n\n    @Input() state: ColumnSortingState;\n    @Input() key: string;\n    @Input() orderNumber: number;\n    @Output() stateChange: EventEmitter<ColumnSortingState> = new EventEmitter<ColumnSortingState>();\n\n    private _parent: ColumnSortingDirective;\n    columnSortingState = ColumnSortingState;\n\n    initParent(parent: ColumnSortingDirective) {\n        this._parent = parent;\n\n        // watch for any events\n        this._parent.events.subscribe(event => {\n\n            let idx = event.findIndex(column => column.key === this.key);\n\n            if (idx == -1) {\n                this.state = ColumnSortingState.NoSort;\n            }\n\n            // only store the number if we have 2 or more columns being sorted\n            if (event.length > 1) {\n                this.orderNumber = idx === -1 ? null : idx + 1;\n            } else {\n                this.orderNumber = null;\n            }\n\n            this.stateChange.emit(this.state);\n\n        });\n    }\n\n    changeState(): ColumnSortingOrder[] {\n\n        if (this.state === ColumnSortingState.Ascending) {\n            this.state = ColumnSortingState.Descending;\n        } else if (this.state === ColumnSortingState.Descending) {\n            this.state = ColumnSortingState.NoSort;\n        } else {\n            this.state = ColumnSortingState.Ascending;\n        }\n\n        // inform parent\n        return this._parent.toggleColumn(this.key, this.state);\n\n    }\n}\n\nexport enum ColumnSortingState {\n    Ascending,\n    Descending,\n    NoSort\n}","import { ColumnSortingComponent, ColumnSortingState } from './column-sorting.component';\nimport { Directive, Host, QueryList, ContentChildren, Input } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\n\n@Directive({\n    selector: '[uxColumnSorting]'\n})\nexport class ColumnSortingDirective {\n\n    @Input() singleSort: boolean;\n    @ContentChildren(ColumnSortingComponent) components: QueryList<ColumnSortingComponent>;\n\n    events: Subject<ColumnSortingOrder[]> = new Subject<ColumnSortingOrder[]>();\n    order: ColumnSortingOrder[] = [];\n\n    ngAfterViewInit() {\n        this.components.forEach(component => component.initParent(this));\n    }\n\n    toggleColumn(key: string, state: ColumnSortingState) {\n\n        if (this.singleSort) {\n            if (state === ColumnSortingState.NoSort) {\n                this.order = [];\n            } else {\n                this.order = [{key: key, state: state}];\n            }\n        } else {\n            // reorder columns here\n            let idx = this.order.findIndex(column => column.key === key);\n\n            // if wasnt previously selected add to list\n            if (idx === -1) {\n                this.order.push({ key: key, state: state});\n            } else if (state === ColumnSortingState.Ascending || state === ColumnSortingState.Descending) {\n                this.order.splice(idx, 1);\n                this.order.push({ key: key, state: state});\n            } else {\n                this.order.splice(idx, 1);\n            }\n        }\n\n            this.events.next(this.order);\n            // return the order\n            return this.order;\n\n    }\n}\n\nexport interface ColumnSortingOrder {\n    key: string;\n    state: ColumnSortingState; \n}","import { NgModule } from '@angular/core';\n\nimport { ColumnSortingComponent } from './column-sorting.component';\n\nimport { ColumnSortingDirective } from './column-sorting.directive';\n\n@NgModule({\n    exports: [ColumnSortingComponent, ColumnSortingDirective],\n    declarations: [ColumnSortingComponent, ColumnSortingDirective]\n})\nexport class ColumnSortingModule { }","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { delay, distinctUntilChanged, filter, map } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { DashboardOptions } from './dashboard.component';\nimport { DashboardWidgetComponent } from './widget/dashboard-widget.component';\n\n@Injectable()\nexport class DashboardService {\n\n    private _widgetOrigin: { column?: number, row?: number, columnSpan?: number, rowSpan?: number };\n    private _actionWidget: DashboardAction;\n    private _rowHeight: number = 0;\n    private _cache: DashboardCache[];\n    private _mouseEvent: MouseEvent;\n\n    widgets$ = new BehaviorSubject<DashboardWidgetComponent[]>([]);\n    options$ = new BehaviorSubject<DashboardOptions>(defaultOptions);\n    dimensions$ = new BehaviorSubject<DashboardDimensions>({});\n    height$: Observable<number> = this.dimensions$.pipe(delay(0), map((dimensions: DashboardDimensions) => dimensions.height), distinctUntilChanged());\n    placeholder$ = new BehaviorSubject<DashboardPlaceholder>({ visible: false, x: 0, y: 0, width: 0, height: 0 });\n    layout$ = new Subject<DashboardLayoutData[]>();\n    stacked$ = new BehaviorSubject<boolean>(false);\n\n    get options() {\n        return this.options$.getValue();\n    }\n\n    get widgets() {\n        return this.widgets$.getValue();\n    }\n\n    get stacked() {\n        return this.stacked$.getValue();\n    }\n\n    get dimensions() {\n        return this.dimensions$.getValue();\n    }\n\n    get columnWidth() {\n        return this.dimensions.width / this.options.columns;\n    }\n\n    constructor() {\n        this.layout$.subscribe(this.setLayoutData.bind(this));\n        this.stacked$.pipe(filter(stacked => stacked === true)).subscribe(this.updateWhenStacked.bind(this));\n        this.widgets$.pipe(delay(0)).subscribe(() => this.renderDashboard());\n        this.dimensions$.pipe(delay(0)).subscribe(() => this.renderDashboard());\n    }\n\n    /**\n     * Add a widget to the dashboard\n     * @param widget The widget component to add to the dashboard\n     */\n    addWidget(widget: DashboardWidgetComponent): void {\n        this.widgets$.next([...this.widgets$.getValue(), widget]);\n    }\n\n    /**\n     * Remove a widget from the dashboard\n     * @param widget The widget to remove\n     */\n    removeWidget(widget: DashboardWidgetComponent): void {\n        this.widgets$.next(this.widgets$.getValue().filter(_widget => _widget !== widget));\n    }\n\n    /**\n     * Indicate that the dashboard element has been resized\n     * @param width The width of the dashboard element in px\n     * @param height The height of the dashboard element in px\n     */\n    setDimensions(width: number = this.dimensions.width, height: number = this.dimensions.height): void {\n        if (this.dimensions.width !== width || this.dimensions.height !== height) {\n            this.dimensions$.next({ width: width, height: height });\n        }\n    }\n\n    /**\n     * Produce an object containing all the required layout data.\n     * This can be useful for exporting/saving a layout\n     */\n    getLayoutData(): DashboardLayoutData[] {\n        return this.widgets.map(widget => {\n            return { id: widget.id, col: widget.getColumn(), row: widget.getRow(), colSpan: widget.getColumnSpan(), rowSpan: widget.getRowSpan() };\n        });\n    }\n\n    /**\n     * Position widgets programatically\n     */\n    setLayoutData(widgets: DashboardLayoutData[]): void {\n\n        // iterate through each widget data and find a match\n        widgets.forEach(widget => {\n\n            // find the matching widget\n            const target = this.widgets.find(_widget => _widget.id === widget.id);\n\n            if (target) {\n                target.setColumn(widget.col);\n                target.setRow(widget.row);\n                target.setColumnSpan(widget.colSpan);\n                target.setRowSpan(widget.rowSpan);\n            }\n        });\n    }\n\n    /**\n     * Update the positions and sizes of the widgets\n     */\n    renderDashboard(): void {\n\n        // get the dimensions of the dashboard\n        this._rowHeight = this.options.rowHeight || this.columnWidth;\n\n        // ensure the column width is not below the min widths\n        this.stacked$.next(this.columnWidth < this.options.minWidth);\n\n        // ensure the row height is not below the min widths\n        if (this._rowHeight < this.options.minWidth) {\n            this._rowHeight = this.options.minWidth;\n        }\n\n        this.setDashboardLayout();\n\n        // iterate through each widget and set the size - except the one being resized\n        this.widgets.filter(widget => !this._actionWidget || widget !== this._actionWidget.widget)\n            .forEach(widget => widget.render());\n    }\n\n    /**\n     * Determine where widgets should be positioned based on their positions, width and the size of the container\n     */\n    setDashboardLayout(): void {\n\n        // find any widgets that do not currently have a position set\n        this.widgets.filter(widget => widget.getColumn() === undefined || widget.getRow() === undefined)\n            .forEach(widget => this.setWidgetPosition(widget));\n\n        this.setDashboardHeight();\n    }\n\n    updateWhenStacked(): void {\n\n        // iterate through each widget set it's stacked state and\n        this.getWidgetsByOrder().forEach((widget, idx) => {\n            widget.setColumn(0);\n            widget.setRow(idx);\n        });\n\n    }\n\n    getWidgetsByOrder(): DashboardWidgetComponent[] {\n        return this.widgets.sort((w1, w2) => {\n\n            const w1Position = w1.getColumn() * w1.getRow();\n            const w2Position = w2.getColumn() * w2.getRow();\n\n            if (w1Position < w2Position) {\n                return -1;\n            }\n\n            if (w1Position > w2Position) {\n                return 1;\n            }\n\n            return 0;\n        });\n    }\n\n    /**\n     * Find a position that a widget can fit in the dashboard\n     * @param widget The widget to try and position\n     */\n    setWidgetPosition(widget: DashboardWidgetComponent): void {\n\n        // find a position for the widget\n        let position = 0;\n        let success = false;\n\n        // repeat until a space is found\n        while (!success) {\n\n            // get a position to try\n            const column = position % this.options.columns;\n            const row = Math.floor(position / this.options.columns);\n\n            // check the current position\n            if (this.getPositionAvailable(column, row, widget.getColumnSpan(), widget.getRowSpan())) {\n                success = true;\n                widget.setColumn(column);\n                widget.setRow(row);\n                return;\n            }\n\n            if (column === 0 && widget.colSpan > this.options.columns) {\n                throw new Error('Dashboard widgets have a colSpan greater than the max number of dashboard columns!');\n            }\n\n            position++;\n        }\n    }\n\n    /**\n     * Check if a position in the dashboard is vacant or not\n     */\n    getPositionAvailable(column: number, row: number, columnSpan: number, rowSpan: number, ignoreWidget?: DashboardWidgetComponent): boolean {\n\n        // get a list of grid spaces that are populated\n        const spaces = this.getOccupiedSpaces();\n\n        // check if the block would still be in bounds\n        if (column + columnSpan > this.options.columns) {\n            return false;\n        }\n\n        // check each required position\n        for (let x = column; x < column + columnSpan; x++) {\n            for (let y = row; y < row + rowSpan; y++) {\n                if (spaces.find(block => block.column === x && block.row === y && block.widget !== ignoreWidget)) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    getOccupiedSpaces(): DashboardSpace[] {\n\n        // find all spaces that are currently occupied\n        return this.widgets.filter(widget => widget.getColumn() !== undefined && widget.getRow() !== undefined)\n            .reduce((value, widget) => {\n\n                this.forEachBlock(widget, (column, row) => value.push({ widget: widget, column: column, row: row }));\n\n                return value;\n            }, []);\n    }\n\n    /**\n     * Begin resizing a widget\n     * @param action The the widget to resize\n     */\n    onResizeStart(action: DashboardAction): void {\n\n        // store the mouse event\n        this._mouseEvent = action.event;\n        this._actionWidget = action;\n\n        // bring the widget to the font\n        this.bringToFront(action.widget);\n    }\n\n    onResizeDrag(action: DashboardAction): void {\n\n        const mousePosX = this._mouseEvent.pageX - pageXOffset;\n        const mousePosY = this._mouseEvent.pageY - pageYOffset;\n\n        // if there was no movement then do nothing\n        if (action.event.x === mousePosX && action.event.y === mousePosY) {\n            return;\n        }\n\n        // update the stored mouse event\n        this._mouseEvent = action.event;\n\n        // get handle for direction\n        const { handle } = action;\n\n        // get the bounds of the handle\n        const bounds = handle.getBoundingClientRect();\n\n        // get the center of the handle\n        const centerX = bounds.left + (bounds.width / 2);\n        const centerY = bounds.top + (bounds.height / 2);\n\n        // get the current mouse position\n        const mouseX = mousePosX - centerX;\n        const mouseY = mousePosY - centerY;\n\n        // store the new proposed dimensions for the widget\n        const dimensions: DashboardWidgetDimensions = {\n            x: action.widget.x,\n            y: action.widget.y,\n            width: action.widget.width,\n            height: action.widget.height\n        };\n\n        // update widget based on the handle being dragged\n        switch (action.direction) {\n\n            case ActionDirection.Right:\n                dimensions.width += mouseX;\n                break;\n\n            case ActionDirection.Left:\n                dimensions.x += mouseX;\n                dimensions.width -= mouseX;\n\n                if (dimensions.width < this.options.minWidth) {\n                    const difference = this.options.minWidth - dimensions.width;\n                    dimensions.x -= difference;\n                    dimensions.width += difference;\n                }\n\n                break;\n\n            case ActionDirection.Bottom:\n                dimensions.height += mouseY;\n                break;\n\n            case ActionDirection.Top:\n                dimensions.y += mouseY;\n                dimensions.height -= mouseY;\n\n                if (dimensions.height < this.options.minHeight) {\n                    const difference = this.options.minHeight - dimensions.height;\n                    dimensions.y -= difference;\n                    dimensions.height += difference;\n                }\n                break;\n\n            // Support resizing on multiple axis simultaneously\n            case ActionDirection.TopLeft:\n\n                dimensions.x += mouseX;\n                dimensions.width -= mouseX;\n\n                if (dimensions.width < this.options.minWidth) {\n                    const difference = this.options.minWidth - dimensions.width;\n                    dimensions.x -= difference;\n                    dimensions.width += difference;\n                }\n\n                dimensions.y += mouseY;\n                dimensions.height -= mouseY;\n\n                if (dimensions.height < this.options.minHeight) {\n                    const difference = this.options.minHeight - dimensions.height;\n                    dimensions.y -= difference;\n                    dimensions.height += difference;\n                }\n                break;\n\n            case ActionDirection.TopRight:\n                dimensions.width += mouseX;\n                dimensions.y += mouseY;\n                dimensions.height -= mouseY;\n\n                if (dimensions.height < this.options.minHeight) {\n                    const difference = this.options.minHeight - dimensions.height;\n                    dimensions.y -= difference;\n                    dimensions.height += difference;\n                }\n                break;\n\n            case ActionDirection.BottomLeft:\n                dimensions.height += mouseY;\n                dimensions.x += mouseX;\n                dimensions.width -= mouseX;\n\n                if (dimensions.width < this.options.minWidth) {\n                    const difference = this.options.minWidth - dimensions.width;\n                    dimensions.x -= difference;\n                    dimensions.width += difference;\n                }\n                break;\n\n            case ActionDirection.BottomRight:\n                dimensions.height += mouseY;\n                dimensions.width += mouseX;\n                break;\n        }\n\n        const currentWidth = action.widget.x + action.widget.width;\n        const currentHeight = action.widget.y + action.widget.height;\n\n        // ensure values are within the dashboard bounds\n        if (dimensions.x < 0) {\n            dimensions.x = 0;\n            dimensions.width = currentWidth;\n        }\n\n        if (dimensions.y < 0) {\n            dimensions.y = 0;\n            dimensions.height = currentHeight;\n        }\n\n        if ((dimensions.x + dimensions.width) > this.dimensions.width) {\n            dimensions.width = this.dimensions.width - dimensions.x;\n        }\n\n        // if the proposed width is smaller than allowed then reset width to minimum and ignore x changes\n        if (dimensions.width < this.options.minWidth) {\n            dimensions.x = action.widget.x;\n            dimensions.width = this.options.minWidth;\n        }\n\n        // if the proposed height is smaller than allowed then reset height to minimum and ignore y changes\n        if (dimensions.height < this.options.minHeight) {\n            dimensions.y = action.widget.y;\n            dimensions.height = this.options.minHeight;\n        }\n\n        // update the widget actual values\n        action.widget.setBounds(dimensions.x, dimensions.y, dimensions.width, dimensions.height);\n\n        // update placeholder position and value\n        this.setPlaceholderBounds(true, dimensions.x, dimensions.y, dimensions.width, dimensions.height);\n\n        // show the widget positions if the current positions and sizes were to persist\n        this.updateWidgetPositions(action.widget);\n    }\n\n    onResizeEnd(): void {\n\n        const placeholder = this.placeholder$.getValue();\n\n        // commit resize changes\n        this.commitWidgetChanges();\n\n        // hide placeholder\n        placeholder.visible = false;\n\n        // update the placeholder\n        this.placeholder$.next(placeholder);\n\n        this._actionWidget = null;\n        this._mouseEvent = null;\n\n        // ensure any vacant upper spaces are filled where required\n        this.shiftWidgetsUp();\n\n        // update dashboard height\n        this.setDashboardHeight();\n\n        // emit information about the layout\n        this.layout$.next(this.getLayoutData());\n    }\n\n    onDragStart(action: DashboardAction): void {\n        this.onResizeStart(action);\n\n        // store the starting placeholder position\n        this.setWidgetOrigin();\n\n        this.cacheWidgets();\n    }\n\n    onDragEnd(): void {\n        this.onResizeEnd();\n\n        this._widgetOrigin = {};\n    }\n\n    onDrag(action: DashboardAction): void {\n\n        // if there was no movement then do nothing\n        if (action.event.pageX === this._mouseEvent.pageX && action.event.pageY === this._mouseEvent.pageY) {\n            return;\n        }\n\n        // get the current mouse position\n        const mouseX = action.event.pageX - this._mouseEvent.pageX;\n        const mouseY = action.event.pageY - this._mouseEvent.pageY;\n\n        // store the latest event\n        this._mouseEvent = action.event;\n\n        const dimensions: DashboardWidgetDimensions = {\n            x: action.widget.x + mouseX,\n            y: action.widget.y + mouseY,\n            width: action.widget.width,\n            height: action.widget.height\n        };\n\n        this.restoreWidgets(true);\n\n        // update widget position\n        action.widget.setBounds(dimensions.x, dimensions.y, dimensions.width, dimensions.height);\n\n        // update placeholder position and value\n        this.setPlaceholderBounds(true, dimensions.x, dimensions.y, dimensions.width, dimensions.height);\n\n        // show the widget positions if the current positions and sizes were to persist\n        this.shiftWidgets();\n\n        this.setDashboardHeight();\n    }\n\n    getRowHeight(): number {\n        return this._rowHeight;\n    }\n\n    cacheWidgets(): void {\n        this._cache = this.widgets.map(widget => ({ id: widget.id, column: widget.getColumn(), row: widget.getRow() }));\n    }\n\n    restoreWidgets(ignoreActionWidget: boolean = false): void {\n        this._cache.filter(widget => !ignoreActionWidget || widget.id !== this._actionWidget.widget.id).forEach(widget => {\n\n            const match = this.widgets.find(wgt => wgt.id === widget.id);\n\n            if (match) {\n                match.setColumn(widget.column);\n                match.setRow(widget.row);\n            }\n        });\n    }\n\n    /**\n     * When dragging any widgets that need to be moved should be moved to an appropriate position\n     */\n    shiftWidgets(): void {\n\n        let widgetsToMove: DashboardWidgetComponent[] = [];\n\n        const placeholder = this.placeholder$.getValue();\n\n        // check if there are any widgets under the placeholder\n        for (let row = placeholder.row; row < placeholder.row + placeholder.rowSpan; row++) {\n            for (let column = placeholder.column; column < placeholder.column + placeholder.columnSpan; column++) {\n\n                // store reference to any widgets that need moved\n                this.getOccupiedSpaces()\n                    .filter(space => space.column === column && space.row === row && space.widget !== this._actionWidget.widget)\n                    .forEach(space => widgetsToMove.push(space.widget));\n            }\n        }\n\n        // remove any duplicates\n        widgetsToMove = widgetsToMove.filter((widget, idx, array) => array.indexOf(widget) === idx);\n\n        // if no widgets need moved then we can stop here\n        if (widgetsToMove.length === 0) {\n            return;\n        }\n\n        // create a duplicate we can use to keep track of which have been moved\n        const unmovedWidgets = widgetsToMove.slice();\n\n        // attempt to move any widgets to the previous widget position\n        widgetsToMove.forEach(widget => {\n\n            // get a grid off all occupied spaces - taking into account the placeholder and ignoring widgets that need moved\n            const grid = this.getOccupiedSpaces().filter(space => !unmovedWidgets.find(wgt => wgt === space.widget));\n\n            // iterate each free block\n            for (let row = this._widgetOrigin.row; row < this._widgetOrigin.row + this._widgetOrigin.rowSpan; row++) {\n                for (let column = this._widgetOrigin.column; column < this._widgetOrigin.column + this._widgetOrigin.columnSpan; column++) {\n\n                    // determine if the block can fit in this space\n                    let requiredSpaces = this.getRequiredSpacesFromPoint(widget, column, row);\n\n                    // check if widget would fit in space\n                    let available = requiredSpaces.every(space => {\n                        return !grid.find(gridSpace => gridSpace.column === space.column && gridSpace.row === space.row) && space.column < this.getColumnCount();\n                    });\n\n                    if (available) {\n                        widget.setColumn(column);\n                        widget.setRow(row);\n                        unmovedWidgets.splice(unmovedWidgets.findIndex(wgt => wgt === widget), 1);\n                        return;\n                    }\n                }\n            }\n\n            // if we get to here then we can't simply swap the positions - next try moving right\n            if (this.canWidgetMoveRight(widget, true)) {\n\n                // after the shift check if placeholder position is still valid\n                this.validatePlaceholderPosition(ActionDirection.Right);\n                return;\n            }\n\n            // next try moving left\n            if (this.canWidgetMoveLeft(widget, true)) {\n\n                // after the shift check if placeholder position is still valid\n                this.validatePlaceholderPosition(ActionDirection.Left);\n                return;\n            }\n\n            // determine the distance that the widget needs to be moved down\n            let distance = (this._actionWidget.widget.getRow() - widget.getRow()) + this._actionWidget.widget.getRowSpan();\n\n            // as a last resort move the widget downwards\n            this.moveWidgetDown(widget, distance);\n        });\n    }\n\n    /**\n     * After shifts have taken place we should verify the place holder position is still valid\n     * @param shiftDirection - the position widgets were shifted\n     */\n    validatePlaceholderPosition(shiftDirection: ActionDirection) {\n\n        const placeholder = this.placeholder$.getValue();\n\n        // check if the placeholder is over a widget\n        if (this.getWidgetsAtPosition(placeholder.column, placeholder.row, true).length > 0) {\n\n            // move the placeholder the opposite direction\n            switch (shiftDirection) {\n\n                case ActionDirection.Left:\n                    this.setPlaceholderBounds(placeholder.visible, placeholder.x + this.getColumnWidth(), placeholder.y, placeholder.width, placeholder.height);\n                    break;\n\n                case ActionDirection.Right:\n                    this.setPlaceholderBounds(placeholder.visible, placeholder.x - this.getColumnWidth(), placeholder.y, placeholder.width, placeholder.height);\n                    break;\n            }\n\n            // validate this new position again\n            this.validatePlaceholderPosition(shiftDirection);\n        }\n    }\n\n    /**\n     * Determine if a widget can be moved left - or if it can move the widgets to the right to make space for the widget\n     */\n    canWidgetMoveLeft(widget: DashboardWidgetComponent, performMove: boolean = false): boolean {\n\n        // check if the widget is the action widget or occupies the first column\n        if (widget === this._actionWidget.widget || widget.getColumn() === 0) {\n            return false;\n        }\n\n        // find the positions required\n        const targetSpaces = this.getOccupiedSpaces().filter(space => space.widget === widget).map(space => {\n            return { column: space.column - widget.getColumnSpan(), row: space.row, widget: space.widget };\n        });\n\n        // check if there are widget in the required positions and if so, can they move right?\n        const moveable = targetSpaces.every(space => this.getWidgetsAtPosition(space.column, space.row).filter(wgt => wgt !== space.widget).every(wgt => this.canWidgetMoveLeft(wgt)));\n\n        if (performMove && moveable) {\n\n            // move all widgets to the right\n            targetSpaces.forEach(space => this.getWidgetsAtPosition(space.column, space.row).filter(wgt => wgt !== space.widget).forEach(wgt => this.canWidgetMoveLeft(wgt, true)));\n\n            // move current widget to the right\n            widget.setColumn(widget.getColumn() - 1);\n        }\n\n        return moveable;\n    }\n\n    /**\n     * Determine if a widget can be moved right - or if it can move the widgets to the right to make space for the widget\n     */\n    canWidgetMoveRight(widget: DashboardWidgetComponent, performMove: boolean = false): boolean {\n\n        // check if the widget is the dragging widget or the widget occupies the final column\n        if (widget === this._actionWidget.widget || widget.getColumn() + widget.getColumnSpan() === this.options.columns) {\n            return false;\n        }\n\n        // find the positions required\n        const targetSpaces = this.getOccupiedSpaces().filter(space => space.widget === widget).map(space => {\n            return { column: space.column + widget.getColumnSpan(), row: space.row, widget: space.widget };\n        });\n\n        // check if there are widget in the required positions and if so, can they move right?\n        const moveable = targetSpaces.every(space => this.getWidgetsAtPosition(space.column, space.row).filter(wgt => wgt !== space.widget).every(wgt => this.canWidgetMoveRight(wgt)));\n\n        if (performMove && moveable) {\n\n            // move all widgets to the right\n            targetSpaces.forEach(space => this.getWidgetsAtPosition(space.column, space.row).filter(wgt => wgt !== space.widget).forEach(wgt => this.canWidgetMoveRight(wgt, true)));\n\n            // move current widget to the right\n            widget.setColumn(widget.getColumn() + 1);\n        }\n\n        return moveable;\n    }\n\n    /**\n     * Store the initial position of the widget being dragged\n     */\n    setWidgetOrigin(): void {\n        this._widgetOrigin = {\n            column: this._actionWidget.widget.getColumn(),\n            row: this._actionWidget.widget.getRow(),\n            columnSpan: this._actionWidget.widget.getColumnSpan(),\n            rowSpan: this._actionWidget.widget.getRowSpan()\n        };\n    }\n\n    /**\n     * Calculate all the required positions is a widget was to be positioned at a particular point\n     */\n    getRequiredSpacesFromPoint(widget: DashboardWidgetComponent, column: number, row: number): DashboardSpace[] {\n        const spaces: DashboardSpace[] = [];\n\n        for (let y = row; y < row + widget.getRowSpan(); y++) {\n            for (let x = column; x < column + widget.getColumnSpan(); x++) {\n                spaces.push({ column: x, row: y, widget: widget });\n            }\n        }\n\n        return spaces;\n    }\n\n    /**\n     * Position widgets based on the position of the placeholder - this is temporary until confirmed\n     */\n    updateWidgetPositions(widget: DashboardWidgetComponent) {\n\n        const placeholder = this.placeholder$.getValue();\n\n        // check all spaces the placeholder will occupy and move any widget currently in them down\n        for (let column = placeholder.column; column < placeholder.column + placeholder.columnSpan; column++) {\n            for (let row = placeholder.row; row < placeholder.row + placeholder.rowSpan; row++) {\n\n                this.getWidgetsAtPosition(column, row, true)\n                    .filter(wgt => wgt !== widget)\n                    .forEach(wgt => this.moveWidgetDown(wgt));\n            }\n        }\n\n        // update the height of the dashboard\n        this.setDashboardHeight();\n\n        // if we arent dragging the top handle then fill spaces\n        if (this._actionWidget.direction !== ActionDirection.Top &&\n            this._actionWidget.direction !== ActionDirection.TopLeft &&\n            this._actionWidget.direction !== ActionDirection.TopRight) {\n            this.shiftWidgetsUp();\n        }\n    }\n\n    /**\n     * Determine if a widget is occupying a specific row and column\n     * @param column The columns to check if occupied\n     * @param row The row to check if occupied\n     * @param ignoreResizing Whether or not to ignore the widget currently being resized\n     */\n    getWidgetsAtPosition(column: number, row: number, ignoreResizing: boolean = false): DashboardWidgetComponent[] {\n        return this.getOccupiedSpaces()\n            .filter(space => space.column === column && space.row === row)\n            .filter(space => space.widget !== this._actionWidget.widget || !ignoreResizing)\n            .map(space => space.widget);\n    }\n\n    /**\n     * Update the placeholder visibility, position and size\n     */\n    setPlaceholderBounds(visible: boolean, x: number, y: number, width: number, height: number): void {\n\n        const placeholder = this.placeholder$.getValue();\n\n        const rounding = this._actionWidget.direction === ActionDirection.Left ||\n            this._actionWidget.direction === ActionDirection.Top ? Rounding.RoundDownBelowHalf : Rounding.RoundUpOverHalf;\n\n        placeholder.visible = visible;\n\n        placeholder.column = this.getPlaceholderColumn(x, width);\n        placeholder.row = this.getPlaceholderRow(y, height);\n        placeholder.columnSpan = this.getPlaceholderColumnSpan(width);\n        placeholder.rowSpan = this.getPlaceholderRowSpan(height);\n\n        // calculate the maximum number of rows\n        const rowCount = this.widgets.filter(widget => widget !== this._actionWidget.widget)\n            .reduce((previous, widget) => Math.max(widget.getRow() + widget.getRowSpan(), previous), 0);\n\n        // constrain maximum placeholder row\n        placeholder.row = Math.min(placeholder.row, rowCount);\n\n        placeholder.x = (placeholder.column * this.getColumnWidth()) + this.options.padding;\n        placeholder.y = (placeholder.row * this._rowHeight) + this.options.padding;\n        placeholder.width = (placeholder.columnSpan * this.getColumnWidth()) - (this.options.padding * 2);\n        placeholder.height = (placeholder.rowSpan * this._rowHeight) - (this.options.padding * 2);\n\n        // set the values of the widget to match the values of the placeholder - however do not render the changes\n        this._actionWidget.widget.setColumn(placeholder.column, false);\n        this._actionWidget.widget.setRow(placeholder.row, false);\n        this._actionWidget.widget.setColumnSpan(placeholder.columnSpan, false);\n        this._actionWidget.widget.setRowSpan(placeholder.rowSpan, false);\n\n        // update the placeholder\n        this.placeholder$.next(placeholder);\n    }\n\n    /**\n     * Get the placeholder column position\n     */\n    getPlaceholderColumn(x: number, width: number): number {\n\n        const column = this.getColumnFromPx(x, this._actionWidget.direction === ActionDirection.Move ? Rounding.RoundUpOverHalf : Rounding.RoundDown);\n        const columnSpan = Math.floor(width / this.getColumnWidth());\n        const upperLimit = this.getColumnCount() - columnSpan;\n\n        // if we arent dragging left then just return the column\n        if (this._actionWidget.direction !== ActionDirection.Left &&\n            this._actionWidget.direction !== ActionDirection.TopLeft &&\n            this._actionWidget.direction !== ActionDirection.BottomLeft) {\n            return Math.max(Math.min(column, upperLimit), 0);\n        }\n\n        // get any overflow\n        const overflow = width % this.getColumnWidth();\n\n        return (x <= 0 || overflow === 0 || columnSpan === 0 || overflow > (this.getColumnWidth() / 2)) ?\n            Math.max(Math.min(column, upperLimit), 0) :\n            Math.max(Math.min(column + 1, upperLimit), 0);\n    }\n\n    /**\n     * Get the column span of the placeholder\n     */\n    getPlaceholderColumnSpan(width: number): number {\n\n        const columnSpan = this.getColumnFromPx(width);\n\n        // if we arent dragging right or left then just return the column span\n        if (this._actionWidget.direction !== ActionDirection.Right &&\n            this._actionWidget.direction !== ActionDirection.TopRight &&\n            this._actionWidget.direction !== ActionDirection.BottomRight &&\n            this._actionWidget.direction !== ActionDirection.Left &&\n            this._actionWidget.direction !== ActionDirection.TopLeft &&\n            this._actionWidget.direction !== ActionDirection.BottomLeft) {\n            return Math.max(columnSpan, 1);\n        }\n\n        // get the current column span and any overflow\n        const overflow = width % this.getColumnWidth();\n\n        return (columnSpan > 0 && overflow > (this.getColumnWidth() / 2)) ? Math.max(columnSpan + 1, 1) : Math.max(columnSpan, 1);\n    }\n\n    /**\n     * Get the row position of the placeholder\n     */\n    getPlaceholderRow(y: number, height: number): number {\n\n        const row = this.getRowFromPx(y, this._actionWidget.direction === ActionDirection.Move ? Rounding.RoundUpOverHalf : Rounding.RoundDown);\n        const rowSpan = Math.ceil(height / this._rowHeight);\n\n        // if we arent dragging up then just return the row\n        if (this._actionWidget.direction !== ActionDirection.Top &&\n            this._actionWidget.direction !== ActionDirection.TopLeft &&\n            this._actionWidget.direction !== ActionDirection.TopRight) {\n            return Math.max(row, 0);\n        }\n\n        // get any overflow\n        let overflow = height < this._rowHeight ? 0 : height % this._rowHeight;\n\n        return (y <= 0 || rowSpan === 0 || overflow === 0 || overflow > (this._rowHeight / 2)) ? Math.max(row, 0) : Math.max(row + 1, 0);\n    }\n\n    /**\n     * Get the row span of the placeholder\n     */\n    getPlaceholderRowSpan(height: number): number {\n\n        const rowSpan = this.getRowFromPx(height);\n\n        // if we arent dragging up or down then just return the column span\n        if (this._actionWidget.direction !== ActionDirection.Top &&\n            this._actionWidget.direction !== ActionDirection.TopLeft &&\n            this._actionWidget.direction !== ActionDirection.TopRight &&\n            this._actionWidget.direction !== ActionDirection.Bottom &&\n            this._actionWidget.direction !== ActionDirection.BottomLeft &&\n            this._actionWidget.direction !== ActionDirection.BottomRight) {\n            return Math.max(rowSpan, 1);\n        }\n\n        // get the current column span and any overflow\n        const overflow = height % this._rowHeight;\n\n        return (overflow > (this._rowHeight / 2)) ? Math.max(rowSpan + 1, 1) : Math.max(rowSpan, 1);\n    }\n\n    getColumnFromPx(x: number, rounding: Rounding = Rounding.RoundDown): number {\n\n        const column = Math.floor(x / Math.floor(this.getColumnWidth()));\n        const overflow = (x % Math.floor(this.getColumnWidth()));\n        const half = this.getColumnWidth() / 2;\n\n        switch (rounding) {\n\n            case Rounding.RoundDown:\n                return column;\n\n            case Rounding.RoundDownBelowHalf:\n                return overflow < half ? column : column + 1;\n\n            case Rounding.RoundUpOverHalf:\n                return overflow > half ? column + 1 : column;\n\n            case Rounding.RoundUp:\n                return overflow > 0 ? column + 1 : column;\n        }\n\n    }\n\n    getRowFromPx(y: number, rounding: Rounding = Rounding.RoundDown): number {\n\n        const row = Math.floor(y / Math.floor(this._rowHeight));\n        const overflow = (y % Math.floor(this._rowHeight));\n        const half = this._rowHeight / 2;\n\n        switch (rounding) {\n\n            case Rounding.RoundDown:\n                return row;\n\n            case Rounding.RoundDownBelowHalf:\n                return overflow < half ? row : row + 1;\n\n            case Rounding.RoundUpOverHalf:\n                return overflow > half ? row + 1 : row;\n\n            case Rounding.RoundUp:\n                return overflow > 0 ? row + 1 : row;\n        }\n    }\n\n    commitWidgetChanges(): void {\n\n        const placeholder = this.placeholder$.getValue();\n\n        // check that we have all the values we need\n        if (placeholder.column === undefined || placeholder.row === undefined ||\n            placeholder.columnSpan === undefined || placeholder.rowSpan === undefined) {\n            return;\n        }\n\n        if (this._actionWidget) {\n            this._actionWidget.widget.setColumn(placeholder.column);\n            this._actionWidget.widget.setRow(placeholder.row);\n            this._actionWidget.widget.setColumnSpan(placeholder.columnSpan);\n            this._actionWidget.widget.setRowSpan(placeholder.rowSpan);\n        }\n\n        // reset all placeholder values\n        placeholder.column = undefined;\n        placeholder.row = undefined;\n        placeholder.columnSpan = undefined;\n        placeholder.rowSpan = undefined;\n\n        // emit the new placeholder values\n        this.placeholder$.next(placeholder);\n    }\n\n    /**\n     * Get the current column width\n     */\n    getColumnWidth(): number {\n        return Math.floor(this.columnWidth);\n    }\n\n    /**\n     * Calculate the number of rows populated with widgets\n     */\n    getRowCount(): number {\n        return this.widgets.reduce((previous, widget) => Math.max(widget.getRow() + widget.getRowSpan(), previous), 0);\n    }\n\n    /**\n     * Set the height of the dashboard container element\n     */\n    setDashboardHeight(): void {\n\n        // size the dashboard container to ensure all rows fit\n        let rowCount = this.getRowCount();\n\n        // if we should show an empty row increment the row count by 1\n        if (this.options.emptyRow) {\n            rowCount++;\n        }\n\n        this.setDimensions(undefined, rowCount * this._rowHeight);\n    }\n\n    /**\n     * Orders the z-index of all widgets to move the active one to the front\n     * @param widget The widget that should be brought to the front\n     */\n    bringToFront(widget: DashboardWidgetComponent): void {\n        this.widgets.forEach(_widget => _widget === widget ? _widget.bringToFront() : _widget.sendToBack());\n    }\n\n    /**\n     * Move a widget down - if widgets are in the position below, then move them down further\n     * @param widget The widget to move downwards\n     */\n    moveWidgetDown(widget: DashboardWidgetComponent, distance: number = 1): void {\n\n        // move the widget down one position\n        widget.setRow(widget.getRow() + distance);\n\n        // check every space the widget occupies for collisions\n        this.forEachBlock(widget, (column, row) =>\n            this.getWidgetsAtPosition(column, row, true)\n                .filter(wgt => wgt !== widget)\n                .forEach(wgt => this.moveWidgetDown(wgt, distance)));\n    }\n\n    /**\n     * Widgets should not be allowed to have a vacant space above them - if there is one they should move upwards to fill it\n     */\n    shiftWidgetsUp(): void {\n\n        // check whether or not changes have been made - if so we need to repeat until stable\n        let stable = true;\n\n        // iterate each widget and\n        this.widgets.forEach(widget => {\n\n            // if widget is already on the top row then do nothing\n            if (widget.getRow() === 0) {\n                return;\n            }\n\n            // if we are currently dragging and this is the dragging widget then skip\n            if (this._actionWidget && this._actionWidget.widget === widget) {\n                return;\n            }\n\n            if (this.getPositionAvailable(widget.getColumn(), widget.getRow() - 1, widget.getColumnSpan(), 1)) {\n                widget.setRow(widget.getRow() - 1);\n                stable = false;\n            }\n        });\n\n        // if changes occurred then we should repeat the process\n        if (!stable) {\n            this.shiftWidgetsUp();\n        }\n    }\n\n    /**\n     * Iterate over each space a widget occupied\n     * @param widget The widget to determine spaces\n     * @param callback The function to be called for each space, should expect a column and row argument witht he context being the widget\n     */\n    forEachBlock(widget: DashboardWidgetComponent, callback: (column: number, row: number) => void): void {\n        for (let row = widget.getRow(); row < widget.getRow() + widget.getRowSpan(); row++) {\n            for (let column = widget.getColumn(); column < widget.getColumn() + widget.getColumnSpan(); column++) {\n                callback.call(widget, column, row);\n            }\n        }\n    }\n\n    /**\n     * Returns the number of columns available\n     */\n    getColumnCount(): number {\n        return this.stacked ? 1 : this.options.columns;\n    }\n}\n\nexport const defaultOptions: DashboardOptions = { columns: 5, padding: 5, minWidth: 100, minHeight: 100, emptyRow: true };\n\nexport interface DashboardDimensions {\n    width?: number;\n    height?: number;\n}\n\nexport interface DashboardWidgetDimensions {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n}\n\nexport interface DashboardAction {\n    widget: DashboardWidgetComponent;\n    direction: ActionDirection;\n    event: MouseEvent;\n    handle?: HTMLElement;\n}\n\nexport interface DashboardSpace {\n    widget: DashboardWidgetComponent;\n    column: number;\n    row: number;\n}\n\nexport interface DashboardPlaceholder {\n    visible: boolean;\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    column?: number;\n    row?: number;\n    columnSpan?: number;\n    rowSpan?: number;\n}\n\nexport interface DashboardCache {\n    id: string;\n    column: number;\n    row: number;\n}\n\nexport interface DashboardLayoutData {\n    id: string;\n    col: number;\n    row: number;\n    colSpan: number;\n    rowSpan: number;\n}\n\nexport enum ActionDirection {\n    Top = 0,\n    TopRight = 1,\n    Right = 2,\n    BottomRight = 3,\n    Bottom = 4,\n    BottomLeft = 5,\n    Left = 6,\n    TopLeft = 7,\n    Move = 8\n}\n\nexport enum Rounding {\n    RoundDown,\n    RoundDownBelowHalf,\n    RoundUp,\n    RoundUpOverHalf\n}","import { AfterViewInit, ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { ResizeDimensions } from '../../directives/resize/resize.service';\nimport { DashboardLayoutData, DashboardService, defaultOptions } from './dashboard.service';\n\n@Component({\n    selector: 'ux-dashboard',\n    template: `<div #dashboard class=\"dashboard-container\" [style.height.px]=\"dashboardService.height$ | async\">\n    <div (uxResize)=\"onResize($event)\" [throttle]=\"16\" class=\"dashboard\">\n        <ng-content></ng-content>\n    </div>\n    \n    <div class=\"position-indicator\" *ngIf=\"(dashboardService.placeholder$ | async).visible\" \n        [style.left.px]=\"(dashboardService.placeholder$ | async).x\" \n        [style.top.px]=\"(dashboardService.placeholder$ | async).y\" \n        [style.width.px]=\"(dashboardService.placeholder$ | async).width\"\n        [style.height.px]=\"(dashboardService.placeholder$ | async).height\"></div>\n</div>`,\n    providers: [DashboardService],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DashboardComponent implements AfterViewInit {\n\n    @Input() set layout(layout: DashboardLayoutData[]) {\n        if (layout) {\n            this.dashboardService.layout$.next(layout);\n        }\n    }\n\n    @Input() set options(options: DashboardOptions) {\n        this.dashboardService.options$.next({ ...defaultOptions, ...options });\n    }\n\n    @Output() layoutChange = new EventEmitter<DashboardLayoutData[]>();\n\n    @ViewChild('dashboard') dashboardElement: ElementRef;\n\n    constructor(public dashboardService: DashboardService) {\n        dashboardService.layout$.subscribe(layout => this.layoutChange.emit(layout));\n    }\n\n    /**\n     * Set the initial dimensions\n     */\n    ngAfterViewInit(): void {\n        this.dashboardService.setDimensions(this.dashboardElement.nativeElement.offsetWidth, this.dashboardElement.nativeElement.offsetHeight);\n    }\n\n    onResize(event: ResizeDimensions): void {\n        this.dashboardService.setDimensions(event.width, event.height);\n    }\n}\n\nexport interface DashboardOptions {\n    columns?: number;\n    padding?: number;\n    minWidth?: number;\n    minHeight?: number;\n    rowHeight?: number;\n    emptyRow?: boolean;\n}","import { Component, Input, OnInit, OnDestroy, HostBinding, AfterViewInit } from '@angular/core';\nimport { DashboardService, ActionDirection } from '../dashboard.service';\nimport { Subscription } from 'rxjs/Subscription';\n\n@Component({\n    selector: 'ux-dashboard-widget',\n    template: `<div class=\"widget-content widget-col-span-{{ getColumnSpan() }} widget-row-span-{{ getRowSpan() }}\">\n    <ng-content></ng-content>\n</div>\n\n<div uxDrag #handleTop class=\"resizer-handle handle-top\" \n    (dragstart)=\"dragstart(handleTop, $event, 0)\"\n    (drag)=\"drag(handleTop, $event, 0)\"\n    (dragend)=\"dragend()\"\n    [style.top.px]=\"padding\" \n    [hidden]=\"!resizable\">\n</div>\n\n<div uxDrag #handleTopRight class=\"resizer-handle handle-top-right\" \n    (dragstart)=\"dragstart(handleTopRight, $event, 1)\"\n    (drag)=\"drag(handleTopRight, $event, 1)\"\n    (dragend)=\"dragend()\"\n    [style.top.px]=\"padding\" \n    [style.right.px]=\"padding\" \n    [hidden]=\"!resizable && !(dashboardService.stacked$ | async)\">\n</div>\n\n<div uxDrag #handleRight class=\"resizer-handle handle-right\" \n    (dragstart)=\"dragstart(handleRight, $event, 2)\"\n    (drag)=\"drag(handleRight, $event, 2)\"\n    (dragend)=\"dragend()\"\n    [style.right.px]=\"padding\" \n    [hidden]=\"!resizable || (dashboardService.stacked$ | async)\">\n</div>\n\n<div uxDrag #handleBottomRight class=\"resizer-handle handle-bottom-right\" \n    (dragstart)=\"dragstart(handleBottomRight, $event, 3)\"\n    (drag)=\"drag(handleBottomRight, $event, 3)\"\n    (dragend)=\"dragend()\"\n    [style.bottom.px]=\"padding\" \n    [style.right.px]=\"padding\" \n    [hidden]=\"!resizable && !(dashboardService.stacked$ | async)\">\n</div>\n\n<div uxDrag #handleBottom class=\"resizer-handle handle-bottom\" \n    (dragstart)=\"dragstart(handleBottom, $event, 4)\"\n    (drag)=\"drag(handleBottom, $event, 4)\"\n    (dragend)=\"dragend()\"\n    [style.bottom.px]=\"padding\" \n    [hidden]=\"!resizable\">\n</div>\n\n<div uxDrag #handleBottomLeft class=\"resizer-handle handle-bottom-left\" \n    (dragstart)=\"dragstart(handleBottomLeft, $event, 5)\"\n    (drag)=\"drag(handleBottomLeft, $event, 5)\"\n    (dragend)=\"dragend()\"\n    [style.bottom.px]=\"padding\" \n    [style.left.px]=\"padding\" \n    [hidden]=\"!resizable && !(dashboardService.stacked$ | async)\">\n</div>\n\n<div uxDrag #handleLeft class=\"resizer-handle handle-left\" \n    (dragstart)=\"dragstart(handleLeft, $event, 6)\"\n    (drag)=\"drag(handleLeft, $event, 6)\"\n    (dragend)=\"dragend()\"\n    [style.left.px]=\"padding\" \n    [hidden]=\"!resizable || (dashboardService.stacked$ | async)\">\n</div>\n\n<div uxDrag #handleTopLeft class=\"resizer-handle handle-top-left\" \n    (dragstart)=\"dragstart(handleTopLeft, $event, 7)\"\n    (drag)=\"drag(handleTopLeft, $event, 7)\"\n    (dragend)=\"dragend()\"\n    [style.top.px]=\"padding\" \n    [style.left.px]=\"padding\" \n    [hidden]=\"!resizable && !(dashboardService.stacked$ | async)\">\n</div>`\n})\nexport class DashboardWidgetComponent implements OnInit, AfterViewInit, OnDestroy {\n\n    @Input() id: string;\n    @Input() col: number;\n    @Input() row: number;\n    @Input() colSpan: number = 1;\n    @Input() rowSpan: number = 1;\n    @Input() resizable: boolean = false;\n\n    @HostBinding('style.left.px') x: number = 0;\n    @HostBinding('style.top.px') y: number = 0;\n    @HostBinding('style.width.px') width: number = 100;\n    @HostBinding('style.height.px') height: number = 100;\n    @HostBinding('style.padding.px') padding: number = 0;\n    @HostBinding('style.z-index') zIndex: number = 0;\n\n    private _column: StackableValue = { regular: undefined, stacked: undefined };\n    private _row: StackableValue = { regular: undefined, stacked: undefined };\n    private _columnSpan: StackableValue = { regular: 1, stacked: 1 };\n    private _rowSpan: StackableValue = { regular: 1, stacked: 1 };\n    private _subscription: Subscription;\n\n    constructor(public dashboardService: DashboardService) {\n        this._subscription = dashboardService.options$.subscribe(() => this.update());\n    }\n\n    ngOnInit(): void {\n\n        this._columnSpan.regular = this.colSpan;\n        this._rowSpan.regular = this.rowSpan;\n\n        if (!this.id) {\n            console.warn('Dashboard Widget is missing an ID.');\n\n            // set random id - keeps things working but prevents exporting of positions\n            this.id = Math.floor(Math.random() * 100000).toString();\n        }\n    }\n\n    ngAfterViewInit(): void {\n        // add the widget to the dashboard\n        this.dashboardService.addWidget(this);\n\n        // apply the current options\n        this.update();\n    }\n\n    /**\n     * If component is removed, then unregister it from the service\n     */\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n        this.dashboardService.removeWidget(this);\n    }\n\n    /**\n     * Apply the current dashboard options\n     */\n    update(): void {\n\n        // get the current options at the time \n        const { padding, columns } = this.dashboardService.options;\n\n        this.padding = padding;\n        this._columnSpan.stacked = columns;\n    }\n\n    /**\n     * Set the actual position and size values\n     */\n    render(): void {\n        this.x = this.getColumn() * this.dashboardService.getColumnWidth();\n        this.y = this.getRow() * this.dashboardService.getRowHeight();\n        this.width = this.getColumnSpan() * this.dashboardService.getColumnWidth();\n        this.height = this.getRowSpan() * this.dashboardService.getRowHeight();\n    }\n\n    getColumn(): number {\n        return this.getStackableValue(this._column);\n    }\n\n    getRow(): number {\n        return this.getStackableValue(this._row);\n    }\n\n    setColumn(column: number, render: boolean = true): void {\n        this.setStackableValue(this._column, column);\n\n        if (render) {\n            this.render();\n        }\n    }\n\n    setRow(row: number, render: boolean = true): void {\n        this.setStackableValue(this._row, row);\n\n        if (render) {\n            this.render();\n        }\n    }\n\n    getColumnSpan(): number {\n        return this.getStackableValue(this._columnSpan);\n    }\n\n    getRowSpan(): number {\n        return this.getStackableValue(this._rowSpan);\n    }\n\n    setColumnSpan(columnSpan: number, render: boolean = true): void {\n        this.setStackableValue(this._columnSpan, columnSpan);\n\n        if (render) {\n            this.render();\n        }\n    }\n\n    setRowSpan(rowSpan: number, render: boolean = true): void {\n        this.setStackableValue(this._rowSpan, rowSpan);\n\n        if (render) {\n            this.render();\n        }\n    }\n\n    bringToFront(): void {\n        this.zIndex = 1;\n    }\n\n    sendToBack(): void {\n        this.zIndex = 0;\n    }\n\n    setBounds(x: number, y: number, width: number, height: number): void {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n\n    dragstart(handle: HTMLElement, event: MouseEvent, direction: ActionDirection): void {\n        this.dashboardService.onResizeStart({ widget: this, direction: direction, event: event, handle: handle });\n    }\n\n    drag(handle: HTMLElement, event: MouseEvent, direction: ActionDirection): void {\n        this.dashboardService.onResizeDrag({ widget: this, direction: direction, event: event, handle: handle });\n    }\n\n    dragend(): void {\n        this.dashboardService.onResizeEnd();\n    }\n\n    /**\n     * Allows automatic setting of stackable value\n     * @param property The current StackableValue object\n     * @param value The value to set in the appropriate field\n     */\n    private setStackableValue(property: StackableValue, value: number): void {\n\n        if (this.dashboardService.stacked) {\n            property.stacked = value;\n        } else {\n            property.regular = value;\n        }\n    }\n\n    /**\n     * Return the appropriate value from a stackable value\n     * @param property The Stackable value object\n     */\n    private getStackableValue(property: StackableValue): number {\n        return this.dashboardService.stacked ? property.stacked : property.regular;\n    }\n}\n\nexport interface StackableValue {\n    regular: number;\n    stacked: number;\n}","import { Directive, ElementRef, EventEmitter, NgZone, OnDestroy, Output } from '@angular/core';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subscription } from 'rxjs/Subscription';\n\n@Directive({\n    selector: '[uxDrag]'\n})\nexport class DragDirective implements OnDestroy {\n\n    @Output() dragstart = new EventEmitter<MouseEvent>();\n    @Output() drag = new EventEmitter<MouseEvent>();\n    @Output() dragend = new EventEmitter<void>();\n\n    private _subscription: Subscription;\n\n    constructor(elementRef: ElementRef, ngZone: NgZone) {\n        const mousedown$ = fromEvent<MouseEvent>(elementRef.nativeElement, 'mousedown');\n        const mousemove$ = fromEvent<MouseEvent>(document, 'mousemove');\n        const mouseup$ = fromEvent<MouseEvent>(document, 'mouseup');\n\n        this._subscription = mousedown$.subscribe(event => {\n            event.preventDefault();\n\n            // emit the drag start event\n            ngZone.run(() => this.dragstart.emit(event));\n\n            mousemove$.pipe(takeUntil<MouseEvent>(mouseup$)).subscribe(moveevent => {\n                moveevent.preventDefault();\n\n                // emit the drag start event\n                ngZone.run(() => this.drag.emit(moveevent));\n            }, null,\n            () => ngZone.run(() => this.dragend.emit()));\n        });\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n}","import { Directive, NgZone, ElementRef } from '@angular/core';\n\nimport { DashboardWidgetComponent } from '../widget/dashboard-widget.component';\nimport { DashboardService, ActionDirection } from '../dashboard.service';\nimport { DragDirective } from '../../../directives/drag/drag.directive';\n\n@Directive({\n    selector: '[uxDashboardWidgetDragHandle], [ux-dashboard-widget-drag-handle]'\n})\nexport class DashboardDragHandleDirective extends DragDirective {\n\n    constructor(widget: DashboardWidgetComponent, dashboardService: DashboardService, elementRef: ElementRef, ngZone: NgZone) {\n        super(elementRef, ngZone);\n\n        this.dragstart.subscribe((event: MouseEvent) => dashboardService.onDragStart({ widget: widget, direction: ActionDirection.Move, event: event }));\n        this.drag.subscribe((event: MouseEvent) => dashboardService.onDrag({ widget: widget, direction: ActionDirection.Move, event: event }));\n        this.dragend.subscribe(() => dashboardService.onDragEnd());\n    }\n}","import { NgModule } from '@angular/core';\n\nimport { DragDirective } from './drag.directive';\n\n@NgModule({\n    exports: [DragDirective],\n    declarations: [DragDirective]\n})\nexport class DragModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DashboardComponent } from './dashboard.component';\nimport { DashboardWidgetComponent } from './widget/dashboard-widget.component';\nimport { DashboardService } from './dashboard.service';\nimport { DashboardDragHandleDirective } from './drag-handle/drag-handle.directive';\nimport { ResizeModule } from '../../directives/resize/index';\nimport { DragModule } from '../../directives/drag/index';\n\nconst DECLARATIONS: any[] = [\n    DashboardComponent,\n    DashboardWidgetComponent,\n    DashboardDragHandleDirective\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ResizeModule,\n        DragModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS,\n    providers: [DashboardService],\n})\nexport class DashboardModule { }\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewEncapsulation, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const SPIN_BUTTON_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => SpinButtonComponent),\n    multi: true\n};\n\n@Component({\n    selector: 'ux-spin-button',\n    template: `<button class=\"spin-button\"\n        *ngIf=\"spinners\"\n        tabindex=\"-1\"\n        [disabled]=\"disabled\"\n        [attr.aria-label]=\"incrementAriaLabel\"\n        [attr.aria-disabled]=\"disabled\"\n        (click)=\"triggerIncrement()\">\n\n  <span class=\"hpe-icon hpe-up\"></span>\n</button>\n\n<input [type]=\"type\"\n       role=\"spinbutton\"\n       [min]=\"min\"\n       [max]=\"max\"\n       [tabindex]=\"0\"\n       class=\"form-control\"\n       [placeholder]=\"placeholder\"\n       [readOnly]=\"readOnly\"\n       [disabled]=\"disabled\"\n       [attr.aria-label]=\"inputAriaLabel\"\n       [attr.aria-disabled]=\"disabled\"\n       [attr.aria-valuemin]=\"min\"\n       [attr.aria-valuenow]=\"value\"\n       [attr.aria-valuemax]=\"max\"\n       [attr.aria-readonly]=\"readOnly\"\n       [ngModel]=\"value\"\n       (ngModelChange)=\"valueChange.emit($event)\"\n       (wheel)=\"scroll($event)\"\n       (keydown.arrowup)=\"arrowkeys ? triggerIncrement() : null; $event.preventDefault()\"\n       (keydown.arrowdown)=\"arrowkeys ? triggerDecrement() : null; $event.preventDefault()\">\n\n<button class=\"spin-button\"\n        *ngIf=\"spinners\"\n        tabindex=\"-1\"\n        [disabled]=\"disabled\"\n        [attr.aria-label]=\"decrementAriaLabel\"\n        [attr.aria-disabled]=\"disabled\"\n        (click)=\"triggerDecrement()\">\n\n  <span class=\"hpe-icon hpe-down\"></span>\n</button>`,\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [SPIN_BUTTON_VALUE_ACCESSOR]\n})\nexport class SpinButtonComponent implements ControlValueAccessor {\n\n    @Input() set value(value: any) {\n        this._value = value;\n        this.onChangeCallback(value);\n        this.onTouchedCallback();\n    }\n\n    get value(): any {\n        return this._value;\n    }\n\n    @Input() type: string = 'text';\n    @Input() min: number;\n    @Input() max: number;\n    @Input() placeholder: string = '';\n    @Input() disabled: boolean = false;\n    @Input() spinners: boolean = true;\n    @Input() readOnly: boolean = true;\n    @Input() scrolling: boolean = true;\n    @Input() arrowkeys: boolean = true;\n\n    @Input() incrementAriaLabel: string;\n    @Input() inputAriaLabel: string;\n    @Input() decrementAriaLabel: string;\n\n    @Output() valueChange = new EventEmitter<any>();\n\n    @Output() increment = new EventEmitter<void>();\n    @Output() decrement = new EventEmitter<void>();\n\n    onTouchedCallback: () => void = () => { };\n    onChangeCallback: (_: any) => void = () => { };\n\n    private _value: any;\n\n    scroll(event: WheelEvent): void {\n\n        if (!this.scrolling) {\n            return;\n        }\n\n        if (event.deltaY > 0) {\n            this.triggerDecrement();\n        } else {\n            this.triggerIncrement();\n        }\n\n        event.preventDefault();\n    }\n\n    triggerIncrement(): void {\n        if (!this.disabled) {\n            this.increment.emit();\n        }\n    }\n\n    triggerDecrement(): void {\n        if (!this.disabled) {\n            this.decrement.emit();\n        }\n    }\n\n    writeValue(value: any): void {\n        this.value = value;\n    }\n\n    registerOnChange(fn: (_: any) => void): void {\n        this.onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: () => void): void {\n        this.onTouchedCallback = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { SpinButtonComponent } from './spin-button.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule\n    ],\n    exports: [SpinButtonComponent],\n    declarations: [SpinButtonComponent]\n})\nexport class SpinButtonModule { }","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'timeFormat'\n})\nexport class TimeFormatPipe implements PipeTransform {\n\n  transform(value: number): string | number {\n    return value < 10 ? '0' + value : value;\n  }\n\n}","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnDestroy, Output, ViewEncapsulation, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\n\nexport const TIME_PICKER_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => TimePickerComponent),\n    multi: true\n};\n\n@Component({\n    selector: 'ux-time-picker',\n    template: `<div class=\"time-picker\" aria-label=\"Time picker\">\n\n    <div class=\"time-picker-column\" [class.has-error]=\"!(valid$ | async)\" *ngIf=\"showHours\">\n\n        <ux-spin-button\n            type=\"number\"\n            class=\"time-spinner\"\n            placeholder=\"HH\"\n            [min]=\"0\"\n            [max]=\"showMeridian ? 12 : 23\"\n            [value]=\"hour$ | async | timeFormat\"\n            (valueChange)=\"hourChange($event)\"\n            [spinners]=\"showSpinners\"\n            [disabled]=\"disabled\"\n            [readOnly]=\"readOnly\"\n            inputAriaLabel=\"hour\"\n            incrementAriaLabel=\"Increment the hour\"\n            decrementAriaLabel=\"Decrement the hour\"\n            (increment)=\"incrementHour()\"\n            (decrement)=\"decrementHour()\">\n        </ux-spin-button>\n\n    </div>\n\n    <div class=\"time-picker-separator\" *ngIf=\"showMinutes\">:</div>\n\n    <div class=\"time-picker-column\" [class.has-error]=\"!(valid$ | async)\" *ngIf=\"showMinutes\">\n\n        <ux-spin-button\n            type=\"number\"\n            class=\"time-spinner\"\n            placeholder=\"MM\"\n            [min]=\"0\"\n            [max]=\"59\"\n            [value]=\"minute$ | async | timeFormat\"\n            (valueChange)=\"minuteChange($event)\"\n            [spinners]=\"showSpinners\"\n            [disabled]=\"disabled\"\n            [readOnly]=\"readOnly\"\n            inputAriaLabel=\"minute\"\n            incrementAriaLabel=\"Increment the minute\"\n            decrementAriaLabel=\"Decrement the minute\"\n            (increment)=\"incrementMinute()\"\n            (decrement)=\"decrementMinute()\">\n        </ux-spin-button>\n\n    </div>\n\n    <div class=\"time-picker-separator\" *ngIf=\"showSeconds\">:</div>\n\n    <div class=\"time-picker-column\" [class.has-error]=\"!(valid$ | async)\" *ngIf=\"showSeconds\">\n\n        <ux-spin-button\n            type=\"number\"\n            class=\"time-spinner\"\n            type=\"number\"\n            placeholder=\"SS\"\n            [min]=\"0\"\n            [max]=\"59\"\n            [value]=\"second$ | async | timeFormat\"\n            (valueChange)=\"secondChange($event)\"\n            [spinners]=\"showSpinners\"\n            [disabled]=\"disabled\"\n            [readOnly]=\"readOnly\"\n            inputAriaLabel=\"seconds\"\n            incrementAriaLabel=\"Increment the second\"\n            decrementAriaLabel=\"Decrement the second\"\n            (increment)=\"incrementSecond()\"\n            (decrement)=\"decrementSecond()\">\n        </ux-spin-button>\n\n    </div>\n</div>\n\n<div class=\"time-picker-meridian\" *ngIf=\"showMeridian\">\n\n    <div class=\"btn-group\" role=\"radiogroup\">\n\n        <button class=\"btn button-toggle-accent\"\n                *ngFor=\"let meridian of meridians\"\n                role=\"radio\"\n                tabindex=\"0\"\n                [disabled]=\"disabled\"\n                (click)=\"selectMeridian(meridian)\"\n                [class.active]=\"meridian === (meridian$ | async)\"\n                [attr.aria-label]=\"meridian\"\n                [attr.aria-checked]=\"meridian === (meridian$ | async)\"\n                [attr.aria-disabled]=\"disabled\">\n                {{ meridian }}\n        </button>\n\n    </div>\n</div>`,\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [TIME_PICKER_VALUE_ACCESSOR],\n    host: {\n        'aria-label': 'Time Picker'\n    }\n})\nexport class TimePickerComponent implements ControlValueAccessor, OnDestroy {\n\n    @Input() arrowkeys: boolean = true;\n    @Input() mousewheel: boolean = true;\n    @Input() disabled: boolean = false;\n    @Input() readOnly: boolean = false;\n\n    @Input() showMeridian: boolean = false;\n    @Input() showHours: boolean = true;\n    @Input() showMinutes: boolean = true;\n    @Input() showSeconds: boolean = false;\n    @Input() showSpinners: boolean = true;\n\n    @Input() hourStep: number = 1;\n    @Input() minuteStep: number = 1;\n    @Input() secondStep: number = 1;\n\n    @Input() min: Date;\n    @Input() max: Date;\n    @Input() meridians: string[] = ['AM', 'PM'];\n\n    @Input() set value(value: Date) {\n        this.value$.next(new Date(value));\n        this.valueChange.emit(this.value$.value);\n\n        this.onChangeCallback(this.value$.value);\n        this.onTouchedCallback();\n    }\n\n    get value(): Date {\n        return new Date(this.value$.value);\n    }\n\n    @Output() valueChange = new EventEmitter<Date>();\n    @Output() isValid = new EventEmitter<boolean>();\n\n    onTouchedCallback: () => void = () => { };\n    onChangeCallback: (_: Date) => void = () => { };\n\n    value$ = new BehaviorSubject<Date>(new Date());\n\n    // create observables that are derived from the latest value\n    hour$: Observable<number> = this.value$.pipe(map(date => date.getHours()), map(hour => this.showMeridian ? this.getMeridianTime(hour) : hour));\n    minute$: Observable<number> = this.value$.pipe(map(date => date.getMinutes()));\n    second$: Observable<number> = this.value$.pipe(map(date => date.getSeconds()));\n    meridian$: Observable<string> = this.value$.pipe(map(date => date.getHours() < 12 ? this.meridians[0] : this.meridians[1]));\n    valid$: Observable<boolean> = this.value$.pipe(map(date => this.checkValidity(date)));\n\n    private _meridian: string = this.meridians[0];\n    private _subscription: Subscription;\n\n    constructor() {\n        this._subscription = this.valid$.pipe(distinctUntilChanged()).subscribe(valid => this.isValid.emit(valid));\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    writeValue(value: Date): void {\n        this.value = value;\n    }\n\n    registerOnChange(fn: (_: Date) => void): void {\n        this.onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: () => void): void {\n        this.onTouchedCallback = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    getMeridianTime(hour: number): number {\n        return hour > 12 ? hour - 12 : hour;\n    }\n\n    setHour(hour: number): void {\n        const date = this.value;\n        date.setHours(hour ? hour : 0);\n\n        this.value = date;\n    }\n\n    setMinute(minute: number): void {\n        const date = this.value;\n        date.setMinutes(minute ? minute : 0);\n\n        this.value = date;\n    }\n\n    setSeconds(seconds: number): void {\n        const date = this.value;\n        date.setSeconds(seconds ? seconds : 0);\n\n        this.value = date;\n    }\n\n    incrementHour(arrowkey: boolean = false): void {\n        if (this.disabled || arrowkey && !this.arrowkeys) {\n            return;\n        }\n\n        this.setHour(this.value.getHours() + this.hourStep);\n    }\n\n    decrementHour(arrowkey: boolean = false): void {\n        if (this.disabled || arrowkey && !this.arrowkeys) {\n            return;\n        }\n\n        this.setHour(this.value.getHours() - this.hourStep);\n    }\n\n    incrementMinute(arrowkey: boolean = false): void {\n        if (this.disabled || arrowkey && !this.arrowkeys) {\n            return;\n        }\n\n        this.setMinute(this.value.getMinutes() + this.minuteStep);\n    }\n\n    decrementMinute(arrowkey: boolean = false): void {\n        if (this.disabled || arrowkey && !this.arrowkeys) {\n            return;\n        }\n\n        this.setMinute(this.value.getMinutes() - this.minuteStep);\n    }\n\n    incrementSecond(arrowkey: boolean = false): void {\n        if (this.disabled || arrowkey && !this.arrowkeys) {\n            return;\n        }\n\n        this.setSeconds(this.value.getSeconds() + this.secondStep);\n    }\n\n    decrementSecond(arrowkey: boolean = false): void {\n        if (this.disabled || arrowkey && !this.arrowkeys) {\n            return;\n        }\n\n        this.setSeconds(this.value.getSeconds() - this.secondStep);\n    }\n\n    selectMeridian(meridian: string): void {\n        this._meridian = meridian;\n\n        // get the current time\n        const hour = this.value.getHours();\n\n        // if we have selected AM\n        if (meridian === this.meridians[0]) {\n            if (hour >= 12) {\n                this.setHour(hour - 12);\n            }\n        }\n\n        // if we have selected PM\n        if (meridian === this.meridians[1]) {\n            if (hour < 12) {\n                this.setHour(hour + 12);\n            }\n        }\n    }\n\n    checkValidity(date: Date): boolean {\n        let valid = true;\n\n        if (this.min && date.getTime() <= this.min.getTime()) {\n            valid = false;\n        }\n\n        if (this.max && date.getTime() >= this.max.getTime()) {\n            valid = false;\n        }\n\n        return valid;\n    }\n\n    hourChange(value: string): void {\n\n        // convert the string to a number\n        let hour = parseInt(value);\n        let currentHour = this.value.getHours();\n\n        // if the value hasn't changed, do nothing\n        if (hour === currentHour) {\n            return;\n        }\n\n        // ensure the hours is valid\n        if (!isNaN(hour)) {\n            if (hour < 0) {\n                hour = 0;\n            }\n\n            if (hour > (this.showMeridian ? 12 : 23)) {\n                hour = this.showMeridian ? 12 : 23;\n            }\n        }\n\n        hour = isNaN(hour) ? currentHour : hour;\n\n        // if the number is invalid then restore it to the previous value\n        if (this._meridian === this.meridians[0]) {\n            if (hour >= 12) {\n                hour -= 12;\n            }\n        }\n\n        // if we have selected PM\n        if (this._meridian === this.meridians[1]) {\n            if (hour < 12) {\n                hour += 12;\n            }\n        }\n\n        this.setHour(hour);\n    }\n\n    minuteChange(value: string): void {\n\n        // convert the string to a number\n        let minute = parseInt(value);\n        let currentMinute = this.value.getMinutes();\n\n        // if the value hasn't changed, do nothing\n        if (minute === currentMinute) {\n            return;\n        }\n\n        // ensure the hours is valid\n        if (!isNaN(minute)) {\n            if (minute < 0) {\n                minute = 59;\n            }\n\n            if (minute > 59) {\n                minute = 0;\n            }\n        }\n\n        // if the number is invalid then restore it to the previous value\n        this.setMinute(isNaN(minute) ? currentMinute : minute);\n    }\n\n    secondChange(value: string): void {\n        // convert the string to a number\n        let second = parseInt(value);\n        let currentSecond = this.value.getSeconds();\n\n        // if the value hasn't changed, do nothing\n        if (second === currentSecond) {\n            return;\n        }\n\n        // ensure the hours is valid\n        if (!isNaN(second)) {\n            if (second < 0) {\n                second = 0;\n            }\n\n            if (second > 59) {\n                second = 59;\n            }\n        }\n\n        // if the number is invalid then restore it to the previous value\n        this.setSeconds(isNaN(second) ? currentSecond : second);\n    }\n}","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { SpinButtonModule } from '../spin-button/index';\nimport { TimeFormatPipe } from './time-format.pipe';\nimport { TimePickerComponent } from './time-picker.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        SpinButtonModule\n    ],\n    exports: [TimePickerComponent],\n    declarations: [TimePickerComponent, TimeFormatPipe],\n})\nexport class TimePickerModule { }","import { DateTimePickerTimezone } from './date-time-picker.service';\n\n\n/**\n * Convert a single dimension array to a double dimension array\n * @param items the single dimension array to convert\n * @param columns the number of items each array should have\n */\nexport function gridify<T>(items: T[], columns: number): T[][] {\n\n    // create a copy of array so not to effect the original\n    items = items.slice(0);\n\n    const grid: T[][] = [];\n\n    while (items.length) {\n        grid.push(items.splice(0, columns));\n    }\n\n    return grid;\n}\n\n/**\n * Create an array of numbers between two limits\n * @param start the lower limit\n * @param end the upper limit\n */\nexport function range(start: number, end: number): number[] {\n    const list: number[] = [];\n\n    for (let idx = start; idx <= end; idx++) {\n        list.push(idx);\n    }\n\n    return list;\n}\n\n/**\n * Create an array of dates between two points\n * @param start the date to start the array\n * @param end the date to end the array\n */\nexport function dateRange(start: Date, end: Date): Date[] {\n\n    let dates: Date[] = [];\n\n    // loop through all the days between the date range\n    while (start <= end) {\n\n        // add the date to the array\n        dates.push(new Date(start));\n\n        // move to the next day\n        start.setDate(start.getDate() + 1);\n    }\n\n    return dates;\n}\n\n/**\n * Compare two dates to see if they are on the same day\n * @param day1 the first date to compare\n * @param day2 the second date to compare\n */\nexport function compareDays(day1: Date, day2: Date): boolean {\n    return day1.getDate() === day2.getDate() &&\n        day1.getMonth() === day2.getMonth() &&\n        day1.getFullYear() === day2.getFullYear();\n}\n\n/**\n * Date comparison for use primarily with distinctUntilChanged\n */\nexport function dateComparator(dateOne: Date, dateTwo: Date): boolean {\n    return dateOne.getTime() === dateTwo.getTime();\n}\n\n/**\n * Timezone comparison for use primarily with distinctUntilChanged\n */\nexport function timezoneComparator(zoneOne: DateTimePickerTimezone, zoneTwo: DateTimePickerTimezone): boolean {\n    return zoneOne.name === zoneTwo.name && zoneOne.offset === zoneTwo.offset;\n}\n\n/**\n * Export an array of all the available months\n */\nexport const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\nexport const monthsShort = months.map(month => month.substring(0, 3));\n\n/**\n * Export an array of all the available days of the week\n */\nexport const weekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\nexport const weekdaysShort = weekdays.map(weekday => weekday.substring(0, 3));","/**\n * Add a config service to allow an application\n * to customize the date time picker default settings\n * across the entire application\n */\n\nimport { Injectable } from '@angular/core';\nimport { weekdaysShort } from './date-time-picker.utils';\nimport { DateTimePickerTimezone } from './date-time-picker.service';\n\n@Injectable()\nexport class DateTimePickerConfig {\n\n    showDate: boolean = true;\n    showTime: boolean = true;\n    showTimezone: boolean = true;\n    showSeconds: boolean = false;\n    showMeridian: boolean = true;\n    showSpinners: boolean = true;\n    weekdays: string[] = weekdaysShort;\n    nowBtnText: string = 'Today';\n\n    timezones: DateTimePickerTimezone[] = [\n        { name: 'GMT-11', offset: 660 },\n        { name: 'GMT-10', offset: 600 },\n        { name: 'GMT-9', offset: 540 },\n        { name: 'GMT-8', offset: 480 },\n        { name: 'GMT-7', offset: 420 },\n        { name: 'GMT-6', offset: 360 },\n        { name: 'GMT-5', offset: 300 },\n        { name: 'GMT-4', offset: 240 },\n        { name: 'GMT-3', offset: 180 },\n        { name: 'GMT-2', offset: 120 },\n        { name: 'GMT-1', offset: 60 },\n        { name: 'GMT', offset: 0 },\n        { name: 'GMT+1', offset: -60 },\n        { name: 'GMT+2', offset: -120 },\n        { name: 'GMT+3', offset: -180 },\n        { name: 'GMT+4', offset: -240 },\n        { name: 'GMT+5', offset: -300 },\n        { name: 'GMT+6', offset: -360 },\n        { name: 'GMT+7', offset: -420 },\n        { name: 'GMT+8', offset: -480 },\n        { name: 'GMT+9', offset: -540 },\n        { name: 'GMT+10', offset: -600 },\n        { name: 'GMT+11', offset: -660 },\n        { name: 'GMT+12', offset: -720 }\n    ];\n}","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subject } from 'rxjs/Subject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { DateTimePickerConfig } from './date-time-picker.config';\nimport { dateComparator } from './date-time-picker.utils';\n\n@Injectable()\nexport class DateTimePickerService {\n\n    mode$: BehaviorSubject<DatePickerMode> = new BehaviorSubject<DatePickerMode>(DatePickerMode.Day);\n    date$: BehaviorSubject<Date> = new BehaviorSubject<Date>(new Date());\n    timezone$ = new BehaviorSubject<DateTimePickerTimezone>(this.getCurrentTimezone());\n    selected$: BehaviorSubject<Date> = new BehaviorSubject<Date>(new Date());\n\n    // the month and year to display in the viewport\n    month$: BehaviorSubject<number> = new BehaviorSubject<number>(new Date().getMonth());\n    year$: BehaviorSubject<number> = new BehaviorSubject<number>(new Date().getFullYear());\n\n    showDate$ = new BehaviorSubject<boolean>(this._config.showDate);\n    showTime$ = new BehaviorSubject<boolean>(this._config.showTime);\n    showTimezone$ = new BehaviorSubject<boolean>(this._config.showTimezone);\n    showSeconds$ = new BehaviorSubject<boolean>(this._config.showSeconds);\n    showMeridian$ = new BehaviorSubject<boolean>(this._config.showMeridian);\n    showSpinners$ = new BehaviorSubject<boolean>(this._config.showSpinners);\n    weekdays$ = new BehaviorSubject<string[]>(this._config.weekdays);\n    nowBtnText$ = new BehaviorSubject<string>(this._config.nowBtnText);\n    timezones$ = new BehaviorSubject<DateTimePickerTimezone[]>(this._config.timezones);\n\n    header$ = new BehaviorSubject<string>(null);\n    headerEvent$ = new Subject<DatePickerHeaderEvent>();\n    modeDirection: ModeDirection = ModeDirection.None;\n\n    private _subscription: Subscription;\n\n    constructor(private _config: DateTimePickerConfig) {\n\n        // when the active date changes set the currently selected date\n        this._subscription = this.selected$.pipe(distinctUntilChanged(dateComparator)).subscribe(date => {\n\n            // the month and year displayed in the viewport should reflect the newly selected items\n            this.setViewportMonth(date.getMonth());\n            this.setViewportYear(date.getFullYear());\n\n            // emit the new date to the component host\n            this.date$.next(date);\n        });\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    setViewportMonth(month: number): void {\n        if (month < 0) {\n            this.month$.next(11);\n            this.year$.next(this.year$.value - 1);\n        } else if (month > 11) {\n            this.month$.next(0);\n            this.year$.next(this.year$.value + 1);\n        } else {\n            this.month$.next(month);\n        }\n    }\n\n    setViewportYear(year: number): void {\n        this.year$.next(year);\n    }\n\n    setDate(day: number, month: number, year: number): void {\n        const date = new Date(this.selected$.value);\n\n        date.setDate(day);\n        date.setMonth(month);\n        date.setFullYear(year);\n\n        this.selected$.next(date);\n    }\n\n    setDateToNow(): void {\n        this.selected$.next(new Date());\n    }\n\n    setViewportMode(mode: DatePickerMode): void {\n        this.mode$.next(mode);\n    }\n\n    goToChildMode(): void {\n        this.modeDirection = ModeDirection.Descend;\n\n        switch (this.mode$.value) {\n\n            case DatePickerMode.Year:\n                return this.setViewportMode(DatePickerMode.Month);\n\n            case DatePickerMode.Month:\n                return this.setViewportMode(DatePickerMode.Day);\n        }\n    }\n\n    goToParentMode(): void {\n        this.modeDirection = ModeDirection.Ascend;\n\n        switch (this.mode$.value) {\n\n            case DatePickerMode.Day:\n                return this.setViewportMode(DatePickerMode.Month);\n\n            case DatePickerMode.Month:\n                return this.setViewportMode(DatePickerMode.Year);\n        }\n    }\n\n    goToNext(): void {\n        this.headerEvent$.next(DatePickerHeaderEvent.Next);\n    }\n\n    goToPrevious(): void {\n        this.headerEvent$.next(DatePickerHeaderEvent.Previous);\n    }\n\n    setHeader(header: string): void {\n        this.header$.next(header);\n    }\n\n    getCurrentTimezone(): DateTimePickerTimezone {\n        const offset = new Date().getTimezoneOffset();\n        return this._config.timezones.find(timezone => timezone.offset === offset);\n    }\n\n    setTimezone(timezone: DateTimePickerTimezone): void {\n        this.timezone$.next(timezone);\n    }\n}\n\nexport enum DatePickerMode {\n    Day,\n    Month,\n    Year\n}\n\nexport enum ModeDirection {\n    None,\n    Ascend,\n    Descend\n}\n\nexport enum DatePickerHeaderEvent {\n    Previous,\n    Next\n}\n\nexport interface DateTimePickerTimezone {\n    name: string;\n    offset: number;\n}","import { Component, EventEmitter, Input, OnDestroy, Output, ChangeDetectionStrategy } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { DatePickerMode, DateTimePickerService, DateTimePickerTimezone } from './date-time-picker.service';\nimport { dateComparator, timezoneComparator } from './date-time-picker.utils';\n\n@Component({\n  selector: 'ux-date-time-picker',\n  template: `<div class=\"calendar-container\">\n\n  <ux-date-time-picker-header></ux-date-time-picker-header>\n\n  <ng-container *ngIf=\"datepicker.showDate$ | async\" [ngSwitch]=\"datepicker.mode$ | async\">\n\n      <!-- Display days in the current month -->\n      <ux-date-time-picker-day-view *ngSwitchCase=\"DatePickerMode.Day\"></ux-date-time-picker-day-view>\n\n      <!-- Display the months in the current year -->\n      <ux-date-time-picker-month-view *ngSwitchCase=\"DatePickerMode.Month\"></ux-date-time-picker-month-view>\n\n      <!-- Display a decade -->\n      <ux-date-time-picker-year-view *ngSwitchCase=\"DatePickerMode.Year\"></ux-date-time-picker-year-view>\n\n  </ng-container>\n\n  <!-- Display a Time Picker -->\n  <ux-date-time-picker-time-view *ngIf=\"datepicker.showTime$ | async\"></ux-date-time-picker-time-view>\n\n</div>\n\n<button class=\"now-button\" aria-label=\"Set date to now\" (click)=\"setToNow()\">{{ datepicker.nowBtnText$ | async }}</button>`,\n  providers: [DateTimePickerService],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DateTimePickerComponent implements OnDestroy {\n\n  private _timezone: DateTimePickerTimezone;\n\n  @Input() set showDate(value: boolean) {\n    this.datepicker.showDate$.next(value);\n  }\n\n  @Input() set showTime(value: boolean) {\n    this.datepicker.showTime$.next(value);\n  }\n\n  @Input() set showTimezone(value: boolean) {\n    this.datepicker.showTimezone$.next(value);\n  }\n\n  @Input() set showSeconds(value: boolean) {\n    this.datepicker.showSeconds$.next(value);\n  }\n\n  @Input() set showMeridian(value: boolean) {\n    this.datepicker.showMeridian$.next(value);\n  }\n\n  @Input() set showSpinners(value: boolean) {\n    this.datepicker.showSpinners$.next(value);\n  }\n\n  @Input() set weekdays(value: string[]) {\n    this.datepicker.weekdays$.next(value);\n  }\n\n  @Input() set nowBtnText(value: string) {\n    this.datepicker.nowBtnText$.next(value);\n  }\n\n  @Input() set timezones(value: DateTimePickerTimezone[]) {\n    this.datepicker.timezones$.next(value);\n  }\n\n\n  @Output() dateChange: EventEmitter<Date> = new EventEmitter<Date>();\n  @Output() timezoneChange: EventEmitter<DateTimePickerTimezone> = new EventEmitter<DateTimePickerTimezone>();\n\n  @Input()\n  set date(value: Date) {\n    if (!dateComparator(value, this.datepicker.selected$.value)) {\n      this.datepicker.selected$.next(new Date(value));\n    }\n  }\n\n  @Input()\n  set timezone(value: DateTimePickerTimezone) {\n    this.datepicker.timezone$.next(value);\n  }\n\n  // expose enum to view\n  DatePickerMode = DatePickerMode;\n\n  private _subscription = new Subscription();\n\n  constructor(public datepicker: DateTimePickerService) {\n    const valueChange = datepicker.selected$.pipe(distinctUntilChanged(dateComparator))\n      .subscribe(date => this.dateChange.emit(date));\n\n    const timezoneChange = datepicker.timezone$.pipe(distinctUntilChanged(timezoneComparator))\n      .subscribe((timezone: DateTimePickerTimezone) => this.timezoneChange.emit(timezone));\n  }\n\n  ngOnDestroy(): void {\n    this._subscription.unsubscribe();\n  }\n\n  /**\n   * Change the date to the current date and time\n   */\n  setToNow(): void {\n\n    // set the date to the current moment\n    this.datepicker.setDateToNow();\n  }\n}","import { Injectable, OnDestroy } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { combineLatest } from 'rxjs/observable/combineLatest';\nimport { DateTimePickerService, ModeDirection } from '../date-time-picker.service';\nimport { compareDays, dateRange, gridify, months } from '../date-time-picker.utils';\n\n@Injectable()\nexport class DayViewService implements OnDestroy {\n\n    grid$ = new BehaviorSubject<DayViewItem[][]>([[]]);\n    focused$ = new BehaviorSubject<FocusedDayItem>(null);\n\n    private _subscription: Subscription;\n\n    constructor(private _datepicker: DateTimePickerService) {\n        this._subscription = combineLatest(_datepicker.month$, _datepicker.year$)\n            .subscribe(([month, year]) => this.createDayGrid(month, year));\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    setFocus(day: number, month: number, year: number): void {\n        this.focused$.next({ day: day, month: month, year: year });\n\n        // update the date picker to show the required month and year\n        this._datepicker.setViewportMonth(month);\n        this._datepicker.setViewportYear(year);\n    }\n\n    private createDayGrid(month: number, year: number): void {\n\n        // update the header\n        this._datepicker.setHeader(months[month] + ' ' + year);\n\n        // find the lower and upper boundaries\n        const start = new Date(year, month, 1);\n        const end = new Date(year, month + 1, 0);\n\n        // we always want to show from the sunday - this may include showing some dates from the previous month\n        start.setDate(start.getDate() - start.getDay());\n\n        // we also want to make sure that the range ends on a saturday\n        end.setDate(end.getDate() + (6 - end.getDay()));\n\n        // create an array of all the days to display\n        const dates: DayViewItem[] = dateRange(start, end).map(date => ({\n            day: date.getDate(),\n            month: date.getMonth(),\n            year: date.getFullYear(),\n            date: date,\n            isToday: this.isToday(date),\n            isActive: this.isActive(date),\n            isCurrentMonth: date.getMonth() === month\n        }));\n\n        // turn the dates into a grid\n        const items: DayViewItem[][] = gridify(dates, 7);\n\n        this.grid$.next(items);\n\n        // if no item has yet been focused then focus the first day of the month\n        if ((this._datepicker.modeDirection === ModeDirection.None || this._datepicker.modeDirection === ModeDirection.Descend) && this.focused$.value === null) {\n\n            // check if the selected item is visible\n            const selectedDay = dates.find(day => day.isCurrentMonth && day.isActive);\n\n            if (selectedDay) {\n                this.setFocus(selectedDay.day, selectedDay.month, selectedDay.year);\n            } else {\n\n                // find the first day of the month\n                const first = dates.find(date => date.day === 1);\n    \n                // focus the date\n                this.setFocus(first.day, first.month, first.year);\n            }\n\n        }\n    }\n\n    /**\n   * Determine whether or not a specific date is today\n   * @param date The date to check\n   */\n    private isToday(date: Date): boolean {\n        return compareDays(new Date(), date);\n    }\n\n    /**\n     * Determines whether or not a specific date is the selected one\n     * @param date the date to check\n     */\n    private isActive(date: Date): boolean {\n        return compareDays(this._datepicker.selected$.value, date);\n    }\n}\n\nexport interface DayViewItem {\n    day: number;\n    month: number;\n    year: number;\n    date: Date;\n    isToday: boolean;\n    isActive: boolean;\n    isCurrentMonth: boolean;\n}\n\nexport interface FocusedDayItem {\n    day: number;\n    month: number;\n    year: number;\n}","import { ChangeDetectionStrategy, Component, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { DatePickerHeaderEvent, DateTimePickerService } from '../date-time-picker.service';\nimport { DayViewItem, DayViewService } from './day-view.service';\n\n@Component({\n  selector: 'ux-date-time-picker-day-view',\n  template: `<table class=\"calendar\">\n    <thead>\n        <tr>\n            <th *ngFor=\"let day of datePicker.weekdays$ | async\" class=\"weekday\" [attr.aria-label]=\"day\">{{ day }}</th>\n        </tr>\n    </thead>\n\n    <tbody role=\"grid\">\n        <tr role=\"row\" *ngFor=\"let row of dayService.grid$ | async; trackBy: trackWeekByFn\">\n\n            <td *ngFor=\"let item of row; trackBy: trackDayByFn\" class=\"date-cell\" role=\"gridcell\">\n\n                <button class=\"date-button\"\n                        [focusIf]=\"(dayService.focused$ | async)?.day === item.day && (dayService.focused$ | async)?.month === item.month && (dayService.focused$ | async)?.year === item.year\"\n                        [attr.aria-label]=\"item.date | date\"\n                        [attr.aria-selected]=\"item.isActive\"\n                        [attr.aria-hidden]=\"!item.isCurrentMonth\"\n                        [class.current]=\"item.isToday\"\n                        [class.active]=\"item.isActive\"\n                        [class.preview]=\"!item.isCurrentMonth\"\n                        [tabindex]=\"getTabbable(item) ? 0 : -1\"\n                        (click)=\"select(item.date); $event.stopPropagation()\"\n                        (keydown.ArrowLeft)=\"focusDate(item, -1); $event.preventDefault()\"\n                        (keydown.ArrowRight)=\"focusDate(item, 1); $event.preventDefault()\"\n                        (keydown.ArrowUp)=\"focusDate(item, -7); $event.preventDefault()\"\n                        (keydown.ArrowDown)=\"focusDate(item, 7); $event.preventDefault()\">\n\n                    {{ item.date.getDate() }}\n                </button>\n\n            </td>\n        </tr>\n    </tbody>\n</table>`,\n  providers: [DayViewService],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DayViewComponent implements OnDestroy {\n\n  private _subscription: Subscription;\n\n  constructor(public datePicker: DateTimePickerService, public dayService: DayViewService) {\n    this._subscription = datePicker.headerEvent$\n      .subscribe(event => event === DatePickerHeaderEvent.Next ? this.next() : this.previous());\n  }\n\n  ngOnDestroy(): void {\n    this._subscription.unsubscribe();\n  }\n\n  /**\n   * Navigate to the previous page of dates\n   */\n  previous(): void {\n    this.datePicker.setViewportMonth(this.datePicker.month$.value - 1);\n  }\n\n  /**\n   * Navigate to the next page of dates\n   */\n  next(): void {\n    this.datePicker.setViewportMonth(this.datePicker.month$.value + 1);\n  }\n\n  /**\n   * Select a particular date\n   * @param date the date to select\n   */\n  select(date: Date): void {\n    // update the current date object\n    this.datePicker.setDate(date.getDate(), date.getMonth(), date.getFullYear());\n\n    // focus the newly selected date\n    this.dayService.setFocus(date.getDate(), date.getMonth(), date.getFullYear());\n  }\n\n  trackWeekByFn(index: number): number {\n    return index;\n  }\n\n  trackDayByFn(index: number, item: DayViewItem): string {\n    return `${ item.day } ${ item.month } ${ item.year }`;\n  }\n\n  focusDate(item: DayViewItem, dayOffset: number): void {\n\n    // determine the date of the day\n    const target = new Date(item.date.setDate(item.date.getDate() + dayOffset));\n\n    // identify which date should be focused\n    this.dayService.setFocus(target.getDate(), target.getMonth(), target.getFullYear());\n  }\n\n  getTabbable(item: DayViewItem): boolean {\n    const focused = this.dayService.focused$.value;\n    const grid = this.dayService.grid$.value;\n\n    // if there is a focused month check if this is it\n    if (focused) {\n\n      // check if the focused day is visible\n      const isFocusedDayVisible = !!grid.find(row => !!row.find(_item => _item.day === focused.day && _item.month === focused.month && _item.year === focused.year));\n\n      if (isFocusedDayVisible) {\n        return focused.day === item.day && focused.month === item.month && focused.year === item.year;\n      }\n    }\n\n    // if there is no focusable day then check if there is a selected day\n    const isSelectedDayVisible = !!grid.find(row => !!row.find(day => day.isActive));\n\n    if (isSelectedDayVisible) {\n        return item.isActive;\n    }\n\n    // otherwise make the first day tabbable\n    return item.day === 1;\n  }\n\n}","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { map } from 'rxjs/operators';\nimport { DatePickerMode, DateTimePickerService } from '../date-time-picker.service';\n\n@Component({\n    selector: 'ux-date-time-picker-header',\n    template: `<header class=\"header\">\n\n  <button class=\"header-navigation\"\n          (click)=\"previous(); $event.stopPropagation()\"\n          [attr.aria-label]=\"previousAria$ | async\"\n          tabindex=\"0\">\n\n    <i class=\"hpe-icon hpe-previous\"></i>\n  </button>\n\n  <button class=\"header-title\"\n          [attr.aria-label]=\"headerAria$ | async\"\n          [class.active]=\"canAscend$ | async\"\n          (click)=\"ascend(); $event.stopPropagation()\"\n          [tabindex]=\"(canAscend$ | async) ? 0 : -1\">\n       {{ datepicker.header$ | async }}\n  </button>\n\n  <button class=\"header-navigation\"\n          (click)=\"next(); $event.stopPropagation()\"\n          [attr.aria-label]=\"nextAria$ | async\"\n          tabindex=\"0\">\n\n    <i class=\"hpe-icon hpe-next\"></i>\n  </button>\n</header>`,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class HeaderComponent {\n\n    canAscend$: Observable<boolean> = this.datepicker.mode$.pipe(map(mode => mode !== DatePickerMode.Year));\n    \n    mode$: Observable<string> = this.datepicker.mode$.pipe(map(mode => {\n        switch (mode) {\n            case DatePickerMode.Day:\n                return 'Day';\n            case DatePickerMode.Month:\n                return 'Month';\n            case DatePickerMode.Year:\n                return 'Year';\n        }\n    }));\n\n    headerAria$: Observable<string> = this.datepicker.mode$.pipe(map(mode => {\n        switch (mode) {\n            case DatePickerMode.Day:\n                return 'Switch to show months in the year';\n            case DatePickerMode.Month:\n                return 'Switch to show years in the decade';\n            case DatePickerMode.Year:\n                return '';\n        }\n    }));\n\n    previousAria$: Observable<string> = this.datepicker.mode$.pipe(map(mode => {\n        switch (mode) {\n            case DatePickerMode.Day:\n                return 'Previous month';\n            case DatePickerMode.Month:\n                return 'Previous year';\n            case DatePickerMode.Year:\n                return 'Previous decade';\n        }\n    }));\n\n    nextAria$: Observable<string> = this.datepicker.mode$.pipe(map(mode => {\n        switch (mode) {\n            case DatePickerMode.Day:\n                return 'Next month';\n            case DatePickerMode.Month:\n                return 'Next year';\n            case DatePickerMode.Year:\n                return 'Next decade';\n        }\n    }));\n\n    constructor(public datepicker: DateTimePickerService) { }\n\n    previous(): void {\n        this.datepicker.goToPrevious();\n    }\n\n    ascend(): void {\n        this.datepicker.goToParentMode();\n    }\n\n    next(): void {\n        this.datepicker.goToNext();\n    }\n}","import { Injectable, OnDestroy } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { DateTimePickerService, ModeDirection } from '../date-time-picker.service';\nimport { gridify, monthsShort, range } from '../date-time-picker.utils';\n\n@Injectable()\nexport class MonthViewService implements OnDestroy {\n\n    grid$ = new BehaviorSubject<MonthViewItem[][]>([[]]);\n    focused$ = new BehaviorSubject<FocusedMonthItem>(null);\n\n    private _subscription: Subscription;\n\n    constructor(private _datepicker: DateTimePickerService) {\n        this._subscription = _datepicker.year$.subscribe(year => this.createMonthGrid(year));\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    setFocus(month: number, year: number): void {\n        this.focused$.next({ month: month, year: year });\n\n        // update the viewport to ensure focused month is visible\n        this._datepicker.setViewportYear(year);\n    }\n\n    private createMonthGrid(year: number): void {\n\n        // update the header\n        this._datepicker.setHeader(year.toString());\n\n        // get the current year and month\n        const currentMonth = new Date().getMonth();\n        const currentYear = new Date().getFullYear();\n\n        // get the currently selected month\n        const activeMonth = this._datepicker.selected$.value.getMonth();\n        const activeYear = this._datepicker.selected$.value.getFullYear();\n\n        // create a 4x3 grid of month numbers\n        const months: MonthViewItem[] = range(0, 11).map(month => {\n            return {\n                name: monthsShort[month],\n                month: month,\n                year: year,\n                isCurrentMonth: year === currentYear && month === currentMonth,\n                isActiveMonth: year === activeYear && month === activeMonth\n            };\n        });\n\n        // map these to the appropriate format\n        const items: MonthViewItem[][] = gridify(months, 4);\n\n        // update the grid\n        this.grid$.next(items);\n\n        // if there is no focused month select the first one\n        if (this._datepicker.modeDirection === ModeDirection.Descend && this.focused$.value === null) {\n            \n            // check if the selected month is in view\n            const selectedMonth = months.find(month => month.isActiveMonth);\n\n            this.setFocus(selectedMonth ? selectedMonth.month : 0, year);\n        }\n    }\n}\n\nexport interface MonthViewItem {\n    name: string;\n    month: number;\n    year: number;\n    isCurrentMonth: boolean;\n    isActiveMonth: boolean;\n}\n\nexport interface FocusedMonthItem {\n    month: number;\n    year: number;\n}","import { ChangeDetectionStrategy, Component, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { DatePickerHeaderEvent, DateTimePickerService } from '../date-time-picker.service';\nimport { MonthViewItem, MonthViewService } from './month-view.service';\n\n@Component({\n    selector: 'ux-date-time-picker-month-view',\n    template: `<div class=\"calendar\" role=\"grid\">\n  <div class=\"calendar-row\" *ngFor=\"let row of monthService.grid$ | async; trackBy: trackRowByFn\" role=\"row\">\n\n    <button role=\"gridcell\"\n         class=\"calendar-item\"\n         *ngFor=\"let item of row; trackBy: trackMonthByFn\"\n         [focusIf]=\"(monthService.focused$ | async)?.month === item.month && (monthService.focused$ | async)?.year === item.year\"\n         [tabindex]=\"getTabbable(item) ? 0 : -1\"\n         [attr.aria-label]=\"item.name + ' ' + item.year\"\n         [attr.aria-selected]=\"item.isActiveMonth\"\n         [class.active]=\"item.isActiveMonth\"\n         [class.current]=\"item.isCurrentMonth\"\n         (click)=\"select(item.month); $event.stopPropagation()\"\n         (keydown.ArrowLeft)=\"focusMonth(item, -1); $event.preventDefault()\"\n         (keydown.ArrowRight)=\"focusMonth(item, 1); $event.preventDefault()\"\n         (keydown.ArrowUp)=\"focusMonth(item, -4); $event.preventDefault()\"\n         (keydown.ArrowDown)=\"focusMonth(item, 4); $event.preventDefault()\">\n         {{ item.name }}\n    </button>\n  </div>\n</div>\n`,\n    providers: [MonthViewService],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MonthViewComponent implements OnDestroy {\n\n    private _subscription: Subscription;\n\n    constructor(private _datePicker: DateTimePickerService, public monthService: MonthViewService) {\n        this._subscription = _datePicker.headerEvent$\n            .subscribe(event => event === DatePickerHeaderEvent.Next ? this.next() : this.previous());\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    /**\n     * Go to the previous year\n     */\n    previous(): void {\n        this._datePicker.setViewportYear(this._datePicker.year$.value - 1);\n    }\n\n    /**\n     * Go to the next year\n     */\n    next(): void {\n        this._datePicker.setViewportYear(this._datePicker.year$.value + 1);\n    }\n\n    /**\n     * Select a month in the calendar\n     * @param month the index of the month to select\n     */\n    select(month: number): void {\n        this._datePicker.setViewportMonth(month);\n\n        // show the day picker\n        this._datePicker.goToChildMode();\n    }\n\n    focusMonth(item: MonthViewItem, monthOffset: number): void {\n        let targetMonth = item.month + monthOffset;\n        let targetYear = item.year;\n\n        if (targetMonth < 0) {\n            targetMonth += 12;\n            targetYear -= 1;\n        }\n\n        if (targetMonth >= 12) {\n            targetMonth -= 12;\n            targetYear += 1;\n        }\n\n        this.monthService.setFocus(targetMonth, targetYear);\n    }\n\n    trackRowByFn(index: number): number {\n        return index;\n    }\n\n    trackMonthByFn(index: number, item: MonthViewItem): string {\n        return `${item.month} ${item.year}`;\n    }\n\n    getTabbable(item: MonthViewItem): boolean {\n        const focused = this.monthService.focused$.value;\n        const grid = this.monthService.grid$.value;\n\n        // if there is a focused month check if this is it\n        if (focused) {\n\n            // check if the focused month is visible\n            const isFocusedMonthVisible = !!grid.find(row => !!row.find(_item => _item.month === focused.month && _item.year === focused.year));\n            \n            if (isFocusedMonthVisible) {\n                return focused.month === item.month && focused.year === item.year;\n            }\n        }\n\n        // if there is no focusable month then check if there is a selected month\n        const isSelectedMonthVisible = !!grid.find(row => !!row.find(month => month.isActiveMonth));\n\n        if (isSelectedMonthVisible) {\n            return item.isActiveMonth;\n        }\n\n        // otherwise make the first month tabbable\n        return item.month === 0;\n    }\n}","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { DateTimePickerService } from '../date-time-picker.service';\n\n@Component({\n    selector: 'ux-date-time-picker-time-view',\n    template: `<ux-time-picker *ngIf=\"datepicker.showTime$ | async\"\n    [value]=\"datepicker.selected$ | async\"\n    (valueChange)=\"datepicker.selected$.next($event)\"\n    [showSeconds]=\"datepicker.showSeconds$ | async\"\n    [showMeridian]=\"datepicker.showMeridian$ | async\"\n    [showSpinners]=\"datepicker.showSpinners$ | async\">\n</ux-time-picker>\n\n<ng-container *ngIf=\"datepicker.showTimezone$ | async\">\n\n    <div class=\"time-zone-picker\" *ngIf=\"datepicker.showSpinners$ | async\">\n\n        <ux-spin-button\n            class=\"time-zone-spinner\"\n            [value]=\"(datepicker.timezone$ | async).name\"\n            [readOnly]=\"true\"\n            (increment)=\"incrementTimezone()\"\n            (decrement)=\"decrementTimezone()\"\n            inputAriaLabel=\"Time Zone\"\n            incrementAriaLabel=\"Switch to the next time zone\"\n            decrementAriaLabel=\"Switch to the previous time zone\">\n        </ux-spin-button>\n    </div>\n\n    <div class=\"time-zone-picker\" *ngIf=\"!(datepicker.showSpinners$ | async)\">\n\n        <select class=\"form-control time-zone-select\"\n                tabindex=\"0\"\n                [ngModel]=\"(datepicker.timezone$ | async).name\"\n                (ngModelChange)=\"selectTimezone($event)\"\n                aria-label=\"Timezone\"\n                [attr.aria-valuenow]=\"(datepicker.timezone$ | async).name\">\n\n            <option *ngFor=\"let zone of datepicker.timezones$ | async\"\n                    [selected]=\"zone.name === (datepicker.timezone$ | async).name\"\n                    [value]=\"zone.name\">\n                {{ zone?.name }}\n            </option>\n\n        </select>\n    </div>\n\n</ng-container>\n`,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TimeViewComponent {\n\n    constructor(public datepicker: DateTimePickerService) { }\n\n    selectTimezone(name: string): void {\n        const timezones = this.datepicker.timezones$.value;\n        \n        // find matching timezone\n        const timezone = timezones.find(_timezone => _timezone.name === name);\n\n        if (timezone) {\n            this.datepicker.setTimezone(timezone);\n        }\n    }\n\n    incrementTimezone(): void {\n        const timezone = this.datepicker.timezone$.value;\n        const timezones = this.datepicker.timezones$.value;\n\n        const currentZone = timezones.findIndex(zone => zone.name === timezone.name && zone.offset === timezone.offset);\n\n        // try to get the previous zone\n        this.datepicker.setTimezone(timezones[currentZone + 1] ? timezones[currentZone + 1] : timezones[currentZone]);\n    }\n\n    decrementTimezone(): void {\n        const timezone = this.datepicker.timezone$.value;\n        const timezones = this.datepicker.timezones$.value;\n\n        const currentZone = timezones.findIndex(zone => zone.name === timezone.name && zone.offset === timezone.offset);\n\n        // try to get the previous zone\n        this.datepicker.setTimezone(timezones[currentZone - 1] ? timezones[currentZone - 1] : timezones[currentZone]);\n    }\n}","import { Injectable, OnDestroy } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { DatePickerHeaderEvent, DateTimePickerService } from '../date-time-picker.service';\nimport { gridify, range } from '../date-time-picker.utils';\n\n@Injectable()\nexport class YearViewService implements OnDestroy {\n\n    grid$ = new BehaviorSubject<YearViewItem[][]>([[]]);\n    focused$ = new BehaviorSubject<number>(null);\n\n    private _year: number = new Date().getFullYear();\n\n    private _subscription = new Subscription();\n\n    constructor(private _datepicker: DateTimePickerService) {\n        const year = _datepicker.year$.subscribe(_year => this.createYearGrid(_year));\n\n        const event = _datepicker.headerEvent$\n            .subscribe(_event => _event === DatePickerHeaderEvent.Next ? this.goToNextDecade() : this.goToPreviousDecade());\n\n        this._subscription.add(year);\n        this._subscription.add(event);\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    setFocus(year: number): void {\n        this.focused$.next(year);\n        this.createYearGrid(year);\n    }\n\n    goToPreviousDecade(): void {\n        this.createYearGrid(this._year - 10);\n    }\n\n    goToNextDecade(): void {\n        this.createYearGrid(this._year + 10);\n    }\n\n    private createYearGrid(year: number = this._year): void {\n\n        this._year = year;\n\n        // get the years to display\n        const decade = this.getDecade(year);\n\n        const currentYear = new Date().getFullYear();\n\n        // produce items in the correct format\n        const items: YearViewItem[] = decade.range.map(_year => {\n            return {\n                year: _year,\n                isCurrentYear: _year === currentYear,\n                isActiveYear: _year === this._datepicker.year$.value\n            };\n        });\n\n        // update the header text\n        this._datepicker.setHeader(decade.start + ' - ' + decade.end);\n\n        // create the grid\n        this.grid$.next(gridify(items, 4));\n    }\n\n    /**\n     * Get the years in the current decade to display\n     */\n    private getDecade(year: number): YearRange {\n\n        // figure the start and end points\n        const start = (year - (year % 10));\n        const end = start + 9;\n\n        // create an array containing all the numbers between the start and end points\n        return { start: start, end: end, range: range(start, end) };\n    }\n}\n\n\nexport interface YearRange {\n    start: number;\n    end: number;\n    range: number[];\n}\n\nexport interface YearViewItem {\n    year: number;\n    isCurrentYear: boolean;\n    isActiveYear: boolean;\n}","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { DateTimePickerService } from '../date-time-picker.service';\nimport { YearViewItem, YearViewService } from './year-view.service';\n\n@Component({\n  selector: 'ux-date-time-picker-year-view',\n  template: `<div class=\"calendar\" role=\"grid\">\n  <div class=\"calendar-row\" role=\"row\" *ngFor=\"let row of yearService.grid$ | async; trackBy: trackRowByFn\">\n\n    <button *ngFor=\"let item of row; trackBy: trackYearByFn\"\n         role=\"gridcell\"\n         class=\"calendar-item\"\n         [focusIf]=\"(yearService.focused$ | async) === item.year\"\n         [attr.aria-label]=\"item.year\"\n         [attr.aria-selected]=\"item.isActiveYear\"\n         [class.current]=\"item.isCurrentYear\"\n         [class.active]=\"item.isActiveYear\"\n         (click)=\"select(item.year); $event.stopPropagation()\"\n         (keydown.ArrowLeft)=\"focusYear(item, -1); $event.preventDefault()\"\n         (keydown.ArrowRight)=\"focusYear(item, 1); $event.preventDefault()\"\n         (keydown.ArrowUp)=\"focusYear(item, -4); $event.preventDefault()\"\n         (keydown.ArrowDown)=\"focusYear(item, 4); $event.preventDefault()\"\n         [tabindex]=\"getTabbable(item) ? 0 : -1\">\n         {{ item.year }}\n    </button>\n  </div>\n</div>\n`,\n  providers: [YearViewService],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class YearViewComponent {\n\n  constructor(private _datePicker: DateTimePickerService, public yearService: YearViewService) {}\n\n  select(year: number): void {\n    this._datePicker.setViewportYear(year);\n\n    // show the month picker\n    this._datePicker.goToChildMode();\n  }\n\n  focusYear(item: YearViewItem, yearOffset: number): void {\n    this.yearService.setFocus(item.year + yearOffset);\n  }\n\n  trackRowByFn(index: number): number {\n    return index;\n  }\n\n  trackYearByFn(index: number, item: YearViewItem): number {\n    return item.year;\n  }\n\n  getTabbable(item: YearViewItem): boolean {\n    const focused = this.yearService.focused$.value;\n    const grid = this.yearService.grid$.value;\n\n    // if there is a focused year check if this is it\n    if (focused) {\n\n        // check if the focused year is visible\n        const isFocusedYearVisible = !!grid.find(row => !!row.find(_item => _item.year === focused));\n\n        if (isFocusedYearVisible) {\n            return focused === item.year;\n        }\n    }\n\n    // if there is no focusable year then check if there is a selected year\n    const isSelectedYearVisible = !!grid.find(row => !!row.find(year => year.isActiveYear));\n\n    if (isSelectedYearVisible) {\n        return item.isActiveYear;\n    }\n\n    // otherwise make the first month tabbable\n    return grid[0][0].year === item.year;\n}\n\n}\n","import { Directive, ElementRef, Input } from '@angular/core';\n\n@Directive({\n    selector: '[focusIf]'\n})\nexport class FocusIfDirective {\n\n    @Input() focusIfDelay: number = 0;\n\n    @Input()\n    set focusIf(focus: boolean) {\n\n        // if a timeout is pending then cancel it\n        if (!focus && this._timeout !== null) {\n            clearTimeout(this._timeout);\n            this._timeout = null;\n        }\n\n        if (focus && this._timeout === null) {\n            this._timeout = window.setTimeout(() => {\n                this._elementRef.nativeElement.focus();\n                this._timeout = null;\n            }, this.focusIfDelay);\n        }\n    }\n\n    private _timeout: number = null;\n\n    constructor(private _elementRef: ElementRef) { }\n}","import { NgModule } from '@angular/core';\nimport { FocusIfDirective } from './focus-if.directive';\n\n\n@NgModule({\n    exports: [FocusIfDirective],\n    declarations: [FocusIfDirective]\n})\nexport class FocusIfModule { }\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { SpinButtonModule } from '../spin-button/index';\nimport { TimePickerModule } from '../time-picker/index';\nimport { DateTimePickerComponent } from './date-time-picker.component';\nimport { DateTimePickerConfig } from './date-time-picker.config';\nimport { DayViewComponent } from './day-view/day-view.component';\nimport { HeaderComponent } from './header/header.component';\nimport { MonthViewComponent } from './month-view/month-view.component';\nimport { TimeViewComponent } from './time-view/time-view.component';\nimport { YearViewComponent } from './year-view/year-view.component';\nimport { FocusIfModule } from '../../directives/focus-if/index';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        TimePickerModule,\n        SpinButtonModule,\n        FocusIfModule\n    ],\n    exports: [DateTimePickerComponent],\n    declarations: [DateTimePickerComponent, HeaderComponent, DayViewComponent, MonthViewComponent, YearViewComponent, TimeViewComponent],\n    providers: [\n        DateTimePickerConfig\n    ]\n})\nexport class DateTimePickerModule { }\n","import { ChangeDetectionStrategy, Component, Directive } from '@angular/core';\n\n@Component({\n    selector: 'ux-ebox',\n    template: `<div class=\"ux-ebox-header\">\n    <ng-content select=\"ux-ebox-header\"></ng-content>\n</div>\n\n<div class=\"ux-ebox-content\">\n    <ng-content select=\"ux-ebox-content\"></ng-content>\n</div>`,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class EboxComponent { }\n\n@Directive({\n    selector: 'ux-ebox-header'\n})\nexport class EboxHeaderDirective { }\n\n@Directive({\n    selector: 'ux-ebox-content'\n})\nexport class EboxContentDirective { }\n","import { NgModule } from '@angular/core';\n\nimport { EboxComponent, EboxContentDirective, EboxHeaderDirective } from './ebox.component';\n\n@NgModule({\n    exports: [EboxComponent, EboxContentDirective, EboxHeaderDirective],\n    declarations: [EboxComponent, EboxContentDirective, EboxHeaderDirective]\n})\nexport class EboxModule { }\n","import { Facet } from './models/facet';\n\nexport class FacetSelect {\n    constructor(public facet: Facet) {}\n}\n\nexport class FacetDeselect {\n    constructor(public facet: Facet) {}\n}\n\nexport class FacetDeselectAll {\n    constructor() {}\n}\n\nexport type FacetEvent = FacetSelect | FacetDeselect | FacetDeselectAll;","import { Component, Input, EventEmitter, Output } from '@angular/core';\nimport { FacetEvent, FacetSelect, FacetDeselect, FacetDeselectAll } from './facet-events';\nimport { Facet } from './models/facet';\n\n@Component({\n    selector: 'ux-facet-container',\n    template: `<!-- Display Any Selected Facets -->\n<div class=\"facets-selected-container\">\n\n    <!-- Display Title an Clear Button -->\n    <div class=\"facets-selected-header-container\">\n\n        <!-- Show The Selected Text -->\n        <span class=\"facets-selected-header-label\">{{ header }}</span>\n\n        <!-- Add a Clear Button -->\n        <div class=\"facets-selected-clear-button\" tabindex=\"0\" [uxTooltip]=\"clearTooltip\" placement=\"left\" (click)=\"deselectAllFacets()\"\n            (keyup.enter)=\"deselectAllFacets()\" *ngIf=\"facets.length > 0\">\n\n            <svg class=\"facets-selected-clear-graphic\" viewBox=\"0 0 19 12\" shape-rendering=\"geometricPrecision\">\n                <rect class=\"light-grey\" x=\"0\" y=\"2\" width=\"7\" height=\"2\"></rect>\n                <rect class=\"dark-grey\" x=\"0\" y=\"5\" width=\"9\" height=\"2\"></rect>\n                <rect class=\"light-grey\" x=\"0\" y=\"8\" width=\"7\" height=\"2\"></rect>\n                <path class=\"dark-grey\" d=\"M9,1 h1 l9,9 v1 h-1 l-9,-9 v-1 Z\"></path>\n                <path class=\"dark-grey\" d=\"M9,11 v-1 l9,-9 h1 v1 l-9,9 h-1 Z\"></path>\n            </svg>\n        </div>\n\n    </div>\n\n    <!-- Display Tags For Selected Items -->\n    <div class=\"facets-selected-list\" uxReorderable [reorderingDisabled]=\"!facetsReorderable\" [(reorderableModel)]=\"facets\" (reorderableModelChange)=\"facetsChange.emit(facets)\">\n\n        <!-- Show Selected Tags -->\n        <div class=\"facet-selected-tag\" tabindex=\"0\" *ngFor=\"let facet of facets\" (mousedown)=\"$event.preventDefault()\" (click)=\"deselectFacet(facet)\" (keyup.enter)=\"deselectFacet(facet)\"\n             [uxReorderableModel]=\"facet\">\n\n            <!-- Display Label -->\n            <span class=\"facet-selected-tag-label\" uxReorderableHandle>{{ facet.title }}</span>\n\n            <!-- Display Remove Icon -->\n            <span class=\"hpe-icon hpe-close\"></span>\n        </div>\n\n    </div>\n\n    <!-- Show Message Here if No Facets Selected -->\n    <p class=\"facets-selected-none-label\" *ngIf=\"emptyText && facets.length === 0\">{{ emptyText }}</p>\n\n</div>\n\n<!-- Any Facet Elements Should be Added Here By User -->\n<div class=\"facets-region\">\n    <ng-content></ng-content>\n</div>`\n})\nexport class FacetContainerComponent {\n\n    @Input() header: string = 'Selected:';\n    @Input() clearTooltip: string = 'Clear All';\n    @Input() emptyText: string = 'No Items';\n    @Input() facets: Facet[] = [];\n    @Input() facetsReorderable: boolean = false;\n\n    @Output() facetsChange: EventEmitter<Facet[]> = new EventEmitter<Facet[]>();\n    @Output() events: EventEmitter<FacetEvent> = new EventEmitter<FacetEvent>();\n\n    selectFacet(facet: Facet): void {\n        // push the facet on to the list\n        this.facets.push(facet);\n\n        // update the two way binding\n        this.facetsChange.emit(this.facets);\n\n        // trigger event\n        this.triggerEvent(new FacetSelect(facet));\n    }\n\n    deselectFacet(facet: Facet): void {\n\n        // find the index of the item in the selected array\n        let idx = this.facets.findIndex(selectedFacet => facet === selectedFacet);\n\n        // if match there was no match then finish\n        if (idx === -1) {\n            return;\n        }\n\n        // remove the last item\n        this.facets.splice(idx, 1);\n\n        // update the two way binding\n        this.facetsChange.emit(this.facets);\n\n        // trigger event\n        this.triggerEvent(new FacetDeselect(facet));\n    }\n\n    deselectAllFacets(): void {\n\n        // empty the selected array\n        this.facets = [];\n\n        // update the two way binding\n        this.facetsChange.emit(this.facets);\n\n        // trigger event\n        this.triggerEvent(new FacetDeselectAll());\n    }\n\n    private triggerEvent(event: FacetEvent) {\n        this.events.next(event);\n    }\n}","import { Component, ElementRef, EventEmitter, Host, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { FacetContainerComponent } from '../../facet-container.component';\nimport { FacetDeselect, FacetDeselectAll, FacetEvent, FacetSelect } from '../../facet-events';\nimport { Facet } from '../../models/facet';\n\n@Component({\n    selector: 'ux-facet-base',\n    template: '',\n})\nexport class FacetBaseComponent implements OnInit, OnDestroy {\n\n    @Input() selected: Facet[] = [];\n    @Output() selectedChange: EventEmitter<Facet[]> = new EventEmitter<Facet[]>();\n    @Output() events: Subject<FacetEvent> = new Subject<FacetEvent>();\n\n    protected _onDestroy = new Subject<void>();\n\n    constructor( @Host() private facetContainer: FacetContainerComponent, public _elementRef: ElementRef) {\n\n        if (facetContainer) {\n\n            // subscribe to any deselect events from the facet container\n            facetContainer.events.pipe(\n                filter(event => event instanceof FacetDeselect),\n                filter((event: FacetDeselect) => !!this.selected.find(facet => facet === event.facet)),\n                takeUntil(this._onDestroy)\n            ).subscribe((event: FacetDeselect) => this.deselectFacet(event.facet));\n\n            // subscribe to any deselect all events from facet container\n            facetContainer.events.pipe(\n                filter(event => event instanceof FacetDeselectAll),\n                takeUntil(this._onDestroy)\n            ).subscribe(_ => this.deselectAll());\n\n        }\n    }\n\n    ngOnInit(): void {\n        // check if there should be any facets initially selected\n        if (this.facetContainer) {\n            this.selected.forEach(facet => this.facetContainer.selectFacet(facet));\n        }\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    selectFacet(facet: Facet): void {\n\n        // if the facet is disabled it should not be selected\n        if (facet.disabled) {\n            return;\n        }\n\n        // add the facet to the list of selected facets\n        this.selected.push(facet);\n\n        // send the new value to the event emitter\n        this.selectedChange.emit(this.selected);\n\n        // fire the event to the observable\n        this.triggerEvent(new FacetSelect(facet));\n\n        // tell the facet container about the selected facet\n        if (this.facetContainer) {\n            this.facetContainer.selectFacet(facet);\n        }\n    }\n\n    deselectFacet(facet: Facet): void {\n\n        // find facet to remove\n        let index = this.selected.findIndex(selectedFacet => selectedFacet === facet);\n\n        // only continue if facet is found\n        if (index !== -1) {\n\n            // remove the facet from the selected list\n            this.selected.splice(index, 1);\n\n            // emit the changes to selected event emitter\n            this.selectedChange.emit(this.selected);\n\n            // fire the event to the observable\n            this.triggerEvent(new FacetDeselect(facet));\n\n            // deselect the facet in the facet container\n            if (this.facetContainer) {\n                this.facetContainer.deselectFacet(facet);\n            }\n        }\n    }\n\n    deselectAll(): void {\n\n        // remove all selected facets\n        this.selected = [];\n\n        // fire the event to the observable\n        this.triggerEvent(new FacetDeselectAll());\n\n        // emit the changes to the selected event emitter\n        this.selectedChange.emit(this.selected);\n    }\n\n    toggleFacetSelection(facet: Facet): void {\n\n        // if the facet is selected then deselect - otherwise select it\n        if (this.isFacetSelected(facet)) {\n            this.deselectFacet(facet);\n        } else {\n            this.selectFacet(facet);\n        }\n\n    }\n\n    isFacetSelected(facet: Facet): boolean {\n        // determine if a facet is currently selected\n        return !!this.selected.find(selectedFacet => selectedFacet === facet);\n    }\n\n    private triggerEvent(event: FacetEvent): void {\n        this.events.next(event);\n    }\n}","import { Component, Output, EventEmitter, Input } from '@angular/core';\n\n@Component({\n    selector: 'ux-facet-header',\n    template: `<span class=\"facet-header-title\">{{ header }}</span>\n<span class=\"hpe-icon\" [class.hpe-down]=\"expanded\" [class.hpe-previous]=\"!expanded\" *ngIf=\"canExpand\"></span>`,\n    host: {\n        'tabindex': '0',\n        '(click)': 'toggleExpand()',\n        '(keyup.enter)': 'toggleExpand()'\n    }\n})\nexport class FacetHeaderComponent {\n\n    @Input() header: string;\n    @Input() canExpand: boolean = true;    \n    @Input() expanded: boolean = true;\n    @Output() expandedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    toggleExpand(): void {\n\n        // if not expandable then do nothing\n        if (this.canExpand) {\n            this.expanded = !this.expanded;\n            this.expandedChange.emit(this.expanded);\n        }\n    }\n}","import { Component, Input } from '@angular/core';\nimport { FacetBaseComponent } from '../base/facet-base/facet-base.component';\nimport { Facet } from '../models/facet';\n\n@Component({\n    selector: 'ux-facet-check-list',\n    template: `<ux-facet-header [header]=\"header\" [(expanded)]=\"expanded\"></ux-facet-header>\n\n<!-- Create a container which will show when section is expanded -->\n<div class=\"facet-check-list-container\" [class.facet-check-list-scrollbar]=\"scrollbar\" *ngIf=\"expanded\">\n\n    <!-- Iterate through each possible facet -->\n    <div class=\"facet-check-list-item\" *ngFor=\"let facet of facets\" [class.facet-active]=\"isFacetSelected(facet)\" tabindex=\"0\"\n        (click)=\"toggleFacetSelection(facet)\" (keyup.enter)=\"toggleFacetSelection(facet)\" [class.disabled]=\"facet.disabled\">\n\n        <!-- Show check icon to indicate the state -->\n        <span class=\"facet-check-list-item-check\">\n            <span class=\"hpe-icon hpe-active\"></span>\n        </span>\n\n        <!-- Display the title -->\n        <span class=\"facet-check-list-item-title\">{{ facet.title }}</span>\n\n        <!-- Display the count if specified -->\n        <span class=\"facet-check-list-item-count\" *ngIf=\"facet.count !== undefined\">({{ facet.count }})</span>\n    </div>\n</div>`\n})\nexport class FacetCheckListComponent extends FacetBaseComponent {\n\n    @Input() facets: Facet[] = [];\n    @Input() header: string;\n    @Input() scrollbar: boolean = true;\n    @Input() expanded: boolean = true;\n}","import { Component, Input, OnInit, Pipe, PipeTransform } from '@angular/core';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { Observable } from 'rxjs/Observable';\nimport { from } from 'rxjs/observable/from';\nimport { of } from 'rxjs/observable/of';\nimport { map } from 'rxjs/operators';\nimport { FacetBaseComponent } from '../base/facet-base/facet-base.component';\nimport { Facet } from '../models/facet';\n\n@Component({\n    selector: 'ux-facet-typeahead-list',\n    template: `<ux-facet-header [header]=\"header\" [(expanded)]=\"expanded\"></ux-facet-header>\n\n<div class=\"facet-typeahead-list-container\" *ngIf=\"expanded\">\n\n    <div class=\"facet-typeahead-list-selected-container\" *ngIf=\"suggestions?.length > 0\">\n\n        <div class=\"facet-typeahead-list-selected-option\" tabindex=\"0\" *ngFor=\"let facet of suggestions\" (click)=\"toggleFacetSelection(facet)\"\n            (keyup.enter)=\"toggleFacetSelection(facet)\">\n\n            <ux-checkbox [clickable]=\"false\" [value]=\"isFacetSelected(facet)\" [simplified]=\"simplified\">\n                <span class=\"facet-typeahead-list-selected-option-title\">{{ facet.title }}</span>\n                <span class=\"facet-typeahead-list-selected-option-count\">({{ facet.count }})</span>\n            </ux-checkbox>\n\n        </div>\n\n    </div>\n\n    <div class=\"facet-typeahead-list-control\">\n\n        <!-- Create Typeahead Control -->\n        <input type=\"text\" class=\"form-control\" [placeholder]=\"typeaheadConfig?.placeholder\" [typeahead]=\"typeaheadOptions\" [(ngModel)]=\"searchQuery\"\n            [typeaheadMinLength]=\"typeaheadConfig?.minCharacters\" [typeaheadOptionsLimit]=\"typeaheadConfig?.maxResults\" [typeaheadWaitMs]=\"typeaheadConfig?.delay\"\n            (typeaheadOnSelect)=\"selectOption($event)\" [typeaheadItemTemplate]=\"facetOptionTemplate\" (keyup.ArrowUp)=\"scrollToFocused()\" (keyup.ArrowDown)=\"scrollToFocused()\">\n\n    </div>\n\n</div>\n\n<ng-template #facetOptionTemplate let-model=\"item\" let-index=\"index\">\n    <p class=\"facet-typeahead-list-option\"><span [innerHTML]=\"model.title | facetTypeaheadHighlight: searchQuery\"></span> <span class=\"facet-typeahead-list-option-count\"\n            *ngIf=\"model.count\">({{ model.count }})</span></p>\n</ng-template>`\n})\nexport class FacetTypeaheadListComponent extends FacetBaseComponent implements OnInit {\n\n    @Input() facets: Facet[] | Observable<Facet[]>;\n    @Input() header: string;\n    @Input() expanded: boolean = true;\n    @Input() typeaheadConfig: FacetTypeaheadListConfig = {};\n    @Input() suggestions: Facet[] = [];\n    @Input() simplified: boolean = true;\n\n    typeaheadOptions: Observable<Facet[]>;\n    searchQuery: string;\n\n    private _nativeElement: HTMLElement = this._elementRef.nativeElement as HTMLElement;\n    private _defaultTypeaheadConfig: FacetTypeaheadListConfig = {\n        placeholder: '',\n        maxResults: 50,\n        minCharacters: 1\n    };\n\n    ngOnInit() {\n\n        // wrap the observable and filter out any already selected items or any disabled items\n        if (this.facets instanceof Observable) {\n\n            // handle an observable of data\n            this.typeaheadOptions = from(this.facets).pipe(map((facets: Facet[]) => {\n\n                // remove disabled facets, selected facets and facets that dont match search term\n                return facets.filter(facet => !facet.disabled)\n                    .filter(facet => !this.selected.find(selectedFacet => selectedFacet === facet))\n                    .filter(facet => facet.title.toUpperCase().includes(this.searchQuery.toUpperCase()));\n            }));\n\n        } else {\n\n            // handle an array of data\n            this.typeaheadOptions = of(this.facets).pipe(map((facets: Facet[]) => {\n\n                // remove disabled facets, selected facets and facets that dont match search term\n                return facets.filter(facet => !facet.disabled)\n                    .filter(facet => !this.selected.find(selectedFacet => selectedFacet === facet))\n                    .filter(facet => facet.title.toUpperCase().includes(this.searchQuery.toUpperCase()));\n            }));\n        }\n\n        // provide default values for typeahead config\n        for (let prop in this._defaultTypeaheadConfig) {\n\n            // check if prop has been defined in the users typeahead config - if not set default value\n            if (this.typeaheadConfig.hasOwnProperty(prop) === false) {\n                this.typeaheadConfig[prop] = this._defaultTypeaheadConfig[prop];\n            }\n        }\n    }\n\n    selectOption(typeaheadOption: TypeaheadMatch) {\n\n        // check to make sure that the item is not currently selected\n        if (this.selected.find(facet => facet === typeaheadOption.item)) {\n            return;\n        }\n\n        // select the facet\n        this.selectFacet(typeaheadOption.item);\n\n        // clear the typeahead\n        this.searchQuery = '';\n    }\n\n    scrollToFocused(): void {\n\n        let dropdown = this._nativeElement.querySelector('.dropdown-menu');\n\n        // delay to allow the typeahead ui to update\n        setTimeout(() => {\n\n            // find the currently active element if there is one\n            let activeElement = dropdown.querySelector('.dropdown-menu > li.active');\n\n            if (activeElement) {\n\n                // check if element is not in view\n                let elementBounds = activeElement.getBoundingClientRect();\n                let dropdownBounds = dropdown.getBoundingClientRect();\n\n                if (elementBounds.top < dropdownBounds.top) {\n                    dropdown.scrollTop += elementBounds.top - dropdownBounds.top;\n                }\n\n                if (elementBounds.bottom > dropdownBounds.bottom) {\n                    dropdown.scrollTop += elementBounds.bottom - dropdownBounds.bottom;\n                }\n            }\n        });\n    }\n\n}\n\nexport interface FacetTypeaheadListConfig {\n    placeholder?: string;\n    minCharacters?: number;\n    maxResults?: number;\n    delay?: number;\n}\n\n@Pipe({\n    name: 'facetTypeaheadHighlight'\n})\nexport class FacetTypeaheadHighlight implements PipeTransform {\n    transform(value: string, searchQuery: string): string {\n        let regex = new RegExp(searchQuery, 'i');\n        return value.replace(regex, `<b class=\"facet-typeahead-highlighted\">${ value.match(regex) }</b>`);\n    }\n}","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, TemplateRef, OnDestroy } from '@angular/core';\nimport { AnchorPlacement } from './tooltip.directive';\nimport { Subject } from 'rxjs/Subject';\n\nlet uniqueTooltipId = 0;\n\n@Component({\n  selector: 'ux-tooltip',\n  template: `<div class=\"tooltip in\" [id]=\"id\" [attr.role]=\"role\" [ngClass]=\"[placement, customClass]\">\n    <div class=\"tooltip-arrow\"></div>\n    <div class=\"tooltip-inner\" (cdkObserveContent)=\"reposition()\">\n        <ng-container *ngIf=\"!isTemplateRef\">{{ content }}</ng-container>\n        <ng-container *ngIf=\"isTemplateRef\" [ngTemplateOutlet]=\"content\" [ngTemplateOutletContext]=\"context\"></ng-container>\n    </div>\n</div>`,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TooltipComponent implements OnDestroy {\n\n  /** Define a unique id for each tooltip */\n  id: string = `ux-tooltip-${++uniqueTooltipId}`;\n\n  /** Define the tooltip role */\n  role: string = 'tooltip';\n\n  /** The content of the tooltip, either a string or a TemplateRef for further customization */\n  content: string | TemplateRef<any>;\n\n  /** Allow the user to supply a context for the tooltip TemplateRef */\n  context: any;\n\n  /** The position the tooltip should display relative to the associated element */\n  placement: AnchorPlacement;\n\n  /** Allow a custom class to be added to the tooltip to allow custom styling */\n  customClass: string = '';\n\n  /** Indicates whether or not the content is a string or a TemplateRef */\n  isTemplateRef: boolean = false;\n\n  /** Emit when the tooltip need to update it's position */\n  reposition$ = new Subject<void>();\n\n  constructor(protected _changeDetectorRef: ChangeDetectorRef) {}\n\n  /** Cleanup after the component is destroyed */\n  ngOnDestroy(): void {\n    this.reposition$.complete();\n  }\n\n  /** Inform the parent directive that it needs to recalulate the position */\n  reposition(): void {\n    this.reposition$.next();\n  }\n\n  /** This will update the content of the tooltip and trigger change detection */\n  setContent(content: string | TemplateRef<any>): void {\n    this.content = content;\n    this.isTemplateRef = content instanceof TemplateRef;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** This will update the tooltip placement and trigger change detection */\n  setPlacement(placement: AnchorPlacement) {\n\n    if (!placement) {\n      return;\n    }\n\n    this.placement = placement;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** This will set a custom class on the tooltip and trigger change detection */\n  setClass(customClass: string): void {\n\n    if (!customClass) {\n      return;\n    }\n\n    this.customClass = customClass;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Updates the context used by the TemplateRef */\n  setContext(context: any): void {\n\n    if (!context) {\n      return;\n    }\n\n    this.context = context;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Specify the tooltip role attribute */\n  setRole(role: string): void {\n\n    if (!role) {\n      return;\n    }\n\n    this.role = role;\n    this._changeDetectorRef.markForCheck();\n  }\n}","import { Injectable } from '@angular/core';\nimport { TooltipComponent } from './tooltip.component';\nimport { Subject } from 'rxjs/Subject';\n\n@Injectable()\nexport class TooltipService {\n    shown$ = new Subject<TooltipComponent>();\n}","import { OriginConnectionPosition, Overlay, OverlayConnectionPosition, OverlayRef, ScrollDispatcher } from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { ChangeDetectorRef, Directive, ElementRef, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, Renderer2, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { TooltipComponent } from './tooltip.component';\nimport { TooltipService } from './tooltip.service';\n\n@Directive({\n    selector: '[uxTooltip]',\n    exportAs: 'ux-tooltip'\n})\nexport class TooltipDirective implements OnInit, OnChanges, OnDestroy {\n\n    /** Contains the content of the tooltip or a TemplateRef for more detailed content */\n    @Input('uxTooltip') content: string | TemplateRef<any>;\n\n    /** Allow the tooltip to be conditionally disabled */\n    @Input('tooltipDisabled') disabled: boolean;\n\n    /** All the user to add a custom class to the tooltip */\n    @Input('tooltipClass') customClass: string = '';\n\n    /** All the user to add a role to the tooltip - default is tooltip */\n    @Input('tooltipRole') role: string = 'tooltip';\n\n    /** Provide the TemplateRef a context object */\n    @Input('tooltipContext') context: any = {};\n\n    /** Delay the showing of the tooltip by a number of miliseconds */\n    @Input('tooltipDelay') delay: number = 0;\n\n    /** Programmatically show and hide the tooltip */\n    @Input() isOpen: boolean = false;\n\n    /** Customize how the tooltip should be positioned relative to the element */\n    @Input() placement: AnchorPlacement = 'top';\n\n    /** Specify which events should show the tooltip */\n    @Input() showTriggers: string[] = ['mouseenter', 'focus'];\n\n    /** Specify which events should hide the tooltip */\n    @Input() hideTriggers: string[] = ['mouseleave', 'blur'];\n\n    /** Emits an event when the tooltip is shown */\n    @Output() shown = new EventEmitter<void>();\n\n    /** Emits a event when the tooltip is hidden */\n    @Output() hidden = new EventEmitter<void>();\n\n    /** Allow two way binding to track the visibility of the tooltip */\n    @Output() isOpenChange = new EventEmitter<boolean>();\n\n    /** Keep track of the tooltip visibility */\n    isVisible: boolean = false;\n\n    /** A reference to the CDK portal containing the overlay */\n    protected _portal: ComponentPortal<TooltipComponent>;\n\n    /** A reference to the overlay the tooltip will be inserted into */\n    protected _overlayRef: OverlayRef;\n\n    /** A reference to the instance of the tooltip component when created */\n    protected _instance: TooltipComponent;\n\n    /** This will emit when the directive is destroyed allowing us to unsubscribe all subscriptions automatically */\n    protected _onDestroy = new Subject<void>();\n\n    /** Store the timeout interval for cancelation */\n    private _showTimeoutId: number;\n\n    /** Internally store the type of this component - usual for distinctions when extending this class */\n    protected _type: string = 'tooltip';\n\n    constructor(\n        protected _elementRef: ElementRef,\n        protected _viewContainerRef: ViewContainerRef,\n        protected _overlay: Overlay,\n        protected _scrollDispatcher: ScrollDispatcher,\n        private _changeDetectorRef: ChangeDetectorRef,\n        private _renderer: Renderer2,\n        private _tooltipService: TooltipService\n    ) { }\n\n    /** Set up the triggers and bind to the show/hide events to keep visibility in sync */\n    ngOnInit(): void {\n\n        // set up show and hide event triggers\n        fromEvent(this._elementRef.nativeElement, 'click').pipe(takeUntil(this._onDestroy)).subscribe(this.onClick.bind(this));\n        fromEvent(this._elementRef.nativeElement, 'mouseenter').pipe(takeUntil(this._onDestroy)).subscribe(this.onMouseEnter.bind(this));\n        fromEvent(this._elementRef.nativeElement, 'mouseleave').pipe(takeUntil(this._onDestroy)).subscribe(this.onMouseLeave.bind(this));\n        fromEvent(this._elementRef.nativeElement, 'focus').pipe(takeUntil(this._onDestroy)).subscribe(this.onFocus.bind(this));\n        fromEvent(this._elementRef.nativeElement, 'blur').pipe(takeUntil(this._onDestroy)).subscribe(this.onBlur.bind(this));\n\n        // when any other tooltips open hide this one\n        this._tooltipService.shown$.pipe(\n            filter(() => this._type === 'tooltip'),\n            filter(tooltip => tooltip !== this._instance),\n            takeUntil(this._onDestroy)\n        ).subscribe(this.hide.bind(this));\n\n        // if the tooltip should be initially visible then open it\n        if (this.isOpen) {\n            this.show();\n        }\n    }\n\n    /**\n     * We need to send input changes to the tooltip component\n     * We can't use setters as they may trigger before tooltip initialised and can't resend once initialised\n     **/\n    ngOnChanges(changes: SimpleChanges): void {\n\n        // we can ignore the first change as it's handled in ngOnInit\n        if (changes.isOpen && !changes.isOpen.firstChange && changes.isOpen.currentValue !== this.isVisible) {\n            changes.isOpen.currentValue ? this.show() : this.hide();\n        }\n\n        // destroy the overlay ref so a new correctly positioned instance will be created next time\n        if (changes.placement) {\n            this.destroyOverlay();\n        }\n\n        if (this._instance && changes.placement) {\n            this._instance.setPlacement(changes.placement.currentValue);\n        }\n\n        if (this._instance && changes.content) {\n            this._instance.setContent(changes.content.currentValue);\n        }\n\n        if (this._instance && changes.customClass) {\n            this._instance.setClass(changes.customClass.currentValue);\n        }\n\n        if (this._instance && changes.context) {\n            this._instance.setContext(changes.context.currentValue);\n        }\n\n        if (this._instance && changes.role) {\n            this._instance.setContext(changes.role.currentValue);\n        }\n    }\n\n    /** Ensure we clean up after ourselves */\n    ngOnDestroy(): void {\n\n        // ensure we close the tooltip when the host is destroyed\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._instance = null;\n        }\n\n        // emit this event to automatically unsubscribe from all subscriptions\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    /** Make the tooltip open */\n    show(): void {\n\n        // if the tooltip is disabled then do nothing\n        if (this.disabled || this.isVisible || this._showTimeoutId || !this.content) {\n            return;\n        }\n\n        // delay the show by the delay amount\n        this._showTimeoutId = window.setTimeout(() => {\n\n            // create the tooltip and get the overlay ref\n            const overlayRef = this.createOverlay();\n\n            // create the portal to create the tooltip component\n            this._portal = this.createPortal();\n            this._instance = this.createInstance(overlayRef);\n\n            // watch for any changes to the content\n            this._instance.reposition$.pipe(takeUntil(this._onDestroy)).subscribe(this.reposition.bind(this));\n\n            // store the visible state\n            this.isVisible = true;\n\n            // ensure the overlay has the correct initial position\n            this.reposition();\n\n            // emit the show events\n            this.shown.emit();\n            this.isOpenChange.next(true);\n\n            // clear the interval id\n            this._showTimeoutId = null;\n\n            // emit the show event to close any other tooltips\n            this._tooltipService.shown$.next(this._instance);\n\n            // ensure change detection is run\n            this._changeDetectorRef.detectChanges();\n        }, this.delay);\n\n    }\n\n    /** If a tooltip exists and is visible, hide it */\n    hide() {\n\n        // if we are waiting to show a tooltip then cancel the pending timeout\n        if (this._showTimeoutId) {\n            clearTimeout(this._showTimeoutId);\n            this._showTimeoutId = null;\n            return;\n        }\n\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n        }\n\n        this.setAriaDescribedBy(null);\n        this._instance = null;\n\n        // store the visible state\n        this.isVisible = false;\n\n        // emit the hide events\n        this.hidden.emit();\n        this.isOpenChange.next(false);\n\n        // ensure change detection is run\n        this._changeDetectorRef.detectChanges();\n    }\n\n    /** Toggle the visibility of the tooltip */\n    toggle(): void {\n        this.isVisible ? this.hide() : this.show();\n    }\n\n    /** Recalculate the position of the popover */\n    reposition(): void {\n        if (this.isVisible && this._overlayRef) {\n            this._overlayRef.updatePosition();\n        }\n    }\n\n    /** Create an instance from the overlay ref - allows overriding and additional logic here */\n    protected createInstance(overlayRef: OverlayRef): TooltipComponent {\n        const instance = overlayRef.attach(this._portal).instance as TooltipComponent;\n\n        // supply the tooltip with the correct properties\n        instance.setContent(this.content);\n        instance.setPlacement(this.placement);\n        instance.setClass(this.customClass);\n        instance.setContext(this.context);\n        instance.setRole(this.role);\n\n        // Update the aria-describedby attribute\n        this.setAriaDescribedBy(instance.id);\n\n        return instance;\n    }\n\n    /** Create the component portal - allows overriding to allow other portals eg. popovers */\n    protected createPortal(): ComponentPortal<any> {\n        return this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    }\n\n    /** Create the overlay and set up the scroll handling behavior */\n    private createOverlay(): OverlayRef {\n\n        // if the tooltip has already been created then just return the existing instance\n        if (this._overlayRef) {\n            return this._overlayRef;\n        }\n\n        // configure the tooltip\n        const strategy = this._overlay.position()\n            .connectedTo(this._elementRef, this.getOrigin(), this.getOverlayPosition());\n\n        // correctly handle scrolling\n        const scrollableAncestors = this._scrollDispatcher\n            .getAncestorScrollContainers(this._elementRef);\n\n        strategy.withScrollableContainers(scrollableAncestors);\n\n        this._overlayRef = this._overlay.create({\n            positionStrategy: strategy,\n            panelClass: 'ux-overlay-pane',\n            scrollStrategy: this._overlay.scrollStrategies.reposition({ scrollThrottle: 0 }),\n            hasBackdrop: false\n        });\n\n        return this._overlayRef;\n    }\n\n    /** Recreate the overlay ref using the updated origin and overlay positions */\n    private destroyOverlay(): void {\n\n        // destroy the existing overlay\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n        }\n\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n\n        this.isVisible = false;\n    }\n\n    /** Get the origin position based on the specified tooltip placement */\n    private getOrigin(): OriginConnectionPosition {\n\n        // ensure placement is defined\n        this.placement = this.placement || 'top';\n\n        if (this.placement == 'top' || this.placement == 'bottom') {\n            return { originX: 'center', originY: this.placement };\n        } else if (this.placement == 'left') {\n            return { originX: 'start', originY: 'center' };\n        } else if (this.placement == 'right') {\n            return { originX: 'end', originY: 'center' };\n        }\n    }\n\n    /** Calculate the overlay position based on the specified tooltip placement */\n    private getOverlayPosition(): OverlayConnectionPosition {\n\n        // ensure placement is defined\n        this.placement = this.placement || 'top';\n\n        if (this.placement == 'top') {\n            return { overlayX: 'center', overlayY: 'bottom' };\n        } else if (this.placement == 'bottom') {\n            return { overlayX: 'center', overlayY: 'top' };\n        } else if (this.placement == 'left') {\n            return { overlayX: 'end', overlayY: 'center' };\n        } else if (this.placement == 'right') {\n            return { overlayX: 'start', overlayY: 'center' };\n        }\n    }\n\n    /**\n     * Simple utility method - because IE doesn't support array.includes\n     * And it isn't included in the core-js/es6 polyfills which are the\n     * only ones required by Angular and guaranteed to be there\n     **/\n    protected includes<T>(array: Array<T>, value: T): boolean {\n        return Array.isArray(array) && !!array.find(item => item === value);\n    }\n\n    /** Handle the click event - show or hide accordingly */\n    protected onClick(event: MouseEvent): void {\n\n        // if its not visible and click is a show trigger open it\n        if (!this.isVisible && this.includes(this.showTriggers, 'click')) {\n            return this.show();\n        }\n\n        // if its visible and click is a hide trigger close it\n        if (this.isVisible && this.includes(this.hideTriggers, 'click')) {\n            return this.hide();\n        }\n\n    }\n\n    /** Handle the mouse enter event - show or hide accordingly */\n    protected onMouseEnter(event: MouseEvent): void {\n\n        // this is an show only trigger - if already open or it isn't a trigger do nothing\n        if (this.isVisible || !this.includes(this.showTriggers, 'mouseenter')) {\n            return;\n        }\n\n        // otherwise open the tooltip\n        this.show();\n    }\n\n    /** Handle the mouse leave event - show or hide accordingly */\n    protected onMouseLeave(event: MouseEvent): void {\n\n        // this is an hide only trigger - if not open or it isn't a trigger do nothing\n        if (!this.isVisible || !this.includes(this.hideTriggers, 'mouseleave')) {\n            return;\n        }\n\n        // otherwise close the tooltip\n        this.hide();\n    }\n\n    /** Handle the focus event - show or hide accordingly */\n    protected onFocus(event: Event): void {\n\n        // this is an show only trigger - if already open or it isn't a trigger do nothing\n        if (this.isVisible || !this.includes(this.showTriggers, 'focus')) {\n            return;\n        }\n\n        // otherwise open the tooltip\n        this.show();\n    }\n\n    /** Handle the blur event - show or hide accordingly */\n    protected onBlur(event: Event): void {\n\n        // this is an hide only trigger - if not open or it isn't a trigger do nothing\n        if (!this.isVisible || !this.includes(this.hideTriggers, 'blur')) {\n            return;\n        }\n\n        // otherwise close the tooltip\n        this.hide();\n    }\n\n    /** Determine if the trigger element is focused */\n    private isFocused(): boolean {\n        return document.activeElement === this._elementRef.nativeElement;\n    }\n\n    /** Programmatically update the aria-describedby property */\n    protected setAriaDescribedBy(id: string | null): void {\n        if (id === null) {\n            this._renderer.removeAttribute(this._elementRef.nativeElement, 'aria-describedby');\n        } else {\n            this._renderer.setAttribute(this._elementRef.nativeElement, 'aria-describedby', id);\n        }\n    }\n\n}\n\nexport type AnchorPlacement = 'top' | 'right' | 'bottom' | 'left';","import { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { TooltipComponent } from './tooltip.component';\nimport { TooltipDirective } from './tooltip.directive';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { TooltipService } from './tooltip.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    ObserversModule\n  ],\n  exports: [TooltipDirective],\n  declarations: [TooltipComponent, TooltipDirective],\n  providers: [TooltipService],\n  entryComponents: [TooltipComponent]\n})\nexport class TooltipModule { }\n","import { Directive } from '@angular/core';\n\n@Directive({\n    selector: '[uxReorderableHandle]'\n})\nexport class ReorderableHandleDirective { }\n","import { Directive, Input, ElementRef } from '@angular/core';\n\n@Directive({\n    selector: '[uxReorderableModel]'\n})\nexport class ReorderableModelDirective {\n\n    // allow the user to specify a model for the item - allows use with ngFor\n    @Input() uxReorderableModel: any;\n\n    // this can be used to identify which instance of the directive relates to which element\n    constructor(public elementRef: ElementRef) { }\n}\n","// WORKAROUND: Angular Cli 6 has removed the globals patch, dragular requires this to we can patch it here\n(<any>window).global = (<any>window).global || {};\n\n// WORKAROUND: ng-packagr issue - https://github.com/dherges/ng-packagr/issues/163\nimport * as dragulaNamespace from 'dragula';\nimport { Drake } from 'dragula';\n\nexport const dragula: (containers?: any, options?: any) => Drake = (dragulaNamespace as any).default || dragulaNamespace;","import { Injectable, EventEmitter } from '@angular/core';\nimport { Drake, DragulaOptions } from 'dragula';\nimport { dragula } from './dragula';\n\n@Injectable()\nexport class ReorderableService {\n\n    private _groups: { [k: string]: ReorderableGroup } = {};\n    private _uniqueGroupId = 0;\n\n    /**\n     * Returns a unique string which can be used as a group name if one was not configured.\n     */\n    getUniqueGroupName(): string {\n        return '_uxReorderable_' + this._uniqueGroupId++;\n    }\n\n    /**\n     * Adds the container to the named group.\n     */\n    register(groupName: string, container: ReorderableContainer): ReorderableGroup {\n\n        if (!this._groups[groupName]) {\n            this._groups[groupName] = new ReorderableGroup();\n        }\n\n        this._groups[groupName].register(container);\n\n        return this._groups[groupName];\n    }\n\n    /**\n     * Removes the container from the named group. If it was the last container in the group, destroys the group.\n     */\n    unregister(groupName: string, container: ReorderableContainer): void {\n\n        const group = this._groups[groupName];\n\n        if (group) {\n            group.unregister(container);\n\n            if (group.isEmpty()) {\n                group.destroy();\n\n                delete this._groups[groupName];\n            }\n        }\n    }\n\n    /**\n     * Creates the dragula instance with the current config and attaches the events, if not already created.\n     */\n    initialize(groupName: string): ReorderableGroup {\n\n        const group = this._groups[groupName];\n\n        if (group) {\n            group.initialize();\n        }\n\n        return group;\n    }\n\n    /**\n     * Returns the group object for the given name.\n     */\n    getGroup(group: string): ReorderableGroup {\n        return this._groups[group];\n    }\n}\n\nexport interface ReorderableContainer {\n    element: Element;\n    getModelFromElement: (element: Element) => any;\n    canMove: (element: Element, container: Element, handle: Element) => boolean;\n}\n\nexport interface ReorderableDragEvent {\n    model: any;\n    element: Element;\n    source: Element;\n}\n\nexport interface ReorderableDragEndEvent {\n    model: any;\n    element: Element;\n}\n\nexport interface ReorderableDropEvent {\n    model: any;\n    element: Element;\n    target: Element;\n    source: Element;\n    sibling: Element;\n}\n\nexport interface ReorderableCancelEvent {\n    model: any;\n    element: Element;\n}\n\nexport interface ReorderableClonedEvent {\n    clone: Element;\n    element: Element;\n    type: string;\n}\n\n/**\n * Represents a collection of drag-and-drop containers (uxReorderable) that items can be dragged between.\n */\nexport class ReorderableGroup {\n\n    drag = new EventEmitter<ReorderableDragEvent>();\n    dragEnd = new EventEmitter<ReorderableDragEndEvent>();\n    drop = new EventEmitter<ReorderableDropEvent>();\n    cancel = new EventEmitter<ReorderableCancelEvent>();\n    cloned = new EventEmitter<ReorderableClonedEvent>();\n\n    private _instance: Drake;\n    private _containers: ReorderableContainer[] = [];\n\n    private _config: DragulaOptions = {\n        moves: this.canMove.bind(this)\n    };\n\n    /**\n     * Returns true if there are no containers registered with the group.\n     */\n    isEmpty(): boolean {\n        return this._containers.length === 0;\n    }\n\n    /**\n     * Returns the model object (uxReorderableModel) for an elements in one of the containers in the group.\n     */\n    getModelForElement(element: Element): any {\n        for (const container of this._containers) {\n            const model = container.getModelFromElement(element);\n            if (model) {\n                return model;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Adds the container to the group.\n     */\n    register(container: ReorderableContainer): void {\n        this._containers.push(container);\n\n        if (this._instance) {\n            this._instance.containers = this._containers.map((c) => c.element);\n        }\n\n        if (!this._config.mirrorContainer) {\n            this._config.mirrorContainer = container.element;\n        }\n    }\n\n    /**\n     * Removes the container from the group.\n     */\n    unregister(container: ReorderableContainer): void {\n        const index = this._containers.indexOf(container);\n        if (index >= 0) {\n            this._containers.splice(index, 1);\n            if (this._instance) {\n                this._instance.containers = this._containers.map((c) => c.element);\n            }\n        }\n    }\n\n    /**\n     * Creates the dragula instance with the current config and attaches the events, if not already created.\n     */\n    initialize(): void {\n\n        if (this._instance) {\n            return;\n        }\n\n        this._instance = dragula(this._containers.map((c) => c.element), this._config);\n\n        this._instance.on('drag', (element: Element, source: Element) => {\n            this.drag.emit({\n                model: this.getModelForElement(element),\n                element: element,\n                source: source\n            });\n        });\n        this._instance.on('dragend', (element: Element) => {\n            this.dragEnd.emit({\n                model: this.getModelForElement(element),\n                element: element\n            });\n        });\n        this._instance.on('drop', (element: Element, target: Element, source: Element, sibling: Element) => {\n            this.drop.emit({\n                model: this.getModelForElement(element),\n                element: element,\n                target: target,\n                source: source,\n                sibling: sibling\n            });\n        });\n        this._instance.on('cancel', (element: Element) => {\n            this.cancel.emit({\n                model: this.getModelForElement(element),\n                element: element\n            });\n        });\n        this._instance.on('cloned', (clone: Element, element: Element, type: string) => {\n            this.cloned.emit({\n                clone: clone,\n                element: element,\n                type: type\n            });\n        });\n    }\n\n    /**\n     * Destroys the dragula instance.\n     */\n    destroy(): void {\n        if (this._instance) {\n            this._instance.destroy();\n            this._instance = null;\n        }\n    }\n\n    /**\n     * Finds the container for the containerElement and returns the results of canMove.\n     */\n    private canMove(element: Element, containerElement: Element, handle: Element): boolean {\n        for (let container of this._containers) {\n            if (container.element.isSameNode(containerElement)) {\n                return container.canMove(element, containerElement, handle);\n            }\n        }\n    }\n}\n","import { AfterViewInit, ContentChildren, Directive, ElementRef, EventEmitter, HostBinding, Input, OnDestroy, OnInit, Output, QueryList, Renderer2 } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { ReorderableHandleDirective } from './reorderable-handle.directive';\nimport { ReorderableModelDirective } from './reorderable-model.directive';\nimport { ReorderableCancelEvent, ReorderableClonedEvent, ReorderableContainer, ReorderableDragEndEvent, ReorderableDragEvent, ReorderableDropEvent, ReorderableService } from './reorderable.service';\n\n@Directive({\n    selector: '[uxReorderable]'\n})\nexport class ReorderableDirective implements OnInit, AfterViewInit, OnDestroy {\n\n    @Input() reorderableModel: Array<any>;\n    @Input() reorderableGroup: string;\n    @Input() reorderingDisabled: boolean = false;\n    @Output() reorderableModelChange = new EventEmitter<Array<any>>();\n    @Output() reorderStart = new EventEmitter<ReorderEvent>();\n    @Output() reorderCancel = new EventEmitter<ReorderEvent>();\n    @Output() reorderEnd = new EventEmitter<ReorderEvent>();\n\n    @ContentChildren(ReorderableHandleDirective, { read: ElementRef, descendants: true }) handles: QueryList<ElementRef>;\n    @ContentChildren(ReorderableModelDirective) models: QueryList<ReorderableModelDirective>;\n\n    private _container: ReorderableContainer;\n\n    @HostBinding('class.ux-reorderable-container-moving') dragging = false;\n\n    private _subscriptions = new Subscription();\n\n    constructor(\n        private _elementRef: ElementRef,\n        private _renderer: Renderer2,\n        private _service: ReorderableService\n    ) { }\n\n    /**\n     * Initialise dragula and bind to all the required events\n     */\n    ngOnInit(): void {\n\n        // If no group name then generate a unique one for this instance only\n        if (!this.reorderableGroup) {\n            this.reorderableGroup = this._service.getUniqueGroupName();\n        }\n\n        this._container = {\n            element: this._elementRef.nativeElement,\n            getModelFromElement: this.getModelFromElement.bind(this),\n            canMove: this.canMove.bind(this)\n        };\n\n        // Register for drag events on this element\n        const group = this._service.register(this.reorderableGroup, this._container);\n        this._subscriptions.add(group.drag.subscribe(this.onDrag.bind(this)));\n        this._subscriptions.add(group.dragEnd.subscribe(this.onDragEnd.bind(this)));\n        this._subscriptions.add(group.drop.subscribe(this.onDrop.bind(this)));\n        this._subscriptions.add(group.cancel.subscribe((event: ReorderableCancelEvent) => this.reorderCancel.emit({ element: event.element, model: event.model })));\n        this._subscriptions.add(group.cloned.subscribe(this.onClone.bind(this)));\n    }\n\n    ngAfterViewInit(): void {\n        this._service.initialize(this.reorderableGroup);\n    }\n\n    /**\n     * We need to destroy the dragula instance on component destroy\n     */\n    ngOnDestroy(): void {\n        this._service.unregister(this.reorderableGroup, this._container);\n        this._subscriptions.unsubscribe();\n    }\n\n    onDrag(event: ReorderableDragEvent): void {\n\n        this.dragging = true;\n\n        this.reorderStart.emit({ element: event.element, model: event.model });\n    }\n\n    /**\n     * This is fired when items get reordered - we need to emit the new order of the models\n     */\n    onDrop(event: ReorderableDropEvent): void {\n\n        // if there is no provided module we can skip this\n        if (!this.reorderableModel) {\n            return;\n        }\n\n        let changed = false;\n\n        if (event.source.isSameNode(this._elementRef.nativeElement)) {\n\n            // remove this model from the list of models\n            const index = this.reorderableModel.indexOf(event.model);\n            if (index >= 0) {\n                this.reorderableModel.splice(index, 1);\n                changed = true;\n            }\n        }\n\n        if (event.target.isSameNode(this._elementRef.nativeElement)) {\n\n            // get the position of sibling element\n            const index = event.sibling && !event.sibling.classList.contains('gu-mirror') ?\n                this.reorderableModel.indexOf(this.getModelFromElement(event.sibling)) :\n                this.reorderableModel.length;\n\n            // insert the model at its new location\n            this.reorderableModel.splice(index, 0, event.model);\n            changed = true;\n        }\n\n        // Emit event if any changes were made\n        if (changed) {\n            this.reorderableModelChange.emit(this.reorderableModel);\n        }\n    }\n\n    /**\n     * Return the model assciated with a particular element in the list.\n     * This should ensure that the items have the draggable model directive applied\n     */\n    getModelFromElement(element: Element): any {\n\n        const model = this.models.find(_model => _model.elementRef.nativeElement === element);\n\n        if (!model) {\n            return null;\n        }\n\n        return model.uxReorderableModel;\n    }\n\n    /**\n     * When we finish dragging remove the utillity class from the element being moved\n     */\n    onDragEnd(event: ReorderableDragEndEvent): void {\n\n        this.dragging = false;\n\n        if (this._elementRef.nativeElement.contains(event.element)) {\n\n            this._renderer.removeClass(event.element, 'ux-reorderable-moving');\n\n            this.reorderEnd.emit({\n                element: event.element,\n                model: event.model\n            });\n        }\n    }\n\n    /**\n     * We want to ensure that the cloned element is identical\n     * to the original, regardless of it's location in the DOM tree\n     */\n    onClone(event: ReorderableClonedEvent): void {\n\n        if (this._elementRef.nativeElement.contains(event.element)) {\n\n            this.setTableCellWidths(event.element, event.clone);\n            this.captureCanvases(event.element, event.clone);\n\n            this._renderer.addClass(event.element, 'ux-reorderable-moving');\n        }\n    }\n\n    /**\n     * If elements contain handles then only drag when the handle is dragged\n     * otherwise drag whenever an immediate child is specified\n     */\n    canMove(element: Element, container: Element, handle: Element): boolean {\n        if (this.reorderingDisabled) {\n            return false;\n        }\n        return this.handles.length === 0 ? true : !!this.handles.find(_handle => _handle.nativeElement === handle);\n    }\n\n    private setTableCellWidths(source: Element, target: Element): void {\n\n        // if it is not a table row then skip this\n        if (source.tagName !== 'TR') {\n            return;\n        }\n\n        // find any immediate td children and fix their width\n        const sourceCells = Array.from(source.children) as HTMLTableCellElement[];\n        const targetCells = Array.from(target.children) as HTMLTableCellElement[];\n\n        // fix the width of these cells\n        sourceCells.forEach((cell, idx) => targetCells[idx].style.minWidth = getComputedStyle(cell).getPropertyValue('width'));\n    }\n\n    private captureCanvases(source: Element, target: Element): void {\n\n        // find all child canvas elements\n        const sourceCanvases = Array.from(source.querySelectorAll('canvas'));\n        const targetCanvases = Array.from(target.querySelectorAll('canvas'));\n\n        // replicate the canvas content\n        targetCanvases.map(canvas => canvas.getContext('2d'))\n            .forEach((context, idx) => context.drawImage(sourceCanvases[idx], 0, 0));\n\n    }\n\n}\n\nexport interface ReorderEvent {\n    element: Element;\n    model: any;\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReorderableDirective } from './reorderable.directive';\nimport { ReorderableHandleDirective } from './reorderable-handle.directive';\nimport { ReorderableModelDirective } from './reorderable-model.directive';\nimport { ReorderableService } from './reorderable.service';\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    declarations: [\n        ReorderableDirective,\n        ReorderableHandleDirective,\n        ReorderableModelDirective\n    ],\n    exports: [\n        ReorderableDirective,\n        ReorderableHandleDirective,\n        ReorderableModelDirective\n    ],\n    providers: [\n        ReorderableService\n    ]\n})\nexport class ReorderableModule { }\n","import { NgModule } from '@angular/core';\nimport { TypeaheadModule } from 'ngx-bootstrap/typeahead';\nimport { CommonModule } from '@angular/common';\nimport { FacetContainerComponent } from './facet-container.component';\nimport { FacetBaseComponent } from './base/facet-base/facet-base.component';\nimport { FacetHeaderComponent } from './base/facet-header/facet-header.component';\nimport { FacetCheckListComponent } from './facet-check-list/facet-check-list.component';\nimport { FacetTypeaheadListComponent, FacetTypeaheadHighlight } from './facet-typeahead-list/facet-typeahead-list.component';\nimport { FormsModule } from '@angular/forms';\nimport { CheckboxModule } from '../checkbox/index';\nimport { TooltipModule } from '../tooltip/index';\nimport { ReorderableModule } from './../../directives/reorderable/reorderable.module';\n\nconst DECLARATIONS = [\n    FacetContainerComponent,\n    FacetHeaderComponent,\n    FacetBaseComponent,\n    FacetCheckListComponent,\n    FacetTypeaheadListComponent,\n    FacetTypeaheadHighlight\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        CheckboxModule,\n        TooltipModule,\n        ReorderableModule,\n        TypeaheadModule.forRoot()\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS\n})\nexport class FacetsModule { }\n","export class Facet {\n    \n    constructor(\n        public title: string,\n        public data: any = {},\n        public count?: number,\n        public disabled: boolean = false,\n        public id?: string | number\n    ) { }\n}","import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n    selector: 'ux-filter-container',\n    template: `<ng-content></ng-content>\n\n<!-- Add a Clear Button -->\n<div class=\"filter-selected-clear-button\" *ngIf=\"filters.length > 0\" [uxTooltip]=\"clearTooltip || 'Clear All'\" (click)=\"removeAll()\">\n\n    <svg class=\"filter-selected-clear-graphic\" width=\"19\" height=\"12\" viewBox=\"0 0 19 12\" shape-rendering=\"geometricPrecision\">\n        <rect class=\"light-grey\" x=\"0\" y=\"2\" width=\"7\" height=\"2\"></rect>\n        <rect class=\"dark-grey\" x=\"0\" y=\"5\" width=\"9\" height=\"2\"></rect>\n        <rect class=\"light-grey\" x=\"0\" y=\"8\" width=\"7\" height=\"2\"></rect>\n        <path class=\"dark-grey\" d=\"M9,1 h1 l9,9 v1 h-1 l-9,-9 v-1 Z\"></path>\n        <path class=\"dark-grey\" d=\"M9,11 v-1 l9,-9 h1 v1 l-9,9 h-1 Z\"></path>\n    </svg>\n\n</div>`\n})\nexport class FilterContainerComponent {\n\n    @Input() filters: Filter[] = [];\n    @Input() clearTooltip: string;\n    @Output() filtersChange: EventEmitter<Filter[]> = new EventEmitter<Filter[]>();\n    @Output() events: EventEmitter<FilterEvent> = new EventEmitter<FilterEvent>();\n\n\n    addFilter(filter: Filter): void {\n        this.filters.push(filter);\n        this.events.next(new FilterAddEvent(filter));\n        this.filtersChange.emit(this.filters);\n    }\n\n    removeFilter(filter: Filter): void {\n        let idx = this.filters.findIndex(filters => filters === filter);\n\n        if (idx !== -1) {\n            this.filters.splice(idx, 1);\n            this.events.next(new FilterRemoveEvent(filter));\n            this.filtersChange.emit(this.filters);\n        }\n    }\n\n    removeAll(): void {\n        this.events.next(new FilterRemoveAllEvent());\n    }\n\n}\n\nexport interface Filter {\n    group: string;\n    title: string;\n    name: string;\n    initial?: boolean;\n}\n\nexport class FilterAddEvent {\n    constructor(public filter: Filter) {}\n}\n\nexport class FilterRemoveEvent {\n    constructor(public filter: Filter) {}\n}\n\nexport class FilterRemoveAllEvent {\n}\n\nexport type FilterEvent = FilterAddEvent | FilterRemoveEvent | FilterRemoveAllEvent;","\nimport { Directive, Host, Input, OnDestroy } from '@angular/core';\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs/Subscription';\nimport { Filter, FilterContainerComponent, FilterRemoveAllEvent } from '../filter-container.component';\n\n@Directive({\n    selector: 'ux-filter-base'\n})\nexport class FilterBaseComponent implements OnDestroy {\n\n    @Input() filters: Filter[];\n\n    private _subscription: Subscription;\n\n    constructor(@Host() private filtersContainer: FilterContainerComponent) {\n        this._subscription = filtersContainer.events.pipe(filter(event => event instanceof FilterRemoveAllEvent)).subscribe(this.removeFilter.bind(this));\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    addFilter(_filter: Filter): void {\n        if (!_filter.initial) {\n            this.filtersContainer.addFilter(_filter);\n        }\n    }\n\n    removeFilter(_filter: Filter): void {\n        if (!_filter) {\n            return;\n        }\n\n        this.filtersContainer.removeFilter(_filter);\n    }\n\n}","import { Component, Input } from '@angular/core';\nimport { FilterBaseComponent } from '../filter-base/filter-base.component';\nimport { Filter } from '../filter-container.component';\n\n@Component({\n    selector: 'ux-filter-dropdown',\n    template: `<div class=\"btn-group\" dropdown>\n    <button dropdownToggle type=\"button\" class=\"filter-dropdown btn dropdown-toggle\" [class.active]=\"selected !== initial\">{{ selected?.title }} \n        <span class=\"hpe-icon hpe-down\"></span>\n    </button>\n    <ul *dropdownMenu class=\"dropdown-menu\" role=\"menu\">\n        <li class=\"dropdown-list-item\" *ngFor=\"let filter of filters\" role=\"menuitem\">\n            <a class=\"dropdown-item\" (click)=\"selectFilter(filter)\">\n                <i class=\"hpe-icon\" [class.hpe-checkmark]=\"filter === selected\"></i>\n                <span class=\"filter-dropdown-title\">{{ filter.name }}</span>\n            </a>\n        </li>\n    </ul>\n</div>`,\n})\nexport class FilterDropdownComponent extends FilterBaseComponent {\n\n    @Input() initial: Filter;\n\n    selected: Filter;\n\n    removeFilter(): void {\n        super.removeFilter(this.selected);\n        this.selected = this.initial;\n    }\n\n    ngOnInit() {\n        this.selected = this.initial;\n    }\n\n    selectFilter(filter: Filter) {\n        this.removeFilter();\n        this.selected = filter;\n        this.addFilter(this.selected);\n    }\n\n}","import { Component, Input, ViewChild } from '@angular/core';\nimport { BsDropdownDirective } from 'ngx-bootstrap/dropdown';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { FilterBaseComponent } from '../filter-base/filter-base.component';\nimport { Filter } from '../filter-container.component';\n\n@Component({\n    selector: 'ux-filter-dynamic',\n    template: `<div class=\"btn-group ux-dynamic-filter\" dropdown #dynamicDropdown=\"bs-dropdown\">\n    <button (click)=\"dynamicDropdown.show()\" type=\"button\" [class.active]=\"selected !== initial\" class=\"filter-dropdown btn dropdown-toggle\">{{ selected?.title }} \n        <span class=\"hpe-icon hpe-down\"></span>\n    </button>\n    <ul *dropdownMenu class=\"dropdown-menu\" role=\"menu\">\n\n        <li class=\"dropdown-list-item\" *ngIf=\"showTypeahead\" role=\"menuitem\">\n            <a class=\"dropdown-item\" (click)=\"removeFilter(); dynamicDropdown.hide();\">\n                <i class=\"hpe-icon\" [class.hpe-checkmark]=\"initial === selected\"></i>\n                <span class=\"filter-dropdown-title\">{{ initial.name }}</span>\n            </a>\n        </li>\n\n        <li class=\"dropdown-list-item\" *ngIf=\"selected !== initial && showTypeahead\" role=\"menuitem\">\n            <a class=\"dropdown-item\">\n                <i class=\"hpe-icon hpe-checkmark\"></i>\n                <span class=\"filter-dropdown-title\">{{ selected.name }}</span>\n            </a>\n        </li>\n\n        <hr>\n\n        <li *ngIf=\"showTypeahead\" class=\"typeahead-box\">\n            <input [(ngModel)]=\"searchQuery\" [typeahead]=\"typeaheadItems\" class=\"form-control\" \n            (typeaheadOnSelect)=\"selectOption($event)\" \n            [placeholder]=\"options?.placeholder || defaultOptions.placeholder\"\n            [typeaheadMinLength]=\"options?.minCharacters || defaultOptions.minCharacters\"\n            [typeaheadOptionsLimit]=\"options?.maxResults\">\n        </li>\n\n        <span *ngIf=\"!showTypeahead\">\n            <li class=\"dropdown-list-item\" *ngFor=\"let filter of filters\" role=\"menuitem\">\n                <a class=\"dropdown-item\" (click)=\"selectFilter(filter)\">\n                    <i class=\"hpe-icon\" [class.hpe-checkmark]=\"filter === selected\"></i>\n                    <span class=\"filter-dropdown-title\">{{ filter.name }}</span>\n                </a>\n            </li>\n        </span>\n\n    </ul>\n</div>`,\n    host: {\n        '(document:click)': 'clickOff($event)',\n    }\n})\nexport class FilterDynamicComponent extends FilterBaseComponent {\n\n    @Input() filters: Filter[];\n    @Input() initial: Filter;\n    @Input() options: FilterDynamicListConfig;\n\n    @ViewChild(BsDropdownDirective) dropdown: BsDropdownDirective;\n\n    defaultOptions: FilterDynamicListConfig = {\n        placeholder: '',\n        minCharacters: 3\n    };\n    searchQuery: string;\n    selected: Filter;\n    showTypeahead: boolean = true;\n    typeaheadItems: string[] = [];\n\n    getItems(): string[] {\n        return this.filters.filter(item => item !== this.initial).map(item => item.name);\n    }\n\n    ngOnInit() {\n        this.selected = this.initial;\n        this.typeaheadItems = this.getItems();\n\n        if (this.options && this.options.maxIndividualItems && this.options.maxIndividualItems + 1 >= this.filters.length) {\n            this.showTypeahead = false;\n        }\n    }\n\n    selectOption(typeaheadOption: TypeaheadMatch) {\n        this.removeFilter();\n        let idx = this.filters.findIndex(filter => filter.name === typeaheadOption.value);\n        this.selected = this.filters[idx];\n        this.addFilter(this.selected);\n        this.searchQuery = '';\n        this.dropdown.hide();\n    }\n\n    clickOff(event: MouseEvent) {\n\n        let target = event.target as HTMLElement;\n        let hideDropdown = true;\n\n        while (target && target.nodeName !== 'BODY') {\n            if (target.classList.contains('ux-dynamic-filter')) {\n                hideDropdown = false;\n                break;\n            } else {\n                target = target.parentElement;\n            }\n        }\n\n        if (hideDropdown) {\n            this.searchQuery = '';\n            this.dropdown.hide();\n        }\n\n    }\n\n    removeFilter(): void {\n        if (this.selected !== this.initial) {\n            super.removeFilter(this.selected);\n            this.selected = this.initial;\n        }\n        this.searchQuery = '';\n    }\n\n    selectFilter(filter: Filter) {\n        this.removeFilter();\n        this.selected = filter;\n        this.addFilter(this.selected);\n    }\n\n}\n\nexport interface FilterDynamicListConfig {\n    placeholder?: string;\n    minCharacters?: number;\n    maxResults?: number;\n    maxIndividualItems?: number;\n}","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\nimport { TypeaheadModule } from 'ngx-bootstrap/typeahead';\nimport { TooltipModule } from '../tooltip/index';\nimport { FilterBaseComponent } from './filter-base/filter-base.component';\nimport { FilterContainerComponent } from './filter-container.component';\nimport { FilterDropdownComponent } from './filter-dropdown/filter-dropdown.component';\nimport { FilterDynamicComponent } from './filter-dynamic/filter-dynamic.component';\n\nconst DECLARATIONS = [\n    FilterBaseComponent,\n    FilterContainerComponent,\n    FilterDropdownComponent,\n    FilterDynamicComponent\n];\n\n@NgModule({\n    imports: [\n        BsDropdownModule.forRoot(),\n        TypeaheadModule.forRoot(),\n        TooltipModule,\n        FormsModule,\n        CommonModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS\n})\nexport class FilterModule { }\n","import { Component, Input, Directive, HostListener, Output, EventEmitter } from '@angular/core';\n\n@Component({\n    selector: 'ux-flippable-card',\n    template: `<div class=\"ux-flipper\" [class.ux-flip-card]=\"flipped\" [style.width.px]=\"width\" [style.height.px]=\"height\">\n\n    <div class=\"ux-flippable-card-front\" [style.width.px]=\"width\" [style.height.px]=\"height\">\n        <ng-content select=\"ux-flippable-card-front\"></ng-content>\n    </div>\n\n    <div class=\"ux-flippable-card-back\" [style.width.px]=\"width\" [style.height.px]=\"height\">\n        <ng-content select=\"ux-flippable-card-back\"></ng-content>\n    </div>\n</div>`,\n    host: {\n        '[class.horizontal]': 'direction === \"horizontal\"',\n        '[class.vertical]': 'direction === \"vertical\"'\n    },\n    exportAs: 'ux-flippable-card'\n})\nexport class FlippableCardComponent {\n\n    @Input() direction: 'horizontal' | 'vertical' = 'horizontal';\n    @Input() trigger: 'click' | 'hover' | 'manual' = 'hover';\n    @Input() width: number = 280;\n    @Input() height: number = 200;\n    @Input() flipped: boolean = false;\n    @Output() flippedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    setFlipped(state: boolean) {\n        this.flipped = state;\n        this.flippedChange.emit(this.flipped);\n    }\n\n    toggleFlipped() {\n        this.setFlipped(!this.flipped);\n    }\n\n    @HostListener('click') clickTrigger() {\n\n        // add or remove the class depending on whether or not the card has been flipped\n        if (this.trigger === 'click') {\n            this.toggleFlipped();\n        }\n    }\n\n    @HostListener('mouseenter') hoverEnter() {\n        // if the trigger is hover then begin to flip\n        if (this.trigger === 'hover') {\n            this.setFlipped(true);\n        }\n    }\n\n    @HostListener('mouseleave') hoverExit() {\n        if (this.trigger === 'hover') {\n            this.setFlipped(false);\n        }\n    }\n}\n\n\n@Directive({\n    selector: 'ux-flippable-card-front'\n})\nexport class FlippableCardFrontDirective { }\n\n@Directive({\n    selector: 'ux-flippable-card-back'\n})\nexport class FlippableCardBackDirective { }\n","import { NgModule } from '@angular/core';\n\nimport { FlippableCardComponent, FlippableCardBackDirective, FlippableCardFrontDirective } from './flippable-card.component';\n\n@NgModule({\n    exports: [FlippableCardComponent, FlippableCardBackDirective, FlippableCardFrontDirective],\n    declarations: [FlippableCardComponent, FlippableCardBackDirective, FlippableCardFrontDirective]\n})\nexport class FlippableCardModule { }\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\n@Injectable()\nexport class FloatingActionButtonsService {\n\n    open$ = new BehaviorSubject<boolean>(false);\n\n    open(): void {\n        this.open$.next(true);\n    }\n\n    toggle(): void {\n        this.open$.next(!this.open$.getValue());\n    }\n\n    close(): void {\n        this.open$.next(false);\n    }\n}","import { animate, query, stagger, style, transition, trigger } from '@angular/animations';\nimport { AfterViewInit, ChangeDetectionStrategy, Component, ContentChildren, ElementRef, HostListener, Input, OnDestroy, QueryList } from '@angular/core';\nimport { TooltipDirective } from 'ngx-bootstrap/tooltip';\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs/Subscription';\nimport { FloatingActionButtonsService } from './floating-action-buttons.service';\n\n@Component({\n    selector: 'ux-floating-action-buttons',\n    template: `<ng-content select=\"[fab-primary]\"></ng-content>\n\n<div class=\"floating-action-button-list\" [@fabAnimation]=\"fab.open$ | async\" [ngClass]=\"direction\" *ngIf=\"fab.open$ | async\">\n    <ng-content></ng-content>\n</div>`,\n    providers: [FloatingActionButtonsService],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    animations: [\n        trigger('fabAnimation', [\n            transition('void => true', [\n                query('ux-floating-action-button', style({ opacity: 0 })),\n                query('ux-floating-action-button', stagger(50, animate(250, style({ opacity: 1 }))))\n            ]),\n            transition('true => void', [\n                query('ux-floating-action-button', stagger(-50, animate(250, style({ opacity: 0 }))))\n            ])\n        ])\n    ]\n})\nexport class FloatingActionButtonsComponent implements AfterViewInit, OnDestroy {\n\n    @Input() direction: FloatingActionButtonDirection = 'top';\n    @ContentChildren(TooltipDirective) tooltips: QueryList<TooltipDirective>;\n\n    private _subscription: Subscription;\n\n    constructor(public fab: FloatingActionButtonsService, private _elementRef: ElementRef) { }\n\n    ngAfterViewInit(): void {\n        this._subscription = this.fab.open$.pipe(filter(open => open === false))\n            .subscribe(() => this.tooltips.forEach(tooltip => tooltip.hide()));\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    /*\n     * Detect any clicks to trigger close of the menu\n     */\n    @HostListener('document:click', ['$event.target']) close(target: HTMLElement): void {\n        if (!this._elementRef.nativeElement.contains(target)) {\n            this.fab.close();\n        }\n    }\n}\n\nexport type FloatingActionButtonDirection = 'top' | 'right' | 'bottom' | 'left';","import { Attribute, ChangeDetectionStrategy, Component, HostBinding, Input } from '@angular/core';\nimport { FloatingActionButtonsService } from './floating-action-buttons.service';\n\n@Component({\n    selector: 'ux-floating-action-button',\n    template: `<button class=\"btn floating-action-button\" \n        [class.button-primary]=\"primary\" \n        [class.button-secondary]=\"!primary\" \n        (click)=\"primary ? fab.open() : fab.close()\">\n\n    <span class=\"hpe-icon floating-action-button-icon\" *ngIf=\"icon\" [ngClass]=\"icon\"></span>\n    <ng-content *ngIf=\"!icon\"></ng-content>\n\n</button>`,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false\n})\nexport class FloatingActionButtonComponent {\n\n    @Input() icon: string;\n    @HostBinding() tabindex = 1;\n\n    primary: boolean = false;\n\n    constructor(@Attribute('fab-primary') primary: string, public fab: FloatingActionButtonsService) {\n        this.primary = primary !== null;\n    }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FloatingActionButtonsComponent } from './floating-action-buttons.component';\nimport { FloatingActionButtonComponent } from './floating-action-button.component';\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    exports: [\n        FloatingActionButtonsComponent,\n        FloatingActionButtonComponent\n    ],\n    declarations: [\n        FloatingActionButtonsComponent,\n        FloatingActionButtonComponent\n    ]\n})\nexport class FloatingActionButtonsModule { }\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\nimport { of } from 'rxjs/observable/of';\nimport { first } from 'rxjs/operators';\n\n@Injectable()\nexport class HierarchyBarService {\n\n    nodes$ = new BehaviorSubject<HierarchyBarNode[]>([]);\n\n    private _root: HierarchyBarNode;\n    private _nodes: HierarchyBarNode[] = [];\n\n    /**\n     * Store the root node of the hierarchy tree\n     */\n    setRootNode(root: HierarchyBarNode) {\n\n        // store the root node\n        this._root = root;\n\n        // create a flat structure of nodes\n        this._nodes = this.getNodeList(root);\n\n        // flatten the array - based on the selected node\n        this.nodes$.next(this.getSelectedChildren(root));\n    }\n\n    /**\n     * Select a node. This causes all nodes to be\n     * deselected and the path to the selected node\n     * to be selected\n     */\n    selectNode(node: HierarchyBarNode): void {\n\n        // deselect all nodes\n        this.deselectAll();\n\n        // ensure the current node is selected and its parents\n        this.select(node);\n\n        // emit a new node list to trigger change detection\n        this.nodes$.next(this.getSelectedChildren(this._root));\n    }\n\n    /**\n     * Handles getting children with support for both arrays and observables\n     */\n    getChildren(node: HierarchyBarNode): Observable<HierarchyBarNodeChildren> {\n\n        if (Array.isArray(node.children)) {\n            return of({ loading: false, children: node.children });\n        }\n\n        const children$: Observable<HierarchyBarNode[]> = node.children;\n\n        // if it is an observable then handle loading\n        return Observable.create((observer: Observer<HierarchyBarNodeChildren>) => {\n            // emit initial value\n            observer.next({ loading: true, children: [] });\n\n            // now wait until the children observable completes\n            children$.pipe(first()).subscribe(children => {\n\n                // replace the observable with an array for future loading\n                node.children = children;\n\n                // rebuild the node tree\n                this.setRootNode(this._root);\n\n                // emit the latest value\n                observer.next({ loading: false, children: children });\n\n                // close the observable stream\n                observer.complete();\n            });\n        });\n    }\n\n    /**\n     * Traverses all the parents to ensure they are selected\n     */\n    private select(node: HierarchyBarNode): void {\n        node.selected = true;\n\n        if (node.parent) {\n            this.select(node.parent);\n        }\n    }\n\n    /**\n     * Deselects all nodes\n     */\n    private deselectAll(): void {\n        this._nodes.forEach(node => node.selected = false);\n    }\n\n    /**\n     * Gets all the nodes in the tree as a flat array.\n     * It also stores the parent node in a parent property\n     * on the node for easy traversal in both directions\n     */\n    private getNodeList(node: HierarchyBarNode): HierarchyBarNode[] {\n\n        // if there are no children then return only itself\n        if (!node.children || node.children instanceof Observable || node.children.length === 0) {\n            return [node];\n        }\n\n        // store the parent property\n        node.children.forEach(child => child.parent = node);\n\n        // get all descendants of this node\n        const descendants = node.children.reduce<HierarchyBarNode[]>((nodes, current) => [...nodes, ...this.getNodeList(current)], []);\n\n        return [node, ...descendants];\n    }\n\n    /**\n     * Gets all selected nodes from the parent node.\n     */\n    private getSelectedChildren(node: HierarchyBarNode): HierarchyBarNode[] {\n\n        if (node.children instanceof Observable) {\n            return [node];\n        }\n\n        // get the children - and account for when there is none\n        const children = node.children || [];\n\n        // check if any child is selected\n        const child = children.find(_child => _child.selected);\n\n        // return the remaining chain of selected items\n        return child ? [node, ...this.getSelectedChildren(child)] : [node];\n    }\n}\n\nexport interface HierarchyBarNode {\n    icon?: string;\n    title: string;\n    selected?: boolean;\n    parent?: HierarchyBarNode;\n    children?: HierarchyBarNode[] | Observable<HierarchyBarNode[]>;\n}\n\nexport interface HierarchyBarNodeChildren {\n    loading: boolean;\n    children: HierarchyBarNode[];\n}","import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, OnDestroy, Output, QueryList, TemplateRef, ViewChild, ViewChildren } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { debounceTime } from 'rxjs/operators';\nimport { HierarchyBarNode, HierarchyBarService } from './hierarchy-bar.service';\n\n@Component({\n    selector: 'ux-hierarchy-bar',\n    template: `<!-- Allow content to be placed on the left of the items -->\n<aside class=\"hierarchy-bar-addons\">\n    <ng-content select=\"[uxHierarchyBarLeftAddon]\"></ng-content>\n</aside>\n\n<main #nodelist class=\"hierarchy-bar-nodes\" (uxResize)=\"scrollIntoView()\">\n\n    <div *ngIf=\"overflow$ | async\"\n         #popover=\"ux-popover\"\n         class=\"hierarchy-bar-overflow-indicator\"\n         [style.left.px]=\"nodelist.scrollLeft\"\n         [uxPopover]=\"overflow\"\n         [popoverContext]=\"{ popover: popover }\"\n         placement=\"bottom\"\n         popoverClass=\"hierarchy-bar-popover\">\n        . . .\n    </div>\n\n    <div #nodeElement class=\"hierarchy-bar-node\"\n         *ngFor=\"let node of hierarchyBar.nodes$ | async\">\n\n        <button class=\"hierarchy-bar-node-content\"\n                [attr.aria-label]=\"node.title\"\n                (click)=\"hierarchyBar.selectNode(node)\">\n\n            <!-- Show an icon if specifed -->\n            <img class=\"hierarchy-bar-node-icon\" *ngIf=\"node.icon\" [src]=\"node.icon\" alt=\"Hierarchy Bar Icon\">\n\n            <!-- Show the name of the current node -->\n            <span class=\"hierarchy-bar-node-title\">{{ node.title }}</span>\n\n        </button>\n\n        <!-- Show a dropdown arrow if there are children -->\n        <button *ngIf=\"node.children\"\n              #popover=\"ux-popover\"\n              aria-label=\"Show children\"\n              role=\"button\"\n              class=\"hierarchy-bar-node-arrow hpe-icon hpe-next\"\n              [uxPopover]=\"content\"\n              [popoverContext]=\"{ node: node, popover: popover }\"\n              placement=\"bottom\"\n              popoverClass=\"hierarchy-bar-popover\"\n              tabindex=\"0\">\n        </button>\n\n    </div>\n\n</main>\n\n<!-- Allow content to be placed on the right of the items -->\n<aside class=\"hierarchy-bar-addons\">\n    <ng-content select=\"[uxHierarchyBarRightAddon]\"></ng-content>\n</aside>\n\n<!-- Template for the popover list -->\n<ng-template #content let-node=\"node\" let-popover=\"popover\">\n\n    <!-- Loading Indicator -->\n    <ul class=\"hierarchy-bar-node-list\" *ngIf=\"(hierarchyBar.getChildren(node) | async).loading\">\n\n        <li class=\"hierarchy-bar-node-list-item\">\n            <ng-container [ngTemplateOutlet]=\"loadingIndicator || defaultLoadingIndicator\"></ng-container>\n        </li>\n    </ul>\n\n    <!-- List of children -->\n    <ul class=\"hierarchy-bar-node-list\" *ngIf=\"!(hierarchyBar.getChildren(node) | async).loading\">\n\n        <li *ngFor=\"let child of (hierarchyBar.getChildren(node) | async).children; let first = first\"\n            class=\"hierarchy-bar-node-list-item\"\n            [focusIf]=\"first\"\n            tabindex=\"0\"\n            (keydown.enter)=\"hierarchyBar.selectNode(child); popover.hide()\"\n            (click)=\"hierarchyBar.selectNode(child); popover.hide()\">\n\n            <!-- Show an icon if specifed -->\n            <img class=\"hierarchy-bar-node-icon\" *ngIf=\"child.icon\" [src]=\"child.icon\" alt=\"Hierarchy Bar Icon\">\n\n            <!-- Show the name of the current node -->\n            <span class=\"hierarchy-bar-node-title\">{{ child.title }}</span>\n\n        </li>\n\n    </ul>\n</ng-template>\n\n<!-- Template for the overflow popover list -->\n<ng-template #overflow let-popover=\"popover\">\n\n    <ul class=\"hierarchy-bar-node-list\">\n\n        <li *ngFor=\"let child of overflowNodes$ | async; let first = first\"\n            class=\"hierarchy-bar-node-list-item\"\n            tabindex=\"0\"\n            [focusIf]=\"first\"\n            (click)=\"hierarchyBar.selectNode(child); popover.hide()\"\n            (keydown.enter)=\"hierarchyBar.selectNode(child); popover.hide()\">\n\n            <!-- Show an icon if specifed -->\n            <img class=\"hierarchy-bar-node-icon\" *ngIf=\"child.icon\" [src]=\"child.icon\" alt=\"Hierarchy Bar Icon\">\n\n            <!-- Show the name of the current node -->\n            <span class=\"hierarchy-bar-node-title\">{{ child.title }}</span>\n\n        </li>\n\n    </ul>\n</ng-template>\n\n<!-- Loading Indicator Template -->\n<ng-template #defaultLoadingIndicator>\n    <div class=\"hierarchy-bar-node-icon\" alt=\"Hierarchy Bar Loading Indicator\">\n        <div class=\"spinner spinner-accent spinner-bounce-middle\"></div>\n    </div>\n\n    <!-- Show the name of the current node -->\n    <span class=\"hierarchy-bar-node-title\">Loading...</span>\n</ng-template>`,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    viewProviders: [HierarchyBarService]\n})\nexport class HierarchyBarComponent implements OnDestroy {\n\n    @Input() set root(node: HierarchyBarNode) {\n        this.hierarchyBar.setRootNode(node);\n    }\n\n    @Input() set selected(node: HierarchyBarNode) {\n        this.hierarchyBar.selectNode(node);\n    }\n\n    @Input() loadingIndicator: TemplateRef<any>;\n\n    @Output() selectedChange = new EventEmitter<HierarchyBarNode>();\n    @ViewChild('nodelist') nodelist: ElementRef;\n    @ViewChildren('nodeElement') nodes: QueryList<ElementRef>;\n\n    overflow$ = new BehaviorSubject<boolean>(false);\n    overflowNodes$ = new BehaviorSubject<HierarchyBarNode[]>([]);\n\n    private _subscription = new Subscription();\n\n    constructor(public hierarchyBar: HierarchyBarService) {\n\n        // subscribe to changes in the selected node\n        const selected = hierarchyBar.nodes$.subscribe(nodes => this.selectedChange.emit(nodes.length === 0 ? null : nodes[nodes.length - 1]));\n        const changed = hierarchyBar.nodes$.pipe(debounceTime(0)).subscribe(() => this.scrollIntoView());\n\n        // store subscriptions\n        this._subscription.add(selected);\n        this._subscription.add(changed);\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    /**\n     * When there is overflow ensure that the rightmost\n     * node remains in view at all times. The nodes no longer\n     * visible be be displayed in a popover available on the\n     * overflow indicator\n     */\n    scrollIntoView(): void {\n\n        if (!this.nodelist) {\n            return;\n        }\n\n        // get the native element\n        const { nativeElement } = this.nodelist;\n\n        // emit whether or not there is overflow\n        this.overflow$.next(nativeElement.scrollWidth > nativeElement.offsetWidth);\n\n        // if the hierarchy bar contents do not overflow then do nothing\n        if (nativeElement.scrollWidth > nativeElement.offsetWidth) {\n\n            // determine the amount of overflow\n            const overflowAmount = nativeElement.scrollWidth - nativeElement.offsetWidth;\n\n            // determine which nodes are not fully visible\n            this.overflowNodes$.next(\n                this.nodes.filter(node => node.nativeElement.offsetLeft < overflowAmount)\n                    .map((node, index) => this.hierarchyBar.nodes$.value[index])\n            );\n\n            // move the scroll position to always show the last itme\n            this.nodelist.nativeElement.scrollLeft = overflowAmount;\n        }\n    }\n}","import { Directive, Output, EventEmitter, ElementRef, HostListener } from '@angular/core';\n\n@Directive({ \n    selector: '[uxClickOutside]'\n})\nexport class ClickOutsideDirective {\n\n    @Output() uxClickOutside = new EventEmitter<MouseEvent>();\n\n    constructor(private _elementRef: ElementRef) { }\n\n    @HostListener('document:click', ['$event'])\n    click(event: MouseEvent): void {\n        if (this._elementRef.nativeElement !== event.target && !this._elementRef.nativeElement.contains(event.target)) {\n            this.uxClickOutside.emit(event);\n        }\n    }\n}","import { NgModule } from '@angular/core';\nimport { ClickOutsideDirective } from './click-outside.directive';\n\n\n@NgModule({\n    exports: [ClickOutsideDirective],\n    declarations: [ClickOutsideDirective]\n})\nexport class ClickOutsideModule { }\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { TooltipComponent } from '../tooltip/index';\n\nlet uniquePopoverId = 0;\n\n@Component({\n  selector: 'ux-popover',\n  template: `<div class=\"popover show\" [ngClass]=\"[placement, customClass]\" [id]=\"id\" [attr.role]=\"role\" (uxClickOutside)=\"clickOutside$.next($event)\">\n    <div class=\"arrow\"></div>\n    <h3 class=\"popover-title\" *ngIf=\"title\">{{ title }}</h3>\n    <div class=\"popover-content\" (cdkObserveContent)=\"reposition()\">\n        <ng-container *ngIf=\"!isTemplateRef\">{{ content }}</ng-container>\n        <ng-container *ngIf=\"isTemplateRef\" [ngTemplateOutlet]=\"content\" [ngTemplateOutletContext]=\"context\"></ng-container>\n    </div>\n</div>`,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PopoverComponent extends TooltipComponent {\n\n  /** Define a unique id for each popover */\n  id: string = `ux-popover-${++uniquePopoverId}`;\n\n  /** If specified allows the popover to show a title */\n  title: string;\n\n  /** This will emit an event any time the user clicks outside the popover */\n  clickOutside$ = new Subject<MouseEvent>();\n\n  /** This will update the title of the popover and trigger change detection */\n  setTitle(title: string): void {\n    this.title = title;\n    this._changeDetectorRef.markForCheck();\n  }\n}","import { ESCAPE } from '@angular/cdk/keycodes';\nimport { OverlayRef } from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { Directive, HostBinding, Input, OnChanges, OnInit, SimpleChanges, TemplateRef } from '@angular/core';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { takeUntil } from 'rxjs/operators';\nimport { TooltipDirective } from '../tooltip/index';\nimport { PopoverComponent } from './popover.component';\n\n@Directive({\n    selector: '[uxPopover]',\n    exportAs: 'ux-popover'\n})\nexport class PopoverDirective extends TooltipDirective implements OnInit, OnChanges {\n\n    /** Contains the content of the popover or a TemplateRef for more detailed content */\n    @Input('uxPopover') content: string | TemplateRef<any>;\n\n    /** Optionally display a title in the popover */\n    @Input('popoverTitle') title: string;\n\n    /** Allow the popover to be conditionally disabled */\n    @Input('popoverDisabled') disabled: boolean;\n\n    /** All the user to add a custom class to the popover */\n    @Input('popoverClass') customClass: string = '';\n\n    /** All the user to add a role to the popover - default is tooltip */\n    @Input('popoverRole') role: string = 'tooltip';\n\n    /** Provide the TemplateRef a context object */\n    @Input('popoverContext') context: any = {};\n\n    /** Delay the showing of the popover by a number of miliseconds */\n    @Input('popoverDelay') delay: number = 0;\n\n    /** Specify which events should show the popover */\n    @Input() showTriggers: string[] = ['click'];\n\n    /** Specify which events should hide the popover */\n    @Input() hideTriggers: string[] = ['click', 'clickoutside', 'escape'];\n\n    /** Keep track of the tooltip visibility and update aria-expanded attribute */\n    @HostBinding('attr.aria-expanded') isVisible: boolean = false;\n\n    /** A reference to the CDK portal containing the overlay */\n    protected _portal: ComponentPortal<PopoverComponent>;\n\n    /** A reference to the instance of the popover component when created */\n    protected _instance: PopoverComponent;\n\n    /** Determine whether or not an aria-describedby property originally existed on the element */\n    private _ariaDescribedBy: boolean;\n\n    /** Internally store the type of this component - usual for distinctions when extending the tooltip class */\n    protected _type: string = 'popover';\n\n    /** Set up the triggers and bind to the show/hide events to keep visibility in sync */\n    ngOnInit(): void {\n\n        // set up the event triggers\n        fromEvent(document, 'keydown').pipe(takeUntil(this._onDestroy)).subscribe(this.onKeyDown.bind(this));\n\n        // check if there is an aria-described by attribute\n        this._ariaDescribedBy = this._elementRef.nativeElement.hasAttribute('aria-describedby');\n\n        // set up the default event triggers\n        super.ngOnInit();\n    }\n\n    /**\n     * We need to send input changes to the popover component\n     * We can't use setters as they may trigger before popover initialised and can't resend once initialised\n     **/\n    ngOnChanges(changes: SimpleChanges): void {\n        super.ngOnChanges(changes);\n\n        if (this._instance && changes.title) {\n            this._instance.setTitle(changes.title.currentValue);\n        }\n    }\n\n    protected createInstance(overlayRef: OverlayRef): PopoverComponent {\n        const instance = overlayRef.attach(this._portal).instance as PopoverComponent;\n\n        // supply the tooltip with the correct properties\n        instance.setTitle(this.title);\n        instance.setContent(this.content);\n        instance.setPlacement(this.placement);\n        instance.setClass(this.customClass);\n        instance.setContext(this.context);\n        instance.setRole(this.role);\n\n        // Update the aria-describedby attribute\n        this.setAriaDescribedBy(instance.id);\n\n        // subscribe to the outside click event\n        instance.clickOutside$.pipe(takeUntil(this._onDestroy)).subscribe(this.onClickOutside.bind(this));\n\n        return instance;\n    }\n\n    protected createPortal(): ComponentPortal<PopoverComponent> {\n        return this._portal || new ComponentPortal(PopoverComponent, this._viewContainerRef);\n    }\n\n    private onKeyDown(event: KeyboardEvent): void {\n\n        // if visible and the escape key is pressed and it is one of the hide triggers\n        if (this.isVisible && event.keyCode === ESCAPE && this.includes(this.hideTriggers, 'escape')) {\n            this.hide();\n        }\n    }\n\n    private onClickOutside(): void {\n        // if visible and it is one of the hide triggers\n        if (this.isVisible && this.includes(this.hideTriggers, 'clickoutside')) {\n            this.hide();\n        }\n    }\n\n    /** Programmatically update the aria-describedby property */\n    protected setAriaDescribedBy(id: string | null): void {\n\n        // we only want to set the aria-describedby attr when the content is a string and there was no user defined attribute already\n        if (this._ariaDescribedBy === false && typeof this.content === 'string') {\n            super.setAriaDescribedBy(id);\n        }\n    }\n\n}","import { ObserversModule } from '@angular/cdk/observers';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ClickOutsideModule } from '../../directives/click-outside/index';\nimport { TooltipModule } from '../tooltip/index';\nimport { PopoverComponent } from './popover.component';\nimport { PopoverDirective } from './popover.directive';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    ObserversModule,\n    ClickOutsideModule,\n    TooltipModule\n  ],\n  exports: [PopoverDirective],\n  declarations: [PopoverComponent, PopoverDirective],\n  entryComponents: [PopoverComponent]\n})\nexport class PopoverModule { }\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FocusIfModule } from '../../directives/focus-if/index';\nimport { ResizeModule } from '../../directives/resize/index';\nimport { HierarchyBarComponent } from './hierarchy-bar.component';\nimport { PopoverModule } from '../popover/index';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ResizeModule,\n        FocusIfModule,\n        PopoverModule\n    ],\n    exports: [HierarchyBarComponent],\n    declarations: [HierarchyBarComponent],\n})\nexport class HierarchyBarModule { }\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\n@Injectable()\nexport class SidePanelService {\n\n    open$ = new BehaviorSubject<boolean>(false);\n\n    open() {\n        this.open$.next(true);\n    }\n\n    close() {\n        this.open$.next(false);\n    }\n}","import { Component, OnInit, Input, Output, EventEmitter, OnDestroy, HostBinding, HostListener, ElementRef } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { SidePanelService } from './side-panel.service';\n\n@Component({\n    selector: 'ux-side-panel',\n    exportAs: 'ux-side-panel',\n    template: `<div *ngIf=\"modal && open\" class=\"modal-backdrop\"\n    [style.position]=\"position\"\n    [style.top]=\"cssTop\"></div>\n\n<div class=\"ux-side-panel-host\"\n    [class.modal-panel]=\"modal\"\n    [style.position]=\"position\"\n    [style.width]=\"hostWidth\"\n    [style.top]=\"cssTop\">\n    <ng-content></ng-content>\n</div>\n`,\n    providers: [SidePanelService],\n    host: {\n        'class': 'ux-side-panel'\n    }\n})\nexport class SidePanelComponent implements OnInit, OnDestroy {\n\n    @Input()\n    @HostBinding('class.open')\n    get open(): boolean {\n        return this.service.open$.value;\n    }\n\n    set open(value: boolean) {\n        this.service.open$.next(value);\n    }\n\n    @Input()\n    @HostBinding('class.inline')\n    inline = false;\n\n    @Input()\n    attachTo: 'window' | 'container' = 'window';\n\n    @Input()\n    width: string | number = '50%';\n\n    @Input()\n    top: string | number = '0';\n\n    @Input()\n    @HostBinding('attr.aria-modal')\n    modal = false;\n\n    @Input()\n    @HostBinding('class.animate')\n    animate = false;\n\n    @Input()\n    closeOnExternalClick = false;\n\n    @Output()\n    openChange = new EventEmitter<boolean>();\n\n    get position() {\n        if (this.inline) {\n            return 'static';\n        }\n        if (this.attachTo === 'container') {\n            return 'absolute';\n        }\n        return 'fixed';\n    }\n\n    get cssWidth(): string {\n        if (typeof this.width === 'number') {\n            return this.width === 0 ? '0' : this.width + 'px';\n        }\n        return this.width;\n    }\n\n    get cssTop(): string {\n        if (typeof this.top === 'number') {\n            return this.top === 0 ? '0' : this.top + 'px';\n        }\n        return this.top;\n    }\n\n    @HostBinding('style.width')\n    get componentWidth(): string {\n        if (this.inline) {\n            return this.open ? this.cssWidth : '0';\n        }\n        return null;\n    }\n\n    get hostWidth() {\n        return this.inline ? '100%' : this.cssWidth;\n    }\n\n    private _subscription: Subscription;\n\n    constructor(\n        protected service: SidePanelService,\n        private _elementRef: ElementRef\n    ) { }\n\n    ngOnInit() {\n        this._subscription = this.service.open$.subscribe((next) => {\n            this.openChange.emit(next);\n        });\n    }\n\n    ngOnDestroy() {\n        this._subscription.unsubscribe();\n    }\n\n    openPanel() {\n        this.service.open();\n    }\n\n    @HostListener('document:keyup.escape')\n    closePanel() {\n        this.service.close();\n    }\n\n    @HostListener('document:click', ['$event'])\n    clickHandler(event: MouseEvent) {\n        if (!this.open || !this.closeOnExternalClick) {\n            return;\n        }\n\n        const target = event.target as HTMLElement;\n\n        if (!this._elementRef.nativeElement.contains(target) ||\n            (target && target.classList.contains('modal-backdrop'))) {\n            this.closePanel();\n        }\n    }\n}","import { Component, Directive, Input, Output, EventEmitter, ContentChild, ElementRef } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { SidePanelComponent } from '../side-panel/side-panel.component';\nimport { SidePanelService } from '../side-panel/side-panel.service';\n\n@Directive({\n    selector: '[uxItemDisplayPanelContent]'\n})\nexport class ItemDisplayPanelContentDirective { }\n\n@Directive({\n    selector: '[uxItemDisplayPanelFooter]'\n})\nexport class ItemDisplayPanelFooterDirective { }\n\n@Component({\n    selector: 'ux-item-display-panel',\n    template: `<div class=\"ux-side-panel-host ux-item-display-panel\"\n    [class.box-shadow]=\"boxShadow\"\n    [style.position]=\"position\"\n    [style.width]=\"hostWidth\"\n    [style.top]=\"cssTop\">\n\n    <div class=\"ux-side-panel-header\" [class.item-display-panel-shadow]=\"shadow\">\n        <h3>{{ header }}</h3>\n        <button *ngIf=\"closeVisible\" type=\"button\" class=\"btn btn-lg btn-link btn-icon button-secondary\" (click)=\"visible = false\">\n            <i class=\"hpe-icon hpe-close\"></i>\n        </button>\n    </div>\n\n    <div class=\"ux-side-panel-content\">\n        <ng-content select=\"[uxItemDisplayPanelContent]\"></ng-content>\n    </div>\n\n    <div class=\"ux-side-panel-footer\" *ngIf=\"footer\">\n        <ng-content select=\"[uxItemDisplayPanelFooter]\"></ng-content>\n    </div>\n\n</div>\n`,\n    providers: [SidePanelService],\n    host: {\n        'class': 'ux-side-panel ux-item-display-panel'\n    }\n})\nexport class ItemDisplayPanelComponent extends SidePanelComponent {\n\n    @Input() header: string;\n\n    @Input() boxShadow: boolean = true;\n\n    @Input() closeVisible: boolean = true;\n\n    get preventClose(): boolean {\n        return !this.closeOnExternalClick;\n    }\n\n    @Input()\n    set preventClose(value: boolean) {\n        this.closeOnExternalClick = !value;\n    }\n\n    @Input() shadow: boolean = false;\n\n    @ContentChild(ItemDisplayPanelFooterDirective) footer: ItemDisplayPanelFooterDirective;\n\n    @Output() visibleChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /**\n     * @deprecated\n     * Title used for adding tooltips and shouldn't be used as an input\n     * instead header will be used. This is here to support backward compatibility only\n     * this property should not be used.\n     */\n    @Input()\n    set title(value: string) {\n        this.header = value;\n    }\n\n    get title() {\n        return this.header;\n    }\n\n    @Input()\n    set visible(visible: boolean) {\n        this.open = visible;\n    }\n\n    get visible() {\n        return this.open;\n    }\n\n    private _itemDisplayPanelSubscription: Subscription;\n\n    constructor(service: SidePanelService, elementRef: ElementRef) {\n        super(service, elementRef);\n\n        this.animate = false;\n        this.closeOnExternalClick = true;\n    }\n\n    ngOnInit() {\n        this._itemDisplayPanelSubscription = this.service.open$.subscribe((next) => {\n            this.visibleChange.emit(next);\n        });\n    }\n\n    ngOnDestroy() {\n        this._itemDisplayPanelSubscription.unsubscribe();\n    }\n}","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ItemDisplayPanelComponent, ItemDisplayPanelContentDirective, ItemDisplayPanelFooterDirective } from './item-display-panel.component';\n\nconst DECLARATIONS = [\n    ItemDisplayPanelComponent,\n    ItemDisplayPanelContentDirective,\n    ItemDisplayPanelFooterDirective\n];\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS\n})\nexport class ItemDisplayPanelModule {}","import { Component, Input, EventEmitter } from '@angular/core';\n\n@Component({\n    selector: 'ux-wizard-step',\n    template: `<ng-container *ngIf=\"active\">\n    <ng-content></ng-content>\n</ng-container>`\n})\nexport class WizardStepComponent {\n    \n    @Input() header: string;\n    @Input() valid: boolean = true;\n    @Input() visitedChange = new EventEmitter<boolean>();\n\n    private _active: boolean = false;\n    private _visited: boolean = false;\n\n    @Input() \n    get visited(): boolean {\n        return this._visited;\n    }\n\n    set visited(value: boolean) {\n        this._visited = value;\n        this.visitedChange.next(value);\n    }\n\n    set active(value: boolean) {\n        \n        // store the active state of the step\n        this._active = value;\n\n        // if the value is true then the step should also be marked as visited\n        if (value === true) {\n            this.visited = true;\n        }\n    }\n\n    get active(): boolean {\n        return this._active;\n    }\n\n}","import { AfterViewInit, Component, ContentChildren, EventEmitter, Input, Output, QueryList } from '@angular/core';\nimport { WizardStepComponent } from './wizard-step.component';\n\n@Component({\n    selector: 'ux-wizard',\n    template: `<div class=\"wizard-body\">\n\n    <div class=\"wizard-steps\">\n\n        <div class=\"wizard-step\" [class.active]=\"stp.active\" [class.visited]=\"stp.visited\" [class.invalid]=\"stp.active && !stp.valid && invalidIndicator\" (click)=\"gotoStep(stp)\" *ngFor=\"let stp of steps\">\n            {{ stp.header }}\n        </div>\n\n    </div>\n\n    <div class=\"wizard-content\">\n        <ng-content></ng-content>\n    </div>\n\n</div>\n\n<div class=\"wizard-footer\">\n    <button #tip=\"ux-tooltip\" class=\"btn button-secondary\" *ngIf=\"previousVisible\" [uxTooltip]=\"previousTooltip\" [disabled]=\"previousDisabled || step === 0\"\n        (click)=\"previous(); tip.hide()\">{{ previousText }}</button>\n\n    <button #tip=\"ux-tooltip\" class=\"btn button-primary\" *ngIf=\"nextVisible && !isLastStep()\" [uxTooltip]=\"nextTooltip\" [disabled]=\"nextDisabled\"\n        (click)=\"next(); tip.hide()\">{{ nextText }}</button>\n\n    <button #tip=\"ux-tooltip\" class=\"btn button-primary\" *ngIf=\"finishVisible && isLastStep() || finishAlwaysVisible\" [uxTooltip]=\"finishTooltip\"\n        [disabled]=\"finishDisabled\" (click)=\"finish(); tip.hide()\">{{ finishText }}</button>\n\n    <button #tip=\"ux-tooltip\" class=\"btn button-secondary\" *ngIf=\"cancelVisible && !isLastStep() || cancelAlwaysVisible\" [uxTooltip]=\"cancelTooltip\"\n        [disabled]=\"cancelDisabled\" (click)=\"cancel(); tip.hide()\">{{ cancelText }}</button>\n</div>`,\n    host: {\n        '[class]': 'orientation'\n    }\n})\nexport class WizardComponent implements AfterViewInit {\n\n    private _step: number = 0;\n\n    @ContentChildren(WizardStepComponent) steps = new QueryList<WizardStepComponent>();\n\n    @Input() orientation: 'horizontal' | 'vertical' = 'horizontal';\n\n    @Input() nextText: string = 'Next';\n    @Input() previousText: string = 'Previous';\n    @Input() cancelText: string = 'Cancel';\n    @Input() finishText: string = 'Finish';\n\n    @Input() nextTooltip: string = 'Go to the next step';\n    @Input() previousTooltip: string = 'Go to the previous step';\n    @Input() cancelTooltip: string = 'Cancel the wizard';\n    @Input() finishTooltip: string = 'Finish the wizard';\n\n    @Input() nextDisabled: boolean = false;\n    @Input() previousDisabled: boolean = false;\n    @Input() cancelDisabled: boolean = false;\n    @Input() finishDisabled: boolean = false;\n\n    @Input() nextVisible: boolean = true;\n    @Input() previousVisible: boolean = true;\n    @Input() cancelVisible: boolean = true;\n    @Input() finishVisible: boolean = true;\n    @Input() cancelAlwaysVisible: boolean = false;\n    @Input() finishAlwaysVisible: boolean = false;\n\n    @Output() onNext = new EventEmitter<number>();\n    @Output() onPrevious = new EventEmitter<number>();\n    @Output() onCancel = new EventEmitter<void>();\n    @Output() onFinishing = new EventEmitter<void>();\n    @Output() onFinish = new EventEmitter<void>();\n    @Output() stepChanging = new EventEmitter<StepChangingEvent>();\n    @Output() stepChange = new EventEmitter<number>();\n\n    invalidIndicator: boolean = false;\n\n    @Input()\n    get step() {\n        return this._step;\n    }\n    set step(value: number) {\n\n        // only accept numbers as valid options\n        if (typeof value === 'number') {\n\n            // store the active step\n            this._step = value;\n\n            // update which steps should be active\n            this.update();\n\n            // emit the change event\n            this.stepChange.next(this.step);\n\n            // reset the invalid state\n            this.invalidIndicator = false;\n        }\n    }\n\n    ngAfterViewInit(): void {\n\n        // initially set the correct visibility of the steps\n        setTimeout(this.update.bind(this));\n    }\n\n    /**\n     * Navigate to the next step\n     */\n    next(): void {\n\n        this.stepChanging.next(new StepChangingEvent(this.step, this.step + 1));\n\n        // check if current step is invalid\n        if (!this.getCurrentStep().valid) {\n            this.invalidIndicator = true;\n            return;\n        }\n\n        // check if we are currently on the last step\n        if ((this.step + 1) < this.steps.length) {\n            this.step++;\n\n            // emit the current step\n            this.onNext.next(this.step);\n        }\n    }\n\n    /**\n     * Navigate to the previous step\n     */\n    previous(): void {\n\n        this.stepChanging.next(new StepChangingEvent(this.step, this.step - 1));\n\n        // check if we are currently on the last step\n        if (this.step > 0) {\n            this.step--;\n\n            // emit the current step\n            this.onPrevious.next(this.step);\n        }\n    }\n\n    /**\n     * Perform actions when the finish button is clicked\n     */\n    finish(): Promise<void> {\n\n        // fires when the finish button is clicked always\n        this.onFinishing.next();\n\n        /**\n         * This is required because we need to ensure change detection has run\n         * to determine whether or not we have the latest value for the 'valid' input\n         * on the current step. Unfortunately we can't use ChangeDetectorRef as we are looking to run\n         * on content children, and we cant use ApplicationRef.tick() as this does not work in a hybrid app, eg. our docs\n         */\n        return new Promise<void>(resolve => {\n            setTimeout(() => {\n\n                // only fires when the finish button is clicked and the step is valid\n                if (this.getCurrentStep().valid) {\n                    this.onFinish.next();        \n                }\n\n                resolve();\n            });\n        });\n    }\n\n    /**\n     * Perform actions when the cancel button is clicked\n     */\n    cancel(): void {\n        this.onCancel.next();\n    }\n\n    /**\n     * Update the active state of each step\n     */\n    update(): void {\n        // update which steps should be active\n        this.steps.forEach((step, idx) => step.active = idx === this.step);\n    }\n\n    /**\n     * Jump to a specific step only if the step has previously been visited\n     */\n    gotoStep(step: WizardStepComponent): void {\n        if (step.visited) {\n\n            const stepIndex = this.steps.toArray().findIndex(stp => stp === step);\n\n            this.stepChanging.next(new StepChangingEvent(this.step, stepIndex));\n\n            this.step = stepIndex;\n        }\n    }\n\n    /**\n     * Determine if the current step is the last step\n     */\n    isLastStep(): boolean {\n        return this.step === (this.steps.length - 1);\n    }\n\n    /**\n     * Reset the wizard - goes to first step and resets visited state\n     */\n    reset(): void {\n\n        // mark all steps as not visited\n        this.steps.forEach(step => step.visited = false);\n\n        // go to the first step\n        this.step = 0;\n    }\n\n    /**\n     * Get the step at the current index\n     */\n    getCurrentStep(): WizardStepComponent {\n        return this.getStepAtIndex(this.step);\n    }\n\n    /**\n     * Return a step at a specific index\n     */\n    getStepAtIndex(index: number): WizardStepComponent {\n        return this.steps.toArray()[index];\n    }\n}\n\nexport class StepChangingEvent {\n    constructor(public from: number, public to: number) { }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { WizardComponent } from './wizard.component';\nimport { WizardStepComponent } from './wizard-step.component';\nimport { TooltipModule } from '../tooltip/index';\n\nconst DECLARATIONS = [\n    WizardComponent,\n    WizardStepComponent\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        TooltipModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS\n})\nexport class WizardModule { }\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { MarqueeWizardStepComponent } from './marquee-wizard-step.component';\n\n/**\n * This service is required to provide a form of communication\n * between the marquee wizard steps and the containing marquee wizard.\n * We cannot inject the Host due to the steps being content children \n * rather than view children.\n */\n@Injectable()\nexport class MarqueeWizardService {\n    valid$ = new Subject<MarqueeWizardValidEvent>();\n}\n\nexport interface MarqueeWizardValidEvent {\n    step: MarqueeWizardStepComponent;\n    valid: boolean;\n}","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { WizardStepComponent } from '../wizard/index';\nimport { MarqueeWizardService } from './marquee-wizard.service';\n\n@Component({\n    selector: 'ux-marquee-wizard-step',\n    template: `<ng-container *ngIf=\"active\">\n    <ng-content></ng-content>\n</ng-container>`\n})\nexport class MarqueeWizardStepComponent extends WizardStepComponent {\n\n    @Input() icon: string;\n    @Input() completed: boolean = false;\n    @Output() completedChange = new EventEmitter<boolean>();\n    \n    get valid(): boolean {\n        return this._valid;\n    }\n\n    set valid(valid: boolean) {\n        this._valid = valid;\n\n        if (this._marqueeWizardService) {\n            this._marqueeWizardService.valid$.next({ step: this, valid: valid });\n        }\n    }\n\n    private _valid: boolean = true;\n\n    constructor(private _marqueeWizardService: MarqueeWizardService) {\n        super();\n    }\n\n    /**\n     * Update the completed state and emit the latest value\n     * @param completed whether or not the step is completed\n     */\n    setCompleted(completed: boolean): void {\n        this.completed = completed;\n        this.completedChange.emit(completed);\n    }\n}","import { Component, ContentChildren, Input, QueryList, TemplateRef } from '@angular/core';\nimport { filter } from 'rxjs/operators';\nimport { WizardComponent } from '../wizard/index';\nimport { MarqueeWizardStepComponent } from './marquee-wizard-step.component';\nimport { MarqueeWizardService, MarqueeWizardValidEvent } from './marquee-wizard.service';\n\n@Component({\n    selector: 'ux-marquee-wizard',\n    template: `<div class=\"marquee-wizard-side-panel\">\n\n    <div class=\"marquee-wizard-description-container\" *ngIf=\"description\">\n        <!-- If a template was provided display it -->\n        <ng-container *ngIf=\"isTemplate\" [ngTemplateOutlet]=\"description\"></ng-container>\n\n        <!-- Otherwise wimply display the string -->\n        <ng-container *ngIf=\"!isTemplate\">\n            <p>{{ description }}</p>\n        </ng-container>\n    </div>\n\n    <ul class=\"marquee-wizard-steps\">\n\n        <li class=\"marquee-wizard-step\" *ngFor=\"let step of steps\" (click)=\"gotoStep(step)\" [class.active]=\"step.active\" [class.visited]=\"step.visited\" [class.invalid]=\"!step.valid\">\n            <i class=\"marquee-wizard-step-icon\" [ngClass]=\"step.icon\"></i>\n            <span class=\"marquee-wizard-step-title\">{{ step.header }}</span>\n            <span class=\"marquee-wizard-step-status hpe-icon hpe-checkmark\" *ngIf=\"step.completed\"></span>\n        </li>\n\n    </ul>\n</div>\n\n<div class=\"marquee-wizard-content-panel\">\n    <div class=\"marquee-wizard-content\">\n        <ng-content></ng-content>\n    </div>\n\n    <div class=\"modal-footer\">\n\n        <button #tip=\"ux-tooltip\" class=\"btn button-secondary\" *ngIf=\"previousVisible\" [uxTooltip]=\"previousTooltip\" container=\"body\"\n            [disabled]=\"previousDisabled || step === 0\" (click)=\"previous(); tip.hide()\">{{ previousText }}</button>\n\n        <button #tip=\"ux-tooltip\" class=\"btn button-primary\" *ngIf=\"nextVisible && !isLastStep()\" [uxTooltip]=\"nextTooltip\" container=\"body\"\n            [disabled]=\"nextDisabled\" (click)=\"next(); tip.hide()\">{{ nextText }}</button>\n\n        <button #tip=\"ux-tooltip\" class=\"btn button-primary\" *ngIf=\"finishVisible && isLastStep() || finishAlwaysVisible\" [uxTooltip]=\"finishTooltip\"\n            container=\"body\" [disabled]=\"finishDisabled\" (click)=\"finish(); tip.hide()\">{{ finishText }}</button>\n\n        <button #tip=\"ux-tooltip\" class=\"btn button-secondary\" *ngIf=\"cancelVisible && !isLastStep() || cancelAlwaysVisible\" [uxTooltip]=\"cancelTooltip\"\n            container=\"body\" [disabled]=\"cancelDisabled\" (click)=\"cancel(); tip.hide()\">{{ cancelText }}</button>\n    </div>\n</div>`,\n    providers: [ MarqueeWizardService ]\n})\nexport class MarqueeWizardComponent extends WizardComponent {\n\n    @Input() description: string | TemplateRef<any>;\n    @ContentChildren(MarqueeWizardStepComponent) steps = new QueryList<MarqueeWizardStepComponent>();\n\n    get isTemplate(): boolean {\n        return this.description && this.description instanceof TemplateRef;\n    }\n\n    constructor(marqueeWizardService: MarqueeWizardService) {\n        super();\n\n        marqueeWizardService.valid$.pipe(\n            filter((event: MarqueeWizardValidEvent) => !event.valid)\n        ).subscribe(this.validChange.bind(this));\n    }\n\n    /**\n     * If the current step is valid, mark it as\n     * complete and go to the next step\n     */\n    next(): void {\n\n        // get the current step\n        const step = this.getCurrentStep() as MarqueeWizardStepComponent;\n\n        if (step.valid) {\n            super.next();\n\n            // mark this step as completed\n            step.setCompleted(true);\n        }\n    }\n\n    /**\n     * Emit the onFinishing event and if valid the onFinish event.\n     * Also mark the final step as completed if it is valid\n     */\n    finish(): Promise<void> {\n\n        // get the current step\n        const step = this.getCurrentStep() as MarqueeWizardStepComponent;\n\n        // call the original finish function\n        return super.finish().then(() => {\n            // if the step is valid indicate that it is now complete\n            if (step.valid) {\n                step.setCompleted(true);\n            }\n        });\n    }\n\n    /**\n     * If a step in the wizard becomes invalid, all steps sequentially after\n     * it, should become unvisited and incomplete\n     */\n    validChange(state: MarqueeWizardValidEvent): void {\n\n        const steps = this.steps.toArray();\n        const current = steps.findIndex(step => step === state.step);\n        const affected = steps.slice(current);\n\n        affected.forEach(step => {\n\n            // the step should no longer be completed\n            step.completed = false;\n\n            // if the step is not the current step then also mark it as unvisited\n            if (step !== state.step) {\n                step.visited = false;\n            }\n        });\n\n    }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { WizardModule } from '../wizard/index';\nimport { MarqueeWizardComponent } from './marquee-wizard.component';\nimport { MarqueeWizardStepComponent } from './marquee-wizard-step.component';\nimport { TooltipModule } from '../tooltip/index';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        WizardModule,\n        TooltipModule\n    ],\n    exports: [\n        MarqueeWizardComponent,\n        MarqueeWizardStepComponent\n    ],\n    declarations: [\n        MarqueeWizardComponent,\n        MarqueeWizardStepComponent\n    ]\n})\nexport class MarqueeWizardModule { }\n","import { Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'ux-navigation',\n    template: `<nav class=\"tree\" role=\"navigation\">\n    <ol class=\"nav\">\n        <ng-content></ng-content>\n    </ol>\n</nav>\n`\n})\nexport class NavigationComponent {\n\n}","import { AfterContentInit, AfterViewInit, Component, ContentChildren, ElementRef, HostBinding, Input, OnDestroy, Optional, QueryList, Renderer2, SkipSelf } from '@angular/core';\nimport { ActivatedRoute, NavigationEnd, Router, UrlTree } from '@angular/router';\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs/Subscription';\n\n@Component({\n    selector: '[ux-navigation-item]',\n    template: `<a *ngIf=\"link\" [class.has-arrow]=\"children.length > 0\" [class.no-arrow]=\"indentWithoutArrow\" [routerLink]=\"link\">\n    <span>{{header}}</span>\n</a>\n<a *ngIf=\"!link\" (click)=\"expanded = !expanded\" [class.has-arrow]=\"children.length > 0\" [class.no-arrow]=\"indentWithoutArrow\">\n    <span>{{header}}</span>\n</a>\n<ng-content></ng-content>\n`,\n})\nexport class NavigationItemComponent implements AfterViewInit, AfterContentInit, OnDestroy {\n\n    @Input() header: string;\n    @Input() icon: string;\n    @Input() link: string;\n    @Input() @HostBinding('class.selected') expanded: boolean = false;\n\n    @HostBinding('class.active')\n    get active(): boolean {\n        if (this.link) {\n            return this._router.isActive(this.link, true);\n        }\n    }\n\n    level: number = 1;\n    indentWithoutArrow: boolean = true;\n\n    private _navigationEnd: Subscription;\n    private _childrenChanges: Subscription;\n\n    @ContentChildren(NavigationItemComponent, { descendants: true })\n    private _children: QueryList<NavigationItemComponent>;\n\n    get children(): NavigationItemComponent[] {\n        return this._children.filter(item => item !== this);\n    }\n\n    constructor(\n        private _elementRef: ElementRef,\n        private _renderer: Renderer2,\n        @Optional() @SkipSelf() private _parent: NavigationItemComponent,\n        private _router: Router,\n        private _activatedRoute: ActivatedRoute\n    ) {\n        this.level = _parent ? _parent.level + 1 : 1;\n\n        this._navigationEnd = _router.events.pipe(filter(event => event instanceof NavigationEnd))\n            .subscribe(() => this.expanded = this.hasActiveLink(this.link));\n    }\n\n    ngAfterViewInit(): void {\n        // Add classes to parent for styling\n        const parentListElement = this._elementRef.nativeElement.parentElement;\n        if (parentListElement) {\n            const levelClass: string = this.getLevelClass();\n            if (levelClass.length > 0) {\n                this._renderer.addClass(parentListElement, 'nav');\n                this._renderer.addClass(parentListElement, levelClass);\n            }\n        }\n    }\n\n    ngAfterContentInit(): void {\n        // Set 'indentWithoutArrow'\n        this.setIndentWithoutArrow();\n\n        // Update 'indentWithoutArrow' in response to changes to children\n        this._childrenChanges = this._children.changes.subscribe(() => this.setIndentWithoutArrow());\n    }\n\n    ngOnDestroy(): void {\n        this._navigationEnd.unsubscribe();\n        this._childrenChanges.unsubscribe();\n    }\n\n    private hasActiveLink(link: string | UrlTree): boolean {\n\n        const tree = this._router.createUrlTree([link], {\n            relativeTo: this._activatedRoute,\n            queryParams: this._activatedRoute.snapshot.queryParams,\n            fragment: this._activatedRoute.snapshot.fragment\n        });\n\n        if (link && this._router.isActive(tree, true)) {\n            return true;\n        }\n\n        // If this component has children, check if any of them, or their descendants, are active.\n        return this.children.some((item) => item.hasActiveLink(item.link));\n    }\n\n    private getLevelClass(): string {\n        switch (this.level) {\n            case 2:\n                return 'nav-second-level';\n            case 3:\n                return 'nav-third-level';\n            case 4:\n                return 'nav-fourth-level';\n            case 5:\n                return 'nav-fifth-level';\n        }\n\n        return '';\n    }\n\n    private setIndentWithoutArrow(): void {\n        if (this.children.length > 0) {\n            // If this element has children it will be indented and will have an arrow\n            this.indentWithoutArrow = false;\n        } else if (this._parent) {\n           // If this element has a parent, indent it if any of its siblings have children\n            this.indentWithoutArrow = !this._parent.children.every((item) => item.children.length === 0);\n        } else {\n            // Top-level elements should be indented\n            this.indentWithoutArrow = true;\n        }\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { NavigationComponent } from './navigation.component';\nimport { NavigationItemComponent } from './navigation-item/navigation-item.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        RouterModule\n    ],\n    exports: [\n        NavigationComponent,\n        NavigationItemComponent\n    ],\n    declarations: [\n        NavigationComponent,\n        NavigationItemComponent\n    ]\n})\nexport class NavigationModule { }\n","import { Injectable } from '@angular/core';\nimport { ColorClassSet, ColorValueSet } from './color.service';\n\n@Injectable()\nexport class ColorService {\n\n    private _html: string;\n    private _element: HTMLElement;\n    private _colors: ThemeColors;\n    private _colorSet: any = colorSets.keppel;\n\n    constructor() {\n        if (this._colorSet.colorClassSet) {\n            this.setColors();\n        } else {\n            for (let key in this._colorSet.colorValueSet) {\n                this._colors[key] = this.getColorValueByHex(this._colorSet.colorValueSet[key]);\n            }\n        }\n    }\n\n    private setColors() {\n\n        this._html = '';\n\n        for (let key in this._colorSet.colorClassSet) {\n            this._html += '<div class=\"' + this._colorSet.colorClassSet[key] + '-color\"></div>';\n        }\n\n        this._element = document.createElement('div');\n        this._element.className = 'color-chart';\n        this._element.innerHTML = this._html;\n\n        document.body.appendChild(this._element);\n\n        this._colors = {};\n\n        for (let key in this._colorSet.colorClassSet) {\n            this._colors[key] = this.getColorValue(this._colorSet.colorClassSet[key]);\n        }\n\n        this._element.parentNode.removeChild(this._element);\n    }\n\n    private getColorValueByHex(color: string): ThemeColor {\n        const hex = color.replace('#', '');\n\n        const r = parseInt(hex.substring(0, 2), 16).toString();\n        const g = parseInt(hex.substring(2, 4), 16).toString();\n        const b = parseInt(hex.substring(4, 6), 16).toString();\n\n        return new ThemeColor(r, g, b, '1');\n    }\n\n    private getColorValue(color: ColorIdentifier): ThemeColor {\n\n        const target = this._element.querySelector('.' + this._colorSet.colorClassSet[color] + '-color');\n\n        if (!target) {\n            throw new Error('Invalid color');\n        }\n\n        const colorValue = window.getComputedStyle(target).backgroundColor;\n\n        const rgba = colorValue.match(/^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/);\n\n        return new ThemeColor(rgba[1], rgba[2], rgba[3], rgba[4]);\n    }\n\n    getColor(color: ColorIdentifier): ThemeColor {\n        const themeColor = this._colors[this.resolveColorName(color)];\n        if (!themeColor) {\n            throw new Error('Color not found: ' + color);\n        }\n\n        return new ThemeColor(themeColor.getRed(), themeColor.getGreen(), themeColor.getBlue(), themeColor.getAlpha());\n    }\n\n    getColorSet() {\n        return this._colorSet;\n    }\n\n    setColorSet(colorSet: ColorSet) {\n        this._colorSet = colorSet;\n        this._colors = {};\n\n        if (this._colorSet.colorClassSet) {\n            this.setColors();\n        } else {\n            for (let key in this._colorSet.colorValueSet) {\n                this._colors[key] = this.getColorValueByHex(this._colorSet.colorValueSet[key]);\n            }\n        }\n    }\n\n    resolve(value: string): string {\n        if (!value) {\n            return;\n        }\n\n        const colorName = this.resolveColorName(value);\n\n        for (let color in this._colors) {\n            if (colorName === color.toLowerCase()) {\n                return this.getColor(colorName).toRgba();\n            }\n        }\n\n        return value;\n    }\n\n    resolveColorName(value: string = ''): string {\n        return value.replace(/\\s+/g, '-').toLowerCase();\n    }\n}\n\nexport class ThemeColor {\n\n    private _r: string;\n    private _g: string;\n    private _b: string;\n    private _a: string;\n\n    constructor(r: string, g: string, b: string, a: string) {\n        this._r = r;\n        this._g = g;\n        this._b = b;\n        this._a = a === undefined ? '1' : a;\n    }\n\n    static parse(value: string): ThemeColor {\n        let r, g, b, a = '1';\n\n        const rgbaPattern = /^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/;\n        const shortHexPattern = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n        const longHexPattern = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/;\n\n        const rgbaMatch = value.match(rgbaPattern);\n        const shortHexMatch = value.match(shortHexPattern);\n        const longHexMatch = value.match(longHexPattern);\n\n        if (rgbaMatch) {\n            r = rgbaMatch[1];\n            g = rgbaMatch[2];\n            b = rgbaMatch[3];\n            a = rgbaMatch[4] ? rgbaMatch[4] : '1';\n        } else if (longHexMatch) {\n            r = parseInt(longHexMatch[1], 16).toString();\n            g = parseInt(longHexMatch[2], 16).toString();\n            b = parseInt(longHexMatch[3], 16).toString();\n        } else if (shortHexMatch) {\n            r = parseInt(shortHexMatch[1] + shortHexMatch[1], 16).toString();\n            g = parseInt(shortHexMatch[2] + shortHexMatch[2], 16).toString();\n            b = parseInt(shortHexMatch[3] + shortHexMatch[3], 16).toString();\n        } else {\n            throw new Error(`Cannot parse color - ${value} is not a valid color.`);\n        }\n        return new ThemeColor(r, g, b, a);\n    }\n\n    toHex() {\n        let red = parseInt(this._r).toString(16);\n        let green = parseInt(this._g).toString(16);\n        let blue = parseInt(this._b).toString(16);\n\n        if (red.length < 2) {\n            red = '0' + red;\n        }\n        if (green.length < 2) {\n            green = '0' + green;\n        }\n        if (blue.length < 2) {\n            blue = '0' + blue;\n        }\n\n        return '#' + red + green + blue;\n    }\n\n    toRgb() {\n        return 'rgb(' + this._r + ', ' + this._g + ', ' + this._b + ')';\n    }\n\n    toRgba() {\n        return 'rgba(' + this._r + ', ' + this._g + ', ' + this._b + ', ' + this._a + ')';\n    }\n\n    getRed() {\n        return this._r;\n    }\n\n    getGreen() {\n        return this._g;\n    }\n\n    getBlue() {\n        return this._b;\n    }\n\n    getAlpha() {\n        return this._a;\n    }\n\n    setRed(red: string) {\n        this._r = red;\n        return this;\n    }\n\n    setGreen(green: string) {\n        this._g = green;\n        return this;\n    }\n\n    setBlue(blue: string) {\n        this._b = blue;\n        return this;\n    }\n\n    setAlpha(alpha: string | number) {\n        this._a = alpha.toString();\n        return this;\n    }\n}\n\nexport const colorSets = {\n    keppel: {\n        colorClassSet: {\n            'primary': 'primary',\n            'accent': 'accent',\n            'secondary': 'secondary',\n            'alternate1': 'alternate1',\n            'alternate2': 'alternate2',\n            'alternate3': 'alternate3',\n            'vibrant1': 'vibrant1',\n            'vibrant2': 'vibrant2',\n            'grey1': 'grey1',\n            'grey2': 'grey2',\n            'grey3': 'grey3',\n            'grey4': 'grey4',\n            'grey5': 'grey5',\n            'grey6': 'grey6',\n            'grey7': 'grey7',\n            'grey8': 'grey8',\n            'chart1': 'chart1',\n            'chart2': 'chart2',\n            'chart3': 'chart3',\n            'chart4': 'chart4',\n            'chart5': 'chart5',\n            'chart6': 'chart6',\n            'ok': 'ok',\n            'warning': 'warning',\n            'critical': 'critical',\n            'partition1': 'partition1',\n            'partition9': 'partition9',\n            'partition10': 'partition10',\n            'partition11': 'partition11',\n            'partition12': 'partition12',\n            'partition13': 'partition13',\n            'partition14': 'partition14',\n            'social-chart-node': 'social-chart-node',\n            'social-chart-edge': 'social-chart-edge'\n        }\n    },\n    microFocus: {\n        'colorValueSet': {\n            'cerulean': '#1668c1',\n            'aqua': '#29ceff',\n            'aquamarine': '#2fd6c3',\n            'fuchsia': '#c6179d',\n            'indigo': '#7425ad',\n            'dark-blue': '#231ca5',\n            'white': '#ffffff',\n            'slightly-gray': '#f5f7f8',\n            'bright-gray': '#f1f2f3',\n            'gray': '#dcdedf',\n            'silver': '#bdbec0',\n            'dim-gray': '#656668',\n            'dark-gray': '#323435',\n            'black': '#000000',\n            'crimson-negative': '#e5004c',\n            'apricot': '#f48b34',\n            'yellow': '#fcdb1f',\n            'green-positive': '#1aac60',\n            'ultramarine': '#3939c6',\n            'skyblue': '#00abf3',\n            'pale-aqua': '#43e4ff',\n            'pale-green': '#1ffbba',\n            'lime': '#75da4d',\n            'orange': '#ffce00',\n            'magenta': '#eb23c2',\n            'pale-purple': '#ba47e2',\n            'dark-ultramarine': '#271782',\n            'steelblue': '#014272',\n            'arctic-blue': '#0b8eac',\n            'emerald': '#00a989',\n            'olive': '#5bba36',\n            'goldenrod': '#ffb000',\n            'purple': '#9b1e83',\n            'pale-eggplant': '#5216ac',\n            'red': '#ff454f',\n            'pale-amber': '#ffb24d',\n            'pale-lemon': '#fde159',\n            'pale-emerald': '#33c180',\n            'plum': '#b21646',\n            'copper': '#e57828',\n            'amber': '#ffc002',\n            'leaf-green': '#118c4f',\n            'forest-green': '#00645a',\n            'primary': '#0073e7',\n            'accent': '#7425ad',\n            'secondary': '#ffffff',\n            'alternate1': '#29ceff',\n            'alternate2': '#2fd6c3',\n            'alternate3': '#c6179d',\n            'vibrant1': '#43e4ff',\n            'vibrant2': '#ffce00',\n            'grey1': '#000000',\n            'grey2': '#323435',\n            'grey3': '#656668',\n            'grey4': '#bdbec0',\n            'grey5': '#dcdedf',\n            'grey6': '#f1f2f3',\n            'grey7': '#f5f7f8',\n            'grey8': '#ffffff',\n            'chart1': '#3939c6',\n            'chart2': '#00abf3',\n            'chart3': '#75da4d',\n            'chart4': '#ffce00',\n            'chart5': '#eb23c2',\n            'chart6': '#ba47e2',\n            'ok': '#1aac60',\n            'warning': '#f48b34',\n            'critical': 'e5004c',\n            'partition1': '#7425ad',\n            'partition9': '#5216ac',\n            'partition10': '#5bba36',\n            'partition11': '#014272',\n            'partition12': '#ffb000',\n            'partition13': '#bdbec0',\n            'partition14': '#271782',\n            'social-chart-node': '#ff00ff',\n            'social-chart-edge': '#ff00ff'\n        }\n    }\n};\n\nexport interface ThemeColors {\n    [name: string]: ThemeColor;\n}\n\nexport interface ColorSet {\n    colorClassSet?: ColorClassSet;\n    colorValueSet?: ColorValueSet;\n}\n\nexport interface ColorClassSet {\n    [name: string]: string;\n}\n\nexport interface ColorValueSet {\n    [name: string]: string;\n}\n\nexport type ColorIdentifier = string;\n","import { NgModule } from '@angular/core';\nimport { ColorService } from './color.service';\n\n@NgModule({\n    providers: [ColorService],\n})\nexport class ColorServiceModule { }\n","import { Injectable, TemplateRef } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { ColorService } from '../../services/color/index';\n\n@Injectable()\nexport class NotificationService {\n\n    // provide default options\n    options: NotificationOptions = {\n        duration: 4,\n        height: 100,\n        spacing: 10,\n        backgroundColor: this._colorService.getColor('accent').toHex(),\n        iconColor: this._colorService.getColor('accent').toHex()\n    };\n\n    direction: NotificationListDirection = 'above';\n\n    notifications$: BehaviorSubject<NotificationRef[]> = new BehaviorSubject<NotificationRef[]>([]);    \n\n    show(templateRef: TemplateRef<any>, options: NotificationOptions = this.options, data: { [key: string]: any } = {}): NotificationRef {\n\n        options = { ...this.options, ...options };\n\n        const notificationRef: NotificationRef = {\n            templateRef: templateRef,\n            duration: options.duration,\n            date: new Date(),\n            visible: true,\n            height: options.height,\n            spacing: options.spacing,\n            backgroundColor: options.backgroundColor,\n            iconColor: options.iconColor,\n            data: data\n        };\n\n        const notifications = this.notifications$.getValue();\n\n        if (this.direction === 'above') {\n            notifications.unshift(notificationRef);\n        } else {\n            notifications.push(notificationRef);\n        }\n\n        this.notifications$.next(notifications);\n\n        // remove notification after delay\n        if (options.duration !== 0) {\n            setTimeout(() => this.dismiss(notificationRef), options.duration * 1000);\n        }\n\n        return notificationRef;\n    }\n\n    getHistory(): NotificationRef[] {\n        return this.notifications$.getValue();\n    }\n\n    dismiss(notificationRef: NotificationRef): void {\n        notificationRef.visible = false;\n        this.notifications$.next(this.notifications$.getValue());\n    }\n    \n    dismissAll(): void {\n        this.notifications$.getValue().forEach(notificationRef => notificationRef.visible = false);\n        this.notifications$.next(this.notifications$.getValue());        \n    }\n\n    constructor(private _colorService: ColorService) {\n    }\n}\n\nexport interface NotificationRef {\n    templateRef: TemplateRef<any>;\n    duration: number;\n    date: Date;\n    visible?: boolean;\n    height?: number;\n    spacing?: number;\n    backgroundColor?: string;\n    iconColor?: string;\n    data: { [key: string]: any };\n}\n\nexport interface NotificationOptions {\n    duration?: number;\n    height?: number;\n    spacing?: number;\n    backgroundColor?: string;\n    iconColor?: string;\n}\n\nexport type NotificationListDirection = 'above' | 'below';","import { Component, HostBinding, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { NotificationService, NotificationRef, NotificationListDirection } from './notification.service';\nimport { trigger, state, style, animate, transition } from '@angular/animations';\nimport { map } from 'rxjs/operators/map';\nimport { Observable } from 'rxjs/Observable';\n\n@Component({\n    selector: 'ux-notification-list',\n    template: `<div class=\"notification\" *ngFor=\"let notificationRef of notifications$ | async; let idx = index\"\n    [style.top.px]=\"(notificationRef.height + notificationRef.spacing) * idx\"\n    [style.height.px]=\"notificationRef.height\"\n    [style.background-color]=\"notificationRef.backgroundColor\"\n    [@notificationState]>\n    <ng-container *ngTemplateOutlet=\"notificationRef.templateRef; context: { $implicit: notificationRef, data: notificationRef.data }\"></ng-container>\n</div>\n`,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [\n        trigger('notificationState', [\n            state('in', style({ transform: 'translateY(0)', opacity: 0.9 })),\n            transition(':enter', [\n                style({ transform: 'translateY(-50px)', opacity: 0 }),\n                animate(500)\n            ]),\n            transition(':leave', [\n                animate(500, style({ transform: 'translateY(50px)', opacity: 0 }))\n            ])\n        ])\n    ]\n})\nexport class NotificationListComponent {\n    \n    @Input() \n    set direction(direction: NotificationListDirection) {\n        this._notificationService.direction = direction;\n    }\n\n    @Input() @HostBinding('class') position: NotificationListPostion = 'top-right';\n\n    notifications$: Observable<NotificationRef[]> = this._notificationService.notifications$.pipe(\n        map((notificationRefs: NotificationRef[]) => notificationRefs.filter(notificationRef => notificationRef.visible),\n    ));\n\n    constructor(private _notificationService: NotificationService) {\n\n    }\n}\n\nexport type NotificationListPostion = 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NotificationListComponent } from './notification-list.component';\r\nimport { NotificationService } from './notification.service';\r\nimport { ColorServiceModule } from '../../services/color/index';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        ColorServiceModule\r\n    ],\r\n    exports: [\r\n        NotificationListComponent\r\n    ],\r\n    declarations: [\r\n        NotificationListComponent\r\n    ],\r\n    providers: [\r\n        NotificationService\r\n    ]\r\n})\r\nexport class NotificationModule { }\r\n","import { Component, EventEmitter, forwardRef, Input, Output } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const NUMBER_PICKER_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => NumberPickerComponent),\n    multi: true\n};\n\n@Component({\n    selector: 'ux-number-picker',\n    template: `<input type=\"number\"\n       role=\"spinbutton\"\n       class=\"form-control number-picker-input\"\n       [(ngModel)]=\"value\"\n       [min]=\"min\"\n       [max]=\"max\"\n       (keydown.ArrowDown)=\"decrement($event)\"\n       (keydown.ArrowUp)=\"increment($event)\"\n       (wheel)=\"onScroll($event)\"\n       step=\"any\"\n       [disabled]=\"disabled\"\n       [attr.aria-valuemin]=\"min\"\n       [attr.aria-valuenow]=\"value\"\n       [attr.aria-valuemax]=\"max\">\n\n<div class=\"number-picker-controls\">\n\n    <div class=\"number-picker-control-up\"\n         (click)=\"increment($event)\"\n         [class.disabled]=\"disabled || value >= max\">\n\n        <span class=\"hpe-icon hpe-up\"></span>\n    </div>\n\n    <div class=\"number-picker-control-down\"\n         (click)=\"decrement($event)\"\n         [class.disabled]=\"disabled || value <= min\">\n\n        <span class=\"hpe-icon hpe-down\"></span>\n    </div>\n\n</div>`,\n    providers: [NUMBER_PICKER_VALUE_ACCESSOR],\n    host: {\n        '[class.has-error]': '!isValid()'\n    }\n})\nexport class NumberPickerComponent implements ControlValueAccessor {\n\n    private _min: number = -Infinity;\n    private _max: number = Infinity;\n    private _step: number = 1;\n    private _disabled: boolean = false;\n    private _value: number = 0;\n    private _propagateChange = (_: any) => { };\n\n    @Input() valid: boolean = true;\n    @Output() valueChange = new EventEmitter<number>();\n\n    @Input('value')\n    get value(): number {\n        return this._value;\n    }\n    set value(value: number) {\n        this._value = value;\n        this.valueChange.emit(value);\n        this._propagateChange(value);\n    }\n\n    @Input()\n    get min(): number {\n        return this._min;\n    }\n    set min(value) {\n        this._min = typeof value === 'string' ? parseFloat(value) : value;\n    }\n\n    @Input()\n    get max(): number {\n        return this._max;\n    }\n    set max(value) {\n        this._max = typeof value === 'string' ? parseFloat(value) : value;\n    }\n\n    @Input()\n    get step(): number {\n        return this._step;\n    }\n    set step(value) {\n        this._step = typeof value === 'string' ? parseFloat(value) : value;\n    }\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = typeof value === 'string' && (value === '' || value === 'true' || value === 'disabled') || value === true;\n    }\n\n    increment(event: MouseEvent | KeyboardEvent): void {\n        event.preventDefault();\n\n        if (!this.disabled) {\n            this.value = Math.max(Math.min(this.value + this.step, this.max), this.min);\n        }\n    }\n\n    decrement(event: MouseEvent | KeyboardEvent): void {\n        event.preventDefault();\n\n        if (!this.disabled) {\n            this.value = Math.min(Math.max(this.value - this.step, this.min), this.max);\n        }\n    }\n\n    isValid(): boolean {\n        if (this.value < this.min || this.value > this.max) {\n            return false;\n        }\n\n        return this.valid;\n    }\n\n    onScroll(event: WheelEvent): void {\n\n        let scrollValue = event.deltaY || event.wheelDelta;\n\n        if (scrollValue < 0) {\n            this.increment(event);\n        } else {\n            this.decrement(event);\n        }\n    }\n\n    writeValue(value: any): void {\n        if (value !== undefined) {\n            this._value = value;\n        }\n    }\n\n    registerOnChange(fn: any): void {\n        this._propagateChange = fn;\n    }\n\n    registerOnTouched(fn: any): void { }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n}","import { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nimport { NumberPickerComponent } from './number-picker.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule\n    ],\n    exports: [NumberPickerComponent],\n    declarations: [NumberPickerComponent]\n})\nexport class NumberPickerModule { }\n","import { Directive } from '@angular/core';\n\n@Directive({ \n    selector: '[uxPageHeaderCustomMenu]' \n})\nexport class PageHeaderCustomMenuDirective { }","import { Injectable, OnDestroy } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { map } from 'rxjs/operators';\nimport { PageHeaderIconMenu } from './interfaces';\nimport { PageHeaderNavigationDropdownItem, PageHeaderNavigationItem } from './navigation/navigation.component';\n\n@Injectable()\nexport class PageHeaderService implements OnDestroy {\n\n    items$ = new BehaviorSubject<PageHeaderNavigationItem[]>([]);\n    selected$ = new BehaviorSubject<PageHeaderNavigationItem>(null);\n    selectedRoot$ = new BehaviorSubject<PageHeaderNavigationItem>(null);\n    secondary$ = new BehaviorSubject<boolean>(false);\n    activeIconMenu$ = new BehaviorSubject<PageHeaderIconMenu>(null);\n\n    private _subscription: Subscription;\n\n    constructor() {\n        this._subscription = this.selected$.pipe(map(selected => this.getRoot(selected))).subscribe(root => this.selectedRoot$.next(root));\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    select(item: PageHeaderNavigationItem): void {\n\n        // do nothing if this item is already selected\n        if (item === this.selected$.getValue()) {\n            return;\n        }\n\n        // if we are in secondary navigation mode and we click a parent - dont deselect the child\n        if (this.secondary$.getValue() === true && this.isParentOf(this.selected$.getValue(), item)) {\n            return;\n        }\n\n        // deselect all current items\n        this.deselectAll();\n\n        // call the select function if present\n        if (item.select) {\n            item.select.call(item, item);\n        }\n\n        // store the selected state\n        item.selected = true;\n\n        // select all parent items too\n        this.selectParents(item);\n\n        // emit the new selected item\n        this.selected$.next(item);\n    }\n\n    deselect(item: PageHeaderNavigationItem | PageHeaderNavigationDropdownItem): void {\n\n        // deselect the current item\n        item.selected = false;\n\n        // iterate any children and deselect them\n        if (item.children) {\n            item.children.forEach(_item => this.deselect(_item));\n        }\n    }\n\n    deselectAll(): void {\n        this.items$.getValue().forEach(item => this.deselect(item));\n    }\n\n    setItems(items: PageHeaderNavigationItem[] = []): void {\n        // identify all parent elements\n        items.forEach(item => this.setParent(item));\n\n        this.items$.next(items);\n    }\n\n    setSecondaryNavigation(enabled: boolean): void {\n        this.secondary$.next(enabled);\n    }\n\n    private getRoot(item: PageHeaderNavigation): PageHeaderNavigation {\n        return item && item.parent ? this.getRoot(item.parent) : item;\n    }\n\n    private setParent(item: PageHeaderNavigation, parent?: PageHeaderNavigation | null): void {\n        // set the parent field\n        item.parent = parent;\n\n        // call this function recursively on all children\n        if (item.children) {\n            item.children.forEach(child => this.setParent(child, item));\n        }\n    }\n\n    private selectParents(item: PageHeaderNavigation): void {\n        // if there is a parent then we want to set it to selected\n        if (item.parent) {\n            item.parent.selected = true;\n\n            // check if it has any parents\n            this.selectParents(item.parent);\n        }\n    }\n\n    private isParentOf(node: PageHeaderNavigation, parent: PageHeaderNavigation): boolean {\n\n        // if there are no parents return false\n        if (!node || !node.parent) {\n            return false;\n        }\n\n        // if the parent is the match we are looking for return true\n        if (node.parent === parent) {\n            return true;\n        }\n\n        // if there are potentially grandparents then check them too\n        return this.isParentOf(node.parent, parent);\n    }\n}\n\nexport type PageHeaderNavigation = PageHeaderNavigationItem | PageHeaderNavigationDropdownItem;","import { Component, ContentChildren, EventEmitter, Input, OnDestroy, OnInit, Output, QueryList, TemplateRef } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { distinctUntilChanged, filter, map } from 'rxjs/operators';\nimport { ColorService } from '../../services/color/index';\nimport { Breadcrumb } from '../breadcrumbs/index';\nimport { PageHeaderCustomMenuDirective } from './custom-menu/custom-menu.directive';\nimport { PageHeaderIconMenu } from './interfaces';\nimport { PageHeaderNavigationItem } from './navigation/navigation.component';\nimport { PageHeaderNavigation, PageHeaderService } from './page-header.service';\n\n@Component({\n    selector: 'ux-page-header',\n    exportAs: 'ux-page-header',\n    template: `<div class=\"ux-page-header\" [class.page-header-condensed]=\"condensed\" role=\"banner\">\n\n    <!-- Display Upper Section when not condensed -->\n    <div class=\"page-header-actions\" *ngIf=\"!condensed\">\n\n        <div class=\"page-header-logo-container\" role=\"presentation\" [hidden]=\"!logo\">\n            <img [attr.src]=\"logo\" class=\"page-header-logo\">\n        </div>\n\n        <div class=\"page-header-navigation\" [ngClass]=\"alignment\" role=\"navigation\" aria-label=\"Primary Navigation\">\n\n            <!-- The Top Navigation Options -->\n            <ux-page-header-horizontal-navigation></ux-page-header-horizontal-navigation>\n        </div>\n\n        <div class=\"page-header-icon-menus\" role=\"toolbar\">\n            <ng-container *ngFor=\"let menu of customMenus\" [ngTemplateOutlet]=\"menu\"></ng-container>\n\n            <ux-page-header-icon-menu *ngFor=\"let menu of iconMenus\" [menu]=\"menu\"></ux-page-header-icon-menu>\n        </div>\n    </div>\n\n    <!-- Display Lower Section When Not Condensed -->\n    <div class=\"page-header-details\" *ngIf=\"!condensed\">\n\n        <div class=\"page-header-state-container\" role=\"navigation\">\n\n            <button *ngIf=\"backVisible === true\" class=\"page-header-back-button\" (click)=\"goBack()\" aria-label=\"Go Back\">\n                <span class=\"hpe-icon hpe-previous text-primary\"></span>\n            </button>\n\n            <div class=\"page-header-title-container\">\n\n                <ux-breadcrumbs [crumbs]=\"crumbs\"></ux-breadcrumbs>\n\n                <h1 class=\"page-header-title\" [style.backgroundColor]=\"familyBackground\" [style.color]=\"familyForeground\">{{ header }}</h1>\n            </div>\n\n        </div>\n\n    </div>\n\n    <!-- Display This Section Optimized for Condensed Mode -->\n    <div class=\"page-header-condensed-content\" *ngIf=\"condensed\">\n\n        <div class=\"page-header-breadcrumbs\" role=\"navigation\">\n            <ux-breadcrumbs [crumbs]=\"crumbs\"></ux-breadcrumbs>\n        </div>\n\n        <div class=\"page-header-navigation\" [ngClass]=\"alignment\" role=\"navigation\" aria-label=\"Primary Navigation\">\n\n            <!-- The Top Navigation Options -->\n            <ux-page-header-horizontal-navigation></ux-page-header-horizontal-navigation>\n        </div>\n\n        <div class=\"page-header-icon-menus\" role=\"toolbar\">\n            <ng-container *ngFor=\"let menu of customMenus\" [ngTemplateOutlet]=\"menu\"></ng-container>\n            <ux-page-header-icon-menu *ngFor=\"let menu of iconMenus\" [menu]=\"menu\"></ux-page-header-icon-menu>\n        </div>\n\n    </div>\n\n</div>\n\n<div class=\"page-header-secondary\" [ngClass]=\"secondaryNavigationAlignment\" role=\"navigation\" *ngIf=\"secondaryNavigation && (selectedRoot$ | async)\">\n    <ul class=\"nav nav-tabs\" role=\"tablist\" aria-label=\"Secondary Navigation\" *ngIf=\"(selectedRoot$ | async)?.children; let children\">\n        <li *ngFor=\"let child of children\" [class.active]=\"child === (selected$ | async)\" role=\"none\">\n            <a role=\"tab\"\n                [attr.aria-selected]=\"child === (selected$ | async)\"\n                tabindex=\"0\"\n                (click)=\"select(child)\"\n                (keydown.enter)=\"select(child)\">{{ child.title }}</a>\n        </li>\n    </ul>\n</div>`,\n    providers: [ PageHeaderService ]\n})\nexport class PageHeaderComponent implements OnInit, OnDestroy {\n\n    @Input() logo: string;\n    @Input() header: string;\n    @Input() alignment: 'left' | 'right' | 'center' = 'center';\n    @Input() condensed: boolean = false;\n    @Input() iconMenus: PageHeaderIconMenu[];\n    @Input() backVisible: boolean = true;\n    @Input() secondaryNavigationAlignment: string = 'center';\n    @Input() secondaryNavigationAutoselect: boolean = false;\n\n    @Input() set items(items: PageHeaderNavigationItem[]) {\n        this._pageHeaderService.setItems(items);\n    }\n\n    @Input() set secondaryNavigation(enabled: boolean) {\n        this._pageHeaderService.setSecondaryNavigation(enabled);\n    }\n\n    get secondaryNavigation(): boolean {\n        return this._pageHeaderService.secondary$.getValue();\n    }\n\n    @Input() set crumbs(crumbs: Breadcrumb[]) {\n        this._crumbs = crumbs;\n    }\n\n    get crumbs(): Breadcrumb[] {\n        return this.condensed ? [...this._crumbs, { title: this.header }] : this._crumbs;\n    }\n\n    @Input()\n    set familyBackground(color: string) {\n        this._familyBackground = this._colorService.resolve(color);\n    }\n\n    get familyBackground(): string {\n        return this._familyBackground;\n    }\n\n    @Input()\n    set familyForeground(color: string) {\n        this._familyForeground = this._colorService.resolve(color);\n    }\n\n    get familyForeground(): string {\n        return this._familyForeground;\n    }\n\n    @Output() backClick = new EventEmitter();\n\n    @ContentChildren(PageHeaderCustomMenuDirective, { read: TemplateRef }) customMenus: QueryList<TemplateRef<any>>;\n\n    selected$: BehaviorSubject<PageHeaderNavigationItem> = this._pageHeaderService.selected$;\n    selectedRoot$: BehaviorSubject<PageHeaderNavigationItem> = this._pageHeaderService.selectedRoot$;\n\n    private _crumbs: Breadcrumb[] = [];\n    private _familyBackground: string;\n    private _familyForeground: string;\n    private _subscription: Subscription;\n\n    constructor(private _colorService: ColorService, private _pageHeaderService: PageHeaderService) { }\n\n    ngOnInit(): void {\n        this._subscription = this.selectedRoot$.pipe(\n            distinctUntilChanged(),\n            filter(() => this.secondaryNavigation && this.secondaryNavigationAutoselect),\n            filter((item: PageHeaderNavigation) => item && item.children && item.children.length > 0),\n            map(item => item.children[0])\n        ).subscribe(item => this.select(item));\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    goBack(): void {\n        this.backClick.emit();\n    }\n\n    select(item: PageHeaderNavigation): void {\n        this._pageHeaderService.select(item);\n    }\n}","import { Component, Input, OnDestroy, ViewChild } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { MenuNavigationToggleDirective } from '../../../directives/menu-navigation/menu-navigation-toggle.directive';\nimport { PageHeaderIconMenu, PageHeaderIconMenuDropdownItem } from '../interfaces';\nimport { PageHeaderService } from '../page-header.service';\n\n@Component({\n    selector: 'ux-page-header-icon-menu',\n    template: `<div class=\"page-header-icon-menu\"\n    dropdown\n    placement=\"bottom right\"\n    [(isOpen)]=\"isOpen\">\n\n    <a role=\"button\"\n        class=\"page-header-icon-menu-button\"\n        [attr.aria-label]=\"menu.label\"\n        aria-haspopup=\"true\"\n        tabindex=\"0\"\n        (click)=\"select(menu)\"\n        dropdownToggle\n        uxMenuNavigationToggle\n        #menuNavigationToggle=\"uxMenuNavigationToggle\"\n        [(menuOpen)]=\"isOpen\">\n\n        <i class=\"hpe-icon\" [ngClass]=\"menu.icon\"></i>\n        <span class=\"label label-primary\" *ngIf=\"menu?.badge\" aria-hidden=\"true\">{{ menu.badge }}</span>\n\n    </a>\n\n    <ul *dropdownMenu\n        class=\"dropdown-menu\"\n        role=\"menu\"\n        uxMenuNavigation\n        [toggleButton]=\"menuNavigationToggle\">\n\n        <li *ngFor=\"let dropdown of menu?.dropdown\"\n            role=\"none\"\n            [class.dropdown-header]=\"dropdown.header\"\n            [class.dropdown-divider]=\"dropdown.divider\">\n\n            <span class=\"font-bold\" *ngIf=\"dropdown.header\">{{ dropdown.title }}</span>\n\n            <a *ngIf=\"!dropdown.header\"\n                role=\"menuitem\"\n                class=\"dropdown-item\"\n                tabindex=\"-1\"\n                (click)=\"select(dropdown)\"\n                (keydown)=\"keydownHandler(dropdown, $event)\"\n                uxMenuNavigationItem>\n\n\n                <span class=\"dropdown-item-title\">\n                    <i class=\"hpe-icon hpe-fw\" [ngClass]=\"dropdown.icon\"></i>\n                    {{ dropdown.title }}\n                </span>\n                <span *ngIf=\"dropdown.subtitle\" class=\"dropdown-item-subtitle\">{{ dropdown.subtitle }}</span>\n\n            </a>\n        </li>\n\n    </ul>\n</div>`\n})\nexport class PageHeaderIconMenuComponent implements OnDestroy {\n\n    @Input() menu: PageHeaderIconMenu;\n\n    get isOpen(): boolean {\n        return this._isOpen;\n    }\n\n    set isOpen(value: boolean) {\n        this._isOpen = value;\n        if (value) {\n            this._service.activeIconMenu$.next(this.menu);\n        }\n    }\n\n    @ViewChild('menuNavigationToggle') menuNavigationToggle: MenuNavigationToggleDirective;\n\n    private _isOpen: boolean;\n    private _subscription: Subscription;\n\n    constructor(private _service: PageHeaderService) {\n        this._subscription = _service.activeIconMenu$.subscribe((next) => {\n            // Close all but the most recently opened menu\n            if (next !== this.menu) {\n                this._isOpen = false;\n            }\n        });\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    select(item: PageHeaderIconMenu | PageHeaderIconMenuDropdownItem) {\n        if (item.select) {\n            item.select.call(item, item);\n        }\n    }\n\n    keydownHandler(item: PageHeaderIconMenu | PageHeaderIconMenuDropdownItem, event: KeyboardEvent): void {\n\n        switch (event.key) {\n            case 'Enter':\n            case ' ':\n                this.select(item);\n                this.isOpen = false;\n                this.menuNavigationToggle.focus();\n                event.preventDefault();\n                event.stopPropagation();\n                break;\n        }\n    }\n}","import { Component, ElementRef, Input, OnDestroy, ViewChild } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { debounceTime } from 'rxjs/operators';\nimport { PageHeaderService } from '../../page-header.service';\nimport { PageHeaderNavigationDropdownItem } from '../navigation.component';\n\n@Component({\n    selector: 'ux-page-header-horizontal-navigation-dropdown-item',\n    exportAs: 'ux-page-header-horizontal-navigation-dropdown-item',\n    template: `<div *ngIf=\"item.children && item.children.length > 0\"\n    dropdown\n    #subMenu=\"bs-dropdown\"\n    [isOpen]=\"dropdownOpen\"\n    container=\"body\"\n    placement=\"right\"\n    (mouseenter)=\"hoverStart()\"\n    (mouseleave)=\"hoverLeave()\">\n\n    <a role=\"menuitem\"\n        class=\"dropdown-item\"\n        [class.selected]=\"item.selected\"\n        aria-haspopup=\"true\"\n        [attr.aria-expanded]=\"dropdownOpen\"\n        [attr.aria-selected]=\"item.selected\"\n        tabindex=\"-1\"\n        #button\n        dropdownToggle\n        uxMenuNavigationToggle\n        #menuNavigationToggle=\"uxMenuNavigationToggle\"\n        [(menuOpen)]=\"dropdownOpen\"\n        menuPosition=\"right\">\n\n        <span class=\"dropdown-item-title\">{{ item.title }}</span>\n        <span class=\"dropdown-item-icon hpe-icon hpe-next\"></span>\n\n    </a>\n\n    <ul *dropdownMenu\n        role=\"menu\"\n        class=\"dropdown-menu horizontal-navigation-dropdown-submenu\"\n        (mouseenter)=\"hoverStart()\"\n        (mouseleave)=\"hoverLeave()\"\n        uxMenuNavigation\n        #menuNavigation=\"uxMenuNavigation\"\n        [toggleButton]=\"menuNavigationToggle\"\n        toggleButtonPosition=\"left\">\n\n        <li *ngFor=\"let subItem of item.children\" role=\"none\">\n\n            <a role=\"menuitem\"\n                class=\"dropdown-item\"\n                [class.selected]=\"subItem.selected\"\n                [attr.aria-selected]=\"subItem.selected\"\n                tabindex=\"-1\"\n                (click)=\"select(subItem)\"\n                (keydown)=\"keydownHandler($event, subItem)\"\n                uxMenuNavigationItem>\n\n                <span class=\"dropdown-item-title\">{{ subItem.title }}</span>\n\n            </a>\n\n        </li>\n    </ul>\n\n</div>\n\n<div *ngIf=\"!item.children || item.children.length === 0\"\n    (mouseenter)=\"hoverStart()\"\n    (mouseleave)=\"hoverLeave()\">\n\n    <a role=\"menuitem\"\n        #button\n        class=\"dropdown-item\"\n        [class.selected]=\"item.selected\"\n        [attr.aria-selected]=\"item.selected\"\n        tabindex=\"-1\"\n        (click)=\"select(item)\"\n        (keydown)=\"keydownHandler($event, item)\">\n\n        <span class=\"dropdown-item-title\">{{ item.title }}</span>\n\n    </a>\n\n</div>`\n})\nexport class PageHeaderNavigationDropdownItemComponent implements OnDestroy {\n\n    @Input() item: PageHeaderNavigationDropdownItem;\n\n    @ViewChild('button')\n    button: ElementRef;\n\n    dropdownOpen: boolean = false;\n\n    private _subscription: Subscription;\n    private _hover$: Subject<boolean> = new Subject<boolean>();\n\n    constructor(private _pageHeaderService: PageHeaderService) {\n\n        // subscribe to stream with a debounce (a small debounce is all that is required)\n        this._subscription = this._hover$.pipe(debounceTime(1)).subscribe(visible => this.dropdownOpen = visible);\n\n        // Close submenus when selected item changes\n        this._subscription.add(\n            _pageHeaderService.selected$.subscribe(() => {\n                this.dropdownOpen = false;\n            })\n        );\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    select(item: PageHeaderNavigationDropdownItem) {\n\n        // clicking on an item with children then return\n        if (item.children) {\n            return;\n        }\n\n        // emit the selected item in an event\n        this._pageHeaderService.select(item);\n    }\n\n    focus(): void {\n        this.button.nativeElement.focus();\n    }\n\n    hoverStart() {\n        this._hover$.next(true);\n    }\n\n    hoverLeave() {\n        this._hover$.next(false);\n    }\n\n    close() {\n        this.dropdownOpen = false;\n    }\n\n    keydownHandler(event: KeyboardEvent, item: PageHeaderNavigationDropdownItem): void {\n\n        switch (event.key) {\n            case 'Enter':\n            case ' ':\n                this.select(item);\n                event.preventDefault();\n                event.stopPropagation();\n                break;\n        }\n    }\n}","import { Component, ElementRef, Input, OnDestroy, OnInit, QueryList, ViewChild, ViewChildren } from '@angular/core';\nimport { BsDropdownDirective } from 'ngx-bootstrap/dropdown';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { MenuNavigationToggleDirective } from '../../../../directives/menu-navigation/menu-navigation-toggle.directive';\nimport { PageHeaderService } from '../../page-header.service';\nimport { PageHeaderNavigationDropdownItemComponent } from '../navigation-dropdown-item/navigation-dropdown-item.component';\nimport { PageHeaderNavigationItem } from '../navigation.component';\n\n@Component({\n    selector: 'ux-page-header-horizontal-navigation-item',\n    template: `<div *ngIf=\"item.children && item.children.length > 0 && !(secondary$ | async)\"\n    dropdown\n    #menu=\"bs-dropdown\"\n    [(isOpen)]=\"isOpen\"\n    container=\"body\"\n    placement=\"bottom left\">\n\n    <button role=\"menuitem\"\n        class=\"horizontal-navigation-button\"\n        [class.selected]=\"item.selected\"\n        [class.open]=\"isOpen\"\n        aria-haspopup=\"true\"\n        [attr.aria-expanded]=\"isOpen\"\n        [attr.aria-selected]=\"item.selected\"\n        dropdownToggle\n        uxMenuNavigationToggle\n        #button=\"uxMenuNavigationToggle\"\n        [(menuOpen)]=\"isOpen\">\n\n        <span class=\"hpe-icon navigation-item-icon\" *ngIf=\"item.icon\" [ngClass]=\"item?.icon\"></span>\n        <span class=\"navigation-item-label\">{{ item?.title }}</span>\n        <span class=\"hpe-icon hpe-down\"></span>\n\n    </button>\n\n    <div *dropdownMenu\n        role=\"menu\"\n        class=\"dropdown-menu horizontal-navigation-dropdown-menu\"\n        uxMenuNavigation\n        [toggleButton]=\"button\"\n        toggleButtonPosition=\"top\">\n\n        <div *ngFor=\"let item of item?.children\" uxMenuNavigationItem (activated)=\"dropdownItem.focus()\">\n            <ux-page-header-horizontal-navigation-dropdown-item\n                #dropdownItem=\"ux-page-header-horizontal-navigation-dropdown-item\"\n                [item]=\"item\">\n            </ux-page-header-horizontal-navigation-dropdown-item>\n        </div>\n\n    </div>\n\n</div>\n\n<button *ngIf=\"!item.children || item.children.length === 0 || (secondary$ | async)\"\n    role=\"menuitem\"\n    class=\"horizontal-navigation-button\"\n    [class.selected]=\"item.selected\"\n    [attr.aria-selected]=\"item.selected\"\n    (click)=\"select()\">\n\n    <span class=\"hpe-icon navigation-item-icon\" *ngIf=\"item.icon\" [ngClass]=\"item?.icon\"></span>\n    <span class=\"navigation-item-label\">{{ item?.title }}</span>\n\n</button>`\n})\nexport class PageHeaderNavigationItemComponent implements OnInit, OnDestroy {\n\n    @ViewChild('button') button: MenuNavigationToggleDirective;\n    @ViewChild('menu') menu: BsDropdownDirective;\n    @ViewChildren(PageHeaderNavigationDropdownItemComponent) dropdowns: QueryList<PageHeaderNavigationDropdownItemComponent>;\n\n    @Input() item: PageHeaderNavigationItem;\n\n    secondary$: BehaviorSubject<boolean> = this._pageHeaderService.secondary$;\n\n    isOpen: boolean;\n\n    private _subscription: Subscription;\n\n    constructor(\n        public elementRef: ElementRef,\n        private _pageHeaderService: PageHeaderService\n    ) { }\n\n    ngOnInit() {\n\n        // Close submenus when selected item changes\n        this._subscription = this._pageHeaderService.selected$.subscribe((next) => {\n            if (next && this.isOpen) {\n                this.isOpen = false;\n\n                // If menu was closed, keep focus on the toggle button\n                this.button.focus();\n            }\n        });\n\n        if (this.menu) {\n            this._subscription.add(\n                this.menu.onHidden.subscribe(() => this.dropdowns.forEach(dropdown => dropdown.close()))\n            );\n        }\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    select() {\n\n        // if the item has children then do nothing at this stage\n        if (this.item.children && this._pageHeaderService.secondary$.getValue() === false) {\n            return;\n        }\n\n        // otherwise select the current item\n        this._pageHeaderService.select(this.item);\n    }\n}","import { AfterViewInit, Component, ElementRef, OnDestroy, QueryList, ViewChildren } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { ResizeService } from '../../../directives/resize/index';\nimport { PageHeaderNavigation, PageHeaderService } from '../page-header.service';\nimport { PageHeaderNavigationItemComponent } from './navigation-item/navigation-item.component';\n\n@Component({\n    selector: 'ux-page-header-horizontal-navigation',\n    template: `<ux-page-header-horizontal-navigation-item\n    *ngFor=\"let item of items$ | async\"\n    [item]=\"item\">\n</ux-page-header-horizontal-navigation-item>\n\n<div class=\"selected-indicator\"\n    [style.opacity]=\"indicatorVisible ? 1 : 0\"\n    [style.margin-left.px]=\"indicatorX\"\n    [style.width.px]=\"indicatorWidth\">\n</div>`,\n    host: {\n        'role': 'menubar'\n    }\n})\nexport class PageHeaderNavigationComponent implements AfterViewInit, OnDestroy {\n\n    @ViewChildren(PageHeaderNavigationItemComponent) menuItems: QueryList<PageHeaderNavigationItemComponent>;\n\n    items$: BehaviorSubject<PageHeaderNavigationItem[]> = this._pageHeaderService.items$;\n    indicatorVisible: boolean = false;\n    indicatorX: number = 0;\n    indicatorWidth: number = 0;\n\n    private _subscription = new Subscription();\n\n    constructor(elementRef: ElementRef, resizeService: ResizeService, private _pageHeaderService: PageHeaderService) {\n        this._subscription.add(resizeService.addResizeListener(elementRef.nativeElement).subscribe(this.updateSelectedIndicator.bind(this)));\n        this._subscription.add(_pageHeaderService.selected$.pipe(distinctUntilChanged()).subscribe(this.updateSelectedIndicator.bind(this)));\n        this._subscription.add(_pageHeaderService.secondary$.pipe(distinctUntilChanged()).subscribe(this.updateSelectedIndicator.bind(this)));\n    }\n\n    ngAfterViewInit(): void {\n        this.updateSelectedIndicator();\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    updateSelectedIndicator(): void {\n        setTimeout(() => {\n            // find the selected item\n            const selected = this.menuItems.find(item => item.item.selected);\n\n            // determine whether or not to show the indicator\n            this.indicatorVisible = !!selected;\n\n            // set the width of the indicator to match the width of the navigation item\n            if (selected) {\n                const styles = getComputedStyle(selected.elementRef.nativeElement);\n\n                this.indicatorX = selected.elementRef.nativeElement.offsetLeft;\n                this.indicatorWidth = parseInt(styles.getPropertyValue('width'));\n            }\n        });\n    }\n\n}\n\nexport interface PageHeaderNavigationItem {\n    icon?: string;\n    title: string;\n    selected?: boolean;\n    select?: (item: PageHeaderNavigationItem) => void;\n    children?: PageHeaderNavigationDropdownItem[];\n    parent?: PageHeaderNavigation;\n}\n\nexport interface PageHeaderNavigationDropdownItem {\n    title: string;\n    selected?: boolean;\n    select?: (item: PageHeaderNavigationDropdownItem) => void;\n    children?: PageHeaderNavigationDropdownItem[];\n    parent?: PageHeaderNavigation;\n}\n\n// This is an alias for MF use as \"DropdownItem\" doesn't make sense in context with how it is used\nexport interface PageHeaderSecondaryNavigationItem extends PageHeaderNavigationDropdownItem { }","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { MenuNavigationItemDirective } from './menu-navigation-item.directive';\n\n@Injectable()\nexport class MenuNavigationService {\n\n    active$ = new BehaviorSubject<MenuNavigationItemDirective>(null);\n}","import { Directive, ElementRef, EventEmitter, OnDestroy, Output } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { MenuNavigationService } from './menu-navigation.service';\n\n@Directive({\n    selector: '[uxMenuNavigationItem]'\n})\nexport class MenuNavigationItemDirective implements OnDestroy {\n\n    @Output() activated = new EventEmitter();\n\n    private _subscription: Subscription;\n\n    constructor(service: MenuNavigationService, private _elementRef: ElementRef) {\n        this._subscription = service.active$.subscribe((next) => {\n            if (next === this) {\n                this.setActive();\n            }\n        });\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    setActive(): void {\n        this._elementRef.nativeElement.focus();\n        this.activated.emit();\n    }\n}","import { AfterContentInit, ContentChildren, Directive, ElementRef, EventEmitter, HostListener, Inject, Input, OnDestroy, OnInit, Output, QueryList } from '@angular/core';\nimport { DOCUMENT } from '@angular/platform-browser';\nimport { Subscription } from 'rxjs/Subscription';\nimport { MenuNavigationItemDirective } from './menu-navigation-item.directive';\nimport { MenuNavigationToggleDirective } from './menu-navigation-toggle.directive';\nimport { MenuNavigationService } from './menu-navigation.service';\n\n@Directive({\n    selector: '[uxMenuNavigation]',\n    exportAs: 'uxMenuNavigation',\n    providers: [MenuNavigationService]\n})\nexport class MenuNavigationDirective implements OnInit, AfterContentInit, OnDestroy {\n\n    @Input()\n    toggleButton: MenuNavigationToggleDirective;\n\n    @Input()\n    toggleButtonPosition: 'top' | 'right' | 'bottom' | 'left' = 'top';\n\n    @Output()\n    navigatedOut = new EventEmitter<KeyboardEvent>();\n\n    @ContentChildren(MenuNavigationItemDirective, { descendants: true })\n    items: QueryList<MenuNavigationItemDirective>;\n\n    get activeIndex(): number {\n        return this._itemsOrdered.indexOf(this._service.active$.value);\n    }\n\n    private _itemsOrdered: MenuNavigationItemDirective[];\n\n    private _document: any;\n\n    private _subscription = new Subscription();\n\n    constructor(\n        private _service: MenuNavigationService,\n        private _elementRef: ElementRef,\n        @Inject(DOCUMENT) document: any\n    ) {\n        this._document = document;\n    }\n\n    ngOnInit(): void {\n        if (this.toggleButton) {\n            this._subscription.add(\n                this.toggleButton.keyEnter.subscribe(this.focusFirst.bind(this))\n            );\n        }\n    }\n\n    ngAfterContentInit(): void {\n\n        this._subscription.add(\n            this.items.changes.subscribe(() => {\n                this._itemsOrdered = this.items.toArray();\n            })\n        );\n\n        this._itemsOrdered = this.items.toArray();\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    focusFirst(): void {\n        this.moveFirst();\n    }\n\n    @HostListener('document:keydown', ['$event'])\n    keydownHandler(event: KeyboardEvent): void {\n\n        // Only handle events when focus in within the list of menu items\n        if (!this._elementRef.nativeElement.contains(this._document.activeElement)) {\n            return;\n        }\n\n        let handled = false;\n\n        switch (event.key) {\n\n            case 'ArrowUp':\n            case 'Up':\n                this.movePrevious(event);\n                handled = true;\n                break;\n\n            case 'ArrowDown':\n            case 'Down':\n                this.moveNext(event);\n                handled = true;\n                break;\n\n            case 'ArrowLeft':\n            case 'Left':\n                if (this.toggleButtonPosition === 'left') {\n                    this.moveToToggleButton(event);\n                    handled = true;\n                }\n                break;\n\n            case 'ArrowRight':\n            case 'Right':\n                if (this.toggleButtonPosition === 'right') {\n                    this.moveToToggleButton(event);\n                    handled = true;\n                }\n                break;\n\n            case 'Home':\n                this.moveFirst();\n                handled = true;\n                break;\n\n            case 'End':\n                this.moveLast();\n                handled = true;\n                break;\n\n            case 'Escape':\n                this.navigatedOut.emit(event);\n                handled = true;\n                break;\n        }\n\n        if (handled) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n\n    private moveNext(event: KeyboardEvent): void {\n\n        // Do nothing if there's no active menu item registered\n        if (this.activeIndex < 0) {\n            return;\n        }\n\n        const nextIndex = this.activeIndex + 1;\n        if (nextIndex < this._itemsOrdered.length) {\n\n            // Activate the next menu item\n            // (uxMenuNavigationItem subscribes to this and applies focus if it matches)\n            this._service.active$.next(this._itemsOrdered[nextIndex]);\n\n        } else {\n\n            // Check if focus went out of bounds in the direction of the origin toggle button\n            if (this.toggleButtonPosition === 'bottom') {\n                this.moveToToggleButton(event);\n            }\n        }\n    }\n\n    private movePrevious(event: KeyboardEvent): void {\n\n        // Do nothing if there's no active menu item registered\n        if (this.activeIndex < 0) {\n            return;\n        }\n\n        const nextIndex = this.activeIndex - 1;\n        if (nextIndex >= 0) {\n\n            // Activate the previous menu item\n            // (uxMenuNavigationItem subscribes to this and applies focus if it matches)\n            this._service.active$.next(this._itemsOrdered[nextIndex]);\n\n        } else {\n\n            // Check if focus went out of bounds in the direction of the origin toggle button\n            if (this.toggleButtonPosition === 'top') {\n                this.moveToToggleButton(event);\n            }\n        }\n    }\n\n    private moveFirst(): void {\n        if (this._itemsOrdered.length > 0) {\n            this._service.active$.next(this._itemsOrdered[0]);\n        }\n    }\n\n    private moveLast(): void {\n        if (this._itemsOrdered.length > 0) {\n            this._service.active$.next(this._itemsOrdered[this._itemsOrdered.length - 1]);\n        }\n    }\n\n    private moveToToggleButton(event: KeyboardEvent): void {\n        if (this.toggleButton) {\n            this.toggleButton.focus();\n            this.toggleButton.menuOpen = false;\n        }\n\n        this.navigatedOut.emit(event);\n    }\n}","import { Directive, ElementRef, EventEmitter, HostListener, Input, Output } from '@angular/core';\n\n@Directive({\n    selector: '[uxMenuNavigationToggle]',\n    exportAs: 'uxMenuNavigationToggle'\n})\nexport class MenuNavigationToggleDirective {\n\n    @Input()\n    get menuOpen(): boolean {\n        return this._menuOpen;\n    }\n\n    set menuOpen(value: boolean) {\n        this._menuOpen = value;\n        this.menuOpenChange.emit(value);\n    }\n\n    @Input()\n    menuPosition: 'top' | 'right' | 'bottom' | 'left' = 'bottom';\n\n    @Output()\n    menuOpenChange = new EventEmitter<boolean>();\n\n    keyEnter = new EventEmitter<void>();\n\n    private _menuOpen: boolean;\n\n    constructor(private _elementRef: ElementRef) { }\n\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    @HostListener('keydown', ['$event'])\n    keydownHandler(event: KeyboardEvent): void {\n\n        if (this.isKeyMatch(event.key)) {\n\n            // Open the menu\n            this.menuOpen = true;\n\n            // Allow the menu to init, then send the event to give it focus\n            setTimeout(() => {\n                this.keyEnter.emit();\n            });\n\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n\n    private isKeyMatch(key: string): boolean {\n        switch (key) {\n            case 'Enter':\n            case ' ':\n                return true;\n\n            case 'ArrowUp':\n            case 'Up':\n                return this.menuPosition === 'top';\n\n            case 'ArrowDown':\n            case 'Down':\n                return this.menuPosition === 'bottom';\n\n            case 'ArrowLeft':\n            case 'Left':\n                return this.menuPosition === 'left';\n\n            case 'ArrowRight':\n            case 'Right':\n                return this.menuPosition === 'right';\n        }\n\n        return false;\n    }\n}","import { NgModule } from '@angular/core';\n\nimport { MenuNavigationDirective } from './menu-navigation.directive';\nimport { MenuNavigationItemDirective } from './menu-navigation-item.directive';\nimport { MenuNavigationToggleDirective } from './menu-navigation-toggle.directive';\n\nconst EXPORTS = [\n    MenuNavigationDirective,\n    MenuNavigationItemDirective,\n    MenuNavigationToggleDirective\n];\n\n@NgModule({\n    imports: [],\n    exports: EXPORTS,\n    declarations: EXPORTS,\n})\nexport class MenuNavigationModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\n\nimport { PageHeaderComponent } from './page-header.component';\nimport { BreadcrumbsModule } from '../breadcrumbs/index';\nimport { PageHeaderIconMenuComponent } from './icon-menu/icon-menu.component';\nimport { PageHeaderNavigationComponent } from './navigation/navigation.component';\nimport { PageHeaderNavigationItemComponent } from './navigation/navigation-item/navigation-item.component';\nimport { PageHeaderNavigationDropdownItemComponent } from './navigation/navigation-dropdown-item/navigation-dropdown-item.component';\nimport { PageHeaderCustomMenuDirective } from './custom-menu/custom-menu.directive';\nimport { ResizeModule } from '../../directives/resize/index';\nimport { ColorServiceModule } from '../../services/color/index';\nimport { MenuNavigationModule } from '../../directives/menu-navigation/index';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        BreadcrumbsModule,\n        ColorServiceModule,\n        ResizeModule,\n        MenuNavigationModule,\n        BsDropdownModule.forRoot()\n    ],\n    exports: [\n        PageHeaderComponent,\n        PageHeaderCustomMenuDirective\n    ],\n    declarations: [\n        PageHeaderComponent,\n        PageHeaderIconMenuComponent,\n        PageHeaderCustomMenuDirective,\n        PageHeaderNavigationComponent,\n        PageHeaderNavigationItemComponent,\n        PageHeaderNavigationDropdownItemComponent\n    ]\n})\nexport class PageHeaderModule { }\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n    selector: 'ux-progress-bar',\n    template: `<div *ngIf=\"!indeterminate\" class=\"progressbar-track\" [style.width.%]=\"(value / max) * 100\" [style.backgroundColor]=\"barColor\">\n    <ng-content></ng-content>\n</div>\n<div *ngIf=\"indeterminate\" class=\"progressbar-track indeterminate\" [style.backgroundColor]=\"barColor\">\n    <ng-content></ng-content>\n</div>`,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ProgressBarComponent {\n    @Input() value: number = 0;\n    @Input() max: number = 100;\n    @Input() indeterminate: boolean = false;\n    @Input() trackColor: string;\n    @Input() barColor: string;\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ProgressBarComponent } from './progress-bar.component';\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    exports: [ProgressBarComponent],\n    declarations: [ProgressBarComponent]\n})\nexport class ProgressBarModule { }\n","import { Component, EventEmitter, Input, Output, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const RADIOBUTTON_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => RadioButtonComponent),\n    multi: true\n};\n\nlet uniqueRadioId = 0;\n\n@Component({\n    selector: 'ux-radio-button',\n    template: `<label [attr.for]=\"inputId\" class=\"ux-radio-button\"\n       [class.ux-radio-button-checked]=\"value === option\"\n       [class.ux-radio-button-simplified]=\"simplified\"\n       [class.ux-radio-button-disabled]=\"disabled\"\n       [class.ux-radio-button-focused]=\"focused\">\n\n    <div class=\"ux-radio-button-container\">\n        <input class=\"ux-radio-button-input\"\n            type=\"radio\"\n            [id]=\"inputId\"\n            [checked]=\"value === option\"\n            [disabled]=\"disabled\"\n            [tabindex]=\"tabindex || value === option ? 0 : -1\"\n            [attr.name]=\"name\"\n            [required]=\"required\"\n            [attr.aria-label]=\"ariaLabel\"\n            [attr.aria-labelledby]=\"ariaLabelledby\"\n            [attr.aria-describedby]=\"ariaDescribedby\"\n            [attr.aria-checked]=\"value === option\"\n            (focus)=\"focused = true\"\n            (blur)=\"focused = false\"\n            (change)=\"toggle()\"\n            (click)=\"$event.stopPropagation()\">\n    </div>\n\n    <span class=\"ux-radio-button-label\">\n        <ng-content></ng-content>\n    </span>\n\n</label>`,\n    providers: [RADIOBUTTON_VALUE_ACCESSOR]\n})\nexport class RadioButtonComponent implements ControlValueAccessor {\n\n    private _radioButtonId: string = `ux-radio-button-${++uniqueRadioId}`;\n\n    @Input() id: string = this._radioButtonId;\n    @Input() name: string | null;\n    @Input() required: boolean;\n    @Input() tabindex: number = 0;\n    @Input() clickable: boolean = true;\n    @Input() disabled: boolean = false;\n    @Input() simplified: boolean = false;\n    @Input() option: any;\n    @Input('aria-label') ariaLabel: string = '';\n    @Input('aria-labelledby') ariaLabelledby: string = null;\n    @Input('aria-describedby') ariaDescribedby: string = null;\n\n    @Output() valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    @Input()\n    get value() {\n        return this._value;\n    }\n\n    set value(value: boolean) {\n        this._value = value;\n\n        // invoke change event\n        this.valueChange.emit(this._value);\n\n        // call callback\n        this.onChangeCallback(this._value);\n        this.onTouchedCallback();        \n    }\n\n    get inputId(): string { \n        return `${this.id || this._radioButtonId}-input`;\n    }\n\n    private _value: any = false;\n\n    focused: boolean = false;\n    onTouchedCallback: () => void = () => { };\n    onChangeCallback: (_: any) => void = () => { };\n\n    toggle(): void {\n\n        if (this.disabled || !this.clickable) {\n            return;\n        }\n\n        // toggle the checked state\n        this.value = this.option;\n\n        // call callback\n        this.onChangeCallback(this.value);\n    }\n\n    // Functions required to update ng-model\n    writeValue(value: boolean): void {\n        if (value !== this._value) {\n            this._value = value;\n        }\n    }\n\n    registerOnChange(fn: any): void {\n        this.onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this.onTouchedCallback = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n}\n","import { NgModule } from '@angular/core';\nimport {FormsModule} from '@angular/forms';\n\nimport { RadioButtonComponent } from './radiobutton.component';\n\n@NgModule({\n    imports: [FormsModule],\n    exports: [RadioButtonComponent],\n    declarations: [RadioButtonComponent]\n})\nexport class RadioButtonModule { }\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subject } from 'rxjs/Subject';\nimport { SearchBuilderComponentDefinition } from './interfaces/component-definition.interface';\nimport { SearchBuilderQuery } from './interfaces/query.interface';\n\n@Injectable()\nexport class SearchBuilderService {\n\n  query: SearchBuilderQuery = {};\n  queryChange: Subject<SearchBuilderQuery> = new Subject<SearchBuilderQuery>();\n  validationChange: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(true);\n\n  private _componentId: number = 0;\n  private _components: SearchBuilderComponentDefinition[] = [];\n  private _validation: { [key: number]: boolean } = {};\n\n  /**\n   * Add a component to the internal list of components\n   */\n  registerComponent(component: SearchBuilderComponentDefinition): void {\n\n    // ensure there are no components with a matching name\n    if (this._components.find(cmp => cmp.name === component.name)) {\n      throw new Error(`Search builder components must have a unique name. The name ${component.name} has already been used.`);\n    }\n\n    // if unique then add the component to the list\n    this._components.push(component);\n  }\n\n  /**\n   * Bulk registration of components\n   * (Just a helper method)\n   */\n  registerComponents(components: SearchBuilderComponentDefinition[]): void {\n    components.forEach(component => this.registerComponent(component));\n  }\n\n  /**\n   * Get a registered component class\n   */\n  getComponent(name: string): any {\n\n    // find the component\n    const component = this._components.find(cmp => cmp.name === name);\n\n    // if there is no match throw an exception\n    if (!component) {\n      throw new Error(`No search build component with the name ${name} exists`);\n    }\n\n    // ensure config is defined - at least to an empty object\n    component.config = component.config || {};\n\n    return component;\n  }\n\n  /**\n   * Update the internal search query state\n   * note that the query will be immutable\n   */\n  setQuery(query: SearchBuilderQuery): void {\n    this.query = Object.assign({}, query);\n  }\n\n  /**\n   * Return the current query state\n   */\n  getQuery(): SearchBuilderQuery {\n    return this.query;\n  }\n\n  /**\n   * Trigger the observable to indicate the query has been updated\n   */\n  queryHasChanged(): void {\n    this.queryChange.next(this.query);\n  }\n\n  /**\n   * Store the validation state of the query\n   */\n  setValid(id: number, valid: boolean): void {\n\n    // store the state for this specific component\n    this._validation[id] = valid;\n\n    // evaluate the entire validation state\n    this.validationChange.next(!Object.keys(this._validation).some(key => !this._validation[key]));\n  }\n\n  /**\n   * Generate a unique id for each component\n   */\n  generateComponentId(): number {\n    return this._componentId++;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { SearchBuilderGroupQuery } from '../interfaces/group-query.interface';\nimport { SearchBuilderService } from '../search-builder.service';\n\n@Injectable()\nexport class SearchBuilderGroupService {\n\n  private _id: string;\n\n  constructor(private _searchBuilderService: SearchBuilderService) { }\n\n  /**\n   * Initialise the group by defining an id\n   */\n  init(id: string): void {\n    // store the name of the group\n    this._id = id;\n\n    // create the entry in the query object if it doesn't exist\n    if (!this._searchBuilderService.query[this._id]) {\n\n      // create the section\n      this._searchBuilderService.query[this._id] = [];\n\n      // emit the changes after the initial setup\n      setTimeout(() => this._searchBuilderService.queryHasChanged());\n    }\n  }\n\n  /**\n   * Remove a field from the search builder query\n   */\n  remove(field: SearchBuilderGroupQuery): void {\n    // get the query for this group\n    const query = this.getQuery();\n\n    // remove the field from the array\n    query.splice(query.indexOf(field), 1);\n  }\n\n  /**\n   * Get the query for this specific search group\n   */\n  getQuery(): SearchBuilderGroupQuery[] {\n    return this._searchBuilderService.query[this._id] ? this._searchBuilderService.query[this._id] : [];\n  }\n}\n","import { Component, OnInit, Input, Output, EventEmitter, TemplateRef } from '@angular/core';\nimport { SearchBuilderGroupService } from './search-builder-group.service';\nimport { SearchBuilderService } from '../search-builder.service';\nimport { SearchBuilderGroupQuery } from '../interfaces/group-query.interface';\n\n@Component({\n  selector: 'ux-search-builder-group',\n  template: `<h4 class=\"search-group-title\">{{ header }}</h4>\n\n<main class=\"search-group-content\">\n\n  <section class=\"search-group-operator search-group-operator-{{ operator }}\" [class.hidden-operator]=\"searchBuilderGroupService.getQuery().length < 2\">{{ operator }}</section>\n\n  <section class=\"search-group-items\">\n\n    <div class=\"search-group-item-container\" *ngFor=\"let field of searchBuilderGroupService.getQuery()\">\n\n      <div class=\"search-group-item\">\n        <ng-container *uxSearchBuilderOutlet=\"field.type; context: field\"></ng-container>\n      </div>\n\n      <div class=\"search-group-item-remove\" (click)=\"removeField(field)\">\n        <span class=\"hpe-icon hpe-close\"></span>\n      </div>\n    </div>\n\n    <!-- Placeholder Item -->\n    <ng-container *ngIf=\"showPlaceholder\">\n\n      <!-- The Default Placeholder -->\n      <div class=\"search-group-item-container placeholder-item\" *ngIf=\"!placeholder\">\n        \n        <div class=\"search-group-item\">\n          <label class=\"form-label\">New field</label>\n          <div class=\"form-control\"></div>\n        </div>\n  \n      </div>\n\n      <!-- Allow a custom placeholder -->\n    <ng-container *ngTemplateOutlet=\"placeholder\"></ng-container>\n\n    </ng-container>\n\n  </section>\n\n  <section class=\"search-builder-group-add-field\" (click)=\"add.emit($event)\">\n\n    <button type=\"button\" class=\"btn btn-icon btn-circular button-accent\" aria-label=\"Add Field\">\n      <span class=\"hpe-icon hpe-add\" aria-hidden=\"true\"></span>\n    </button>\n\n    <span class=\"search-builder-group-add-field-label\">{{ addText }}</span>\n\n  </section>\n\n</main>\n\n<hr class=\"search-builder-group-divider\">\n`,\n  providers: [SearchBuilderGroupService]\n})\nexport class SearchBuilderGroupComponent implements OnInit {\n\n  @Input() id: string;\n  @Input() header: string;\n  @Input() operator: SearchBuilderGroupOperator = 'and';\n  @Input() addText: string = 'Add a field';\n  @Input() placeholder: TemplateRef<any>;\n  @Input() showPlaceholder: boolean = false;\n\n  @Output() add: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n  @Output() remove: EventEmitter<SearchBuilderGroupQuery> = new EventEmitter<SearchBuilderGroupQuery>();\n\n  constructor(public searchBuilderGroupService: SearchBuilderGroupService, private _searchBuilderService: SearchBuilderService) { }\n\n  ngOnInit(): void {\n\n    // ensure we have a name otherwise throw an error\n    if (!this.id) {\n      throw new Error('Search builder group must have a name attribute.');\n    }\n\n    // otherwise register the group\n    this.searchBuilderGroupService.init(this.id);\n  }\n\n  removeField(field: SearchBuilderGroupQuery): void {\n    this.searchBuilderGroupService.remove(field);\n    this.remove.emit(field);\n  }\n}\n\nexport type SearchBuilderGroupOperator = 'and' | 'or' | 'not';\n","import { ComponentFactoryResolver, ComponentRef, Directive, Input, OnInit, ViewContainerRef } from '@angular/core';\nimport { SearchBuilderService } from '../search-builder.service';\n\n@Directive({\n    selector: '[uxSearchBuilderOutlet]'\n})\nexport class SearchBuilderOutletDirective implements OnInit {\n\n    @Input() uxSearchBuilderOutlet: string;\n    @Input() uxSearchBuilderOutletContext: any;\n\n    private _componentRef: ComponentRef<any>;\n\n    constructor(\n        private _viewContainerRef: ViewContainerRef,\n        private _componentFactoryResolver: ComponentFactoryResolver,\n        private _searchBuilderService: SearchBuilderService\n    ) { }\n\n    ngOnInit(): void {\n\n        // get the class from the type\n        const componentDefinition = this._searchBuilderService.getComponent(this.uxSearchBuilderOutlet);\n\n        // create the component factory\n        const componentFactory = this._componentFactoryResolver.resolveComponentFactory(componentDefinition.component);\n\n        // create the component instance\n        this._componentRef = this._viewContainerRef.createComponent(componentFactory);\n\n        // combine the predefined config with any dynmaic config\n        const config = Object.assign({}, componentDefinition.config, this.uxSearchBuilderOutletContext.config || {});\n\n        // set the context and config property on the component instance\n        this._componentRef.instance.context = this.uxSearchBuilderOutletContext;\n        this._componentRef.instance.config = config;\n    }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { SearchBuilderComponentContext } from '../interfaces/component-context.interface';\nimport { SearchBuilderGroupService } from '../search-builder-group/search-builder-group.service';\nimport { SearchBuilderService } from '../search-builder.service';\n\n@Component({\n    selector: 'ux-base-search',\n    template: ''\n})\nexport class BaseSearchComponent implements OnDestroy {\n\n    type: string;\n    config: any;\n    context: SearchBuilderComponentContext;\n\n    private _id: number = this._searchBuilderService.generateComponentId();\n    private _valid: boolean = true;\n\n    /**\n     * Get the current value of the component\n     */\n    get value() {\n        return this.context.value;\n    }\n\n    /**\n     * Set the current value of the component\n     */\n    set value(value: any) {\n        this.context.value = value;\n        this._searchBuilderService.queryHasChanged();\n\n        // if value has been set perform validation\n        this.validate();\n    }\n\n    get valid(): boolean {\n        return this._valid;\n    }\n\n    set valid(valid: boolean) {\n        this._valid = valid;\n        this._searchBuilderService.setValid(this._id, valid);\n    }\n\n    constructor(\n        private _searchBuilderService: SearchBuilderService,\n        private _searchBuilderGroupService: SearchBuilderGroupService\n    ) { }\n\n    /**\n     * Make sure we clean up after ourselves\n     */\n    ngOnDestroy(): void {\n        this.valid = true;\n    }\n\n    /**\n     * Perform any required validation on the value\n     */\n    validate(): void {\n        // if a custom validation function has been provided then use it\n        this.valid = this.config.validation ? this.config.validation(this, this.value) : true;\n    }\n\n}\n\nexport interface BaseSearchComponentConfig {\n    label?: string;\n    placeholder?: string;\n    validation?: (value: any) => boolean;\n}","import { Component } from '@angular/core';\nimport { BaseSearchComponent, BaseSearchComponentConfig } from '../base-search.component';\n\n@Component({\n  selector: 'ux-search-text',\n  template: `<label class=\"form-label\" *ngIf=\"label\">{{ label }}</label>\n<input [placeholder]=\"placeholder\" [(ngModel)]=\"value\" class=\"form-control\">`\n})\nexport class SearchTextComponent extends BaseSearchComponent {\n\n  type: string = 'text';\n\n  get label(): string {\n    return this.config.label;\n  }\n\n  get placeholder(): string {\n    return this.config.placeholder || 'Enter text';\n  }\n}\n\nexport interface SearchTextConfig extends BaseSearchComponentConfig { }","import { Component, OnInit } from '@angular/core';\nimport { BaseSearchComponent, BaseSearchComponentConfig } from '../base-search.component';\n\n@Component({\n  selector: 'ux-search-date',\n  template: `<label class=\"form-label\" *ngIf=\"label\">{{ label }}</label>\n\n<div class=\"input-group date m-nil\">\n    <span class=\"input-group-addon\" tabindex=\"1\" (click)=\"popover.show()\">\n        <i class=\"hpe-icon hpe-calendar\" aria-hidden=\"true\"></i>\n    </span>\n    <input type=\"text\" #popover=\"ux-popover\" [ngModel]=\"value | date:'dd MMMM yyyy'\" [uxPopover]=\"popoverTemplate\"\n        placement=\"bottom\" popoverClass=\"date-time-picker-popover\" class=\"form-control\" aria-label=\"Selected date\" [placeholder]=\"placeholder\">\n</div>\n\n<ng-template #popoverTemplate>\n    <ux-date-time-picker [(date)]=\"value\" [showTime]=\"false\"></ux-date-time-picker>\n</ng-template>`\n})\nexport class SearchDateComponent extends BaseSearchComponent implements OnInit {\n\n  type: string = 'date';\n\n  get label(): string {\n    return this.config.label;\n  }\n\n  get placeholder(): string {\n    return this.config.placeholder || 'Enter date';\n  }\n\n  ngOnInit(): void {\n\n    // by default set to the current date if not specified\n    if (!this.value) {\n      this.value = new Date();\n    }\n  }\n}\n\nexport interface SearchDateConfig extends BaseSearchComponentConfig { }","import { Component } from '@angular/core';\nimport { BaseSearchComponent } from '../base-search.component';\n\n@Component({\n    selector: 'ux-search-date-range',\n    template: `<label class=\"form-label\" *ngIf=\"label\">{{ label }}</label>\n\n<div class=\"row\">\n    <div class=\"col-sm-12\">\n        <div class=\"form-inline\" [class.has-error]=\"!valid\">\n\n            <div class=\"form-group p-r-md\">\n                <label class=\"form-label m-r-xs\">{{ fromLabel }}</label>\n\n                <div class=\"input-group date m-nil\">\n                    <span class=\"input-group-addon p-r-xs\" tabindex=\"1\" (click)=\"fromPopover.show()\">\n                        <i class=\"hpe-icon hpe-calendar\" aria-hidden=\"true\"></i>\n                    </span>\n                    <input type=\"text\" #fromPopover=\"ux-popover\" [ngModel]=\"from | date:'dd MMMM yyyy'\" [uxPopover]=\"fromPopoverTemplate\" placement=\"bottom\"\n                        popoverClass=\"date-time-picker-popover\" class=\"form-control\" aria-label=\"Selected date\" [placeholder]=\"fromPlaceholder\">\n                </div>\n            </div>\n\n            <div class=\"form-group p-r-xs\">\n                <label class=\"form-label m-r-xs\">{{ toLabel }}</label>\n\n                <div class=\"input-group date m-nil\">\n                    <span class=\"input-group-addon\" tabindex=\"1\" (click)=\"toPopover.show()\">\n                        <i class=\"hpe-icon hpe-calendar\" aria-hidden=\"true\"></i>\n                    </span>\n                    <input type=\"text\" #toPopover=\"ux-popover\" [ngModel]=\"to | date:'dd MMMM yyyy'\" [uxPopover]=\"toPopoverTemplate\" placement=\"bottom\"\n                        popoverClass=\"date-time-picker-popover\" class=\"form-control\" aria-label=\"Selected date\" [placeholder]=\"toPlaceholder\">\n                </div>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n<ng-template #fromPopoverTemplate>\n    <ux-date-time-picker [(date)]=\"from\" [showTime]=\"false\"></ux-date-time-picker>\n</ng-template>\n\n<ng-template #toPopoverTemplate>\n    <ux-date-time-picker [(date)]=\"to\" [showTime]=\"false\"></ux-date-time-picker>\n</ng-template>`\n})\nexport class SearchDateRangeComponent extends BaseSearchComponent {\n\n    type: string = 'date-range';\n\n    get label(): string {\n        return this.config.label;\n    }\n\n    get from() {\n\n        // if value does not exist the set it\n        if (!this.value || !this.value.from) {\n            this.from = new Date();\n        }\n\n        // ensure that the from value is a date object\n        if (this.value.from instanceof Date === false) {\n            this.value.from = new Date(this.value.from);\n        }\n\n        return this.value.from;\n    }\n\n    set from(fromValue: any) {\n\n        // create new object based on the current value\n        const value = Object.assign({}, this.value);\n\n        // ensure that the from value is a date\n        if (fromValue instanceof Date === false) {\n            fromValue = new Date(fromValue);\n        }\n\n        // set the latest value\n        value.from = fromValue;\n\n        // update the value object while ensuring immutability\n        this.value = value;\n    }\n\n    get to() {\n\n        // if value does not exist the set it\n        if (!this.value || !this.value.to) {\n            this.to = new Date();\n        }\n\n        // ensure that the to value is a date object\n        if (this.value.to instanceof Date === false) {\n            this.value.to = new Date(this.value.to);\n        }\n\n        return this.value.to;\n    }\n\n    set to(toValue: any) {\n\n        // create new object based on the current value\n        const value = Object.assign({}, this.value);\n\n        // ensure that the to value is a date\n        if (toValue instanceof Date === false) {\n            toValue = new Date(toValue);\n        }\n\n        // set the latest value\n        value.to = toValue;\n\n        // update the value object while ensuring immutability\n        this.value = value;\n    }\n\n    get fromLabel(): string {\n        return this.config.fromLabel || 'From';\n    }\n\n    get toLabel(): string {\n        return this.config.toLabel || 'To';\n    }\n\n    get fromPlaceholder(): string {\n        return this.config.fromPlaceholder;\n    }\n\n    get toPlaceholder(): string {\n        return this.config.toPlaceholder;\n    }\n\n    /**\n     * Override the default validation\n     */\n    validate(): void {\n\n        // check if there is a config validation function\n        if (this.config.validation) {\n            return super.validate();\n        }\n\n        // create copies of the dates so we can modify time value (to ignore it)\n        const from = new Date(this.value.from);\n        const to = new Date(this.value.to);\n\n        // set the time to the same so we dont compare it\n        from.setHours(0, 0, 0, 0);\n        to.setHours(0, 0, 0, 0);\n\n        // valid if the from date is less than or equal to the to date\n        this.valid = from <= to;\n    }\n}\n\nexport interface SearchDateRangeConfig {\n    label?: string;\n    fromLabel?: string;\n    toLabel?: string;\n    fromPlaceholder?: string;\n    toPlaceholder?: string;\n    validation: (value: any) => boolean;\n}","import { Component } from '@angular/core';\nimport { BaseSearchComponent, BaseSearchComponentConfig } from '../base-search.component';\nimport { InfiniteScrollLoadFunction } from '../../../../index';\n\n@Component({\n  selector: 'ux-search-select',\n  template: `<label class=\"form-label\" *ngIf=\"label\">{{ label }}</label>\n\n<ux-select [(value)]=\"value\" \n           [options]=\"options\" \n           [multiple]=\"multiple\" \n           [placeholder]=\"placeholder\" \n           [dropDirection]=\"dropDirection\"\n           [pageSize]=\"pageSize\"\n           [allowNull]=\"allowNull\"\n           [disabled]=\"disabled\"\n           [maxHeight]=\"maxHeight\"\n           [key]=\"config.key\"\n           [display]=\"config.display\"\n           [loadingTemplate]=\"config.loadingTemplate\"\n           [optionTemplate]=\"config.optionTemplate\"\n           [noOptionsTemplate]=\"config.noOptionsTemplate\">\n</ux-select>`\n})\nexport class SearchSelectComponent extends BaseSearchComponent {\n\n  type: string = 'select';\n\n  /**\n   * Provide defaults for undefined properties\n   */\n  get label(): string {\n    return this.config.label;\n  }\n\n  get options() {\n    return this.config.options || [];\n  }\n\n  get multiple(): boolean {\n    return this.config.multiple || false;\n  }\n\n  get placeholder(): string {\n    return this.config.placeholder || 'Select item';\n  }\n\n  get dropDirection(): string {\n    return this.config.dropDirection || 'down';\n  }\n\n  get allowNull(): boolean {\n    return this.config.allowNull || false;\n  }\n\n  get disabled(): boolean {\n    return this.config.disabled || false;\n  }\n\n  get maxHeight(): string {\n    return this.config.maxHeight || '250px';\n  }\n\n  get pageSize(): number {\n    return this.config.pageSize || 20;\n  }\n}\n\nexport interface SearchSelectConfig extends BaseSearchComponentConfig {\n  options?: any[] | InfiniteScrollLoadFunction;\n  multiple?: boolean;\n  dropDirection?: 'up' | 'down';\n  allowNull?: boolean;\n  disabled?: boolean;\n  maxHeight?: string;\n  pageSize?: number;\n}","import { Component, EventEmitter, Input, OnDestroy, Output } from '@angular/core';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { Subscription } from 'rxjs/Subscription';\nimport { SearchBuilderComponentDefinition } from './interfaces/component-definition.interface';\nimport { SearchBuilderQuery } from './interfaces/query.interface';\nimport { SearchBuilderService } from './search-builder.service';\n\n@Component({\n  selector: 'ux-search-builder',\n  template: `<ng-content></ng-content>`,\n  providers: [SearchBuilderService]\n})\nexport class SearchBuilderComponent implements OnDestroy {\n\n  @Input()\n  set components(components: SearchBuilderComponentDefinition[]) {\n    this._searchBuilderService.registerComponents(components);\n  }\n\n  @Input()\n  set query(value: SearchBuilderQuery) {\n    this._searchBuilderService.setQuery(value);\n  }\n\n  get query() {\n    return this._searchBuilderService.getQuery();\n  }\n\n  @Output() queryChange: EventEmitter<SearchBuilderQuery> = new EventEmitter<SearchBuilderQuery>();\n  @Output() valid: EventEmitter<boolean> = new EventEmitter<boolean>(true);\n\n  private _querySubscription: Subscription;\n  private _validSubscription: Subscription;\n\n  /**\n   * Register the default search builder components\n   */\n  constructor(private _searchBuilderService: SearchBuilderService) {\n\n    // watch for any query changes\n    this._querySubscription = _searchBuilderService.queryChange.subscribe(query => this.queryChange.emit(query));\n\n    // watch for any changes to the validation\n    this._validSubscription = _searchBuilderService.validationChange.pipe(distinctUntilChanged()).subscribe(valid => this.valid.emit(valid));\n  }\n\n  /**\n   * Remove any subscriptions and cleanup\n   */\n  ngOnDestroy(): void {\n    this._querySubscription.unsubscribe();\n    this._validSubscription.unsubscribe();\n  }\n\n}\n","export class TypeaheadOptionEvent {\n    constructor(public option: any) {}\n}","import { TypeaheadComponent } from './index';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class TypeaheadKeyService {\n\n    constructor() { }\n\n    handleKey(event: KeyboardEvent, typeahead: TypeaheadComponent) {\n        if (typeahead) {\n            switch (event.key) {\n                case 'ArrowUp':\n                case 'Up':\n                    if (!typeahead.open) {\n                        typeahead.open = true;\n                    } else {\n                        typeahead.moveHighlight(-1);\n                    }\n                    event.preventDefault();\n                    break;\n                case 'ArrowDown':\n                case 'Down':\n                    if (!typeahead.open) {\n                        typeahead.open = true;\n                    } else {\n                        typeahead.moveHighlight(1);\n                    }\n                    event.preventDefault();\n                    break;\n                case 'Escape':\n                case 'Esc':\n                    typeahead.open = false;\n                    break;\n            }\n        }\n    }\n}","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\n\r\n@Injectable()\r\nexport class TypeaheadService {\r\n\r\n    open$ = new BehaviorSubject<boolean>(false);\r\n\r\n    highlightedElement$ = new BehaviorSubject<HTMLElement>(null);\r\n}","import { AfterViewInit, ChangeDetectorRef, Component, ElementRef, EventEmitter, HostBinding, HostListener, Input, OnChanges, OnDestroy, Output, SimpleChanges, TemplateRef, ViewChild } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { Subscription } from 'rxjs/Subscription';\r\nimport { combineLatest } from 'rxjs/observable/combineLatest';\r\nimport { distinctUntilChanged } from 'rxjs/operators';\r\nimport { InfiniteScrollLoadFunction } from '../../directives/infinite-scroll/index';\r\nimport { TypeaheadOptionEvent } from './typeahead-event';\r\nimport { TypeaheadService } from './typeahead.service';\r\n\r\nlet uniqueId = 0;\r\n\r\n@Component({\r\n    selector: 'ux-typeahead',\r\n    template: `<div class=\"ux-typeahead-options\"\n    [uxInfiniteScroll]=\"loadOptionsCallback\"\n    [collection]=\"visibleOptions$ | async\"\n    (collectionChange)=\"visibleOptions$.next($event)\"\n    [enabled]=\"isInfiniteScroll()\"\n    [filter]=\"filter\"\n    [loadOnScroll]=\"true\"\n    [pageSize]=\"pageSize\"\n    [scrollElement]=\"typeaheadElement\"\n    (loading)=\"loading = true\"\n    (loaded)=\"loading = false\">\n\n    <ol *ngIf=\"(visibleOptions$ | async).length > 0\">\n        <li *ngFor=\"let option of (visibleOptions$ | async); let i = index\"\n            [attr.id]=\"id + '-option-' + i\"\n            [class.disabled]=\"isDisabled(option)\"\n            [class.highlighted]=\"(highlighted$ | async).key === option.key\"\n            [attr.aria-selected]=\"multiselectable ? isDisabled(option) : null\"\n            [uxTypeaheadHighlight]=\"(highlighted$ | async).key === option.key\"\n            [uxScrollIntoViewIf]=\"(highlighted$ | async).key === option.key\"\n            [scrollParent]=\"typeaheadElement.nativeElement\"\n            (mousedown)=\"optionMousedownHandler($event)\"\n            (click)=\"optionClickHandler($event, option)\"\n            (mouseover)=\"highlight(option)\">\n\n            <ng-container [ngTemplateOutlet]=\"optionTemplate\"\n                [ngTemplateOutletContext]=\"{option: option.value, api: optionApi}\">\n            </ng-container>\n\n        </li>\n    </ol>\n\n    <div *uxInfiniteScrollLoading>\n        <ng-container [ngTemplateOutlet]=\"loadingTemplate\">\n        </ng-container>\n    </div>\n\n</div>\n<div *ngIf=\"(visibleOptions$ | async).length === 0 && !loading\">\n    <ng-container [ngTemplateOutlet]=\"noOptionsTemplate\">\n    </ng-container>\n</div>\n\n<ng-template #defaultLoadingTemplate>\n    <div class=\"ux-typeahead-loading\">\n        <div class=\"spinner spinner-accent spinner-bounce-middle\"></div>\n        <div>Loading...</div>\n    </div>\n</ng-template>\n\n<ng-template #defaultOptionTemplate let-option=\"option\" let-api=\"api\">\n    <span class=\"ux-typeahead-option\" [innerHtml]=\"api.getDisplayHtml(option)\"></span>\n</ng-template>\n\n<ng-template #defaultNoOptionsTemplate>\n    <span class=\"ux-typeahead-no-options\">No results</span>\n</ng-template>`,\r\n    providers: [TypeaheadService],\r\n    host: {\r\n        'role': 'listbox',\r\n        '[class.open]': 'open',\r\n        '[class.drop-up]': 'dropDirection === \"up\"',\r\n        '[style.maxHeight]': 'maxHeight'\r\n    }\r\n})\r\nexport class TypeaheadComponent implements AfterViewInit, OnChanges, OnDestroy {\r\n\r\n    @Input() @HostBinding('attr.id') id: string = `ux-typeahead-${++uniqueId}`;\r\n\r\n    @Input() options: any[] | InfiniteScrollLoadFunction;\r\n    @Input() filter: string;\r\n\r\n    @Input('open')\r\n    get open() {\r\n        return this._service.open$.getValue();\r\n    }\r\n    set open(value: boolean) {\r\n        this._service.open$.next(value);\r\n    }\r\n\r\n    @Output() openChange = new EventEmitter<boolean>();\r\n\r\n    @Input() display: (option: any) => string | string;\r\n    @Input() key: (option: any) => string | string;\r\n    @Input() disabledOptions: any[];\r\n    @Input() dropDirection: 'up' | 'down' = 'down';\r\n    @Input() maxHeight: string = '250px';\r\n    @Input() @HostBinding('attr.aria-multiselectable') multiselectable: boolean = false;\r\n    @Input() openOnFilterChange: boolean = true;\r\n    @Input() pageSize: number = 20;\r\n    @Input() selectFirst: boolean = true;\r\n\r\n    @Input() loadingTemplate: TemplateRef<any>;\r\n    @Input() optionTemplate: TemplateRef<any>;\r\n    @Input() noOptionsTemplate: TemplateRef<any>;\r\n\r\n    @Output() optionSelected = new EventEmitter<TypeaheadOptionEvent>();\r\n\r\n    @Output() highlightedChange = new EventEmitter<any>();\r\n    @Output() highlightedElementChange = new EventEmitter<HTMLElement>();\r\n\r\n    @ViewChild('defaultLoadingTemplate') private _defaultLoadingTemplate: TemplateRef<any>;\r\n    @ViewChild('defaultOptionTemplate') private _defaultOptionTemplate: TemplateRef<any>;\r\n    @ViewChild('defaultNoOptionsTemplate') private _defaultNoOptionsTemplate: TemplateRef<any>;\r\n\r\n    loadOptionsCallback: InfiniteScrollLoadFunction;\r\n    visibleOptions$ = new BehaviorSubject<TypeaheadVisibleOption[]>([]);\r\n    loading = false;\r\n    clicking = false;\r\n    highlighted$ = new BehaviorSubject<TypeaheadVisibleOption>(null);\r\n\r\n    get highlighted(): any {\r\n        const value = this.highlighted$.getValue();\r\n        return value ? value.value : null;\r\n    }\r\n\r\n    private _open: boolean = false;\r\n    private _subscription = new Subscription();\r\n\r\n    optionApi: TypeaheadOptionApi = {\r\n        getKey: this.getKey.bind(this),\r\n        getDisplay: this.getDisplay.bind(this),\r\n        getDisplayHtml: this.getDisplayHtml.bind(this)\r\n    };\r\n\r\n    constructor(\r\n        public typeaheadElement: ElementRef,\r\n        private _cdRef: ChangeDetectorRef,\r\n        private _service: TypeaheadService\r\n    ) {\r\n\r\n        this.loadOptionsCallback = (pageNum: number, pageSize: number, filter: any) => {\r\n            if (typeof this.options === 'function') {\r\n                return this.options(pageNum, pageSize, filter);\r\n            }\r\n            return null;\r\n        };\r\n\r\n        this._subscription.add(\r\n            this._service.open$.pipe(distinctUntilChanged()).subscribe((next) => {\r\n                this.openChange.emit(next);\r\n\r\n                if (next) {\r\n                    this.initOptions();\r\n                }\r\n            })\r\n        );\r\n\r\n        this._subscription.add(\r\n            this.highlighted$.subscribe((next) => {\r\n                this.highlightedChange.emit(next ? next.value : null);\r\n            })\r\n        );\r\n\r\n        this._subscription.add(\r\n            combineLatest(this._service.open$, this._service.highlightedElement$, this.visibleOptions$)\r\n                .subscribe(([open, highlightedElement, visibleOptions]) => {\r\n                    this.highlightedElementChange.emit(open && visibleOptions.length > 0 ? highlightedElement : null);\r\n                })\r\n        );\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        // Attach default loading template\r\n        if (!this.loadingTemplate) {\r\n            this.loadingTemplate = this._defaultLoadingTemplate;\r\n        }\r\n\r\n        // Attach default option template\r\n        if (!this.optionTemplate) {\r\n            this.optionTemplate = this._defaultOptionTemplate;\r\n        }\r\n\r\n        // Attach default \"no results\" template\r\n        if (!this.noOptionsTemplate) {\r\n            this.noOptionsTemplate = this._defaultNoOptionsTemplate;\r\n        }\r\n\r\n        this._cdRef.detectChanges();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        // Open the dropdown if the filter value updates\r\n        if (changes.filter) {\r\n            if (this.openOnFilterChange && changes.filter.currentValue && changes.filter.currentValue.length > 0) {\r\n                this.open = true;\r\n            }\r\n        }\r\n\r\n        // Re-filter visibleOptions\r\n        this.updateOptions();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._subscription.unsubscribe();\r\n    }\r\n\r\n    @HostListener('mousedown')\r\n    mousedownHandler() {\r\n        this.clicking = true;\r\n    }\r\n\r\n    @HostListener('mouseup')\r\n    mouseupHandler() {\r\n        this.clicking = false;\r\n    }\r\n\r\n    optionMousedownHandler(event: MouseEvent) {\r\n        // Workaround to prevent focus changing when an option is clicked\r\n        event.preventDefault();\r\n    }\r\n\r\n    optionClickHandler(event: MouseEvent, option: TypeaheadVisibleOption) {\r\n        this.select(option);\r\n    }\r\n\r\n    /**\r\n     * Returns the unique key value of the given option.\r\n     */\r\n    getKey(option: any): string {\r\n        if (typeof this.key === 'function') {\r\n            return this.key(option);\r\n        }\r\n        if (typeof this.key === 'string' && option && option.hasOwnProperty(this.key)) {\r\n            return option[<string>this.key];\r\n        }\r\n        return this.getDisplay(option);\r\n    }\r\n\r\n    /**\r\n     * Returns the display value of the given option.\r\n     */\r\n    getDisplay(option: any): string {\r\n        if (typeof this.display === 'function') {\r\n            return this.display(option);\r\n        }\r\n        if (typeof this.display === 'string' && option && option.hasOwnProperty(this.display)) {\r\n            return option[<string>this.display];\r\n        }\r\n        return option;\r\n    }\r\n\r\n    /**\r\n     * Returns the display value of the given option with HTML markup added to highlight the part which matches the current filter value.\r\n     * @param option\r\n     */\r\n    getDisplayHtml(option: any) {\r\n        let displayText;\r\n        if (typeof option === 'string') {\r\n            displayText = this.getDisplay(option).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\r\n        } else {\r\n            displayText = this.getDisplay(option.name).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\r\n        }\r\n        let displayHtml = displayText;\r\n        if (this.filter) {\r\n            const length = this.filter.length;\r\n            const matchIndex = displayText.toLowerCase().indexOf(this.filter.toLowerCase());\r\n            if (matchIndex >= 0) {\r\n                var highlight = `<span class=\"ux-filter-match\">${displayText.substr(matchIndex, length)}</span>`;\r\n                displayHtml = displayText.substr(0, matchIndex) + highlight + displayText.substr(matchIndex + length);\r\n            }\r\n        }\r\n        return displayHtml;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the infinite scroll component should load\r\n     */\r\n    isInfiniteScroll() {\r\n        return typeof this.options === 'function';\r\n    }\r\n\r\n    /**\r\n     * Selects the given option, emitting the optionSelected event and closing the dropdown.\r\n     */\r\n    select(option: TypeaheadVisibleOption) {\r\n        if (!this.isDisabled(option)) {\r\n            this.optionSelected.emit(new TypeaheadOptionEvent(option.value));\r\n            this.highlighted$.next(null);\r\n            this.open = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns true if the given option is part of the disabledOptions array.\r\n     */\r\n    isDisabled(option: TypeaheadVisibleOption): boolean {\r\n        if (this.disabledOptions) {\r\n            const result = this.disabledOptions.find((selectedOption) => {\r\n                return this.getKey(selectedOption) === option.key;\r\n            });\r\n            return result !== undefined;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Set the given option as the current highlighted option, available in the highlightedOption parameter.\r\n     */\r\n    highlight(option: TypeaheadVisibleOption) {\r\n        if (!this.isDisabled(option)) {\r\n            this.highlighted$.next(option);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Increment or decrement the highlighted option in the list. Disabled options are skipped.\r\n     * @param d Value to be added to the index of the highlighted option, i.e. -1 to move backwards, +1 to move forwards.\r\n     */\r\n    moveHighlight(d: number): any {\r\n        const visibleOptions = this.visibleOptions$.getValue();\r\n        const highlightIndex = this.indexOfVisibleOption(this.highlighted);\r\n        let newIndex = highlightIndex;\r\n        let disabled = true;\r\n        let inBounds = true;\r\n        do {\r\n            newIndex = newIndex + d;\r\n            inBounds = (newIndex >= 0 && newIndex < visibleOptions.length);\r\n            disabled = inBounds && this.isDisabled(visibleOptions[newIndex]);\r\n        }\r\n        while (inBounds && disabled);\r\n\r\n        if (!disabled && inBounds) {\r\n            this.highlighted$.next(visibleOptions[newIndex]);\r\n        }\r\n\r\n        return this.highlighted;\r\n    }\r\n\r\n    /**\r\n     * Set up the options before the dropdown is displayed.\r\n     */\r\n    initOptions() {\r\n        // Clear previous highlight\r\n        this.highlighted$.next(null);\r\n        if (this.selectFirst) {\r\n            // This will highlight the first non-disabled option.\r\n            this.moveHighlight(1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the visibleOptions array with the current filter.\r\n     */\r\n    updateOptions() {\r\n        if (typeof this.options === 'object') {\r\n            const normalisedInput = (this.filter || '').toLowerCase();\r\n            const visibleOptions = this.options\r\n                .filter((option) => {\r\n                    return this.getDisplay(option).toLowerCase().indexOf(normalisedInput) >= 0;\r\n                })\r\n                .map((value) => {\r\n                    return {\r\n                        value: value,\r\n                        key: this.getKey(value)\r\n                    };\r\n                });\r\n            this.visibleOptions$.next(visibleOptions);\r\n        }\r\n\r\n        this.initOptions();\r\n    }\r\n\r\n    /**\r\n     * Return the index of the given option in the visibleOptions array. Returns -1 if the option is not currently visible.\r\n     */\r\n    private indexOfVisibleOption(option: any): number {\r\n        if (option) {\r\n            const optionKey = this.getKey(option);\r\n            return this.visibleOptions$.getValue().findIndex((el) => {\r\n                return el.key === optionKey;\r\n            });\r\n        }\r\n\r\n        return -1;\r\n    }\r\n}\r\n\r\n/**\r\n * The API available to option templates.\r\n */\r\nexport interface TypeaheadOptionApi {\r\n\r\n    /**\r\n     * Returns the unique key value of the given option.\r\n     */\r\n    getKey(option: any): string;\r\n\r\n    /**\r\n     * Returns the display value of the given option.\r\n     */\r\n    getDisplay(option: any): string;\r\n\r\n    /**\r\n     * Returns the display value of the given option with HTML markup added to highlight the part which matches the current filter value. Override the ux-filter-match class in CSS to modify the default appearance.\r\n     */\r\n    getDisplayHtml(option: any): string;\r\n}\r\n\r\nexport interface TypeaheadVisibleOption {\r\n    value: any;\r\n    key: string;\r\n}","import { Directive, ElementRef, Input, Output, Renderer2, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\n\n@Directive({\n    selector: '[uxInfiniteScrollLoadButton]'\n})\nexport class InfiniteScrollLoadButtonDirective {\n\n    @Input('uxInfiniteScrollLoadButton')\n    get visible() {\n        return this._visible;\n    }\n    set visible(value: boolean) {\n        if (value !== this._visible) {\n            if (value) {\n                this._viewContainer.createEmbeddedView(this._template);\n\n                // Template content follows the elementRef, which is a comment.\n                const clickTarget = this.getNextElementSibling(this._template.elementRef.nativeElement);\n                this._renderer.listen(clickTarget, 'click', this.onClick.bind(this));\n            } else {\n                this._viewContainer.clear();\n            }\n        }\n\n        this._visible = value;\n    }\n\n    @Output() load: Observable<Event>;\n\n    private _visible: boolean = false;\n    private _load = new Subject();\n\n    constructor(\n        private _element: ElementRef,\n        private _template: TemplateRef<any>,\n        private _viewContainer: ViewContainerRef,\n        private _renderer: Renderer2) {\n\n        this.load = this._load.asObservable() as Observable<Event>;\n    }\n\n    private onClick(event: MouseEvent) {\n        this._load.next(event);\n    }\n\n    private getNextElementSibling(element: any): Element {\n        var next = element;\n        while (next = next.nextSibling) {\n            if (next.nodeType === 1) {\n                return next;\n            }\n        }\n        return null;\n    }\n}\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\n\n@Directive({\n    selector: '[uxInfiniteScrollLoading]'\n})\nexport class InfiniteScrollLoadingDirective {\n\n    @Input('uxInfiniteScrollLoading')\n    get visible() {\n        return this._visible;\n    }\n    set visible(value: boolean) {\n        if (value !== this._visible) {\n            if (value) {\n                this._viewContainer.createEmbeddedView(this._templateRef);\n            } else {\n                this._viewContainer.clear();\n            }\n        }\n        \n        this._visible = value;\n    }\n\n    private _visible: boolean = false;\n\n    constructor(\n        private _templateRef: TemplateRef<any>,\n        private _viewContainer: ViewContainerRef) { }\n}\n","\nimport { AfterContentInit, ContentChildren, Directive, ElementRef, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, QueryList, SimpleChanges } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { from } from 'rxjs/observable/from';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { of } from 'rxjs/observable/of';\nimport { auditTime, combineLatest, filter as filterOperator, first, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { InfiniteScrollLoadButtonDirective } from './infinite-scroll-load-button.directive';\nimport { InfiniteScrollLoadingDirective } from './infinite-scroll-loading.directive';\n\n@Directive({\n    selector: '[uxInfiniteScroll]',\n    exportAs: 'uxInfiniteScroll'\n})\nexport class InfiniteScrollDirective implements OnInit, AfterContentInit, OnChanges, OnDestroy {\n\n    @Input('uxInfiniteScroll') load: InfiniteScrollLoadFunction;\n\n    @Input('collection') _collection: any[] = [];\n    get collection() {\n        return this._collection;\n    }\n    set collection(value: any[]) {\n        this.collectionChange.emit(value);\n        this._collection = value;\n    }\n\n\n    @Input() set scrollElement(element: ElementRef | HTMLElement) {\n        this._scrollElement = element instanceof ElementRef ? element : new ElementRef(element);\n    }\n\n    @Input() enabled: boolean = true;\n    @Input() filter: any;\n    @Input() loadOnInit: boolean = true;\n    @Input() loadOnScroll: boolean = true;\n    @Input() pageSize: number = 20;\n\n    @Output() collectionChange = new EventEmitter<any[]>();\n\n    @Output('loading')\n    loadingEvent = new EventEmitter<InfiniteScrollLoadingEvent>();\n\n    @Output('loaded')\n    loadedEvent = new EventEmitter<InfiniteScrollLoadedEvent>();\n\n    @Output('loadError')\n    loadErrorEvent = new EventEmitter<InfiniteScrollLoadErrorEvent>();\n\n    @ContentChildren(InfiniteScrollLoadButtonDirective)\n    private _loadButtonQuery: QueryList<InfiniteScrollLoadButtonDirective>;\n\n    @ContentChildren(InfiniteScrollLoadingDirective)\n    private _loadingIndicatorQuery: QueryList<InfiniteScrollLoadingDirective>;\n\n    private _pages: any[][];\n    private _nextPageNum = 0;\n    private _domObserver: MutationObserver;\n    private _scrollEventSub: Subscription;\n    private _updateRequests = new Subject<InfiniteScrollRequest>();\n\n    private _isLoading = new BehaviorSubject<boolean>(false);\n    private _isExhausted = new BehaviorSubject<boolean>(false);\n    private _loadButtonEnabled = new BehaviorSubject<boolean>(false);\n    private _canLoadManually: Observable<boolean>;\n\n    private _scrollElement: ElementRef;\n    private _subscriptions: Subscription[] = [];\n    private _loadButtonSubscriptions: Subscription[] = [];\n    private _onDestroy = new Subject<void>();\n\n    constructor(private _element: ElementRef) {\n        this._canLoadManually = this._isLoading.pipe(combineLatest(\n            this._isExhausted,\n            this._loadButtonEnabled,\n            (isLoading, isExhausted, loadButtonEnabled) => {\n                return !isLoading && !isExhausted && loadButtonEnabled;\n            }\n        ));\n    }\n\n    ngOnInit() {\n        if (!this._scrollElement) {\n            this._scrollElement = this._element;\n        }\n\n        this._loadButtonEnabled.next(!this.loadOnScroll);\n    }\n\n    ngAfterContentInit() {\n\n        // There are two kinds of update requests: check and load.\n        // Check requests are throttled and will only cause an update if more data is required\n        // to fill the scrolling view, and it isn't already loading some.\n        // Load requests are not throttled and always request a page of data.\n        this._updateRequests.pipe(filterOperator(request => request.check), auditTime(200), takeUntil(this._onDestroy)).subscribe(this.doRequest.bind(this));\n        this._updateRequests.pipe(filterOperator(request => !request.check), takeUntil(this._onDestroy)).subscribe(this.doRequest.bind(this));\n\n        if (this.enabled) {\n            // Subscribe to scroll events and DOM changes.\n            this.attachEventHandlers();\n        }\n\n        // Connect the Load More button visible state.\n        this._canLoadManually.pipe(takeUntil(this._onDestroy)).subscribe(canLoad => {\n            this._loadButtonQuery.forEach(loadButton => {\n                loadButton.visible = canLoad;\n            });\n        });\n\n        // Connect the loading indicator visible state.\n        this._isLoading.pipe(takeUntil(this._onDestroy)).subscribe(isLoading => {\n            this._loadingIndicatorQuery.forEach(loading => {\n                loading.visible = isLoading;\n            });\n        });\n\n        // Link the Load More button click event to trigger an update.\n        this.attachLoadButtonEvents();\n        this._loadButtonQuery.changes.pipe(takeUntil(this._onDestroy)).subscribe(() => {\n            this.attachLoadButtonEvents();\n        });\n\n        // Initial update.\n        if (this.loadOnInit) {\n            this.loadNextPage();\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        let check = true;\n\n        if (changes.enabled && changes.enabled.currentValue !== changes.enabled.previousValue) {\n            if (changes.enabled.currentValue) {\n                this.attachEventHandlers();\n                this.reset();\n                check = false;\n            } else {\n                this.detachEventHandlers();\n            }\n        }\n\n        if (this.enabled) {\n            if (changes.filter && changes.filter.currentValue !== changes.filter.previousValue) {\n                this.reset();\n                check = false;\n            }\n\n            if (changes.loadOnScroll) {\n                this._loadButtonEnabled.next(\n                    !changes.loadOnScroll.currentValue\n                );\n            }\n\n            if (changes.pageSize && changes.pageSize.currentValue !== changes.pageSize.previousValue) {\n                this.reset();\n                check = false;\n            }\n\n            this._updateRequests.next({\n                check: check,\n                pageNumber: this._nextPageNum,\n                pageSize: this.pageSize,\n                filter: this.filter\n            });\n        }\n    }\n\n    ngOnDestroy() {\n        this.detachEventHandlers();\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    /**\n     * Request an additional page of data.\n     */\n    loadNextPage() {\n        if (!this.enabled) {\n            return;\n        }\n\n        this._updateRequests.next({\n            check: false,\n            pageNumber: this._nextPageNum,\n            pageSize: this.pageSize,\n            filter: this.filter\n        });\n    }\n\n    /**\n     * Request a check for whether an additional page of data is required. This is throttled.\n     */\n    check() {\n        if (!this.enabled) {\n            return;\n        }\n\n        this._updateRequests.next({\n            check: true,\n            pageNumber: this._nextPageNum,\n            pageSize: this.pageSize,\n            filter: this.filter\n        });\n    }\n\n    /**\n     * Clear the collection. Future requests will load from page 0.\n     */\n    reset() {\n        if (!this.enabled) {\n            return;\n        }\n\n        // Reset the page counter.\n        this._nextPageNum = 0;\n\n        this._pages = [];\n\n        // Clear the collection (without changing the reference).\n        if (this.collection) {\n            this.collection.length = 0;\n        }\n\n        // Reset the exhausted flag, allowing the Load More button to appear.\n        this._isExhausted.next(false);\n\n        // Cancel any pending requests\n        if (this._subscriptions) {\n            this._subscriptions.forEach(request => request.unsubscribe());\n        }\n    }\n\n    /**\n     * Reload the data without clearing the view.\n     */\n    reload() {\n        this._pages.forEach((page, i) => this.reloadPage(i));\n    }\n\n    /**\n     * Reload the data in a specific page without clearing the view.\n     * @param pageNum Page number\n     */\n    reloadPage(pageNum: number) {\n        if (!this.enabled) {\n            return;\n        }\n\n        this._updateRequests.next({\n            check: false,\n            pageNumber: pageNum,\n            pageSize: this.pageSize,\n            filter: this.filter,\n            reload: true\n        });\n    }\n\n    /**\n     * Attach scroll event handler and DOM observer.\n     */\n    private attachEventHandlers() {\n\n        // if the scrollElement is documentElement we must watch for a scroll event on the document\n        const target = this._scrollElement.nativeElement instanceof HTMLHtmlElement ? document : this._scrollElement.nativeElement;\n\n        // Subscribe to the scroll event on the target element.\n        this._scrollEventSub = fromEvent(target, 'scroll').subscribe(this.check.bind(this));\n\n        // Subscribe to child DOM changes. The main effect of this is to check whether even more data is\n        // required after the initial load.\n        this._domObserver = new MutationObserver(this.check.bind(this));\n        this._domObserver.observe(this._scrollElement.nativeElement, {\n            childList: true,\n            subtree: true\n        });\n    }\n\n    /**\n     * Detach scroll event handler and DOM observer.\n     */\n    private detachEventHandlers() {\n        if (this._scrollEventSub) {\n            this._scrollEventSub.unsubscribe();\n            this._scrollEventSub = null;\n        }\n\n        if (this._domObserver) {\n            this._domObserver.disconnect();\n            this._domObserver = null;\n        }\n    }\n\n    /**\n     * Remove any existing event subscriptions for the load button `load` event, then attach subscriptions\n     * for any in the query.\n     */\n    private attachLoadButtonEvents() {\n        this._loadButtonSubscriptions.forEach(s => s.unsubscribe());\n        this._loadButtonSubscriptions = this._loadButtonQuery.map(\n            loadButton => loadButton.load.subscribe(this.loadNextPage.bind(this))\n        );\n    }\n\n    /**\n     * Conditionally loads a page into the collection based on directive state and request parameters.\n     */\n    private doRequest(request: InfiniteScrollRequest) {\n\n        // Load a new page if the scroll position is beyond the threshhold and if the client code did not\n        // cancel.\n        if (this.needsData(request) && this.beginLoading(request)) {\n\n            // Invoke the callback load function, which returns a promose or plain data.\n            const loadResult = this.load(request.pageNumber, request.pageSize, request.filter);\n\n            const observable = Array.isArray(loadResult) ? of(loadResult) : from<any[]>(loadResult);\n\n            const subscription = observable.pipe(first()).subscribe(\n                items => {\n                    // Make sure that the parameters have not changed since the load started;\n                    // otherwise discard the results.\n                    if (request.filter === this.filter && request.pageSize === this.pageSize) {\n                        if (items && items.length) {\n                            this.setPageItems(request.pageNumber, items);\n                        }\n\n                        // Emit the loaded event\n                        this.endLoading(request, items);\n                    }\n                },\n                reason => {\n                    // Emit the loadError event\n                    this.endLoadingWithError(request, reason);\n                },\n                () => {\n                    // remove this request from the list\n                    this._subscriptions = this._subscriptions.filter(s => s !== subscription);\n                }\n            );\n\n            // add the subscription to the list of requests\n            this._subscriptions.push(subscription);\n        }\n    }\n\n    /**\n     * Returns true if the request should be fulfilled.\n     */\n    private needsData(request: InfiniteScrollRequest): boolean {\n        if (!this.enabled) {\n            return false;\n        }\n\n        // Always load for a load request\n        if (!request.check) {\n            return true;\n        }\n\n        // Ignore a check request when the end of data has been detected, or if data is currently loading.\n        if (this._isExhausted.getValue() || this._isLoading.getValue()) {\n            return false;\n        }\n\n        // Load if the remaining scroll area is <= the element height.\n        if (this._scrollElement && this.loadOnScroll) {\n\n            const element = <HTMLElement>this._scrollElement.nativeElement;\n            const remainingScroll =\n                element.scrollHeight -\n                (element.scrollTop + element.clientHeight);\n\n            return remainingScroll <= element.clientHeight;\n        }\n\n        return false;\n    }\n\n    /**\n     * Updates state for the beginning of a load. Returns false if the `loading` event was cancelled.\n     */\n    private beginLoading(request: InfiniteScrollRequest): boolean {\n\n        const event = new InfiniteScrollLoadingEvent(\n            request.pageNumber,\n            request.pageSize,\n            request.filter\n        );\n        this.loadingEvent.emit(event);\n\n        this._isLoading.next(!event.defaultPrevented());\n\n        return !event.defaultPrevented();\n    }\n\n    private setPageItems(pageNum: number, items: any[]) {\n        this._pages[pageNum] = items;\n        this.collection = this._pages.reduce((previous, current) => previous.concat(current), []);\n    }\n\n    /**\n     * Updates state from a successful load. Raises the `loaded` event.\n     */\n    private endLoading(request: InfiniteScrollRequest, data?: any) {\n        this._isLoading.next(false);\n\n        const isExhausted = !!(data && data.length < this.pageSize);\n        this._isExhausted.next(isExhausted);\n\n        this.loadedEvent.emit(\n            new InfiniteScrollLoadedEvent(\n                request.pageNumber,\n                request.pageSize,\n                request.filter,\n                data,\n                isExhausted\n            )\n        );\n\n        if (!request.reload) {\n            this._nextPageNum += 1;\n        }\n    }\n\n    /**\n     * Updates state from a failed load. Raises the `loadError` event.\n     */\n    private endLoadingWithError(request: InfiniteScrollRequest, error: any) {\n        this._isLoading.next(false);\n\n        this.loadErrorEvent.emit(\n            new InfiniteScrollLoadErrorEvent(\n                request.pageNumber,\n                request.pageSize,\n                request.filter,\n                error\n            )\n        );\n    }\n}\n\n/**\n * The internal data associated with a load/check request.\n */\nclass InfiniteScrollRequest {\n    check: boolean;\n    pageNumber: number;\n    pageSize: number;\n    filter: any;\n    reload?: boolean;\n}\n\nexport type InfiniteScrollLoadFunction = (\n    pageNum: number,\n    pageSize: number,\n    filter: any\n) => any | Promise<any>;\n\n/**\n * Event raised before the `loading` function is called.\n */\nexport class InfiniteScrollLoadingEvent {\n    private _defaultPrevented = false;\n\n    constructor(\n        /**\n         * The index of the requested page, starting from 0.\n         */\n        public pageNumber: number,\n        /**\n         * The number of items requested.\n         */\n        public pageSize: number,\n        /**\n         * The filter details as provided via the `filter` binding.\n         */\n        public filter: any\n    ) { }\n\n    /**\n     * Prevents the default behaviour of the `loading` event (loading function will not be called).\n     */\n    preventDefault() {\n        this._defaultPrevented = true;\n    }\n\n    defaultPrevented(): boolean {\n        return this._defaultPrevented;\n    }\n}\n\n/**\n * Event raised when the loading function result has been resolved and added to the collection.\n */\nexport class InfiniteScrollLoadedEvent {\n    constructor(\n        /**\n         * The index of the requested page, starting from 0.\n         */\n        public pageNumber: number,\n        /**\n         * The number of items requested.\n         */\n        public pageSize: number,\n        /**\n         * The filter details as provided via the `filter` binding.\n         */\n        public filter: any,\n        /**\n         * The result of the promise returned from the loading function.\n         */\n        public data: any,\n        /**\n         * True if the data is considered exhausted (number of items returned less than `pageSize`).\n         */\n        public exhausted: boolean\n    ) { }\n}\n\n/**\n * Event raised if the loading function returns a rejected promise.\n */\nexport class InfiniteScrollLoadErrorEvent {\n    constructor(\n        /**\n         * The index of the requested page, starting from 0.\n         */\n        public pageNumber: number,\n        /**\n         * The number of items requested.\n         */\n        public pageSize: number,\n        /**\n         * The filter details as provided via the `filter` binding.\n         */\n        public filter: any,\n        /**\n         * The object provided when rejecting the promise.\n         */\n        public error: any\n    ) { }\n}\n","import { InfiniteScrollLoadButtonDirective } from './infinite-scroll-load-button.directive';\nimport { InfiniteScrollLoadingDirective } from './infinite-scroll-loading.directive';\nimport { InfiniteScrollDirective } from './infinite-scroll.directive';\nimport { NgModule } from '@angular/core';\n\n@NgModule({\n    imports: [],\n    exports: [\n        InfiniteScrollDirective,\n        InfiniteScrollLoadButtonDirective,\n        InfiniteScrollLoadingDirective\n    ],\n    declarations: [\n        InfiniteScrollDirective,\n        InfiniteScrollLoadButtonDirective,\n        InfiniteScrollLoadingDirective\n    ],\n    providers: [],\n})\nexport class InfiniteScrollModule { }\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class ScrollIntoViewService {\n\n    scrollIntoView(elem: HTMLElement, scrollParent: HTMLElement) {\n        const offsetTop = (elem.getBoundingClientRect().top + scrollParent.scrollTop) - scrollParent.getBoundingClientRect().top;\n        if (offsetTop < scrollParent.scrollTop) {\n            scrollParent.scrollTop = offsetTop;\n        } else {\n            const offsetBottom = offsetTop + elem.offsetHeight;\n            if (offsetBottom > (scrollParent.scrollTop + scrollParent.clientHeight)) {\n                scrollParent.scrollTop = offsetBottom - scrollParent.clientHeight;\n            }\n        }\n    }\n}","import { Directive, ElementRef, Input, OnChanges } from '@angular/core';\nimport { ScrollIntoViewService } from './scroll-into-view.service';\n\n@Directive({\n    selector: '[uxScrollIntoViewIf]',\n    providers: [ScrollIntoViewService]\n })\nexport class ScrollIntoViewIfDirective implements OnChanges {\n\n    @Input('uxScrollIntoViewIf') condition = false;\n    @Input() scrollParent: HTMLElement;\n\n    constructor(private _element: ElementRef, private _scrollIntoViewService: ScrollIntoViewService) {}\n\n    ngOnChanges() {\n        if (this.condition) {\n            setTimeout(() => this._scrollIntoViewService.scrollIntoView(this._element.nativeElement, this.scrollParent));\n        }\n    }\n}","import { AfterViewInit, Directive, ElementRef, Input } from '@angular/core';\n\n@Directive({\n    selector: '[uxScrollIntoView]'\n})\nexport class ScrollIntoViewDirective implements AfterViewInit {\n\n    /** Allow a condition around whether or not this should scroll into view */\n    @Input() uxScrollIntoView: boolean = true;\n\n    /** Allow user to provide the browser supported options */\n    @Input() scrollIntoViewOptions: ScrollIntoViewOptions | boolean = true;\n\n    constructor(private _elementRef: ElementRef) { }\n\n    ngAfterViewInit(): void {\n        if (this.uxScrollIntoView) {\n            this._elementRef.nativeElement.scrollIntoView(this.scrollIntoViewOptions);\n        }\n    }\n}","import { NgModule } from '@angular/core';\nimport { ScrollIntoViewIfDirective } from './scroll-into-view-if.directive';\nimport { ScrollIntoViewDirective } from './scroll-into-view.directive';\n\n\n@NgModule({\n    exports: [ScrollIntoViewIfDirective, ScrollIntoViewDirective],\n    declarations: [ScrollIntoViewIfDirective, ScrollIntoViewDirective]\n})\nexport class ScrollModule { }","import { Directive, ElementRef, Input } from '@angular/core';\r\nimport { TypeaheadService } from './typeahead.service';\r\n\r\n@Directive({\r\n    selector: '[uxTypeaheadHighlight]'\r\n})\r\nexport class TypeaheadHighlightDirective {\r\n\r\n    @Input('uxTypeaheadHighlight')\r\n    set highlight(value: boolean) {\r\n        if (value) {\r\n            this._service.highlightedElement$.next(this._elementRef.nativeElement);\r\n        }\r\n    }\r\n\r\n    constructor(private _service: TypeaheadService, private _elementRef: ElementRef) {}\r\n}\r\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { InfiniteScrollModule } from '../../directives/infinite-scroll/index';\nimport { ScrollModule } from '../../directives/scroll/index';\nimport { TypeaheadHighlightDirective } from './typeahead-highlight.directive';\nimport { TypeaheadKeyService } from './typeahead-key.service';\nimport { TypeaheadComponent } from './typeahead.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        InfiniteScrollModule,\n        ScrollModule\n    ],\n    exports: [TypeaheadComponent],\n    declarations: [TypeaheadComponent, TypeaheadHighlightDirective],\n    providers: [TypeaheadKeyService],\n})\nexport class TypeaheadModule { }\n","import { Component, ElementRef, EventEmitter, HostBinding, Inject, Input, OnChanges, OnDestroy, OnInit, Output, SimpleChanges, StaticProvider, TemplateRef, ViewChild, forwardRef } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { DOCUMENT } from '@angular/platform-browser';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { debounceTime, filter, map } from 'rxjs/operators';\r\nimport { Subscription } from 'rxjs/Subscription';\r\nimport { InfiniteScrollLoadFunction } from '../../directives/infinite-scroll/index';\r\nimport { TypeaheadComponent, TypeaheadKeyService, TypeaheadOptionEvent } from '../typeahead/index';\r\n\r\nlet uniqueId = 0;\r\n\r\nexport const SELECT_VALUE_ACCESSOR: StaticProvider = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => SelectComponent),\r\n    multi: true\r\n};\r\n\r\n@Component({\r\n    selector: 'ux-select',\r\n    template: `<ux-tag-input *ngIf=\"multiple\"\r\n    [id]=\"id + '-input'\"\r\n    [(tags)]=\"value\"\r\n    [(input)]=\"input\"\r\n    [addOnPaste]=\"false\"\r\n    [disabled]=\"disabled\"\r\n    [display]=\"display\"\r\n    [freeInput]=\"false\"\r\n    [placeholder]=\"placeholder\"\r\n    [showTypeaheadOnClick]=\"true\">\r\n\r\n    <ux-typeahead #multipleTypeahead\r\n        [id]=\"id + '-typeahead'\"\r\n        [options]=\"options\"\r\n        [filter]=\"filter$ | async\"\r\n        [(open)]=\"dropdownOpen\"\r\n        [display]=\"display\"\r\n        [key]=\"key\"\r\n        [disabledOptions]=\"value\"\r\n        [dropDirection]=\"dropDirection\"\r\n        [maxHeight]=\"maxHeight\"\r\n        [multiselectable]=\"true\"\r\n        [pageSize]=\"pageSize\"\r\n        [selectFirst]=\"true\"\r\n        [loadingTemplate]=\"loadingTemplate\"\r\n        [optionTemplate]=\"optionTemplate\"\r\n        [noOptionsTemplate]=\"noOptionsTemplate\">\r\n    </ux-typeahead>\r\n\r\n</ux-tag-input>\r\n\r\n<div *ngIf=\"!multiple\"\r\n    class=\"inner-addon right-addon\"\r\n    [class.disabled]=\"disabled\"\r\n    role=\"combobox\"\r\n    [attr.aria-expanded]=\"dropdownOpen\"\r\n    aria-haspopup=\"listbox\">\r\n\r\n    <i class=\"hpe-icon\"\r\n        [class.hpe-down]=\"dropDirection === 'down'\"\r\n        [class.hpe-up]=\"dropDirection === 'up'\"></i>\r\n\r\n    <input #singleInput type=\"text\" [attr.id]=\"id + '-input'\" class=\"form-control\"\r\n        [attr.aria-activedescendant]=\"highlightedElement?.id\"\r\n        aria-autocomplete=\"list\"\r\n        [attr.aria-controls]=\"singleTypeahead.id\"\r\n        aria-multiline=\"false\"\r\n        [(ngModel)]=\"input\"\r\n        [placeholder]=\"placeholder\"\r\n        [disabled]=\"disabled\"\r\n        (click)=\"inputClickHandler($event)\"\r\n        (blur)=\"inputBlurHandler($event)\"\r\n        (keydown)=\"inputKeyHandler($event)\">\r\n\r\n    <ux-typeahead #singleTypeahead\r\n        [id]=\"id + '-typeahead'\"\r\n        [options]=\"options\"\r\n        [filter]=\"filter$ | async\"\r\n        [(open)]=\"dropdownOpen\"\r\n        [display]=\"display\"\r\n        [key]=\"key\"\r\n        [dropDirection]=\"dropDirection\"\r\n        [maxHeight]=\"maxHeight\"\r\n        [multiselectable]=\"false\"\r\n        [openOnFilterChange]=\"false\"\r\n        [pageSize]=\"pageSize\"\r\n        [selectFirst]=\"true\"\r\n        [loadingTemplate]=\"loadingTemplate\"\r\n        [optionTemplate]=\"optionTemplate\"\r\n        [noOptionsTemplate]=\"noOptionsTemplate\"\r\n        (optionSelected)=\"singleOptionSelected($event)\"\r\n        (highlightedElementChange)=\"highlightedElement = $event\">\r\n    </ux-typeahead>\r\n\r\n</div>\r\n`,\r\n    providers: [SELECT_VALUE_ACCESSOR]\r\n})\r\nexport class SelectComponent implements OnInit, OnChanges, OnDestroy, ControlValueAccessor {\r\n\r\n    @Input() @HostBinding('attr.id') id: string = `ux-select-${++uniqueId}`;\r\n\r\n    @Input()\r\n    get value() {\r\n        return this._value;\r\n    }\r\n    set value(value: any) {\r\n        this._value = value;\r\n        this.valueChange.emit(value);\r\n        this.propagateChange(value);\r\n\r\n        // if we are not allow multiple selection update the input value (supporting ngModel)\r\n        if (!this.multiple && value !== null) {\r\n            this.input = this.getDisplay(value);\r\n        }\r\n    }\r\n\r\n    @Input()\r\n    get input() {\r\n        return this._input$.value;\r\n    }\r\n    set input(value: string) {\r\n        this._input$.next(value);\r\n        this.inputChange.emit(value);\r\n    }\r\n\r\n    @Input()\r\n    get dropdownOpen() {\r\n        return this._dropdownOpen;\r\n    }\r\n    set dropdownOpen(value: boolean) {\r\n        this._dropdownOpen = value;\r\n        this.dropdownOpenChange.emit(value);\r\n    }\r\n\r\n    @Input() options: any[] | InfiniteScrollLoadFunction;\r\n    @Input() display: (option: any) => string | string;\r\n    @Input() key: (option: any) => string | string;\r\n    @Input() allowNull: boolean = false;\r\n    @Input() disabled: boolean = false;\r\n    @Input() dropDirection: 'up' | 'down' = 'down';\r\n    @Input() maxHeight: string = '250px';\r\n    @Input() multiple: boolean = false;\r\n    @Input() pageSize: number = 20;\r\n    @Input() placeholder: string;\r\n\r\n    @Input() loadingTemplate: TemplateRef<any>;\r\n    @Input() noOptionsTemplate: TemplateRef<any>;\r\n    @Input() optionTemplate: TemplateRef<any>;\r\n\r\n    @Output() valueChange = new EventEmitter<any>();\r\n    @Output() inputChange = new EventEmitter<string>();\r\n    @Output() dropdownOpenChange = new EventEmitter<boolean>();\r\n\r\n    @ViewChild('singleInput') singleInput: ElementRef;\r\n    @ViewChild('multipleTypeahead') multipleTypeahead: TypeaheadComponent;\r\n    @ViewChild('singleTypeahead') singleTypeahead: TypeaheadComponent;\r\n\r\n    highlightedElement: HTMLElement;\r\n    filter$: Observable<string>;\r\n    propagateChange = (_: any) => { };\r\n\r\n    private _value: any;\r\n    private _input$ = new BehaviorSubject<string>('');\r\n    private _dropdownOpen: boolean = false;\r\n    private _subscription = new Subscription();\r\n\r\n    constructor(\r\n        private _element: ElementRef,\r\n        @Inject(DOCUMENT) private _document: any,\r\n        private _typeaheadKeyService: TypeaheadKeyService) { }\r\n\r\n    ngOnInit() {\r\n\r\n        // Changes to the input field\r\n        const onInput = this._input$.pipe(\r\n            filter(value => this.allowNull),\r\n            filter(value => !this.multiple && value !== this.getDisplay(this.value))\r\n        ).subscribe(value => this.value = null);\r\n\r\n        // Set up filter from input\r\n        this.filter$ = this._input$.pipe(\r\n            map(input => !this.multiple && input === this.getDisplay(this.value) ? '' : input),\r\n            debounceTime(200)\r\n        );\r\n\r\n        // Open the dropdown when filter is nonempty.\r\n        const onFilter = this.filter$.pipe(filter(value => value && value.length > 0)).subscribe(() => this.dropdownOpen = true);\r\n\r\n        // store the subscriptions\r\n        this._subscription.add(onInput);\r\n        this._subscription.add(onFilter);\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.multiple && !changes.multiple.firstChange && changes.multiple.currentValue !== changes.multiple.previousValue) {\r\n            this.input = '';\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._subscription.unsubscribe();\r\n    }\r\n\r\n    writeValue(obj: any): void {\r\n        if (obj !== undefined && obj !== this._value) {\r\n            this.value = obj;\r\n        }\r\n    }\r\n\r\n    registerOnChange(fn: any): void {\r\n        this.propagateChange = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: any): void { }\r\n\r\n    setDisabledState(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n    }\r\n\r\n    inputClickHandler(event: MouseEvent) {\r\n        this.selectInputText();\r\n        this.dropdownOpen = true;\r\n    }\r\n\r\n    inputBlurHandler(event: Event) {\r\n\r\n        // If a click on the typeahead is in progress, just refocus the input.\r\n        // This works around an issue in IE where clicking a scrollbar drops focus.\r\n        if (this.singleTypeahead && this.singleTypeahead.clicking) {\r\n            this.singleInput.nativeElement.focus();\r\n            return;\r\n        }\r\n\r\n        // Close dropdown and reset text input if focus is lost\r\n        setTimeout(() => {\r\n            if (!this._element.nativeElement.contains(this._document.activeElement)) {\r\n                this.dropdownOpen = false;\r\n                if (!this.multiple) {\r\n                    this.input = this.getDisplay(this.value);\r\n                }\r\n            }\r\n        }, 200);\r\n    }\r\n\r\n    /**\r\n     * Key handler for single select only. Multiple select key handling is in TagInputComponent.\r\n     */\r\n    inputKeyHandler(event: KeyboardEvent) {\r\n\r\n        // Standard keys for typeahead (up/down/esc)\r\n        this._typeaheadKeyService.handleKey(event, this.singleTypeahead);\r\n\r\n        switch (event.key) {\r\n            case 'Enter':\r\n                if (this._dropdownOpen) {\r\n                    // Set the highlighted option as the value and close\r\n                    this.value = this.singleTypeahead.highlighted;\r\n                    this.dropdownOpen = false;\r\n                }\r\n\r\n                // Update the input field. If dropdown isn't open then reset it to the previous value.\r\n                this.input = this.getDisplay(this.value);\r\n                event.preventDefault();\r\n                break;\r\n        }\r\n    }\r\n\r\n    singleOptionSelected(event: TypeaheadOptionEvent) {\r\n        if (event.option) {\r\n            this.value = event.option;\r\n            this.dropdownOpen = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the display value of the given option.\r\n     */\r\n    getDisplay(option: any): string {\r\n        if (option === null || option === undefined) {\r\n            return '';\r\n        }\r\n        if (typeof this.display === 'function') {\r\n            return this.display(option);\r\n        }\r\n        if (typeof this.display === 'string' && option.hasOwnProperty(this.display)) {\r\n            return option[<string>this.display];\r\n        }\r\n        return option;\r\n    }\r\n\r\n    private selectInputText() {\r\n        this.singleInput.nativeElement.select();\r\n    }\r\n}","export class TagInputEvent {\n\n    private _defaultPrevented = false;\n\n    constructor(public tag: any) {}\n\n    preventDefault() {\n        this._defaultPrevented = true;\n    }\n\n    defaultPrevented(): boolean {\n        return this._defaultPrevented;\n    }\n}","import { AfterContentInit, Component, ContentChildren, ElementRef, EventEmitter, HostListener, Inject, Input, OnChanges, OnDestroy, OnInit, Output, QueryList, SimpleChanges, TemplateRef, ViewChild, forwardRef, HostBinding } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { DOCUMENT } from '@angular/platform-browser';\r\nimport { Subscription } from 'rxjs/Subscription';\r\nimport { TypeaheadComponent, TypeaheadKeyService } from '../typeahead/index';\r\nimport { TypeaheadOptionEvent } from '../typeahead/typeahead-event';\r\nimport { TagInputEvent } from './tag-input-event';\r\n\r\nlet uniqueId = 0;\r\n\r\nconst TAGINPUT_VALUE_ACCESSOR = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => TagInputComponent),\r\n    multi: true\r\n};\r\nconst TAGINPUT_VALIDATOR = {\r\n    provide: NG_VALIDATORS,\r\n    useExisting: forwardRef(() => TagInputComponent),\r\n    multi: true\r\n};\r\n\r\n@Component({\r\n    selector: 'ux-tag-input',\r\n    template: `<ol [attr.role]=\"typeahead ? 'combobox' : 'none'\" [attr.aria-haspopup]=\"typeahead ? 'listbox' : null\">\n    <li *ngFor=\"let tag of tags; let i = index\" class=\"ux-tag\"\n        [class.disabled]=\"disabled\"\n        [ngClass]=\"tagClass(tag, i, isSelected(i))\"\n        [attr.tabindex]=\"disabled ? null : 0\"\n        [focusIf]=\"isSelected(i)\"\n        (click)=\"tagClickHandler($event, tag, i)\"\n        (focus)=\"selectTagAt(i)\">\n\n        <ng-container [ngTemplateOutlet]=\"tagTemplate\"\n            [ngTemplateOutletContext]=\"{tag: tag, index: i, disabled: disabled, api: tagApi}\">\n        </ng-container>\n\n    </li>\n    <li *ngIf=\"isInputVisible()\" class=\"ux-tag-input\" role=\"none\">\n        <input #tagInput type=\"text\" [attr.id]=\"id\" class=\"ux-tag-input\"\n            [(ngModel)]=\"input\"\n            [class.invalid]=\"!inputValid\"\n            [attr.aria-activedescendant]=\"highlightedElement?.id\"\n            [attr.aria-autocomplete]=\"typeahead ? 'list' : 'none'\"\n            [attr.aria-controls]=\"typeahead?.id\"\n            aria-multiline=\"false\"\n            [placeholder]=\"disabled ? '' : (placeholder || '')\"\n            [disabled]=\"disabled\"\n            [focusIf]=\"isSelected(tags.length)\"\n            (click)=\"inputClickHandler()\"\n            (focus)=\"inputFocusHandler()\"\n            (paste)=\"inputPasteHandler($event)\">\n    </li>\n</ol>\n\n<ng-content #typeahead></ng-content>\n\n<ng-template #defaultTagTemplate let-tag=\"tag\" let-index=\"index\" let-disabled=\"disabled\" let-api=\"api\">\n    <span class=\"ux-tag-text\">{{api.getTagDisplay(tag)}}</span>\n    <button *ngIf=\"api.canRemoveTagAt(index)\"\n        type=\"button\"\n        class=\"ux-tag-remove\"\n        aria-label=\"Remove Item\"\n        [disabled]=\"disabled\"\n        (click)=\"api.removeTagAt(index); $event.stopPropagation();\">\n        <span class=\"hpe-icon hpe-close\"></span>\n    </button>\n</ng-template>`,\r\n    providers: [TAGINPUT_VALUE_ACCESSOR, TAGINPUT_VALIDATOR],\r\n    host: {\r\n        '[class.disabled]': 'disabled',\r\n        '[class.focus]': 'hasFocus()',\r\n        '[class.invalid]': '!valid || !inputValid'\r\n    }\r\n})\r\nexport class TagInputComponent implements OnInit, AfterContentInit, OnChanges, ControlValueAccessor, OnDestroy {\r\n\r\n    @Input() @HostBinding('attr.id') id: string = `ux-tag-input-${++uniqueId}`;\r\n\r\n    @Input('tags')\r\n    get tags() {\r\n        if (!this._tags) {\r\n            this._tags = [];\r\n        }\r\n        return this._tags;\r\n    }\r\n    set tags(value: any[]) {\r\n        this._tags = value;\r\n        this._onChangeHandler(this._tags);\r\n        this.tagsChange.emit(this._tags);\r\n    }\r\n\r\n    @Output() tagsChange = new EventEmitter<any[]>();\r\n\r\n    @Input('input')\r\n    get input() {\r\n        return this._input;\r\n    }\r\n    set input(value: string) {\r\n        this._input = value;\r\n        this.inputChange.emit(value);\r\n    }\r\n\r\n    @Output() inputChange = new EventEmitter<string>();\r\n\r\n    @Input() display: (option: any) => string | string;\r\n    @Input() addOnPaste: boolean = true;\r\n    @Input() disabled: boolean = false;\r\n    @Input() enforceTagLimits: boolean = false;\r\n    @Input() freeInput: boolean = true;\r\n    @Input() maxTags: number = Number.MAX_VALUE;\r\n    @Input() minTags: number = 0;\r\n    @Input() placeholder: string = '';\r\n    @Input() showTypeaheadOnClick: boolean = false;\r\n    @Input() tagDelimiters: string = '';\r\n    @Input() tagPattern: RegExp;\r\n    @Input() tagTemplate: TemplateRef<any>;\r\n    @Input() tagClass: TagClassFunction = () => undefined;\r\n    @Input() validationErrors: any = {};\r\n    @Input('createTag') createTagHandler: (value: string) => any;\r\n\r\n    @Output() tagAdding = new EventEmitter<TagInputEvent>();\r\n    @Output() tagAdded = new EventEmitter<TagInputEvent>();\r\n    @Output() tagInvalidated = new EventEmitter<TagInputEvent>();\r\n    @Output() tagRemoving = new EventEmitter<TagInputEvent>();\r\n    @Output() tagRemoved = new EventEmitter<TagInputEvent>();\r\n    @Output() tagClick = new EventEmitter<TagInputEvent>();\r\n\r\n    @ContentChildren(TypeaheadComponent) typeaheadQuery: QueryList<TypeaheadComponent>;\r\n\r\n    @ViewChild('tagInput') tagInput: ElementRef;\r\n\r\n    @ViewChild('defaultTagTemplate') private _defaultTagTemplate: TemplateRef<any>;\r\n\r\n    selectedIndex: number = -1;\r\n\r\n    tagApi: TagApi = {\r\n        getTagDisplay: this.getTagDisplay.bind(this),\r\n        removeTagAt: this.removeTagAt.bind(this),\r\n        canRemoveTagAt: this.canRemoveTagAt.bind(this)\r\n    };\r\n\r\n    valid: boolean = true;\r\n    inputValid: boolean = true;\r\n\r\n    typeahead: TypeaheadComponent;\r\n\r\n    highlightedElement: HTMLElement;\r\n\r\n    private _input: string = '';\r\n    private _tags: any[] = [];\r\n    private _onChangeHandler: (_: any) => void = () => { };\r\n    private _onTouchedHandler: () => void = () => { };\r\n    private _typeaheadSubscription: Subscription;\r\n\r\n    constructor(\r\n        private _element: ElementRef,\r\n        @Inject(DOCUMENT) private _document: any,\r\n        private _typeaheadKeyService: TypeaheadKeyService) { }\r\n\r\n    ngOnInit() {\r\n        if (!this.tagTemplate) {\r\n            this.tagTemplate = this._defaultTagTemplate;\r\n        }\r\n    }\r\n\r\n    ngAfterContentInit() {\r\n        // Watch for optional child typeahead control\r\n        this.connectTypeahead(this.typeaheadQuery.first);\r\n        this.typeaheadQuery.changes.subscribe((query) => {\r\n            this.connectTypeahead(query.first);\r\n        });\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.disabled) {\r\n            if (changes.disabled.currentValue) {\r\n                // Clear selection and close dropdown\r\n                this.selectedIndex = -1;\r\n                if (this.typeahead) {\r\n                    this.typeahead.open = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Update validation status\r\n        this.validate();\r\n    }\r\n\r\n    writeValue(value: any[]) {\r\n        if (value) {\r\n            this.tags = value;\r\n        }\r\n    }\r\n\r\n    registerOnChange(fn: any) {\r\n        this._onChangeHandler = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: any) {\r\n        this._onTouchedHandler = fn;\r\n    }\r\n\r\n    setDisabledState(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this._typeaheadSubscription) {\r\n            this._typeaheadSubscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Validate the value of the control (tags property).\r\n     */\r\n    validate() {\r\n        this.valid = true;\r\n        let tagRangeError = null;\r\n        if (this.tags && (this.tags.length < this.minTags || this.tags.length > this.maxTags)) {\r\n            tagRangeError = {\r\n                given: this.tags.length,\r\n                min: this.minTags,\r\n                max: this.maxTags\r\n            };\r\n            this.valid = false;\r\n        }\r\n        this.validationErrors['tagRangeError'] = tagRangeError;\r\n    }\r\n\r\n    @HostListener('keydown', ['$event'])\r\n    keyHandler(event: KeyboardEvent) {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        // Get the input field cursor location\r\n        const inputCursorPos = this.tagInput.nativeElement.selectionStart;\r\n\r\n        // Determine if the input field has any text selected\r\n        const hasSelection = this.tagInput.nativeElement.selectionStart !== this.tagInput.nativeElement.selectionEnd;\r\n\r\n        // Determine if a tag has focus\r\n        const tagSelected = this.isValidTagIndex(this.selectedIndex);\r\n\r\n        const inputLength = this.input ? this.input.length : 0;\r\n\r\n        // Check whether the arrow keys can move the selection. Otherwise the input field takes the event.\r\n        const canNavigateLeft = tagSelected || (inputCursorPos <= 0 && !hasSelection);\r\n        const canNavigateRight = tagSelected || (inputCursorPos >= inputLength && !hasSelection);\r\n\r\n        // Forward key events to the typeahead component.\r\n        this._typeaheadKeyService.handleKey(event, this.typeahead);\r\n\r\n        switch (event.key) {\r\n            case 'Enter':\r\n                // Check if a typeahead option is highlighted\r\n                if (this.typeahead && this.typeahead.open && this.typeahead.highlighted) {\r\n                    // Add the typeahead option as a tag, clear the input, and close the dropdown\r\n                    this.commitTypeahead(this.typeahead.highlighted);\r\n                    this.typeahead.open = false;\r\n                } else {\r\n                    // Validate and add the input text as a tag, if possible\r\n                    this.commitInput();\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            case 'Backspace':\r\n                if (canNavigateLeft) {\r\n                    this.backspace();\r\n                    event.stopPropagation();\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            case 'Delete':\r\n            case 'Del':\r\n                if (tagSelected) {\r\n                    this.removeTagAt(this.selectedIndex);\r\n                }\r\n                break;\r\n            case 'ArrowLeft':\r\n            case 'Left':\r\n                if (canNavigateLeft) {\r\n                    this.moveSelection(-1);\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            case 'ArrowRight':\r\n            case 'Right':\r\n                if (canNavigateRight) {\r\n                    this.moveSelection(1);\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n        }\r\n\r\n        // Check for keys in the tagDelimiters\r\n        if (this.tagDelimiters && this.tagDelimiters.indexOf(this.getKeyChar(event)) >= 0) {\r\n            // Commit previous text\r\n            this.commitInput();\r\n            event.stopPropagation();\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    @HostListener('focusout', ['$event'])\r\n    focusOutHandler(event: FocusEvent) {\r\n\r\n        // If a click on the typeahead is in progress, don't do anything.\r\n        // This works around an issue in IE where clicking a scrollbar drops focus.\r\n        if (this.typeahead && this.typeahead.clicking) {\r\n            return;\r\n        }\r\n\r\n        // Close the dropdown on blur\r\n        setTimeout(() => {\r\n            if (!this._element.nativeElement.contains(this._document.activeElement)) {\r\n                this.selectedIndex = -1;\r\n                if (this.typeahead) {\r\n                    this.typeahead.open = false;\r\n                }\r\n            }\r\n        }, 200);\r\n    }\r\n\r\n    tagClickHandler(event: MouseEvent, tag: any, index: number) {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        // Send tagClick event\r\n        const tagClickEvent = new TagInputEvent(tag);\r\n        this.tagClick.emit(tagClickEvent);\r\n\r\n        // Prevent focus if preventDefault() was called\r\n        if (tagClickEvent.defaultPrevented()) {\r\n            event.preventDefault();\r\n            return;\r\n        }\r\n\r\n        // Select the tag (for IE that doesn't propagate focus)\r\n        this.selectTagAt(index);\r\n    }\r\n\r\n    inputClickHandler() {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        if (this.typeahead && this.showTypeaheadOnClick) {\r\n            this.typeahead.open = true;\r\n        }\r\n    }\r\n\r\n    inputFocusHandler() {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        this.selectInput();\r\n    }\r\n\r\n    inputPasteHandler(event: ClipboardEvent) {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        if (this.addOnPaste) {\r\n            // Get text from the clipboard\r\n            let input: string = null;\r\n            if (event.clipboardData) {\r\n                input = event.clipboardData.getData('text/plain');\r\n            } else if ((<any>window).clipboardData) {\r\n                // Internet Explorer only\r\n                input = (<any>window).clipboardData.getData('Text');\r\n            }\r\n\r\n            // Commit the clipboard text directly\r\n            if (this.commit(input)) {\r\n                this.selectInput();\r\n                event.stopPropagation();\r\n                event.preventDefault();\r\n            }\r\n        }\r\n    }\r\n\r\n    typeaheadOptionSelectedHandler(event: TypeaheadOptionEvent) {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        // When the typeahead sends the optionSelected event, commit the object directly\r\n        this.commitTypeahead(event.option);\r\n    }\r\n\r\n    /**\r\n     * Commit the current input value and clear the input field if successful.\r\n     */\r\n    commitInput() {\r\n        if (this.commit(this.input)) {\r\n            this.selectInput();\r\n            this.input = '';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Commit the given tag object and clear the input if successful.\r\n     */\r\n    commitTypeahead(tag: any) {\r\n        if (this.addTag(tag)) {\r\n            this.selectInput();\r\n            this.input = '';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Commit the given string value as one or more tags, if validation passes. Returns true if the tag(s) were created.\r\n     */\r\n    commit(input: string): boolean {\r\n        if (input && this.freeInput) {\r\n\r\n            // Split the tags by the tagDelimiters if configured\r\n            const newTags = this.splitTagInput(input);\r\n\r\n            // Check tag validation for all of the individual values\r\n            let allValid = true;\r\n            for (let newTag of newTags) {\r\n                const valid = this.validateTag(newTag);\r\n                if (!valid) {\r\n                    allValid = false;\r\n                }\r\n            }\r\n\r\n            // Add the tags if all are valid\r\n            if (allValid) {\r\n                for (let newTag of newTags) {\r\n                    this.addTag(this.createTag(newTag));\r\n                }\r\n\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * If no tag is selected, select the rightmost tag. If a tag is selected, remove it.\r\n     */\r\n    backspace() {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        if (!this.isValidTagIndex(this.selectedIndex)) {\r\n            this.selectTagAt(this.tags.length - 1);\r\n        } else {\r\n            this.removeTagAt(this.selectedIndex);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Move the highlighted option forwards or backwards in the list. Wraps at the limits.\r\n     * @param d Value to be added to the selected index, i.e. -1 to move backwards, +1 to move forwards.\r\n     */\r\n    moveSelection(d: number) {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        if (this.isValidSelectIndex(this.selectedIndex)) {\r\n            this.selectedIndex += d;\r\n\r\n            // Do wrapping of selection when out of bounds\r\n            if (this.selectedIndex < 0) {\r\n                this.selectedIndex = this.tags.length;\r\n            } else if (this.selectedIndex > this.tags.length) {\r\n                this.selectedIndex = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a value to display for the given tag. Uses display function/property name if set, otherwise assumes that the tag is a simple string.\r\n     */\r\n    getTagDisplay(tag: any): string {\r\n        if (typeof this.display === 'function') {\r\n            return this.display(tag);\r\n        }\r\n        if (typeof this.display === 'string') {\r\n            return tag[<string>this.display];\r\n        }\r\n        return tag;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the given index is selected (tag index or input field).\r\n     */\r\n    isSelected(index: number): boolean {\r\n        return index === this.selectedIndex;\r\n    }\r\n\r\n    /**\r\n     * Select the tag at the given index. Does nothing if disabled is true.\r\n     */\r\n    selectTagAt(tagIndex: number) {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        if (this.isValidTagIndex(tagIndex)) {\r\n            this.selectedIndex = tagIndex;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Select the input field, giving it focus. Does nothing if disabled is true.\r\n     */\r\n    selectInput() {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        this.selectedIndex = this.tags.length;\r\n    }\r\n\r\n    /**\r\n     * Remove the tag at the given index. Does nothing if disabled is true or the minTags property prevents removal.\r\n     */\r\n    removeTagAt(tagIndex: number) {\r\n\r\n        if (this.disabled || !this.canRemoveTagAt(tagIndex)) { return; }\r\n\r\n        // Check that the tagIndex is in range\r\n        if (this.isValidTagIndex(tagIndex)) {\r\n            const tag = this.tags[tagIndex];\r\n            const tagRemovingEvent = new TagInputEvent(tag);\r\n            this.tagRemoving.emit(tagRemovingEvent);\r\n            if (!tagRemovingEvent.defaultPrevented()) {\r\n                // Select input first to avoid issues with dropping focus\r\n                this.selectInput();\r\n                // Remove the tag\r\n                this.tags.splice(tagIndex, 1);\r\n                // Set focus again since indices have changed\r\n                this.selectInput();\r\n                this.tagRemoved.emit(new TagInputEvent(tag));\r\n                this.validate();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns true if the tag at the given index can be removed.\r\n     */\r\n    canRemoveTagAt(tagIndex: number): boolean {\r\n        return this.tags.length > this.minTags || !this.enforceTagLimits;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the input field should be available.\r\n     */\r\n    isInputVisible() {\r\n        return this.tags.length < this.maxTags || !this.enforceTagLimits;\r\n    }\r\n\r\n    /**\r\n     * Returns true if any part of the control has focus.\r\n     */\r\n    hasFocus(): boolean {\r\n        return this.isValidSelectIndex(this.selectedIndex);\r\n    }\r\n\r\n    private connectTypeahead(typeahead: TypeaheadComponent) {\r\n        if (this._typeaheadSubscription) {\r\n            this._typeaheadSubscription.unsubscribe();\r\n            this._typeaheadSubscription = null;\r\n        }\r\n\r\n        this.typeahead = typeahead;\r\n        if (this.typeahead) {\r\n            // Set up event handler for selected options\r\n            this._typeaheadSubscription = this.typeahead.optionSelected.subscribe(this.typeaheadOptionSelectedHandler.bind(this));\r\n\r\n            this._typeaheadSubscription.add(\r\n                this.typeahead.highlightedElementChange.subscribe((element: HTMLElement) => {\r\n                    this.highlightedElement = element;\r\n                })\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Validate the given tagValue with the tagPattern, if set. Update validationErrors on validation failure.\r\n     */\r\n    private validateTag(tagValue: string): boolean {\r\n        let inputPattern = null;\r\n        this.inputValid = true;\r\n        if (this.tagPattern && !this.tagPattern.test(tagValue)) {\r\n            inputPattern = {\r\n                given: tagValue,\r\n                pattern: this.tagPattern\r\n            };\r\n            this.inputValid = false;\r\n        }\r\n        this.validationErrors['inputPattern'] = inputPattern;\r\n        return this.inputValid;\r\n    }\r\n\r\n    /**\r\n     * Create a tag object for the given tagValue. If createTagHandler is specified, use it; otherwise if displayProperty is specified, create an object with the tagValue as the single named property; otherwise return the tagValue itself.\r\n     */\r\n    private createTag(tagValue: string): any {\r\n        let tag = null;\r\n        if (this.createTagHandler && typeof this.createTagHandler === 'function') {\r\n            tag = this.createTagHandler(tagValue);\r\n        } else if (typeof this.display === 'string') {\r\n            tag = {};\r\n            tag[<string>this.display] = tagValue;\r\n        } else {\r\n            tag = tagValue;\r\n        }\r\n        return tag;\r\n    }\r\n\r\n    /**\r\n     * Add a tag object, calling the tagAdding and tagAdded events. Returns true if the tag was added to the tags array.\r\n     */\r\n    private addTag(tag: any): boolean {\r\n        if (tag) {\r\n            // Verify that the new tag can be displayed\r\n            const displayValue = this.getTagDisplay(tag);\r\n            if (displayValue && typeof displayValue === 'string' && displayValue.length > 0) {\r\n                const tagAddingEvent = new TagInputEvent(tag);\r\n                this.tagAdding.emit(tagAddingEvent);\r\n                if (!tagAddingEvent.defaultPrevented()) {\r\n                    this.tags = this.tags || [];\r\n                    this.tags.push(tag);\r\n                    this.tagAdded.emit(new TagInputEvent(tag));\r\n                    this.validate();\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the given tagIndex is a valid tag index.\r\n     */\r\n    private isValidTagIndex(tagIndex: number): boolean {\r\n        return tagIndex >= 0 && tagIndex < this.tags.length;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the given index is a valid selection index (tags or input field).\r\n     */\r\n    private isValidSelectIndex(index: number): boolean {\r\n        return index >= 0 && index <= this.tags.length;\r\n    }\r\n\r\n    /**\r\n     * Returns the character corresponding to the given key event, mainly for IE compatibility.\r\n     */\r\n    private getKeyChar(event: KeyboardEvent): string {\r\n        switch (event.key) {\r\n            case 'Spacebar':\r\n                return ' ';\r\n        }\r\n        return event.key;\r\n    }\r\n\r\n    /**\r\n     * Returns an array of strings corresponding to the input string split by the tagDelimiters characters.\r\n     */\r\n    private splitTagInput(input: string): string[] {\r\n        let tagValues = [input];\r\n        if (this.tagDelimiters && typeof this.tagDelimiters === 'string') {\r\n            const escapedDelimiters = this.tagDelimiters.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\r\n            const delimiterRegex = new RegExp(`[${escapedDelimiters}]`, 'g');\r\n            tagValues = input.split(delimiterRegex).filter((s) => s.length > 0);\r\n        }\r\n        return tagValues;\r\n    }\r\n}\r\n\r\n/**\r\n * The API available to tag templates.\r\n */\r\nexport interface TagApi {\r\n    /**\r\n     * Returns the display value of the given tag, according to the displayProperty property.\r\n     */\r\n    getTagDisplay: (tag: any) => string;\r\n\r\n    /**\r\n     * Removes the tag at the given index, if possible.\r\n     */\r\n    removeTagAt: (index: number) => void;\r\n\r\n    /**\r\n     * \tReturns true if the tag at the given index can be removed.\r\n     */\r\n    canRemoveTagAt: (index: number) => boolean;\r\n}\r\n\r\n/**\r\n * The function used to return custom class information, for use in `ngClass`.\r\n */\r\nexport type TagClassFunction = (tag: any, index: number, selected: boolean) => (string | string[] | Set<string>);","import { FocusIfModule } from '../../directives/focus-if/index';\nimport { TypeaheadModule } from '../typeahead/index';\nimport { TagInputComponent } from './tag-input.component';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        FocusIfModule,\n        TypeaheadModule\n    ],\n    exports: [TagInputComponent],\n    declarations: [TagInputComponent],\n    providers: [],\n})\nexport class TagInputModule { }\n","import { InfiniteScrollModule } from '../../directives/infinite-scroll/index';\nimport { TagInputModule } from '../tag-input/index';\nimport { TypeaheadModule } from '../typeahead/index';\nimport { SelectComponent } from './select.component';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        InfiniteScrollModule,\n        TagInputModule,\n        TypeaheadModule\n    ],\n    exports: [SelectComponent],\n    declarations: [SelectComponent]\n})\nexport class SelectModule { }\n","import { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { SearchBuilderComponent } from './search-builder.component';\nimport { SearchBuilderGroupComponent } from './search-builder-group/search-builder-group.component';\nimport { SearchTextComponent } from './search-components/text/text.component';\nimport { SearchDateComponent } from './search-components/date/date.component';\nimport { SearchBuilderOutletDirective } from './search-builder-outlet/search-builder-outlet.directive';\nimport { BaseSearchComponent } from './search-components/base-search.component';\nimport { DateTimePickerModule } from '../date-time-picker/date-time-picker.module';\nimport { SearchDateRangeComponent } from './search-components/date-range/date-range.component';\nimport { SearchSelectComponent } from './search-components/select/select.component';\nimport { SelectModule } from '../select/index';\nimport { PopoverModule } from '../popover/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    DateTimePickerModule,\n    PopoverModule,\n    SelectModule\n  ],\n  exports: [\n    SearchBuilderComponent,\n    SearchBuilderGroupComponent,\n    BaseSearchComponent\n  ],\n  declarations: [\n    SearchBuilderComponent,\n    SearchBuilderGroupComponent,\n    SearchTextComponent,\n    SearchDateComponent,\n    SearchDateRangeComponent,\n    SearchBuilderOutletDirective,\n    SearchSelectComponent,\n    BaseSearchComponent\n  ],\n  entryComponents: [\n    SearchTextComponent,\n    SearchDateComponent,\n    SearchDateRangeComponent,\n    SearchSelectComponent\n  ]\n})\nexport class SearchBuilderModule { }\n","import { Directive, HostListener } from '@angular/core';\nimport { SidePanelService } from './side-panel.service';\n\n@Directive({\n    selector: '[uxSidePanelClose]'\n})\nexport class SidePanelCloseDirective {\n\n    constructor(private _service: SidePanelService) { }\n\n    @HostListener('click')\n    clickHandler() {\n        this._service.close();\n    }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { SidePanelComponent } from './side-panel.component';\nimport { SidePanelCloseDirective } from './side-panel-close.directive';\n\nconst EXPORTS = [\n    SidePanelComponent,\n    SidePanelCloseDirective\n];\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    exports: EXPORTS,\n    declarations: EXPORTS\n})\nexport class SidePanelModule { }\n","import { AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, DoCheck, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\nimport { ColorService } from '../../services/color/index';\n\n@Component({\n    selector: 'ux-slider',\n    template: `<div class=\"track\" #track [class.narrow]=\"options.track.height === sliderSize.Narrow\" [class.wide]=\"options.track.height === sliderSize.Wide\" [class.range]=\"options.type === sliderType.Range\">\n\n    <!-- Section Beneath Lower Thumb -->\n    <div class=\"track-section track-lower\" [style.flex-grow]=\"tracks.lower.size\" [style.background]=\"tracks.lower.color\"></div>\n\n    <!-- Lower Thumb Button / Line -->\n    <div class=\"thumb lower\"\n        uxDrag\n        role=\"slider\"\n        tabindex=\"0\"\n        #lowerthumb\n        [attr.aria-label]=\"options.type === sliderType.Range ? options.handles.aria.lowerThumb : options.handles.aria.thumb\"\n        [attr.aria-valuemin]=\"options?.track?.min\"\n        [attr.aria-valuemax]=\"options.type === sliderType.Range ? getThumbValue(sliderThumb.Upper) : options?.track?.max\"\n        [attr.aria-valuenow]=\"getThumbValue(sliderThumb.Lower)\"\n        [attr.aria-valuetext]=\"getAriaValueText(sliderThumb.Lower)\"\n        [style.left.%]=\"thumbs.lower.position\"\n        [class.active]=\"thumbs.lower.drag\"\n        [style.z-index]=\"thumbs.lower.order\"\n        [class.button]=\"options.handles.style === sliderStyle.Button\"\n        [class.line]=\"options.handles.style === sliderStyle.Line\"\n        [class.narrow]=\"options.track.height === sliderSize.Narrow\"\n        [class.wide]=\"options.track.height === sliderSize.Wide\"\n        (dragstart)=\"thumbEvent(sliderThumb.Lower, sliderThumbEvent.DragStart); lowerthumb.focus()\"\n        (drag)=\"updateThumbPosition($event, sliderThumb.Lower)\"\n        (dragend)=\"thumbEvent(sliderThumb.Lower, sliderThumbEvent.DragEnd)\"\n        (mouseenter)=\"thumbEvent(sliderThumb.Lower, sliderThumbEvent.MouseOver)\"\n        (mouseleave)=\"thumbEvent(sliderThumb.Lower, sliderThumbEvent.MouseLeave)\"\n        (focus)=\"thumbEvent(sliderThumb.Lower, sliderThumbEvent.MouseOver)\"\n        (blur)=\"thumbEvent(sliderThumb.Lower, sliderThumbEvent.MouseLeave)\"\n        (keydown.ArrowLeft)=\"snapToNearestTick(sliderThumb.Lower, sliderSnap.All, false); $event.preventDefault()\"\n        (keydown.ArrowRight)=\"snapToNearestTick(sliderThumb.Lower, sliderSnap.All, true); $event.preventDefault()\"\n        (keydown.ArrowUp)=\"snapToNearestTick(sliderThumb.Lower, sliderSnap.All, false); $event.preventDefault()\"\n        (keydown.ArrowDown)=\"snapToNearestTick(sliderThumb.Lower, sliderSnap.All, true); $event.preventDefault()\"\n        (keydown.PageDown)=\"snapToNearestTick(sliderThumb.Lower, sliderSnap.Major, false); $event.preventDefault()\"\n        (keydown.PageUp)=\"snapToNearestTick(sliderThumb.Lower, sliderSnap.Major, true); $event.preventDefault()\"\n        (keydown.Home)=\"snapToEnd(sliderThumb.Lower, false); $event.preventDefault()\"\n        (keydown.End)=\"snapToEnd(sliderThumb.Lower, true); $event.preventDefault()\">\n\n        <!-- Lower Thumb Callout -->\n        <div class=\"tooltip top tooltip-lower\" #lowerTooltip\n            [class.tooltip-dynamic]=\"options.handles.callout.trigger === sliderCalloutTrigger.Dynamic && thumbs.lower.drag === false\"\n            [style.opacity]=\"tooltips.lower.visible ? 1 : 0\"\n            [style.left.px]=\"tooltips.lower.position\">\n\n            <div class=\"tooltip-arrow\" [style.border-top-color]=\"options.handles.callout.background\"></div>\n\n            <div class=\"tooltip-inner\"\n                [style.background-color]=\"options.handles.callout.background\"\n                [style.color]=\"options.handles.callout.color\">\n                {{ tooltips.lower.label }}\n            </div>\n        </div>\n\n    </div>\n\n    <!-- Section of Track Between Lower and Upper Thumbs -->\n    <div class=\"track-section track-range\" *ngIf=\"options.type === sliderType.Range\" [style.flex-grow]=\"tracks.middle.size\" [style.background]=\"tracks.middle.color\">\n    </div>\n\n    <!-- Upper Thumb Button / Line -->\n    <div class=\"thumb upper\"\n        uxDrag\n        role=\"slider\"\n        tabindex=\"0\"\n        #upperthumb\n        [attr.aria-label]=\"options.handles.aria.upperThumb\"\n        [attr.aria-valuemin]=\"getThumbValue(sliderThumb.Lower) || options?.track?.min\"\n        [attr.aria-valuemax]=\"options?.track?.max\"\n        [attr.aria-valuenow]=\"getThumbValue(sliderThumb.Upper)\"\n        [attr.aria-valuetext]=\"getAriaValueText(sliderThumb.Upper)\"\n        [hidden]=\"options.type !== sliderType.Range\"\n        [class.active]=\"thumbs.upper.drag\"\n        [style.left.%]=\"thumbs.upper.position\"\n        [style.z-index]=\"thumbs.upper.order\"\n        [class.button]=\"options.handles.style === sliderStyle.Button\"\n        [class.line]=\"options.handles.style === sliderStyle.Line\"\n        [class.narrow]=\"options.track.height === sliderSize.Narrow\"\n        [class.wide]=\"options.track.height === sliderSize.Wide\"\n        (dragstart)=\"thumbEvent(sliderThumb.Upper, sliderThumbEvent.DragStart); upperthumb.focus()\"\n        (drag)=\"updateThumbPosition($event, sliderThumb.Upper)\"\n        (dragend)=\"thumbEvent(sliderThumb.Upper, sliderThumbEvent.DragEnd)\"\n        (mouseenter)=\"thumbEvent(sliderThumb.Upper, sliderThumbEvent.MouseOver)\"\n        (mouseleave)=\"thumbEvent(sliderThumb.Upper, sliderThumbEvent.MouseLeave)\"\n        (focus)=\"thumbEvent(sliderThumb.Upper, sliderThumbEvent.MouseOver)\"\n        (blur)=\"thumbEvent(sliderThumb.Upper, sliderThumbEvent.MouseLeave)\"\n        (keydown.ArrowLeft)=\"snapToNearestTick(sliderThumb.Upper, sliderSnap.All, false); $event.preventDefault()\"\n        (keydown.ArrowRight)=\"snapToNearestTick(sliderThumb.Upper, sliderSnap.All, true); $event.preventDefault()\"\n        (keydown.ArrowUp)=\"snapToNearestTick(sliderThumb.Upper, sliderSnap.All, false); $event.preventDefault()\"\n        (keydown.ArrowDown)=\"snapToNearestTick(sliderThumb.Upper, sliderSnap.All, true); $event.preventDefault()\"\n        (keydown.PageDown)=\"snapToNearestTick(sliderThumb.Upper, sliderSnap.Major, false); $event.preventDefault()\"\n        (keydown.PageUp)=\"snapToNearestTick(sliderThumb.Upper, sliderSnap.Major, true); $event.preventDefault()\"\n        (keydown.Home)=\"snapToEnd(sliderThumb.Upper, false); $event.preventDefault()\"\n        (keydown.End)=\"snapToEnd(sliderThumb.Upper, true); $event.preventDefault()\">\n\n        <!-- Upper Thumb Callout -->\n        <div class=\"tooltip top tooltip-upper\" #upperTooltip\n            [class.tooltip-dynamic]=\"options.handles.callout.trigger === sliderCalloutTrigger.Dynamic && thumbs.upper.drag === false\"\n            [style.opacity]=\"tooltips.upper.visible ? 1 : 0\"\n            [style.left.px]=\"tooltips.upper.position\">\n\n            <div class=\"tooltip-arrow\" [style.border-top-color]=\"options.handles.callout.background\"></div>\n\n            <div class=\"tooltip-inner\"\n                *ngIf=\"options.type === sliderType.Range\"\n                [style.background-color]=\"options.handles.callout.background\"\n                [style.color]=\"options.handles.callout.color\">\n                {{ tooltips.upper.label }}\n            </div>\n        </div>\n    </div>\n\n    <!-- Section of Track Abover Upper Thumb -->\n    <div class=\"track-section track-higher\" [style.flex-grow]=\"tracks.upper.size\" [style.background]=\"tracks.upper.color\"></div>\n\n</div>\n\n<!-- Chart Ticks and Tick Labels -->\n<div class=\"tick-container\"\n    role=\"presentation\"\n    *ngIf=\"(options.track.ticks.major.show || options.track.ticks.minor.show) && options.handles.callout.trigger !== sliderCalloutTrigger.Dynamic\"\n    [class.show-labels]=\"options.track.ticks.major.labels || options.track.ticks.minor.labels\">\n\n    <div class=\"tick\"\n        *ngFor=\"let tick of ticks\"\n        [class.major]=\"tick.type === sliderTickType.Major\"\n        [class.minor]=\"tick.type === sliderTickType.Minor\"\n        [style.left.%]=\"tick.position\"\n        [hidden]=\"!tick.showTicks\">\n\n        <div class=\"tick-indicator\"></div>\n        <div class=\"tick-label\" aria-hidden=\"true\" [hidden]=\"!tick.showLabels\">{{ tick.label }}</div>\n    </div>\n</div>`,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SliderComponent implements OnInit, AfterViewInit, DoCheck {\n\n    @Input() value: SliderValue | number = 0;\n    @Input() options: SliderOptions;\n    @Output() valueChange: EventEmitter<SliderValue | number> = new EventEmitter<SliderValue | number>();\n\n    @ViewChild('lowerTooltip') lowerTooltip: ElementRef;\n    @ViewChild('upperTooltip') upperTooltip: ElementRef;\n    @ViewChild('track') track: ElementRef;\n\n    // store current values for deep change detection\n    private _value: SliderValue | number;\n\n    // expose enums to Angular view\n    sliderType = SliderType;\n    sliderStyle = SliderStyle;\n    sliderSize = SliderSize;\n    sliderSnap = SliderSnap;\n    sliderThumb = SliderThumb;\n    sliderTickType = SliderTickType;\n    sliderThumbEvent = SliderThumbEvent;\n    sliderCalloutTrigger = SliderCalloutTrigger;\n\n    tracks = {\n        lower: {\n            size: 0,\n            color: ''\n        },\n        middle: {\n            size: 0,\n            color: ''\n        },\n        upper: {\n            size: 0,\n            color: ''\n        }\n    };\n\n    tooltips = {\n        lower: {\n            visible: false,\n            position: 0,\n            label: ''\n        },\n        upper: {\n            visible: false,\n            position: 0,\n            label: ''\n        }\n    };\n\n    thumbs = {\n        lower: {\n            hover: false,\n            drag: false,\n            position: 0,\n            order: 100,\n            value: null as number\n        },\n        upper: {\n            hover: false,\n            drag: false,\n            position: 0,\n            order: 101,\n            value: null as number\n        }\n    };\n\n    // store all the ticks to display\n    ticks: SliderTick[] = [];\n    defaultOptions: SliderOptions;\n\n    constructor(colorService: ColorService, private _changeDetectorRef: ChangeDetectorRef) {\n\n        // setup default options\n        this.defaultOptions = {\n            type: SliderType.Value,\n            handles: {\n                style: SliderStyle.Button,\n                callout: {\n                    trigger: SliderCalloutTrigger.None,\n                    background: colorService.getColor('grey2').toHex(),\n                    color: '#fff',\n                    formatter: (value: number): string | number => value\n                },\n                keyboard: {\n                    major: 5,\n                    minor: 1\n                },\n                aria: {\n                    thumb: 'Slider value',\n                    lowerThumb: 'Slider lower value',\n                    upperThumb: 'Slider upper value'\n                }\n            },\n            track: {\n                height: SliderSize.Wide,\n                min: 0,\n                max: 100,\n                ticks: {\n                    snap: SliderSnap.None,\n                    major: {\n                        show: true,\n                        steps: 10,\n                        labels: true,\n                        formatter: (value: number): string | number => value\n                    },\n                    minor: {\n                        show: true,\n                        steps: 5,\n                        labels: false,\n                        formatter: (value: number): string | number => value\n                    }\n                },\n                colors: {\n                    lower: colorService.getColor('grey6').toHex(),\n                    range: colorService.getColor('accent').setAlpha(0.75).toRgba(),\n                    higher: colorService.getColor('grey6').toHex()\n                }\n            }\n        };\n    }\n\n    ngOnInit(): void {\n\n        this.updateOptions();\n        this.updateValues();\n\n        this.setThumbState(SliderThumb.Lower, false, false);\n        this.setThumbState(SliderThumb.Upper, false, false);\n\n        // emit the initial value\n        this.valueChange.next(this.clone(this.value));\n    }\n\n    ngDoCheck(): void {\n\n        if (this.detectValueChange(this.value, this._value)) {\n            this.updateValues();\n            this._value = this.clone(this.value);\n        }\n    }\n\n    ngAfterViewInit(): void {\n        // persistent tooltips will need positioned correctly at this stage\n        setTimeout(() => {\n            this.updateTooltipPosition(SliderThumb.Lower);\n            this.updateTooltipPosition(SliderThumb.Upper);\n\n            // mark as dirty\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n\n    snapToNearestTick(thumb: SliderThumb, snapTarget: SliderSnap, forwards: boolean): void {\n\n        // get the value for the thumb\n        const { value } = this.getThumbState(thumb);\n\n        // get the closest ticks - remove any tick if we are currently on it\n        const closest = this.getTickDistances(value, thumb, snapTarget)\n            .filter(tick => tick.value !== value)\n            .find(tick => forwards ? tick.value > value : tick.value < value);\n\n        // If we have no ticks then move by a predefined amount\n        if (closest) {\n            return this.setThumbValue(thumb, this.validateValue(thumb, closest.value));\n        }\n\n        const step = snapTarget === SliderSnap.Major ? this.options.handles.keyboard.major : this.options.handles.keyboard.minor;\n\n        this.setThumbValue(thumb, this.validateValue(thumb, value + (forwards ? step : -step)));\n\n    }\n\n    snapToEnd(thumb: SliderThumb, forwards: boolean): void {\n        this.setThumbValue(thumb, this.validateValue(thumb, forwards ? this.options.track.max : this.options.track.min));\n    }\n\n    getThumbValue(thumb: SliderThumb): number {\n        return this.getThumbState(thumb).value;\n    }\n\n    getFormattedValue(thumb: SliderThumb): string | number {\n        return this.options.handles.callout.formatter(this.getThumbState(thumb).value);\n    }\n\n    private getThumbState(thumb: SliderThumb) {\n        return thumb === SliderThumb.Lower ? this.thumbs.lower : this.thumbs.upper;\n    }\n\n    private setThumbState(thumb: SliderThumb, hover: boolean, drag: boolean) {\n\n        if (thumb === SliderThumb.Lower) {\n            this.thumbs.lower.hover = hover;\n            this.thumbs.lower.drag = drag;\n        } else {\n            this.thumbs.upper.hover = hover;\n            this.thumbs.upper.drag = drag;\n        }\n\n        // update the visibility of the tooltips\n        this.updateTooltips(thumb);\n    }\n\n    thumbEvent(thumb: SliderThumb, event: SliderThumbEvent): void {\n\n        // get the current thumb state\n        const state = this.getThumbState(thumb);\n\n        // update based upon event\n        switch (event) {\n\n            case SliderThumbEvent.DragStart:\n                state.drag = true;\n                break;\n\n            case SliderThumbEvent.DragEnd:\n                state.drag = false;\n                break;\n\n            case SliderThumbEvent.MouseOver:\n                state.hover = true;\n                break;\n\n            case SliderThumbEvent.MouseLeave:\n                state.hover = false;\n                break;\n\n            case SliderThumbEvent.None:\n                state.drag = false;\n                state.hover = false;\n                break;\n        }\n\n        // update the thumb state\n        this.setThumbState(thumb, state.hover, state.drag);\n    }\n\n    getAriaValueText(thumb: SliderThumb): string | number {\n        // get the current thumb value\n        const value = this.getThumbValue(thumb);\n\n        // get all the ticks\n        const tick = this.ticks.find(_tick => _tick.value === value);\n\n        if (tick && tick.label) {\n            return tick.label;\n        }\n\n        // otherwise simply display the formatted value\n        return this.getFormattedValue(thumb);\n    }\n\n    private updateTooltips(thumb: SliderThumb): void {\n\n        let visible = false;\n        const state = this.getThumbState(thumb);\n\n        switch (this.options.handles.callout.trigger) {\n\n            case SliderCalloutTrigger.Persistent:\n                visible = true;\n                break;\n\n            case SliderCalloutTrigger.Drag:\n                visible = state.drag;\n                break;\n\n            case SliderCalloutTrigger.Hover:\n                visible = state.hover || state.drag;\n                break;\n\n            case SliderCalloutTrigger.Dynamic:\n                visible = true;\n                break;\n        }\n\n        // update the state for the corresponding thumb\n        this.getTooltip(thumb).visible = visible;\n\n        // update the tooltip text\n        this.updateTooltipText(thumb);\n\n        // update the tooltip positions\n        this.updateTooltipPosition(thumb);\n    }\n\n    private updateTooltipText(thumb: SliderThumb) {\n\n        // get the thumb value\n        let state = this.getThumbState(thumb);\n        let tooltip = this.getTooltip(thumb);\n\n        // store the formatted label\n        tooltip.label = this.getFormattedValue(thumb).toString();\n    }\n\n    private getTooltipElement(thumb: SliderThumb): ElementRef {\n        return thumb === SliderThumb.Lower ? this.lowerTooltip : this.upperTooltip;\n    }\n\n    private getTooltip(thumb: SliderThumb) {\n        return thumb === SliderThumb.Lower ? this.tooltips.lower : this.tooltips.upper;\n    }\n\n    private updateTooltipPosition(thumb: SliderThumb): void {\n\n        const tooltip = this.getTooltip(thumb);\n\n        // if tooltip is not visible then stop here\n        if (tooltip.visible === false) {\n            return;\n        }\n\n        let tooltipElement = this.getTooltipElement(thumb);\n\n        // get the element widths\n        let thumbWidth: number;\n\n        if (this.options.handles.style === SliderStyle.Button) {\n            thumbWidth = this.options.track.height === SliderSize.Narrow ? 16 : 24;\n        } else {\n            thumbWidth = 2;\n        }\n\n        let tooltipWidth = tooltipElement.nativeElement.offsetWidth;\n\n        // calculate the tooltips new position\n        let tooltipPosition = Math.ceil((tooltipWidth - thumbWidth) / 2);\n\n        // update tooltip position\n        tooltip.position = -tooltipPosition;\n\n        if (this.options.type === SliderType.Range && this.options.handles.callout.trigger === SliderCalloutTrigger.Dynamic) {\n            this.preventTooltipOverlap(tooltip);\n        }\n    }\n\n    private preventTooltipOverlap(tooltip: any): void {\n        const trackWidth = this.track.nativeElement.offsetWidth;\n\n        const lower = (trackWidth / 100) * this.thumbs.lower.position;\n        const upper = (trackWidth / 100) * this.thumbs.upper.position;\n\n        const lowerWidth = this.lowerTooltip.nativeElement.offsetWidth / 2;\n        const upperWidth = this.upperTooltip.nativeElement.offsetWidth / 2;\n\n        const diff = (lower + lowerWidth) - (upper - upperWidth);\n\n        // if the tooltips are closer than 16px then adjust so the dont move any close\n        if (diff > 0) {\n            if (tooltip === this.tooltips.lower && this.thumbs.lower.drag === false) {\n                tooltip.position -= (diff / 2);\n            } else if (tooltip === this.tooltips.upper && this.thumbs.upper.drag === false) {\n                tooltip.position += (diff / 2);\n            }\n        }\n    }\n\n    private clamp(value: number, min: number, max: number): number {\n        return Math.min(Math.max(value, min), max);\n    }\n\n    updateThumbPosition(event: MouseEvent | TouchEvent, thumb: SliderThumb): void {\n\n        // get event position - either mouse or touch\n        let eventPosition = event instanceof MouseEvent ? event.clientX : event.touches && event.touches.length > 0 ? event.touches[0].clientX : null;\n\n        // if event position is null do nothing\n        if (eventPosition === null) {\n            return;\n        }\n\n        // get mouse position\n        let mouseX = window.pageXOffset + eventPosition;\n\n        // get track size and position\n        let trackBounds = this.track.nativeElement.getBoundingClientRect();\n\n        // restrict the value within the range size\n        let position = this.clamp(mouseX - trackBounds.left, 0, trackBounds.width);\n\n        // get fraction representation of location within the track\n        let fraction = (position / trackBounds.width);\n\n        // convert to value within the range\n        let value = ((this.options.track.max - this.options.track.min) * fraction) + this.options.track.min;\n\n        // ensure value is valid\n        value = this.validateValue(thumb, value);\n\n        // snap to a tick if required\n        value = this.snapToTick(value, thumb);\n\n        // update the value accordingly\n        this.setThumbValue(thumb, value);\n\n        this.updateOrder(thumb);\n        this.updateValues();\n\n        // update tooltip text & position\n        this.updateTooltipText(thumb);\n\n        // update the position of all visible tooltips\n        this.updateTooltipPosition(SliderThumb.Lower);\n        this.updateTooltipPosition(SliderThumb.Upper);\n\n        // mark as dirty for change detection\n        this._changeDetectorRef.markForCheck();\n    }\n\n    private updateOrder(thumb: SliderThumb): void {\n\n        let lower = thumb === SliderThumb.Lower ? 101 : 100;\n        let upper = thumb === SliderThumb.Lower ? 100 : 101;\n\n        // The most recently used thumb should be above\n        this.thumbs.lower.order = lower;\n        this.thumbs.upper.order = upper;\n    }\n\n    private getTickDistances(value: number, thumb: SliderThumb, snapTarget: SliderSnap): SliderTick[] {\n\n        // if snap target is none then return original value\n        if (snapTarget === SliderSnap.None) {\n            return [];\n        }\n\n        // get filtered ticks\n        let ticks: SliderTick[];\n\n        switch (snapTarget) {\n\n            case SliderSnap.Minor:\n                ticks = this.ticks.filter(tick => tick.type === SliderTickType.Minor);\n                break;\n\n            case SliderSnap.Major:\n                ticks = this.ticks.filter(tick => tick.type === SliderTickType.Major);\n                break;\n\n            default:\n                ticks = this.ticks.slice(0);\n        }\n\n        // get the track limit\n        let lowerLimit = this.options.track.min;\n        let upperLimit = this.options.track.max;\n\n        if (this.options.type === SliderType.Range && thumb === SliderThumb.Lower) {\n            upperLimit = this.thumbs.upper.value;\n        }\n\n        if (this.options.type === SliderType.Range && thumb === SliderThumb.Upper) {\n            lowerLimit = this.thumbs.lower.value;\n        }\n\n        // Find the closest tick to the current position\n        const range = ticks.filter(tick => tick.value >= lowerLimit && tick.value <= upperLimit);\n\n        // If there are no close ticks in the valid range then dont snap\n        if (range.length === 0) {\n            return [];\n        }\n\n        return range.sort((tickOne, tickTwo) => {\n\n            const tickOneDelta = Math.max(tickOne.value, value) - Math.min(tickOne.value, value);\n            const tickTwoDelta = Math.max(tickTwo.value, value) - Math.min(tickTwo.value, value);\n            \n            return tickOneDelta - tickTwoDelta;\n        });\n    }\n\n    private snapToTick(value: number, thumb: SliderThumb): number {\n\n        const tickDistances = this.getTickDistances(value, thumb, this.options.track.ticks.snap);\n\n        // if there are no ticks return the current value\n        if (tickDistances.length === 0) {\n            return value;\n        }\n\n        // get the closest tick\n        return tickDistances[0].value;\n    }\n\n    private validateValue(thumb: SliderThumb, value: number): number {\n\n        // if slider is not a range value is always valid providing it is within the chart min and max values\n        if (this.options.type === SliderType.Value) {\n            return Math.max(Math.min(value, this.options.track.max), this.options.track.min);\n        }\n\n        // check if value is with chart ranges\n        if (value > this.options.track.max) {\n            return thumb === SliderThumb.Lower ? Math.min(this.options.track.max, this.thumbs.upper.value) : this.options.track.max;\n        }\n\n        if (value < this.options.track.min) {\n            return thumb === SliderThumb.Upper ? Math.max(this.options.track.min, this.thumbs.lower.value) : this.options.track.min;\n        }\n\n        // otherwise we need to check to make sure lower thumb cannot go above higher and vice versa\n        if (thumb === SliderThumb.Lower) {\n\n            if (this.thumbs.upper.value === null) {\n                return value;\n            }\n\n            return value <= this.thumbs.upper.value ? value : this.thumbs.upper.value;\n        }\n\n        if (thumb === SliderThumb.Upper) {\n\n            if (this.thumbs.lower.value === null) {\n                return value;\n            }\n\n            return value >= this.thumbs.lower.value ? value : this.thumbs.lower.value;\n        }\n    }\n\n    private updateOptions(): void {\n\n        // add in the default options that user hasn't specified\n        this.options = this.deepMerge(this.options || {}, this.defaultOptions);\n\n        this.updateTrackColors();\n        this.updateTicks();\n        this.updateValues();\n    }\n\n    private updateValues(): void {\n\n        if (this.value === undefined || this.value === null) {\n            this.value = 0;\n        }\n\n        let lowerValue = typeof this.value === 'number' ? this.value : this.value.low;\n        let upperValue = typeof this.value === 'number' ? this.value : this.value.high;\n\n        // validate values\n        lowerValue = this.validateValue(SliderThumb.Lower, Number(lowerValue.toFixed(4)));\n        upperValue = this.validateValue(SliderThumb.Upper, Number(upperValue.toFixed(4)));\n\n        // calculate the positions as percentages\n        let lowerPosition = (((lowerValue - this.options.track.min) / (this.options.track.max - this.options.track.min)) * 100);\n        let upperPosition = (((upperValue - this.options.track.min) / (this.options.track.max - this.options.track.min)) * 100);\n\n        // update thumb positions\n        this.thumbs.lower.position = lowerPosition;\n        this.thumbs.upper.position = upperPosition;\n\n        // calculate the track sizes\n        this.tracks.lower.size = lowerPosition;\n        this.tracks.middle.size = upperPosition - lowerPosition;\n        this.tracks.upper.size = this.options.type === SliderType.Value ? 100 - lowerPosition : 100 - upperPosition;\n\n        // update the value input\n        this.setValue(lowerValue, upperValue);\n    }\n\n    private setValue(low: number, high?: number): void {\n\n        this.thumbs.lower.value = low;\n        this.thumbs.upper.value = high;\n\n        let previousValue = this.clone(this._value);\n\n        this.value = this.options.type === SliderType.Value ? low : { low: low, high: high };\n\n        // call the event emitter if changes occured\n        if (this.detectValueChange(this.value, previousValue)) {\n            this.valueChange.emit(this.clone(this.value));\n\n            this.updateTooltipText(SliderThumb.Lower);\n            this.updateTooltipText(SliderThumb.Upper);\n        } else {\n            this.valueChange.emit(this.clone(this.value));\n        }\n    }\n\n    private setThumbValue(thumb: SliderThumb, value: number): void {\n\n        // update the thumb value\n        this.getThumbState(thumb).value = value;\n\n        // forward these changes to the value\n        this.setValue(this.thumbs.lower.value, this.thumbs.upper.value);\n    }\n\n    private updateTicks(): void {\n\n        // get tick options\n        const majorOptions = this.options.track.ticks.major;\n        const minorOptions = this.options.track.ticks.minor;\n\n        // check if we should show ticks\n        if (majorOptions.show === false && minorOptions.show === false) {\n            this.ticks = [];\n        }\n\n        // create ticks for both major and minor - only get the ones to be shown\n        const majorTicks = this.getTicks(majorOptions, SliderTickType.Major).filter(tick => tick.showTicks);\n        const minorTicks = this.getTicks(minorOptions, SliderTickType.Minor).filter(tick => tick.showTicks);\n\n        // remove any minor ticks that are on a major interval\n        this.ticks = this.unionTicks(majorTicks, minorTicks);\n    }\n\n    private updateTrackColors(): void {\n\n        // get colors for each part of the track\n        const { lower, range, higher } = this.options.track.colors;\n\n        // update the controller value\n        this.tracks.lower.color = typeof lower === 'string' ? lower : `linear-gradient(to right, ${lower.join(', ')})`;\n        this.tracks.middle.color = typeof range === 'string' ? range : `linear-gradient(to right, ${range.join(', ')})`;\n        this.tracks.upper.color = typeof higher === 'string' ? higher : `linear-gradient(to right, ${higher.join(', ')})`;\n    }\n\n    private getSteps(steps: number | number[]): number[] {\n\n        // if they are already an array just return it\n        if (steps instanceof Array) {\n            return steps;\n        }\n\n        let output: number[] = [];\n\n        // otherwise calculate the steps\n        for (let idx = this.options.track.min; idx <= this.options.track.max; idx += steps) {\n            output.push(idx);\n        }\n\n        return output;\n    }\n\n    private getTicks(options: SliderTickOptions, type: SliderTickType): SliderTick[] {\n\n        // create an array to store the ticks and step points\n        let steps = this.getSteps(options.steps);\n\n        // get some chart options\n        let min = this.options.track.min;\n        let max = this.options.track.max;\n\n        // convert each step to a slider tick and remove invalid ticks\n        return steps.map(step => {\n            return {\n                showTicks: options.show,\n                showLabels: options.labels,\n                type: type,\n                position: ((step - min) / (max - min)) * 100,\n                value: step,\n                label: options.formatter(step)\n            };\n        }).filter(tick => tick.position >= 0 && tick.position <= 100);\n    }\n\n    private unionTicks(majorTicks: SliderTick[], minorTicks: SliderTick[]): SliderTick[] {\n\n        // get all ticks combined removing any minor ticks with the same value as major ticks\n        return majorTicks.concat(minorTicks)\n            .filter((tick, index, array) => tick.type === SliderTickType.Major || !array.find(tk => tk.type === SliderTickType.Major && tk.position === tick.position))\n            .sort((t1, t2) => t1.value - t2.value);\n    }\n\n    private deepMerge<T>(destination: T, source: T): T {\n\n        // loop though all of the properties in the source object\n        for (let prop in source) {\n\n            // check if the destination object has the property\n            if (!destination.hasOwnProperty(prop)) {\n                // copy the property across\n                destination[prop] = source[prop];\n                continue;\n            }\n\n            // if the property exists and is not an object then skip\n            if (typeof destination[prop] !== 'object') {\n                continue;\n            }\n\n            // check if property is an array\n            if (destination[prop] instanceof Array) {\n                continue;\n            }\n\n            // if it is an object then perform a recursive check\n            destination[prop] = this.deepMerge(destination[prop], source[prop]);\n        }\n\n        return destination;\n    }\n\n    private detectValueChange(value1: number | SliderValue, value2: number | SliderValue): boolean {\n\n        // compare two slider values\n        if (this.isSliderValue(value1) && this.isSliderValue(value2)) {\n\n            // references to the objects in the correct types\n            const obj1 = value1 as SliderValue;\n            const obj2 = value2 as SliderValue;\n\n            return obj1.low !== obj2.low || obj1.high !== obj2.high;\n        }\n\n        // if not a slider value - should be number of nullable type - compare normally\n        return value1 !== value2;\n    }\n\n    /**\n     * Determines whether or not an object conforms to the\n     * SliderValue interface.\n     * @param value - The object to check - this must be type any\n     */\n    private isSliderValue(value: any): boolean {\n\n        // check if is an object\n        if (typeof value !== 'object') {\n            return false;\n        }\n\n        // next check if it contains the necessary properties\n        return 'low' in value && 'high' in value;\n    }\n\n    private clone(value: number | SliderValue): number | SliderValue {\n\n        // if it is not an object simply return the value\n        if (typeof value !== 'object') {\n            return value;\n        }\n\n        // create a new object from the existing one\n        const instance = { ...value };\n\n        // delete remove the value from the old object\n        value = undefined;\n\n        // return the new instance of the object\n        return instance;\n    }\n}\n\nexport enum SliderType {\n    Value,\n    Range\n}\n\nexport enum SliderStyle {\n    Button,\n    Line\n}\n\nexport enum SliderSize {\n    Narrow,\n    Wide\n}\n\nexport enum SliderCalloutTrigger {\n    None,\n    Hover,\n    Drag,\n    Persistent,\n    Dynamic\n}\n\nexport interface SliderValue {\n    low: number;\n    high: number;\n}\n\nexport enum SliderSnap {\n    None,\n    Minor,\n    Major,\n    All\n}\n\nexport enum SliderTickType {\n    Minor,\n    Major\n}\n\nexport interface SliderOptions {\n    type?: SliderType;\n    handles?: SliderHandleOptions;\n    track?: SliderTrackOptions;\n}\n\nexport interface SliderHandleOptions {\n    style?: SliderStyle;\n    callout?: SliderCallout;\n    keyboard?: SliderKeyboardOptions;\n    aria?: SliderAriaOptions;\n}\n\nexport interface SliderAriaOptions {\n    thumb: string;\n    lowerThumb: string;\n    upperThumb: string;\n}\n\nexport interface SliderKeyboardOptions {\n    major?: number;\n    minor?: number;\n}\n\nexport interface SliderTrackOptions {\n    height?: SliderSize;\n    min?: number;\n    max?: number;\n    ticks?: SliderTicksOptions;\n    colors?: SliderTrackColors;\n}\n\nexport interface SliderTicksOptions {\n    snap?: SliderSnap;\n    major?: SliderTickOptions;\n    minor?: SliderTickOptions;\n}\n\nexport interface SliderTickOptions {\n    show?: boolean;\n    steps?: number | number[];\n    labels?: boolean;\n    formatter?: (value: number) => string | number;\n}\n\nexport interface SliderTick {\n    showTicks: boolean;\n    showLabels: boolean;\n    type: SliderTickType;\n    position: number;\n    value: number;\n    label: string | number;\n}\n\nexport interface SliderTrackColors {\n    lower?: string | string[];\n    range?: string | string[];\n    higher?: string | string[];\n}\n\nexport interface SliderCallout {\n    trigger?: SliderCalloutTrigger;\n    background?: string;\n    color?: string;\n    formatter?: (value: number) => string | number;\n}\n\nexport enum SliderThumbEvent {\n    None,\n    MouseOver,\n    MouseLeave,\n    DragStart,\n    DragEnd\n}\n\nexport enum SliderThumb {\n    Lower,\n    Upper\n}","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ColorServiceModule } from '../../services/color/index';\n\nimport { SliderComponent } from './slider.component';\nimport { DragModule } from '../../directives/drag/index';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ColorServiceModule,\n        DragModule\n    ],\n    exports: [SliderComponent],\n    declarations: [SliderComponent]\n})\nexport class SliderModule { }","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { ColorService } from '../../services/color/index';\nimport { ColorIdentifier } from '../../index';\n\n@Component({\n    selector: 'ux-spark',\n    template: `<!-- Inline Spark Chart -->\n<div *ngIf=\"inlineLabel\" class=\"ux-spark-inline-label-container\">\n\n    <div class=\"ux-spark-inline-label-left\" [innerHtml]=\"inlineLabel\"></div>\n\n    <div class=\"ux-spark-line\">\n\n        <div class=\"ux-spark-top-container\" *ngIf=\"topLeftLabel || topRightLabel\">\n            <div class=\"ux-spark-label-top-left\" *ngIf=\"topLeftLabel\" [innerHtml]=\"topLeftLabel\"></div>\n            <div class=\"ux-spark-label-top-right\" *ngIf=\"topRightLabel\" [innerHtml]=\"topRightLabel\"></div>\n        </div>\n\n        <div class=\"ux-spark ux-inline ux-spark-theme-{{theme}}\" [style.height.px]=\"barHeight\" [style.backgroundColor]=\"trackColor\" [uxTooltip]=\"tooltip\">\n            <div class=\"ux-spark-bar\" *ngFor=\"let line of values; let idx = index;\" [style.width.%]=\"line\" [style.backgroundColor]=\"barColor[idx]\"></div>\n        </div>\n\n        <div class=\"ux-spark-bottom-container\" *ngIf=\"bottomLeftLabel || bottomRightLabel\">\n            <div class=\"ux-spark-label-bottom-left\" *ngIf=\"bottomLeftLabel\" [innerHtml]=\"bottomLeftLabel\"></div>\n            <div class=\"ux-spark-label-bottom-right\" *ngIf=\"bottomRightLabel\" [innerHtml]=\"bottomRightLabel\"></div>\n        </div>\n\n    </div>\n</div>\n\n<!-- End Inline Spark Chart -->\n\n\n<!-- Non Inline Spark Chart -->\n<div *ngIf=\"!inlineLabel\">\n\n    <div class=\"ux-spark-top-container\" *ngIf=\"topLeftLabel || topRightLabel\">\n        <div class=\"ux-spark-label-top-left\" *ngIf=\"topLeftLabel\" [innerHtml]=\"topLeftLabel\"></div>\n        <div class=\"ux-spark-label-top-right\" *ngIf=\"topRightLabel\" [innerHtml]=\"topRightLabel\"></div>\n    </div>\n\n    <div class=\"ux-spark ux-spark-theme-{{theme}}\" [class.ux-spark-multi-value]=\"values.length > 1\" [style.height.px]=\"barHeight\" [style.backgroundColor]=\"trackColor\"\n        [uxTooltip]=\"tooltip\">\n        <div class=\"ux-spark-bar\" *ngFor=\"let line of value; let idx = index;\" [style.width.%]=\"line\" [style.backgroundColor]=\"barColor[idx]\"></div>\n    </div>\n\n    <div class=\"ux-spark-bottom-container\" *ngIf=\"bottomLeftLabel || bottomRightLabel\">\n        <div class=\"ux-spark-label-bottom-left\" *ngIf=\"bottomLeftLabel\" [innerHtml]=\"bottomLeftLabel\"></div>\n        <div class=\"ux-spark-label-bottom-right\" *ngIf=\"bottomRightLabel\" [innerHtml]=\"bottomRightLabel\"></div>\n    </div>\n</div>\n\n<!-- End Non Inline Spark Chart -->`,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SparkComponent {\n\n    values: number[] = [];\n\n    @Input() barHeight: number = 10;\n    @Input() inlineLabel: string;\n    @Input() topLeftLabel: string;\n    @Input() topRightLabel: string;\n    @Input() bottomLeftLabel: string;\n    @Input() bottomRightLabel: string;\n    @Input() tooltip: string;\n\n    private _trackColor: string;\n    private _theme: ColorIdentifier = 'primary';    \n    private _barColor: string | string[] = [];\n    \n    @Input() \n    set theme(value: string) {\n        this._theme = this._colorService.resolveColorName(value);\n    }\n\n    get theme(): string {\n        return this._theme;\n    }\n\n    @Input() \n    set trackColor(value: string) {\n        this._trackColor = this._colorService.resolve(value);\n    }\n\n    get trackColor(): string {\n        return this._trackColor;\n    }\n\n    @Input() \n    set barColor(value: string | string[]) {\n\n        if (Array.isArray(value)) {\n            this._barColor = value.map(color => this._colorService.resolve(color));\n        } else {\n            this._barColor = [this._colorService.resolve(value)];\n        }\n    }\n\n    get barColor(): string | string[] {\n        return this._barColor;\n    }\n\n    @Input()\n    set value(value: number | number[]) {\n\n        // ensure 'value' is an array at this point\n        const values = Array.isArray(value) ? value : [value];\n\n        // get the total value of all lines\n        const total = Math.max(values.reduce((previous, current) => previous + current, 0), 100);\n\n        // figure out the percentages for each spark line\n        this.values = values.map(val => (val / total) * 100);\n    }\n\n    get value() {\n        return this.values;\n    }\n\n    constructor(private _colorService: ColorService) { }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { SparkComponent } from './spark.component';\nimport { ColorServiceModule } from '../../services/color/index';\nimport { TooltipModule } from '../tooltip/index';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ColorServiceModule,\n        TooltipModule\n    ],\n    exports: [SparkComponent],\n    declarations: [SparkComponent]\n})\nexport class SparkModule { }\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { TabComponent } from './tab/tab.component';\n\n@Injectable()\nexport class TabsetService {\n\n    tabs$ = new BehaviorSubject<TabComponent[]>([]);\n    active$ = new BehaviorSubject<TabComponent>(null);\n    focused$ = new BehaviorSubject<boolean>(false);\n    highlighted$ = new BehaviorSubject<TabComponent>(null);\n\n    add(tab: TabComponent): void {\n        this.tabs$.next([...this.tabs$.value, tab]);\n\n        // check if this is the only tab. If so select this by default\n        if (!this.active$.value) {\n            this.select(tab);\n        }\n    }\n\n    remove(tab: TabComponent): void {\n\n        // remove the tab\n        this.tabs$.next(this.tabs$.value.filter(_tab => _tab !== tab));\n    }\n\n    select(tab: TabComponent): void {\n        if (!tab.disabled) {\n            this.active$.next(tab);\n            this.highlighted$.next(tab);\n        }\n    }\n\n    selectAtIndex(index: number): void {\n\n        // if there are no tabs then do nothing\n        if (this.tabs$.value.length === 0) {\n            return;\n        }\n\n        // check if the index is within the bounds\n        if (index < 0) {\n            return this.selectAtIndex(this.tabs$.value.length - 1);\n        } else if (index >= this.tabs$.value.length) {\n            return this.selectAtIndex(0);\n        }\n\n        const target = this.tabs$.value[index];\n\n        if (target) {\n            this.select(target);\n        }\n    }\n\n    selectNextTab(): void {\n        // find the currently selected index\n        const index = this.tabs$.value.indexOf(this.active$.value);\n\n        // check the tabs after the active one to see if there are any selectable tabs\n        const tabs = this.tabs$.value.slice(index + 1);\n\n        // check if any of the tabs are not disabled\n        for (let tab of tabs) {\n            if (!tab.disabled) {\n                return this.select(tab);\n            }\n        }\n\n        // if we reach here then no tab could be selected - select the first tab\n        this.selectFirstTab();\n    }\n\n    selectPreviousTab(): void {\n        // find the currently selected index\n        const index = this.tabs$.value.indexOf(this.active$.value);\n\n        // check the tabs before the active one to see if there are any selectable tabs\n        const tabs = this.tabs$.value.slice(0, index);\n\n        // check if any of the tabs are not disabled\n        for (let tab of tabs.reverse()) {\n            if (!tab.disabled) {\n                return this.select(tab);\n            }\n        }\n\n        // if we reach here then no previous tab could be selected - select the last tab\n        this.selectLastTab();\n    }\n\n    selectFirstTab(): void {\n        // find the index of the first non-disabled tab\n        const tabIndex = this.tabs$.value.findIndex(tab => !tab.disabled);\n\n        if (tabIndex !== -1) {\n            this.selectAtIndex(tabIndex);\n        }\n    }\n\n    selectLastTab(): void {\n        // find the index of the first non-disabled tab\n        const tabIndex = this.tabs$.value.slice().reverse().findIndex(tab => !tab.disabled);\n\n        if (tabIndex !== -1) {\n            this.selectAtIndex((this.tabs$.value.length - 1) - tabIndex);\n        }\n    }\n} ","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { TabComponent } from './tab/tab.component';\nimport { TabsetService } from './tabset.service';\n\n@Component({\n    selector: 'ux-tabset',\n    template: `<!-- Nav tabs -->\n<ul role=\"tablist\"\n    class=\"nav nav-tabs\"\n    [class.minimal-tab]=\"minimal\"\n    [attr.aria-label]=\"ariaLabel\"\n    [attr.aria-orientation]=\"stacked === 'none' ? 'horizontal' : 'vertical'\">\n\n\t<li role=\"presentation\" \n        class=\"nav-item\"\n        *ngFor=\"let tab of tabset.tabs$ | async; let index = index\"\n        [class.active]=\"tab.active$ | async\"\n        [class.disabled]=\"tab.disabled\"\n        [ngClass]=\"tab.customClass\">\n\n        <a class=\"nav-link\"\n            [id]=\"tab.id\"\n            role=\"tab\"\n            [uxTabFocus]=\"tab\"\n            [tabindex]=\"(tab.active$ | async) ? 0 : -1\"\n            [class.highlighted]=\"(tabset.focused$ | async) && (tabset.highlighted$ | async) === tab\"            \n            (mousedown)=\"tabset.select(tab)\"\n            (focus)=\"tabset.focused$.next(true)\"\n            (blur)=\"tabset.focused$.next(false)\"\n            (mousedown)=\"tabset.focused$.next(true)\"\n            (keydown.ArrowUp)=\"selectPreviousTab($event)\"\n            (keydown.ArrowLeft)=\"selectPreviousTab($event)\"\n            (keydown.ArrowRight)=\"selectNextTab($event)\"\n            (keydown.ArrowDown)=\"selectNextTab($event)\"\n            (keydown.Home)=\"tabset.selectFirstTab(); $event.preventDefault()\"\n            (keydown.End)=\"tabset.selectLastTab(); $event.preventDefault()\"\n            [attr.aria-controls]=\"tab.id\"\n            [attr.aria-selected]=\"tab.active$ | async\"\n            [attr.aria-disabled]=\"tab.disabled\">\n\n            <span *ngIf=\"!tab.headingRef\">{{ tab.heading }}</span>\n\n            <ng-container *ngIf=\"tab.headingRef\" [ngTemplateOutlet]=\"tab.headingRef\"></ng-container>\n        </a>\n\n\t</li>\n\n</ul>\n\n<!-- Tab panes -->\n<div class=\"tab-content\">\n\t<ng-content></ng-content>\n</div>`,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [TabsetService],\n    host: {\n        '[class.tabs-left]': 'stacked === \"left\"',\n        '[class.tabs-right]': 'stacked === \"right\"',\n    }\n})\nexport class TabsetComponent {\n\n    @Input() minimal: boolean = true;\n    @Input() stacked: 'left' | 'right' | 'none' = 'none';\n    @Input('aria-label') ariaLabel: string;\n\n    constructor(public tabset: TabsetService) { }\n\n    /**\n     * Allow manual tab selected\n     */\n    select(tab: TabComponent): void {\n        this.tabset.select(tab);\n    }\n\n    selectPreviousTab(event: KeyboardEvent): void {\n\n        // determine which arrow key is pressed\n        const arrowLeft = event.key === 'ArrowLeft' || event.keyCode === 37;\n        const arrowUp = event.key === 'ArrowUp' || event.keyCode === 38;\n\n        // only perform action if the arrow key matches the orientation\n        if (arrowLeft && this.stacked !== 'none' || arrowUp && this.stacked === 'none') {\n            return;\n        }\n\n        // perform selection\n        this.tabset.selectPreviousTab();\n\n        // prevent the browser from scrolling when arrow keys are pressed\n        event.preventDefault();\n    }\n\n    selectNextTab(event: KeyboardEvent): void {\n\n        // determine which arrow key is pressed\n        const arrowRight = event.key === 'ArrowRight' || event.keyCode === 39;\n        const arrowDown = event.key === 'ArrowDown' || event.keyCode === 40;\n\n        // only perform action if the arrow key matches the orientation\n        if (arrowRight && this.stacked !== 'none' || arrowDown && this.stacked === 'none') {\n            return;\n        }\n\n        // perform selection\n        this.tabset.selectNextTab();\n\n        // prevent the browser from scrolling when arrow keys are pressed\n        event.preventDefault();\n    }\n}","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnDestroy, Output, TemplateRef } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\nimport { map } from 'rxjs/operators';\nimport { TabsetService } from '../tabset.service';\n\nlet uniqueTabId = 0;\n\n@Component({\n    selector: 'ux-tab',\n    template: `<div role=\"tabpanel\"\n     class=\"tab-pane\"\n     [class.active]=\"active$ | async\"\n     [id]=\"id + '-panel'\"\n     [attr.aria-labelledby]=\"id\"\n     [attr.aria-hidden]=\"!(active$ | async)\">\n  <ng-content></ng-content>\n</div>`,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TabComponent implements OnDestroy {\n\n    @Input() id: string = `ux-tab-${++uniqueTabId}`;\n    @Input() disabled: boolean = false;\n    @Input() heading: string;\n    @Input() customClass: string;\n\n    @Output() select = new EventEmitter<void>();\n    @Output() deselect = new EventEmitter<void>();\n\n    @Input() set active(value: boolean) {\n        if (value) {\n            this._tabset.select(this);\n        }\n    }\n\n    headingRef: TemplateRef<any>;\n    active$: Observable<boolean> = this._tabset.active$.pipe(map(active => active === this));\n\n    private _subscription: Subscription;\n\n    constructor(private _tabset: TabsetService) {\n        _tabset.add(this);\n\n        this._subscription = this.active$.subscribe(active => active ? this.select.emit() : this.deselect.emit());\n    }\n\n    ngOnDestroy(): void {\n        this._tabset.remove(this);\n        this._subscription.unsubscribe();\n    }\n\n}","import { Directive, TemplateRef } from '@angular/core';\nimport { TabComponent } from './tab.component';\n\n@Directive({\n    selector: '[uxTabHeading]'\n})\nexport class TabHeadingDirective {\n\n    constructor(templateRef: TemplateRef<any>, tab: TabComponent) {\n        tab.headingRef = templateRef;\n    }\n\n}","import { Directive, ElementRef, Input, OnDestroy, OnInit } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { filter } from 'rxjs/operators';\nimport { TabsetService } from '../tabset.service';\nimport { TabComponent } from './tab.component';\n\n@Directive({\n    selector: '[uxTabFocus]'\n})\nexport class TabFocusDirective implements OnInit, OnDestroy {\n\n    @Input() uxTabFocus: TabComponent;\n\n    private _subscription: Subscription;\n\n    constructor(private _tabset: TabsetService, private _elementRef: ElementRef) { }\n\n    ngOnInit(): void {\n        this._subscription = this._tabset.highlighted$.pipe(\n            filter(() => this._tabset.focused$.value === true),\n            filter(() => this._tabset.highlighted$.value === this.uxTabFocus),\n        ).subscribe(() => this._elementRef.nativeElement.focus());\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TabsetComponent } from './tabset.component';\nimport { TabsetService } from './tabset.service';\nimport { TabComponent } from './tab/tab.component';\nimport { TabHeadingDirective } from './tab/tab-heading.directive';\nimport { TabFocusDirective } from './tab/tab-focus.directive';\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    exports: [TabsetComponent, TabComponent, TabHeadingDirective],\n    declarations: [TabsetComponent, TabComponent, TabHeadingDirective, TabFocusDirective],\n})\nexport class TabsetModule { }","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'ux-timeline',\r\n    template: `<div class=\"timeline\">\r\n    <ng-content></ng-content>\r\n</div>\r\n`\r\n})\r\nexport class TimelineComponent {\r\n}","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'ux-timeline-event',\r\n    template: `<div class=\"timeline-badge\" [ngClass]=\"badgeColor\">\r\n    <span>{{badgeTitle}}</span>\r\n</div>\r\n<div class=\"timeline-panel\">\r\n    <ng-content></ng-content>\r\n</div>\r\n`\r\n})\r\nexport class TimelineEventComponent {\r\n\r\n    @Input() badgeColor: string;\r\n    @Input() badgeTitle: string;\r\n}","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TimelineComponent } from './timeline.component';\r\nimport { TimelineEventComponent } from './timeline-event/timeline-event.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule\r\n    ],\r\n    exports: [\r\n        TimelineComponent,\r\n        TimelineEventComponent\r\n    ],\r\n    declarations: [\r\n        TimelineComponent,\r\n        TimelineEventComponent\r\n    ]\r\n})\r\nexport class TimelineModule { }\r\n","import { Component, EventEmitter, forwardRef, Input, Output } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nconst TOGGLESWITCH_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => ToggleSwitchComponent),\n    multi: true\n};\n\nlet uniqueToggleSwitchId = 0;\n\n@Component({\n    selector: 'ux-toggleswitch',\n    template: `<label [attr.for]=\"inputId\"\n       class=\"ux-toggleswitch\"\n       [class.ux-toggleswitch-checked]=\"value\"\n       [class.ux-toggleswitch-disabled]=\"disabled\"\n       [class.ux-toggleswitch-focused]=\"focused\">\n\n    <input class=\"ux-toggleswitch-input\"\n           type=\"checkbox\"\n           role=\"switch\"\n           [id]=\"inputId\"\n           [checked]=\"value\"\n           [disabled]=\"disabled\"\n           [attr.name]=\"name\"\n           [tabindex]=\"tabindex\"\n           [attr.aria-label]=\"ariaLabel\"\n           [attr.aria-labelledby]=\"ariaLabelledby\"\n           [attr.aria-checked]=\"value\"\n           (focus)=\"focused = true\"\n           (blur)=\"focused = false\"\n           (change)=\"toggle()\"\n           (click)=\"$event.stopPropagation()\">\n\n    <div class=\"ux-toggleswitch-container\">\n        <div class=\"ux-toggleswitch-bg\"></div>\n        <div class=\"ux-toggleswitch-nub\"></div>\n    </div>\n\n    <span class=\"ux-toggleswitch-label\">\n        <ng-content></ng-content>\n    </span>\n</label>`,\n    providers: [TOGGLESWITCH_VALUE_ACCESSOR]\n})\nexport class ToggleSwitchComponent implements ControlValueAccessor {\n\n    private _toggleSwitchId: string = `ux-toggleswitch-${++uniqueToggleSwitchId}`;\n\n    @Input() id: string = this._toggleSwitchId;\n    @Input() name: string | null;\n    @Input() tabindex: number = 0;\n    @Input() clickable: boolean = true;\n    @Input() disabled: boolean = false;\n    @Input('aria-label') ariaLabel: string = '';\n    @Input('aria-labelledby') ariaLabelledby: string = null;\n\n    @Output() valueChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    @Input()\n    get value() {\n        return this._value;\n    }\n\n    set value(value: boolean) {\n        this._value = value;\n\n        // Update value output\n        this.valueChange.emit(value);\n\n        // Notify ngModel\n        this.onChangeCallback(value);\n        this.onTouchedCallback();\n    }\n\n    get inputId(): string {\n        return `${this.id || this._toggleSwitchId}-input`;\n    }\n\n    private _value: boolean = false;\n\n    focused: boolean = false;\n    onTouchedCallback: () => void = () => { };\n    onChangeCallback: (_: any) => void = () => { };\n\n    toggle(): void {\n        if (!this.disabled && this.clickable) {\n            this.value = !this.value;\n        }\n    }\n\n    writeValue(value: boolean): void {\n        this.value = !!value;\n    }\n\n    registerOnChange(fn: any): void {\n        this.onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this.onTouchedCallback = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { ToggleSwitchComponent } from './toggleswitch.component';\n\n@NgModule({\n    imports: [ FormsModule ],\n    exports: [ ToggleSwitchComponent ],\n    declarations: [ ToggleSwitchComponent ]\n})\nexport class ToggleSwitchModule { }\n","import { Directive, HostListener, Output, EventEmitter, ElementRef } from '@angular/core';\n\n@Directive({\n    selector: '[uxToolbarSearchButton]'\n})\nexport class ToolbarSearchButtonDirective {\n\n    @Output()\n    clicked = new EventEmitter<void>();\n\n    get width(): number {\n        return this._elementRef.nativeElement.offsetWidth;\n    }\n\n    constructor(private _elementRef: ElementRef) { }\n\n    @HostListener('click')\n    clickHandler() {\n        this.clicked.emit();\n    }\n}\n","import { Directive, ElementRef, EventEmitter, HostListener, Optional, Output } from '@angular/core';\nimport { NgModel } from '@angular/forms';\n\nconst KEYS = {\n    ENTER: 13,\n    ESCAPE: 27\n};\n\n@Directive({\n    selector: '[uxToolbarSearchField]'\n})\nexport class ToolbarSearchFieldDirective {\n\n    @Output()\n    cancel = new EventEmitter<void>();\n\n    @Output()\n    submit = new EventEmitter<string>();\n\n    get text(): string {\n        // Use ngModel if specified on the host; otherwise read the DOM\n        if (this._ngModel) {\n            return this._ngModel.value;\n        }\n\n        return this._elementRef.nativeElement.value;\n    }\n\n    constructor(\n        private _elementRef: ElementRef,\n        @Optional() private _ngModel: NgModel) { }\n\n    focus() {\n        setTimeout(() => {\n            this._elementRef.nativeElement.focus();\n        });\n    }\n\n    blur() {\n        setTimeout(() => {\n            this._elementRef.nativeElement.blur();\n        });\n    }\n\n    clear() {\n        // Use ngModel if specified on the host; otherwise use the DOM\n        if (this._ngModel) {\n            this._ngModel.reset();\n        } else {\n            this._elementRef.nativeElement.value = '';\n        }\n    }\n\n    @HostListener('keydown', ['$event'])\n    keydownHandler(event: KeyboardEvent) {\n        setTimeout(() => {\n            if (event.keyCode === KEYS.ENTER) {\n                this.submit.emit(this.text);\n            } else if (event.keyCode === KEYS.ESCAPE) {\n                this._elementRef.nativeElement.blur();\n                this.cancel.emit();\n            }\n        });\n    }\n}\n","import { animate, AnimationEvent, state, style, transition, trigger } from '@angular/animations';\nimport { DOCUMENT } from '@angular/common';\nimport { AfterContentInit, Component, ContentChild, ElementRef, EventEmitter, HostBinding, HostListener, Inject, Input, Output } from '@angular/core';\nimport { ColorService } from '../../services/color/color.service';\nimport { ToolbarSearchButtonDirective } from './toolbar-search-button.directive';\nimport { ToolbarSearchFieldDirective } from './toolbar-search-field.directive';\n\n\n@Component({\n    selector: 'ux-toolbar-search',\n    template: `<ng-content></ng-content>`,\n    animations: [\n        trigger('expanded', [\n            state(\n                'collapsed',\n                style({\n                    width: '{{initialWidth}}'\n                }),\n                {\n                    params: { initialWidth: '30px' }\n                }\n            ),\n            state(\n                'expanded',\n                style({\n                    width: '100%'\n                })\n            ),\n            transition('collapsed <=> expanded', [animate('0.3s ease-out')])\n        ])\n    ]\n})\nexport class ToolbarSearchComponent implements AfterContentInit {\n\n    @HostBinding('class.expanded')\n    @Input()\n    get expanded(): boolean {\n        return this._expanded;\n    }\n\n    set expanded(value: boolean) {\n        this._expanded = value;\n\n        this.expandedChange.emit(value);\n\n        if (value) {\n            // Set focus on the input when expanded\n            this.field.focus();\n        } else {\n            // Clear text when contracted\n            this.field.clear();\n\n            // Remove focus (works around an IE issue where the caret remains visible)\n            this.field.blur();\n        }\n    }\n\n    @Input()\n    @HostBinding('class')\n    direction: 'left' | 'right' = 'right';\n\n    @Input()\n    @HostBinding('class.inverse')\n    inverse = false;\n\n    @Input()\n    set background(value: string) {\n        this.backgroundColor = this._colorService.resolve(value) || 'transparent';\n    }\n\n    @Output()\n    expandedChange = new EventEmitter<boolean>();\n\n    @Output()\n    search = new EventEmitter<string>();\n\n    private _expanded: boolean = false;\n\n    @HostBinding('@expanded')\n    get expandedAnimation(): any {\n        return {\n            value: this.expanded ? 'expanded' : 'collapsed',\n            params: {\n                initialWidth: this.button.width + 'px'\n            }\n        };\n    }\n\n    @HostBinding('style.position') position = 'relative';\n    @HostBinding('style.background-color') backgroundColor = 'transparent';\n    @ContentChild(ToolbarSearchFieldDirective) field: ToolbarSearchFieldDirective;\n    @ContentChild(ToolbarSearchButtonDirective) button: ToolbarSearchButtonDirective;\n\n    private _placeholder: HTMLElement;\n\n    constructor(\n        private _elementRef: ElementRef,\n        private _colorService: ColorService,\n        @Inject(DOCUMENT) private _document: any) {\n    }\n\n    ngAfterContentInit() {\n        // Subscribe to the submit event on the input field, triggering the search event\n        this.field.submit.subscribe((text: string) => this.search.emit(text));\n\n        // Subscribe to cancel events coming from the input field\n        this.field.cancel.subscribe(() => this.expanded = false);\n\n        // Subscribe to the button click event\n        this.button.clicked.subscribe(() => {\n            if (this.expanded && this.field.text) {\n                this.search.emit(this.field.text);\n            } else {\n                this.expanded = !this.expanded;\n            }\n        });\n\n        // Create placeholder element to avoid changing layout when switching to position: absolute\n        this.createPlaceholder();\n    }\n\n    @HostListener('@expanded.start', ['$event'])\n    animationStart(event: AnimationEvent) {\n        if (event.toState === 'expanded') {\n            this.position = 'absolute';\n            this.enablePlaceholder(true);\n        }\n    }\n\n    @HostListener('@expanded.done', ['$event'])\n    animationDone(event: AnimationEvent) {\n        if (event.toState === 'collapsed') {\n            this.position = 'relative';\n            this.enablePlaceholder(false);\n        }\n    }\n\n    private createPlaceholder() {\n        // Get width and height of the component\n        const styles = getComputedStyle(this._elementRef.nativeElement);\n\n        // Create invisible div with the same dimensions\n        this._placeholder = this._document.createElement('div');\n        this._placeholder.style.display = 'none';\n        this._placeholder.style.width = this.button.width + 'px';\n        this._placeholder.style.height = styles.height;\n        this._placeholder.style.visibility = 'hidden';\n\n        // Add as a sibling\n        this._elementRef.nativeElement.parentNode.insertBefore(this._placeholder, this._elementRef.nativeElement);\n    }\n\n    private enablePlaceholder(enabled: boolean) {\n        this._placeholder.style.display = (enabled ? 'inline-block' : 'none');\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ToolbarSearchComponent } from './toolbar-search.component';\nimport { ToolbarSearchFieldDirective } from './toolbar-search-field.directive';\nimport { ToolbarSearchButtonDirective } from './toolbar-search-button.directive';\n\nconst DECLARATIONS = [\n    ToolbarSearchComponent,\n    ToolbarSearchFieldDirective,\n    ToolbarSearchButtonDirective\n];\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS,\n    providers: [],\n})\nexport class ToolbarSearchModule { }\n","import { Injectable } from '@angular/core';\nimport { Http, ResponseContentType } from '@angular/http';\nimport { Observable } from 'rxjs/Observable';\nimport { of } from 'rxjs/observable/of';\nimport { Observer } from 'rxjs/Observer';\n\n@Injectable()\nexport class AudioService {\n\n    private _audioBuffer: AudioBuffer;\n    private _audioBufferSource: AudioBufferSourceNode;\n    private _audioContext: AudioContext;\n    private _gainNode: GainNode;\n    private _analyserNode: AnalyserNode;\n\n    constructor(private _http: Http) { }\n\n    getAudioFileMetadata(mediaElement: HTMLMediaElement): Observable<AudioMetadata> {\n        return Observable.create((observer: Observer<AudioMetadata>) => {\n            this._http.request(mediaElement.src, { responseType: ResponseContentType.Blob }).subscribe(response => {\n\n                const filename = mediaElement.src.substring(mediaElement.src.lastIndexOf('/') + 1);\n                const extension = mediaElement.src.substring(mediaElement.src.lastIndexOf('.') + 1).toLowerCase();\n                const blob = response.blob();\n                let description;\n\n                switch (extension) {\n                    case 'mp3':\n                        description = 'MPEG audio layer 3 file';\n                        break;\n\n                    case 'wma':\n                        description = 'Windows media audio file';\n                        break;\n\n                    case 'wav':\n                        description = 'WAVE audio file';\n                        break;\n\n                    case 'ogg':\n                        description = 'Ogg Vorbis file';\n                        break;\n\n                    case 'aac':\n                        description = 'Advanced audio coding file';\n                        break;\n\n                    case 'midi':\n                        description = 'Musical instrument digital interface file';\n                        break;\n\n                    default:\n                        description = 'Audio file';\n                        break;\n                }\n\n                observer.next({\n                    filename: filename,\n                    extension: extension,\n                    description: description,\n                    size: blob.size\n                });\n            });\n        });\n    }\n\n    getWaveformFromUrl(url: string): Observable<Float32Array[]> {\n\n        // if audio context is not support return a stream of empty data\n        if (!(<any>window).AudioContext) {\n            return of<Float32Array[]>([new Float32Array(0)]);\n        }\n\n        this._audioContext = new AudioContext();\n        this.createVolumeNode();\n        this.createAnalyserNode();\n\n        return Observable.create((observer: Observer<Float32Array[]>) => {\n\n            // load the media from the URL provided\n            this._http.request(url, { responseType: ResponseContentType.ArrayBuffer }).subscribe(response => {\n                this.getAudioBuffer(response.arrayBuffer()).subscribe(audioBuffer => {\n\n                    // create the buffer source\n                    this.createBufferSource(audioBuffer);\n\n                    let dataPoints: Float32Array[] = [];\n                    const channels = this._audioBuffer.numberOfChannels;\n\n                    // extract the data from each channel\n                    for (let channelIdx = 0; channelIdx < channels; channelIdx++) {\n                        dataPoints[channelIdx] = this._audioBuffer.getChannelData(channelIdx);\n                    }\n\n                    observer.next(dataPoints);\n                    observer.complete();\n\n                    // cleanup after ourselves\n                    dataPoints = null;\n                }, (error) => observer.error(error));\n            }, (error) => observer.error(error));\n        });\n    }\n\n    getWaveformPoints(channels: Float32Array[] = [], skip: number = 1000): WaveformPoint[] {\n\n        const waveform: WaveformPoint[] = [];\n        const duration = channels.length > 0 ? channels[0].length : 0;\n\n        // convert each channel data to a series of waveform points\n        for (let idx = 0; idx < duration; idx += skip) {\n\n            // get all the channel data for a specific point\n            const points = channels.map(channel => channel[idx]);\n\n            // find the minimum point and maximum points at each position across all channels\n            waveform.push({\n                min: points.reduce((previous, current) => current < previous ? current : previous),\n                max: points.reduce((previous, current) => current > previous ? current : previous)\n            });\n        }\n\n        return waveform;\n    }\n\n    private getAudioBuffer(arrayBuffer: ArrayBuffer): Observable<AudioBuffer> {\n        return Observable.create((observer: Observer<AudioBuffer>) => {\n            this.getOfflineAudioContext().decodeAudioData(arrayBuffer, (audioBuffer: AudioBuffer) => {\n                observer.next(audioBuffer);\n                observer.complete();\n            }, (error) => observer.error(error));\n        });\n    }\n\n    private getOfflineAudioContext(): OfflineAudioContext {\n        return new OfflineAudioContext(1, 2, this._audioContext.sampleRate || 44100);\n    }\n\n    private createBufferSource(audioBuffer: AudioBuffer): void {\n        this.disconnectSource();\n\n        this._audioBuffer = audioBuffer;\n        this._audioBufferSource = this._audioContext.createBufferSource();\n        this._audioBufferSource.buffer = this._audioBuffer;\n        this._audioBufferSource.connect(this._analyserNode);\n    }\n\n    private createVolumeNode(): void {\n        this._gainNode = this._audioContext.createGain();\n        this._gainNode.connect(this._audioContext.destination);\n    }\n\n    private createAnalyserNode(): void {\n        this._analyserNode = this._audioContext.createAnalyser();\n        this._analyserNode.connect(this._gainNode);\n    }\n\n    private disconnectSource(): void {\n        if (this._audioBufferSource) {\n            this._audioBufferSource.disconnect();\n        }\n    }\n}\n\nexport interface WaveformPoint {\n    min: number;\n    max: number;\n}\n\nexport interface AudioMetadata {\n    filename: string;\n    extension: string;\n    description: string;\n    size: number;\n}","import { NgModule } from '@angular/core';\nimport { HttpModule } from '@angular/http';\nimport { AudioService } from './audio.service';\n\n@NgModule({\n    imports: [ HttpModule ],\n    providers: [AudioService]\n})\nexport class AudioServiceModule { }\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { concat } from 'rxjs/observable/concat';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { Observer } from 'rxjs/Observer';\n\n@Injectable()\nexport class FrameExtractionService {\n\n    private createVideoPlayer(source: string): HTMLVideoElement {\n        let videoPlayer = document.createElement('video');\n        videoPlayer.preload = 'auto';\n        videoPlayer.src = source;\n        return videoPlayer;\n    }\n\n    private createCanvas(width: number, height: number): HTMLCanvasElement {\n        let canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        return canvas;\n    }\n\n    private goToFrame(videoPlayer: HTMLVideoElement, time: number): Observable<number> {\n        videoPlayer.currentTime = time;\n        return fromEvent(videoPlayer, time === 0 ? 'loadeddata' : 'seeked');\n    }\n\n    private getThumbnail(videoPlayer: HTMLVideoElement, canvas: HTMLCanvasElement, time: number, width: number = 160, height: number = 90): Observable<ExtractedFrame> {\n\n        return Observable.create((observer: Observer<ExtractedFrame>) => {\n\n            // go to specified frame\n            let subscription = this.goToFrame(videoPlayer, time).subscribe((event: any) => {\n                // create image from current frame\n                canvas.getContext('2d').drawImage(videoPlayer, 0, 0, width, height);\n                observer.next({ image: canvas.toDataURL(), width: width, height: height, time: time });\n                observer.complete();\n                subscription.unsubscribe();\n            });\n        });\n    }\n\n    getFrameThumbnail(source: string, width: number, height: number, time: number): Observable<ExtractedFrame> {\n\n        // create required elements\n        let videoPlayer = this.createVideoPlayer(source);\n        let canvas = this.createCanvas(width, height);\n\n        let frameSubscription = this.getThumbnail(videoPlayer, canvas, time, width, height);\n\n        // ensure we release memory after we are finished\n        frameSubscription.subscribe(null, null, () => {\n            videoPlayer = null;\n            canvas = null;\n        });\n\n        return frameSubscription;\n    }\n\n    getFrameThumbnails(source: string, width: number, height: number, start: number, end: number, skip: number = 5): Observable<ExtractedFrame> {\n\n        // create required elements\n        let videoPlayer = this.createVideoPlayer(source);\n        let canvas = this.createCanvas(width, height);\n\n        return Observable.create((observer: Observer<ExtractedFrame>) => {\n\n            fromEvent(videoPlayer, 'loadedmetadata').subscribe(() => {\n\n                // calculate the frames required\n                let frames = [];\n\n                for (let idx = start; idx < end; idx += skip) {\n                    frames.push(this.getThumbnail(videoPlayer, canvas, idx, width, height));\n                }\n\n                concat(...frames).subscribe((frame: ExtractedFrame) => observer.next(frame), null, () => {\n                    videoPlayer = null;\n                    canvas = null;\n                    observer.complete();\n                });\n            });\n\n        });\n    }\n\n}\n\nexport interface ExtractedFrame {\n    image: string;\n    width: number;\n    height: number;\n    time: number;\n}","import { NgModule } from '@angular/core';\n\nimport { FrameExtractionService } from './frame-extraction.service';\n\n@NgModule({\n    providers: [FrameExtractionService],\n})\nexport class FrameExtractionModule { }\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { from } from 'rxjs/observable/from';\nimport { Observer } from 'rxjs/Observer';\nimport { Subject } from 'rxjs/Subject';\nimport { ExtractedFrame, FrameExtractionService } from '../../services/frame-extraction/index';\nimport { MediaPlayerType } from './media-player.component';\n\n@Injectable()\nexport class MediaPlayerService {\n\n    source: string;\n    type: MediaPlayerType = 'video';\n    loaded: boolean = false;\n\n    /*\n        Create observables for media player events\n    */\n    playing: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n    initEvent: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n    abortEvent: Subject<void> = new Subject<void>();\n    canPlayEvent: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n    canPlayThroughEvent: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n    durationChangeEvent: Subject<number> = new Subject<number>();\n    endedEvent: Subject<void> = new Subject<void>();\n    errorEvent: Subject<any> = new Subject<any>();\n    loadedDataEvent: Subject<any> = new Subject<any>();\n    loadedMetadataEvent: Subject<any> = new Subject<any>();\n    loadStartEvent: Subject<void> = new Subject<void>();\n    pauseEvent: Subject<void> = new Subject<void>();\n    playEvent: Subject<void> = new Subject<void>();\n    playingEvent: Subject<boolean> = new Subject<boolean>();\n    rateChangeEvent: Subject<number> = new Subject<number>();\n    seekedEvent: Subject<number> = new Subject<number>();\n    seekingEvent: Subject<number> = new Subject<number>();\n    stalledEvent: Subject<void> = new Subject<void>();\n    suspendEvent: Subject<void> = new Subject<void>();\n    timeUpdateEvent: Subject<number> = new Subject<number>();\n    volumeChangeEvent: Subject<number> = new Subject<number>();\n    waitingEvent: Subject<void> = new Subject<void>();\n    mediaClickEvent: Subject<MouseEvent> = new Subject<MouseEvent>();\n    fullscreenEvent: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n    quietModeEvent: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n    progressEvent: Observable<TimeRanges> = Observable.create((observer: Observer<TimeRanges>) => {\n\n        // repeat until the whole video has fully loaded\n        let interval = setInterval(() => {\n\n            let buffered = this._mediaPlayer.buffered as TimeRanges;\n            observer.next(buffered);\n\n            if (buffered.length === 1 && buffered.start(0) === 0 && buffered.end(0) === this.duration) {\n                observer.complete();\n                clearInterval(interval);\n            }\n        }, 1000);\n    });\n\n    private _mediaPlayer: HTMLMediaElement;\n    private _hostElement: HTMLElement;\n    private _fullscreen: boolean = false;\n    private _quietMode: boolean;\n\n    constructor(private _frameExtractionService: FrameExtractionService) {}\n\n    /*\n        Create all the getters and setters the can be used by media player extensions\n    */\n    get mediaPlayer(): HTMLMediaElement {\n        return this._mediaPlayer;\n    }\n\n    get quietMode(): boolean {\n        return this._quietMode;\n    }\n\n    set quietMode(value: boolean) {\n\n        // quiet mode cannot be enabled on audio player\n        if (this.type === 'audio') {\n            value = false;\n        }\n\n        this._quietMode = value;\n        this.quietModeEvent.next(value);\n    }\n\n    get mediaPlayerWidth(): number {\n        return this._mediaPlayer ? this._mediaPlayer.offsetWidth : 0;\n    }\n\n    get mediaPlayerHeight(): number {\n        return this._mediaPlayer ? this._mediaPlayer.offsetHeight : 0;\n    }\n\n    get audioTracks(): AudioTrackList {\n        return this._mediaPlayer ? this._mediaPlayer.audioTracks : null;\n    }\n\n    get autoplay(): boolean {\n        return this._mediaPlayer ? this._mediaPlayer.autoplay : false;\n    }\n    set autoplay(value: boolean) {\n        this._mediaPlayer.autoplay = value;\n    }\n\n    get buffered(): TimeRanges {\n        return this._mediaPlayer ? this._mediaPlayer.buffered : new TimeRanges();\n    }\n\n    get crossOrigin(): string {\n        return this._mediaPlayer ? this._mediaPlayer.crossOrigin : null;\n    }\n    set crossOrigin(value: string) {\n        this._mediaPlayer.crossOrigin = value;\n    }\n\n    get currentSrc(): string {\n        return this._mediaPlayer ? this._mediaPlayer.currentSrc : null;\n    }\n\n    get currentTime(): number {\n        return this._mediaPlayer ? this._mediaPlayer.currentTime : 0;\n    }\n    set currentTime(value: number) {\n        this._mediaPlayer.currentTime = value;\n    }\n\n    get defaultMuted(): boolean {\n        return this._mediaPlayer ? this._mediaPlayer.defaultMuted : false;\n    }\n    set defaultMuted(value: boolean) {\n        this._mediaPlayer.defaultMuted = value;\n    }\n\n    get defaultPlaybackRate(): number {\n        return this._mediaPlayer ? this._mediaPlayer.defaultPlaybackRate : 1;\n    }\n    set defaultPlaybackRate(value: number) {\n        this._mediaPlayer.defaultPlaybackRate = value;\n    }\n\n    get duration(): number {\n        return this._mediaPlayer ? this._mediaPlayer.duration : 0;\n    }\n\n    get ended(): boolean {\n        return this._mediaPlayer ? this._mediaPlayer.ended : false;\n    }\n\n    get loop(): boolean {\n        return this._mediaPlayer ? this._mediaPlayer.loop : false;\n    }\n    set loop(value: boolean) {\n        this._mediaPlayer.loop = value;\n    }\n\n    get muted(): boolean {\n        return this._mediaPlayer ? this._mediaPlayer.muted : false;\n    }\n    set muted(value: boolean) {\n        this._mediaPlayer.muted = value;\n    }\n\n    get networkState(): number {\n        return this._mediaPlayer.networkState;\n    }\n\n    get paused(): boolean {\n        return this._mediaPlayer ? this._mediaPlayer.paused : true;\n    }\n\n    get playbackRate(): number {\n        return this._mediaPlayer ? this._mediaPlayer.playbackRate : 1;\n    }\n    set playbackRate(value: number) {\n        this._mediaPlayer.playbackRate = value;\n    }\n\n    get played(): TimeRanges {\n        return this._mediaPlayer ? this._mediaPlayer.played : new TimeRanges();\n    }\n\n    get preload(): string {\n        return this._mediaPlayer ? this._mediaPlayer.preload : 'auto';\n    }\n    set preload(value: string) {\n        this._mediaPlayer.preload = value;\n    }\n\n    get readyState(): number {\n        return this._mediaPlayer ? this._mediaPlayer.readyState : 0;\n    }\n\n    get seekable(): TimeRanges {\n        return this._mediaPlayer ? this._mediaPlayer.seekable : new TimeRanges();\n    }\n\n    get seeking(): boolean {\n        return this._mediaPlayer ? this._mediaPlayer.seeking : false;\n    }\n\n    get src(): string {\n        return this._mediaPlayer ? this._mediaPlayer.src : '';\n    }\n    set src(value: string) {\n        this._mediaPlayer.src = value;\n    }\n\n    get textTracks(): TextTrackList {\n        return this._mediaPlayer ? this._mediaPlayer.textTracks : new TextTrackList();\n    }\n\n    get videoTracks(): VideoTrackList {\n        return this._mediaPlayer ? this._mediaPlayer.videoTracks : new VideoTrackList();\n    }\n\n    get volume(): number {\n        return this._mediaPlayer ? this._mediaPlayer.volume : 1;\n    }\n    set volume(value: number) {\n        this._mediaPlayer.volume = value;\n    }\n\n    get fullscreen(): boolean {\n        return this._mediaPlayer ? this._fullscreen : false;\n    }\n    set fullscreen(value: boolean) {\n        this._fullscreen = value;\n        this.fullscreenEvent.next(value);\n    }\n\n    setMediaPlayer(hostElement: HTMLElement, mediaPlayer: HTMLMediaElement): void {\n        this._hostElement = hostElement;\n        this._mediaPlayer = mediaPlayer;\n\n        this.initEvent.next(true);\n    }\n\n    /**\n     * Toggle playing state\n     */\n    togglePlay(): void {\n\n        // prevent any action is not loaded\n        if (this.loaded === false) {\n            return;\n        }\n\n        if (this.paused) {\n            this.play();\n        } else {\n            this.pause();\n        }\n    }\n\n    /**\n     * Starts playing the audio/video\n     */\n    play(): void {\n        this._mediaPlayer.play();\n    }\n\n    /**\n     * Pauses the currently playing audio/video\n     */\n    pause(): void {\n        this._mediaPlayer.pause();\n    }\n\n    /**\n     * Re-loads the audio/video element\n     */\n    load(): void {\n        this._mediaPlayer.load();\n    }\n\n    /**\n     * Checks if the browser can play the specified audio/video type\n     */\n    canPlayType(type: string): string {\n        return this._mediaPlayer.canPlayType(type);\n    }\n\n    /**\n     * Adds a new text track to the audio/video\n     */\n    addTextTrack(kind: string, label: string, language: string): TextTrack {\n        return this._mediaPlayer.addTextTrack(kind, label, language);\n    }\n\n    /**\n     * Attempt to display media in fullscreen mode\n     */\n    requestFullscreen(): void {\n\n        if (this._hostElement.requestFullscreen) {\n            this._hostElement.requestFullscreen();\n        } else if (this._hostElement.webkitRequestFullscreen) {\n            this._hostElement.webkitRequestFullscreen();\n        } else if ((<any>this._hostElement).msRequestFullscreen) {\n            (<any>this._hostElement).msRequestFullscreen();\n        } else if ((<any>this._hostElement).mozRequestFullScreen) {\n            (<any>this._hostElement).mozRequestFullScreen();\n        }\n    }\n\n    /**\n     * Exit full screen mode\n     */\n    exitFullscreen(): void {\n\n        if ((<any>this._hostElement).exitFullscreen) {\n            document.exitFullscreen();\n        } else if (document.webkitExitFullscreen) {\n            document.webkitExitFullscreen();\n        } else if ((<any>document).msExitFullscreen) {\n            (<any>document).msExitFullscreen();\n        } else if ((<any>document).mozCancelFullScreen) {\n            (<any>document).mozCancelFullScreen();\n        }\n    }\n\n    fullscreenChange(event: Event) {\n        this.fullscreen = (<any>document).fullscreen || document.webkitIsFullScreen || (<any>document).mozFullScreen || (<any>document).msFullscreenElement !== null && (<any>document).msFullscreenElement !== undefined;\n        this.fullscreenEvent.next(this.fullscreen);\n    }\n\n    /**\n     * Toggle Fullscreen State\n     */\n    toggleFullscreen(): void {\n        if (this.fullscreen) {\n            this.exitFullscreen();\n        } else {\n            this.requestFullscreen();\n        }\n    }\n\n    /**\n     * Extract the frames from the video\n     */\n    getFrames(width: number, height: number, skip: number): Observable<ExtractedFrame> {\n\n        if (this.type === 'video') {\n            return this._frameExtractionService.getFrameThumbnails(this.source, width, height, 0, this.duration, 10);\n        }\n\n        return from([]);\n    }\n}","import { AfterViewInit, Component, ElementRef, Input, OnDestroy, ViewChild } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { of } from 'rxjs/observable/of';\nimport { debounceTime, switchMap, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { AudioMetadata, AudioService } from '../../services/audio/index';\nimport { MediaPlayerService } from './media-player.service';\n\n@Component({\n    selector: 'ux-media-player',\n    template: `<div class=\"video-player-container\" *ngIf=\"type === 'video'\">\n\n    <video class=\"video-player\"\n        #player\n        [src]=\"source\"\n        (abort)=\"mediaPlayerService.abortEvent.next()\"\n        (canplay)=\"mediaPlayerService.canPlayEvent.next(true)\"\n        (canplaythrough)=\"mediaPlayerService.canPlayThroughEvent.next(true)\"\n        (durationchange)=\"mediaPlayerService.durationChangeEvent.next(player.duration)\"\n        (ended)=\"mediaPlayerService.endedEvent.next()\"\n        (error)=\"mediaPlayerService.errorEvent.next($event)\"\n        (loadeddata)=\"mediaPlayerService.loadedDataEvent.next($event)\"\n        (loadedmetadata)=\"mediaPlayerService.loadedMetadataEvent.next($event)\"\n        (loadstart)=\"mediaPlayerService.loadStartEvent.next()\"\n        (pause)=\"mediaPlayerService.pauseEvent.next()\"\n        (play)=\"mediaPlayerService.playEvent.next()\"\n        (playing)=\"mediaPlayerService.playingEvent.next(!player.paused)\"\n        (ratechange)=\"mediaPlayerService.rateChangeEvent.next(player.playbackRate)\"\n        (seeked)=\"mediaPlayerService.seekedEvent.next(player.currentTime)\"\n        (seeking)=\"mediaPlayerService.seekingEvent.next(player.currentTime)\"\n        (stalled)=\"mediaPlayerService.stalledEvent.next()\"\n        (suspend)=\"mediaPlayerService.suspendEvent.next()\"\n        (timeupdate)=\"mediaPlayerService.timeUpdateEvent.next(player.currentTime)\"\n        (volumechange)=\"mediaPlayerService.volumeChangeEvent.next(player.volume)\"\n        (waiting)=\"mediaPlayerService.waitingEvent.next()\"\n        (click)=\"mediaPlayerService.mediaClickEvent.next($event)\">\n    </video>\n\n    <div class=\"video-overlay\" [class.playing]=\"mediaPlayerService.playing | async\">\n        <svg class=\"play-graphic\" x=\"0px\" y=\"0px\" viewBox=\"0 0 64 64\">\n            <circle class=\"play-circle\" cx=\"32.2\" cy=\"31.8\" r=\"31.8\" />\n            <polygon class=\"play-triangle\" points=\"23,14.1 23,50.8 48.3,32.5\" />\n        </svg>\n    </div>\n\n</div>\n\n\n<div class=\"audio-player\" *ngIf=\"type === 'audio'\">\n\n    <svg width=\"24px\" height=\"24px\" viewBox=\"0 0 24 24\">\n        <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n            <g transform=\"translate(-98.000000, -458.000000)\">\n                <g transform=\"translate(98.000000, 458.000000)\">\n                    <path d=\"M4.5,0.5 L18.0435308,0.5 L23.5,6.22251502 L23.5,23.5 L4.5,23.5 L4.5,0.5 Z\" fill=\"#CCEAE2\"></path>\n                    <path d=\"M4.5,8 L4.5,0.5 L18,0.5 L23.5,6 L23.5,23.5 L18,23.5\" stroke=\"#60798D\" fill=\"#CCEAE2\"></path>\n                    <path d=\"M4,13.5 L0.5,13.5 L0.5,18.5 L4,18.5 L9.5,22.5 L9.5,9.5 L4,13.5 Z\" stroke=\"#60798D\" fill=\"#85D2BE\"></path>\n                    <path d=\"M11.5,12.5137939 C13.7576225,12.5137939 14.5,14.3709236 14.5,16 C14.5,17.6849236 13.7089152,19.5420532 11.5,19.5420532\"\n                        stroke=\"#60798D\"></path>\n                    <path d=\"M11.5,9 C15.8037643,9.04168701 18.5,11.6604805 18.5,16 C18.5,20.3395195 15.8804302,23.0079956 11.5,23\" stroke=\"#60798D\"></path>\n                    <path d=\"M17.5219116,0.761413574 L17.5219116,6 L23,6\" stroke=\"#60798D\" fill=\"#85D2BE\"></path>\n                </g>\n            </g>\n        </g>\n    </svg>\n\n    <p class=\"audio-file-name\">{{ (audioMetadata | async)?.filename }}</p>\n    <p class=\"audio-file-format\">{{ (audioMetadata | async)?.description }}</p>\n    <p class=\"audio-file-size\">{{ (audioMetadata | async)?.size | fileSize }}</p>\n\n    <audio #player\n        [src]=\"source\"\n        (abort)=\"mediaPlayerService.abortEvent.next()\"\n        (canplay)=\"mediaPlayerService.canPlayEvent.next(true)\"\n        (canplaythrough)=\"mediaPlayerService.canPlayThroughEvent.next(true)\"\n        (durationchange)=\"mediaPlayerService.durationChangeEvent.next(player.duration)\"\n        (ended)=\"mediaPlayerService.endedEvent.next()\"\n        (error)=\"mediaPlayerService.errorEvent.next($event)\"\n        (loadeddata)=\"mediaPlayerService.loadedDataEvent.next($event)\"\n        (loadedmetadata)=\"mediaPlayerService.loadedMetadataEvent.next($event)\"\n        (loadstart)=\"mediaPlayerService.loadStartEvent.next()\"\n        (pause)=\"mediaPlayerService.pauseEvent.next()\"\n        (play)=\"mediaPlayerService.playEvent.next()\"\n        (playing)=\"mediaPlayerService.playingEvent.next(!player.paused)\"\n        (ratechange)=\"mediaPlayerService.rateChangeEvent.next(player.playbackRate)\"\n        (seeked)=\"mediaPlayerService.seekedEvent.next(player.currentTime)\"\n        (seeking)=\"mediaPlayerService.seekingEvent.next(player.currentTime)\"\n        (stalled)=\"mediaPlayerService.stalledEvent.next()\"\n        (suspend)=\"mediaPlayerService.suspendEvent.next()\"\n        (timeupdate)=\"mediaPlayerService.timeUpdateEvent.next(player.currentTime)\"\n        (volumechange)=\"mediaPlayerService.volumeChangeEvent.next(player.volume)\"\n        (waiting)=\"mediaPlayerService.waitingEvent.next()\"\n        (click)=\"mediaPlayerService.mediaClickEvent.next($event)\">\n    </audio>\n</div>\n\n<div class=\"control-bar\">\n    <ux-media-player-timeline></ux-media-player-timeline>\n    <ux-media-player-controls></ux-media-player-controls>\n</div>`,\n    providers: [MediaPlayerService],\n    host: {\n        'tabindex': '0',\n        '(keydown.Space)': 'mediaPlayerService.togglePlay()',\n        '[class.standard]': '!mediaPlayerService.fullscreen',\n        '[class.fullscreen]': 'mediaPlayerService.fullscreen',\n        '[class.quiet]': 'quietMode && type === \"video\" || mediaPlayerService.fullscreen',\n        '[class.hover]': 'hovering',\n        '[class.video]': 'type === \"video\"',\n        '[class.audio]': 'type === \"audio\"',\n        '(mouseenter)': 'hovering = true',\n        '(mouseleave)': 'hovering = false',\n        '(document:webkitfullscreenchange)': 'mediaPlayerService.fullscreenChange($event)',\n        '(document:mozfullscreenchange)': 'mediaPlayerService.fullscreenChange($event)',\n        '(document:MSFullscreenChange)': 'mediaPlayerService.fullscreenChange($event)'\n    }\n})\nexport class MediaPlayerComponent implements AfterViewInit, OnDestroy {\n\n    @ViewChild('player') private _playerRef: ElementRef;\n\n    hovering: boolean = false;\n    audioMetadata: Observable<AudioMetadata>;\n\n    get source(): string {\n        return this.mediaPlayerService.source;\n    }\n\n    @Input()\n    set source(value: string) {\n        this.mediaPlayerService.source = value;\n    }\n\n    get type(): MediaPlayerType {\n        return this.mediaPlayerService.type;\n    }\n\n    @Input()\n    set type(value: MediaPlayerType) {\n        this.mediaPlayerService.type = value;\n    }\n\n    get quietMode(): boolean {\n        return this.mediaPlayerService.quietMode;\n    }\n\n    @Input()\n    set quietMode(value: boolean) {\n        this.mediaPlayerService.quietMode = value;\n    }\n\n    private _onDestroy = new Subject<void>();\n\n    constructor(public mediaPlayerService: MediaPlayerService, private _audioService: AudioService, private _elementRef: ElementRef) {\n\n        // show controls when hovering and in quiet mode\n        fromEvent(this._elementRef.nativeElement, 'mousemove').pipe(\n            switchMap((event: MouseEvent) => {\n                this.hovering = true;\n                return of(event);\n            }),\n            debounceTime(2000),\n            takeUntil(this._onDestroy)\n        ).subscribe(() => this.hovering = false);\n    }\n\n    ngAfterViewInit(): void {\n        this.mediaPlayerService.setMediaPlayer(this._elementRef.nativeElement, this._playerRef.nativeElement);\n\n        this.audioMetadata = this._audioService.getAudioFileMetadata(this._playerRef.nativeElement);\n        this.mediaPlayerService.playingEvent.pipe(takeUntil(this._onDestroy)).subscribe(() => this.mediaPlayerService.playing.next(true));\n        this.mediaPlayerService.pauseEvent.pipe(takeUntil(this._onDestroy)).subscribe(() => this.mediaPlayerService.playing.next(false));\n        this.mediaPlayerService.mediaClickEvent.pipe(takeUntil(this._onDestroy)).subscribe(() => this.mediaPlayerService.togglePlay());\n        this.mediaPlayerService.loadedMetadataEvent.pipe(takeUntil(this._onDestroy)).subscribe(() => this.mediaPlayerService.loaded = true);\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n}\n\nexport type MediaPlayerType = 'video' | 'audio';\n\nexport interface MediaPlayerBuffer {\n    start: number;\n    end: number;\n}","import { Directive } from '@angular/core';\nimport { MediaPlayerService } from '../media-player.service';\n\n@Directive({\n    selector: '[mediaPlayerBaseExtension]'\n})\nexport class MediaPlayerBaseExtensionDirective {\n    constructor(public mediaPlayerService: MediaPlayerService) { }\n}","import { AfterViewInit, Component, ElementRef, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { switchMap, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { MediaPlayerBaseExtensionDirective } from '../base-extension.directive';\n\n\n@Component({\n    selector: 'ux-media-player-timeline',\n    template: `<p class=\"current-time\">{{ current | duration }}</p>\n\n<div #timeline class=\"timeline-bar\" (mouseenter)=\"scrub.visible = true; pop.show()\" (mouseleave)=\"scrub.visible = false; pop.hide()\"\n    (mousemove)=\"updateScrub($event)\" (mouseup)=\"updateScrub($event)\" (mousedown)=\"mouseDown = true; $event.preventDefault()\">\n\n    <div class=\"buffered-bar\" *ngFor=\"let buffer of buffered\" [style.left.%]=\"buffer.start\" [style.width.%]=\"buffer.end - buffer.start\"></div>\n\n    <div class=\"media-progress-bar\" [style.width.%]=\"position\">\n        <div #progressThumb class=\"media-progress-bar-thumb\" (mouseenter)=\"scrub.visible = false; pop.hide(); $event.stopPropagation()\"\n            (mouseleave)=\"scrub.visible = true; pop.show(); $event.stopPropagation()\"></div>\n    </div>\n\n    <div class=\"scrub-handle\"\n         [class.scrub-handle-hidden]=\"!scrub.visible\"\n         [style.left.px]=\"scrub.position\"\n         [uxTooltip]=\"popTemplate\"\n         placement=\"top\"\n         [showTriggers]=\"[]\"\n         [hideTriggers]=\"[]\"\n         #pop=\"ux-tooltip\"\n         [tooltipDelay]=\"100\"\n         [tooltipDisabled]=\"duration === 0\"></div>\n</div>\n\n<p class=\"duration-time\">{{ duration | duration }}</p>\n\n<ng-template #popTemplate>\n    <span>{{ scrub.time | duration }}</span>\n</ng-template>`,\n    host: {\n        '(document:mouseup)': 'mouseDown = false',\n        '[class.quiet]': 'quietMode || fullscreen'\n    }\n})\nexport class MediaPlayerTimelineExtensionComponent extends MediaPlayerBaseExtensionDirective implements OnInit, AfterViewInit, OnDestroy {\n\n    @ViewChild('progressThumb') thumb: ElementRef;\n    @ViewChild('timeline') timelineRef: ElementRef;\n\n    current: number = 0;\n    position: number = 0;\n    duration: number = 0;\n    buffered: MediaPlayerBuffered[] = [];\n    mouseDown: boolean = false;\n    quietMode: boolean = false;\n    fullscreen: boolean = false;\n    scrub = { visible: false, position: 0, time: 0 };\n\n    private _onDestroy = new Subject<void>();\n\n    ngOnInit(): void {\n\n        // watch for changes to the current time\n        this.mediaPlayerService.durationChangeEvent.pipe(takeUntil(this._onDestroy)).subscribe(duration => this.duration = duration);\n        this.mediaPlayerService.quietModeEvent.pipe(takeUntil(this._onDestroy)).subscribe(quietMode => this.quietMode = quietMode);\n        this.mediaPlayerService.fullscreenEvent.pipe(takeUntil(this._onDestroy)).subscribe(fullscreen => {\n            this.fullscreen = fullscreen;\n            this.scrub.position = 0;\n        });\n\n        this.mediaPlayerService.timeUpdateEvent.pipe(takeUntil(this._onDestroy)).subscribe(current => {\n            this.current = current;\n            this.position = (this.current / this.duration) * 100;\n        });\n\n        this.mediaPlayerService.progressEvent.pipe(takeUntil(this._onDestroy)).subscribe((buffered: TimeRanges) => {\n            this.buffered = [];\n\n            for (let idx = 0; idx < buffered.length; idx++) {\n                this.buffered.push({ start: (buffered.start(idx) / this.duration) * 100, end: (buffered.end(idx) / this.duration) * 100 });\n            }\n        });\n    }\n\n    ngAfterViewInit(): void {\n        const mousedown$ = fromEvent(this.thumb.nativeElement, 'mousedown');\n        const mousemove$ = fromEvent(document, 'mousemove');\n        const mouseup$ = fromEvent(document, 'mouseup');\n\n        mousedown$.pipe(\n            switchMap(() => mousemove$.pipe(takeUntil(mouseup$))),\n            takeUntil(this._onDestroy)\n        ).subscribe(() => this.scrub.visible = false);\n    }\n\n    ngOnDestroy() {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    updateScrub(event?: MouseEvent): void {\n\n        const target = event.target as HTMLElement;\n\n        if (target.classList.contains('media-progress-bar-thumb')) {\n            return;\n        }\n\n        const timeline = this.timelineRef.nativeElement as HTMLDivElement;\n        const bounds = timeline.getBoundingClientRect();\n\n        this.scrub.position = event.offsetX;\n        this.scrub.time = (event.offsetX / bounds.width) * this.mediaPlayerService.duration;\n\n        if (this.mouseDown) {\n            this.mediaPlayerService.pause();\n            this.mediaPlayerService.currentTime = this.scrub.time;\n        }\n    }\n}\n\nexport interface MediaPlayerBuffered {\n    start: number;\n    end: number;\n}\n","import { Component, ElementRef, HostListener, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { timer } from 'rxjs/observable/timer';\nimport { debounceTime, filter, switchMap, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { MediaPlayerBaseExtensionDirective } from '../base-extension.directive';\n\n@Component({\n    selector: 'ux-media-player-controls',\n    template: `<div class=\"volume-container\">\n\n    <div class=\"volume-slider-container\" #volumeContainer [class.active]=\"volumeActive\">\n        <div class=\"volume-slider-icon\" #volumeIcon>\n            <span class=\"hpe-icon\" [class.hpe-volume-mute]=\"volume === 0\" [class.hpe-volume-low]=\"volume > 0 && volume <= 70\" [class.hpe-volume]=\"volume > 70\" [uxTooltip]=\"muteTooltip\" (click)=\"toggleMute()\"></span>\n        </div>\n        \n        <div class=\"volume-slider-node\">\n            <div class=\"volume-slider\" #volumeSlider>\n                <div class=\"volume-track-lower\" [style.width.%]=\"volume\"></div>\n                <div class=\"volume-slider-thumb\" (mousedown)=\"dragStart($event)\" [style.left.%]=\"volume\" tabindex=\"0\" (keydown.ArrowRight)=\"volume = volume + 10\" (keydown.ArrowLeft)=\"volume = volume - 10\"></div>\n            </div>\n        </div>\n    </div>\n</div>\n\n<div class=\"spacer\"></div>\n\n<svg viewBox=\"0 0 51.5 64\" width=\"14\" height=\"17\" class=\"control-button\" (click)=\"goToStart()\">\n    <rect x=\"0\" y=\"0\" width=\"7.5\" height=\"64\" />\n    <polygon points=\"51.5,64 51.5,0 7.4,32 \" />\n</svg>\n\n<svg viewBox=\"0 0 45 64\" width=\"20\" height=\"29\" class=\"control-button\" *ngIf=\"!playing\" (click)=\"togglePlay()\">\n    <polygon points=\"0.4,0 0.4,64 44.6,32\" />\n</svg>\n\n<svg viewBox=\"0 0 43 56.9\" class=\"control-button\" width=\"20\" height=\"29\" *ngIf=\"playing\" (click)=\"togglePlay()\">\n    <rect y=\"0.1\" width=\"15.7\" height=\"56.9\" />\n    <rect x=\"27.3\" y=\"0.1\" width=\"15.7\" height=\"56.9\" />\n</svg>\n\n<svg viewBox=\"0 0 51.5 64\" width=\"14\" height=\"17\" class=\"control-button\" (click)=\"goToEnd()\">\n    <rect x=\"44.1\" y=\"0\" width=\"7.5\" height=\"64\" />\n    <polygon points=\"0,64 0,0 44.1,32 \" />\n</svg>\n\n<div class=\"spacer\"></div>\n\n<span class=\"hpe-icon\" *ngIf=\"mediaPlayerService.type !== 'audio'\" [class.hpe-expand]=\"!mediaPlayerService.fullscreen\" [class.hpe-contract]=\"mediaPlayerService.fullscreen\"\n    (click)=\"setFullscreen()\"></span>\n\n<ng-template #muteTooltip>{{ volume === 0 ? 'Unmute' : 'Mute' }}</ng-template>`,\n    host: {\n        '[class.quiet]': 'quietMode || fullscreen'\n    }\n})\nexport class MediaPlayerControlsExtensionComponent extends MediaPlayerBaseExtensionDirective implements OnInit, OnDestroy {\n\n    playing: boolean;\n    quietMode: boolean;\n    fullscreen: boolean = false;\n    volumeActive: boolean = false;\n    volumeDragging: boolean = false;\n\n    @ViewChild('volumeIcon') volumeIcon: ElementRef;\n    @ViewChild('volumeSlider') volumeSlider: ElementRef;\n    @ViewChild('volumeContainer') volumeContainer: ElementRef;\n\n    private _volume: number = 50;\n    private _previousVolume = 50;\n    private _onDestroy = new Subject<void>();\n\n    get volume(): number {\n        return this._volume;\n    }\n\n    set volume(value: number) {\n\n        if (value === 0 && this._volume !== 0) {\n            this._previousVolume = this._volume;\n        }\n\n        this._volume = Math.min(Math.max(value, 0), 100);\n        this.mediaPlayerService.volume = this._volume / 100;\n    }\n\n    ngOnInit(): void {\n        this.mediaPlayerService.playEvent.pipe(takeUntil(this._onDestroy)).subscribe(_ => this.playing = true);\n        this.mediaPlayerService.pauseEvent.pipe(takeUntil(this._onDestroy)).subscribe(_ => this.playing = false);\n        this.mediaPlayerService.quietModeEvent.pipe(takeUntil(this._onDestroy)).subscribe(quietMode => this.quietMode = quietMode);\n        this.mediaPlayerService.volumeChangeEvent.pipe(takeUntil(this._onDestroy)).subscribe(volume => this.volume = volume * 100);\n        this.mediaPlayerService.initEvent.pipe(debounceTime(1), filter(init => init === true), takeUntil(this._onDestroy)).subscribe(() => this.volume = this.mediaPlayerService.volume * 100);\n        this.mediaPlayerService.fullscreenEvent.pipe(takeUntil(this._onDestroy)).subscribe(fullscreen => this.fullscreen = fullscreen);\n\n        const mouseenter$ = fromEvent(this.volumeIcon.nativeElement, 'mouseenter');\n        const mouseenterContainer$ = fromEvent(this.volumeContainer.nativeElement, 'mouseenter');\n        const mouseleaveContainer$ = fromEvent(this.volumeContainer.nativeElement, 'mouseleave');\n\n        mouseenter$.pipe(takeUntil(this._onDestroy)).subscribe(() => this.volumeActive = true);\n        mouseleaveContainer$.pipe(\n            switchMap(() => timer(1500).pipe(takeUntil(mouseenterContainer$))),\n            takeUntil(this._onDestroy)\n        ).subscribe(() => this.volumeActive = false);\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    toggleMute(): void {\n        if (this.volume === 0) {\n            this.volume = this._previousVolume;\n        } else {\n            this.volume = 0;\n        }\n    }\n\n    togglePlay(): void {\n        if (this.playing) {\n            this.mediaPlayerService.pause();\n        } else {\n            this.mediaPlayerService.play();\n        }\n    }\n\n    setFullscreen(): void {\n        this.mediaPlayerService.toggleFullscreen();\n    }\n\n    goToStart(): void {\n        this.mediaPlayerService.currentTime = 0;\n    }\n\n    goToEnd(): void {\n        this.mediaPlayerService.currentTime = this.mediaPlayerService.duration;\n    }\n\n    dragStart(event: MouseEvent): void {\n        event.preventDefault();\n        this.volumeDragging = true;\n\n        const thumb = event.target as HTMLDivElement;\n        thumb.focus();\n    }\n\n    @HostListener('document:mousemove', ['$event'])\n    dragMove(event: MouseEvent): void {\n        if (!this.volumeDragging) {\n            return;\n        }\n\n        event.preventDefault();\n\n        const slider = this.volumeSlider.nativeElement as HTMLDivElement;\n        const bounds = slider.getBoundingClientRect();\n\n        const x = Math.min(bounds.width, Math.max(0, event.pageX - bounds.left));\n\n        // convert to a percentage\n        this.volume = (x / bounds.width) * 100;\n    }\n\n    @HostListener('document:mouseup')\n    dragEnd(): void {\n        this.volumeDragging = false;\n    }\n\n}","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'duration'\n})\nexport class DurationPipe implements PipeTransform {\n    \n    transform(seconds: number): any {\n\n        let minutes = Math.floor(seconds / 60);\n        let hours = Math.floor(minutes / 60);\n        let days = Math.floor(hours / 24);\n\n        hours = hours - (days * 24);\n        minutes = minutes - (days * 24 * 60) - (hours * 60);\n        seconds = Math.floor(seconds - (days * 24 * 60 * 60) - (hours * 60 * 60) - (minutes * 60));\n\n        if (hours > 0) {\n            return `${this.pad(hours)}:${this.pad(minutes)}:${this.pad(seconds)}`;\n        } else {\n            return `${this.pad(minutes)}:${this.pad(seconds)}`;\n        }\n    }\n\n    pad(value: number): string {\n        if (value < 10) {\n            return `0${value}`;\n        }\n\n        return value.toString();\n    }\n}","import { NgModule } from '@angular/core';\n\nimport { DurationPipe } from './duration.pipe';\n\n@NgModule({\n    exports: [DurationPipe],\n    declarations: [DurationPipe]\n})\nexport class DurationPipeModule { }\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'fileSize'\n})\nexport class FileSizePipe implements PipeTransform {\n\n    transform(value: number): any {\n\n        // allow for async values\n        if (!value) {\n            return value;\n        }\n        \n        let units = ['B', 'KB', 'MB', 'GB', 'TB'];\n\n        // calculate the which unit bracket the values should be a part of\n        let idx = Math.floor(Math.log(value) / Math.log(1024));\n        let formattedValue = value / Math.pow(1024, idx);\n        \n        return `${formattedValue.toFixed(2)} ${units[idx]}`;\n    }\n}","import { NgModule } from '@angular/core';\n\nimport { FileSizePipe } from './file-size.pipe';\n\n@NgModule({\n    exports: [FileSizePipe],\n    declarations: [FileSizePipe]\n})\nexport class FileSizePipeModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { MediaPlayerComponent } from './media-player.component';\nimport { MediaPlayerTimelineExtensionComponent } from './extensions/timeline/timeline.component';\nimport { MediaPlayerBaseExtensionDirective } from './extensions/base-extension.directive';\nimport { MediaPlayerControlsExtensionComponent } from './extensions/controls/controls.component';\nimport { FrameExtractionModule } from '../../services/frame-extraction/frame-extraction.module';\nimport { AudioServiceModule } from '../../services/audio/index';\nimport { DurationPipeModule } from '../../pipes/duration/index';\nimport { FileSizePipeModule } from '../../pipes/file-size/index';\nimport { MediaPlayerService } from './media-player.service';\nimport { TooltipModule } from '../tooltip/index';\n\nconst DECLARATIONS = [\n    MediaPlayerComponent,\n    MediaPlayerTimelineExtensionComponent,\n    MediaPlayerBaseExtensionDirective,\n    MediaPlayerControlsExtensionComponent\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FrameExtractionModule,\n        TooltipModule,\n        AudioServiceModule,\n        DurationPipeModule,\n        FileSizePipeModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS,\n    providers: [MediaPlayerService]\n})\nexport class MediaPlayerModule { }\n","import { Directive } from '@angular/core';\n\n@Directive({ \n    selector: '[uxVirtualScrollLoading]' \n})\nexport class VirtualScrollLoadingDirective { }","import { Directive } from '@angular/core';\n\n@Directive({\n    selector: '[uxVirtualScrollLoadButton]' \n})\nexport class VirtualScrollLoadButtonDirective { }","import { Directive } from '@angular/core';\n\n@Directive({ \n    selector: '[uxVirtualScrollCell]' \n})\nexport class VirtualScrollCellDirective {\n\n}","import { Component, OnInit, EventEmitter, Output, Input, HostListener, ElementRef, AfterContentInit, ContentChild, TemplateRef, OnDestroy, SimpleChanges } from '@angular/core';\nimport { ResizeService } from '../../directives/resize/index';\nimport { VirtualScrollLoadingDirective } from './directives/virtual-scroll-loading.directive';\nimport { VirtualScrollLoadButtonDirective } from './directives/virtual-scroll-load-button.directive';\nimport { VirtualScrollCellDirective } from './directives/virtual-scroll-cell.directive';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\n\n@Component({\n    selector: 'ux-virtual-scroll',\n    template: `<div class=\"virtual-scroll-content-height\" [style.height.px]=\"getTotalHeight()\"></div>\n<div class=\"virtual-scroll-content\" [style.transform]=\"'translateY(' + scrollTop + 'px)'\">\n\n    <!-- Virtually Render Cells -->\n    <ng-container *ngFor=\"let cell of cells | async\">\n        <ng-container *ngTemplateOutlet=\"cellTemplate; context: { cell: cell }\"></ng-container>\n    </ng-container>\n\n    <!-- Loading Indicator -->\n    <ng-container *ngIf=\"loadingIndicatorTemplate && isLoading\" [ngTemplateOutlet]=\"loadingIndicatorTemplate\"></ng-container>\n\n    <!-- Loading Button -->\n    <div class=\"virtual-scroll-load-button\" *ngIf=\"loadButtonTemplate && !loadOnScroll && !loadingComplete && !isLoading\" (click)=\"loadNextPage()\">\n        <ng-container *ngTemplateOutlet=\"loadButtonTemplate\"></ng-container>\n    </div>\n    \n</div>`\n})\nexport class VirtualScrollComponent implements OnInit, AfterContentInit, OnDestroy {\n\n    @Input() collection: Observable<any[]> = Observable.create();\n    @Input() cellHeight: number;\n    @Input() loadOnScroll: boolean = true;\n\n    @Output() loading: EventEmitter<number> = new EventEmitter<number>();\n\n    @ContentChild(VirtualScrollCellDirective, { read: TemplateRef }) cellTemplate: TemplateRef<any>;\n    @ContentChild(VirtualScrollLoadingDirective, { read: TemplateRef }) loadingIndicatorTemplate: TemplateRef<any>;\n    @ContentChild(VirtualScrollLoadButtonDirective, { read: TemplateRef }) loadButtonTemplate: TemplateRef<any>;\n\n    cells: BehaviorSubject<any[]> = new BehaviorSubject([]);\n    scrollTop: number = 0;\n    isLoading: boolean = false;\n    pageNumber: number = 0;\n    data: any[] = [];\n    loadingComplete: boolean = false;\n\n    private _subscription: Subscription;\n    private _height: number;\n\n    constructor(private _elementRef: ElementRef, resizeService: ResizeService) {\n\n        // watch for any future changes to size\n        resizeService.addResizeListener(_elementRef.nativeElement).subscribe(event => this._height = event.height);\n    }\n\n    ngOnInit() {\n\n        if (!this.cellHeight) {\n            throw new Error('Virtual Scroll Component requires \"cellHeight\" property to be defined.');\n        }\n\n        // subscribe to the collection\n        this.setupObservable();\n\n        // load the first page of data\n        this.loadNextPage();\n    }\n\n    ngAfterContentInit(): void {\n        // re-render cells now that we can display any loading indicator or loading button\n        this.renderCells();\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.collection && changes.collection.currentValue !== changes.collection.previousValue && !changes.collection.isFirstChange()) {\n            this.setupObservable();\n            this.reset();\n        }\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    setupObservable(): void {\n\n        // if there is a current subscription, unsubscribe\n        if (this._subscription && this._subscription.unsubscribe) {\n            this._subscription.unsubscribe();\n        }\n\n        this._subscription = this.collection.subscribe(collection => {\n            this.data.push(...collection);\n            this.renderCells();\n            this.isLoading = false;\n        }, null, () => {\n            this.loadingComplete = true;\n        });\n    }\n\n    @HostListener('scroll') renderCells(): void {\n        this.cells.next(this.getVisibleCells());\n\n        if (this.loadOnScroll && !this.isLoading && !this.loadingComplete) {\n            const remainingScroll = this._elementRef.nativeElement.scrollHeight - (this._elementRef.nativeElement.scrollTop + this._elementRef.nativeElement.clientHeight);\n\n            // if the current cells take up less than the height of the component then load the next page\n            if (remainingScroll <= this._elementRef.nativeElement.clientHeight) {\n                this.loadNextPage();\n            }\n        }\n    }\n\n    getVisibleCells(): any[] {\n\n        // store the initial element height\n        if (!this._height) {\n            this._height = this._elementRef.nativeElement.offsetHeight;\n        }\n\n        // perform some calculations\n        const scrollTop = this._elementRef.nativeElement.scrollTop;\n        const startCell = Math.floor(scrollTop / this.cellHeight);\n        const endCell = Math.ceil(this._height / this.cellHeight) + 1;\n\n        // update the scroll position\n        this.scrollTop = scrollTop - (scrollTop % this.cellHeight);\n\n        // return a sublist of items visible on the screen\n        return this.data.slice(startCell, startCell + endCell);\n    }\n\n    getTotalHeight(): number {\n        return this.cellHeight * this.data.length;\n    }\n\n    loadNextPage(): void {\n        this.isLoading = true;\n        this.loading.next(this.pageNumber);\n        this.pageNumber++;\n    }\n\n    reset(): void {\n\n        // reset all values\n        this.scrollTop = 0;\n        this.data = [];\n        this._height = undefined;\n        this.pageNumber = 0;\n        this.loadingComplete = false;\n\n        // set scroll position\n        this._elementRef.nativeElement.scrollTop = 0;\n\n        // clear the current cells\n        this.renderCells();\n\n        // reload first page\n        this.loadNextPage();\n    }\n\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { VirtualScrollComponent } from './virtual-scroll.component';\nimport { ResizeModule } from '../../directives/resize/index';\nimport { VirtualScrollLoadingDirective } from './directives/virtual-scroll-loading.directive';\nimport { VirtualScrollLoadButtonDirective } from './directives/virtual-scroll-load-button.directive';\nimport { VirtualScrollCellDirective } from './directives/virtual-scroll-cell.directive';\n\nconst DECLARATIONS = [\n    VirtualScrollComponent,\n    VirtualScrollLoadingDirective,\n    VirtualScrollLoadButtonDirective,\n    VirtualScrollCellDirective\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ResizeModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS\n})\nexport class VirtualScrollModule { }\n","import { AfterViewInit, Directive, ElementRef, HostListener, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[uxAutoGrow]'\n})\nexport class AutoGrowDirective implements AfterViewInit {\n\n  constructor(private _elementRef: ElementRef, private _renderer: Renderer2) {\n    // ensure this is a textarea or else throw error\n    if (_elementRef.nativeElement.tagName.toLowerCase() !== 'textarea') {\n      throw new Error('uxAutoGrow directive can only be used on <textarea> elements.');\n    }\n  }\n\n  ngAfterViewInit(): void {\n    this.update();\n  }\n\n  @HostListener('input')\n  update(): void {\n\n    // perform sizing\n    this._renderer.setStyle(this._elementRef.nativeElement, 'overflowY', 'hidden');\n    this._renderer.setStyle(this._elementRef.nativeElement, 'height', 'auto');\n\n    // get the new total height and element height\n    const { scrollHeight } = this._elementRef.nativeElement;\n    const { maxHeight } = getComputedStyle(this._elementRef.nativeElement);\n\n    // determine what the maximum allowed height is\n    const maximum = !isNaN(parseFloat(maxHeight)) ? parseFloat(maxHeight) : Infinity;\n\n    // if there is a max height specifed we want to show the scrollbars\n    if (maximum < scrollHeight) {\n      this._renderer.setStyle(this._elementRef.nativeElement, 'overflowY', 'auto');\n      this._renderer.setStyle(this._elementRef.nativeElement, 'height', maximum + 'px');\n    } else {\n      this._renderer.setStyle(this._elementRef.nativeElement, 'height', scrollHeight + 'px');\n    }\n  }\n\n}","import { NgModule } from '@angular/core';\n\nimport { AutoGrowDirective } from './auto-grow.directive';\n\n@NgModule({\n    exports: [AutoGrowDirective],\n    declarations: [AutoGrowDirective]\n})\nexport class AutoGrowModule { }\n","import { Directive, ElementRef, EventEmitter, Input, OnInit, Output, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[uxFixedHeaderTable]'\n})\nexport class FixedHeaderTableDirective implements OnInit {\n\n  @Input() tableHeight: number | string;\n  @Output() tablePaging: EventEmitter<number> = new EventEmitter<number>();\n\n  private _tableHead: HTMLElement;\n  private _tableBody: HTMLElement;\n\n  constructor(private _elementRef: ElementRef, private _renderer: Renderer2) { }\n\n  ngOnInit(): void {\n\n    // add class to the table\n    this._renderer.addClass(this._elementRef.nativeElement, 'ux-fixed-header-table');\n\n    // locate the important elements\n    this._tableHead = this._elementRef.nativeElement.querySelector('thead');\n    this._tableBody = this._elementRef.nativeElement.querySelector('tbody');\n\n    // bind to scroll events on the table body\n    this._renderer.listen(this._tableBody, 'scroll', this.onScroll.bind(this));\n\n    // resize the table header to account for scrollbar\n    this.setLayout();\n\n    // trigger the loading of the first page\n    this.tablePaging.emit();\n  }\n\n  /**\n   * Get the table element\n   * Primarily used by column width directive\n   */\n  getTable(): HTMLTableElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /**\n   * Handle scroll events\n   */\n  private onScroll(): void {\n\n    // determine if we are scrolled to the bottom and if so load the next page\n    if (this._tableBody.scrollTop === (this._tableBody.scrollHeight - this._tableBody.offsetHeight)) {\n      this.tablePaging.emit();\n    }\n  }\n\n  /**\n   * Update the size of the table header to account for the scrollbar.\n   * This is important to keep the columns aligned\n   */\n  private setLayout(): void {\n\n    // calculate the size of the scrollbar\n    const scrollbar = this._tableBody.offsetWidth - this._tableBody.clientWidth;\n\n    // add padding to the header to account for this\n    this._renderer.setStyle(this._tableHead, 'padding-right', scrollbar + 'px');\n\n    // set the desired height of the table body\n    this._renderer.setStyle(this._tableBody, 'height', typeof this.tableHeight === 'number' ? `${this.tableHeight}px` : this.tableHeight);\n  }\n\n}\n","import { NgModule } from '@angular/core';\n\nimport { FixedHeaderTableDirective } from './fixed-header-table.directive';\n\n@NgModule({\n    exports: [FixedHeaderTableDirective],\n    declarations: [FixedHeaderTableDirective]\n})\nexport class FixedHeaderTableModule { }\n","import { Directive, ElementRef, HostBinding, Input, OnChanges, OnDestroy, OnInit, Renderer2 } from '@angular/core';\n\n@Directive({\n    selector: '[uxFloatLabel]',\n    host: {\n        'class': 'ux-float-label'\n    }\n})\nexport class FloatLabelDirective implements OnInit, OnChanges, OnDestroy {\n\n    @Input('uxFloatLabel')\n    input: HTMLInputElement;\n\n    @Input()\n    value: any;\n\n    @Input()\n    mode: 'focus' | 'input' = 'focus';\n\n    @HostBinding('class.ux-float-label-raised')\n    raised: boolean = false;\n\n\n    private _focused = false;\n    private _eventHandles: any[] = [];\n\n    constructor(private _elementRef: ElementRef, private _renderer: Renderer2) { }\n\n    ngOnInit(): void {\n        this._eventHandles.push(\n            this._renderer.listen(this.input, 'focus', this.inputFocus.bind(this)),\n            this._renderer.listen(this.input, 'blur', this.inputBlur.bind(this)),\n            this._renderer.listen(this.input, 'input', this.inputChange.bind(this))\n        );\n\n        // Check initial input value\n        this.raised = this.hasText();\n\n        // Ensure that the `for` attribute is set\n        if (!this._elementRef.nativeElement.getAttribute('for') && this.input.getAttribute('id')) {\n            this._renderer.setAttribute(this._elementRef.nativeElement, 'for', this.input.getAttribute('id'));\n        }\n    }\n\n    ngOnChanges(): void {\n        if (!(this.mode === 'focus' && this._focused)) {\n            this.raised = this.hasText();\n        }\n    }\n\n    ngOnDestroy(): void {\n        // Unsubscribe event handles\n        this._eventHandles.forEach((eventHandle) => eventHandle());\n    }\n\n    private hasText(): boolean {\n        if (this.value === undefined) {\n            return !!this.input.value;\n        }\n        return !!this.value;\n    }\n\n    private inputFocus(): void {\n        if (this.mode === 'focus') {\n            this._focused = true;\n            this.raised = true;\n        }\n    }\n\n    private inputBlur(): void {\n        if (this.mode === 'focus') {\n            this._focused = false;\n            this.raised = this.hasText();\n        }\n    }\n\n    private inputChange(): void {\n        if (this.mode === 'input') {\n            this.raised = this.hasText();\n        }\n    }\n}","import { NgModule } from '@angular/core';\n\nimport { FloatLabelDirective } from './float-label.directive';\n\n@NgModule({\n    imports: [],\n    exports: [FloatLabelDirective],\n    declarations: [FloatLabelDirective],\n    providers: [],\n})\nexport class FloatLabelModule { }\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\n@Injectable()\nexport class HelpCenterService {\n\n    items: BehaviorSubject<HelpCenterItem[]> = new BehaviorSubject<HelpCenterItem[]>([]);\n\n    registerItem(item: HelpCenterItem): void {\n\n        // get the current items\n        let items = this.items.getValue();\n\n        // add the new item to the list\n        items.push(item);\n\n        // update the observable\n        this.items.next(items);\n    }\n\n    unregisterItem(item: HelpCenterItem): void {\n\n        // get the current items\n        let items = this.items.getValue();\n\n        // remove the item being unregistered\n        items = items.filter(itm => itm !== item);\n\n        // update the observable\n        this.items.next(items);\n    }\n}\n\nexport interface HelpCenterItem {\n    icon?: string;\n    title: string;\n    select?: () => void;\n}","import { Directive, Input, OnInit, OnDestroy } from '@angular/core';\nimport { HelpCenterService, HelpCenterItem } from './help-center.service';\n\n@Directive({ selector: '[uxHelpCenterItem]' })\nexport class HelpCenterItemDirective implements OnInit, OnDestroy {\n\n    @Input() uxHelpCenterItem: HelpCenterItem;\n\n    constructor(private _helpCenterService: HelpCenterService) { }\n\n    ngOnInit(): void {\n\n        // register the item in the service\n        this._helpCenterService.registerItem(this.uxHelpCenterItem);\n    }\n\n    ngOnDestroy(): void {\n        // remove this item when it is destroyed\n        this._helpCenterService.unregisterItem(this.uxHelpCenterItem);\n    }\n}","import { NgModule } from '@angular/core';\nimport { HelpCenterItemDirective } from './help-center-item.directive';\nimport { HelpCenterService } from './help-center.service';\n\n@NgModule({\n    imports: [],\n    exports: [HelpCenterItemDirective],\n    declarations: [HelpCenterItemDirective],\n    providers: [HelpCenterService],\n})\nexport class HelpCenterModule { }\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { HoverActionContainerDirective } from './hover-action-container.directive';\nimport { HoverActionDirective } from './hover-action.directive';\n\n@Injectable()\nexport class HoverActionService {\n\n    active: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n    private _container: HoverActionContainerDirective;\n    private _focused: boolean = false;\n    private _hovered: boolean = false;\n    private _actions: HoverActionDirective[] = [];\n\n    register(action: HoverActionDirective): void {\n        this._actions.push(action);\n    }\n\n    unregister(action: HoverActionDirective): void {\n        this._actions = this._actions.filter(actn => actn !== action);\n    }\n\n    setContainer(container: HoverActionContainerDirective): void {\n        this._container = container;\n    }\n\n    setFocusState(focus: boolean): void {\n        this._focused = focus;\n        this.updateVisibility();\n    }\n\n    setHoverState(hover: boolean): void {\n        this._hovered = hover;\n        this.updateVisibility();\n    }\n\n    next(): void {\n\n        // if container has focus then focus the first hover action\n        if (this.containerHasFocus()) {\n            this.focusActionAtIndex(0);\n            return this.updateVisibility();\n        }\n\n        // if a hover action has focus then focus the next action\n        if (this.actionHasFocus()) {\n            let index = this.getFocusedActionIndex() + 1;\n            this.focusActionAtIndex(index);\n            this.updateVisibility();\n        }\n    }\n\n    previous(): void {\n        // if a hover action has focus then focus the previous action\n        if (this.actionHasFocus()) {\n            let index = this.getFocusedActionIndex() - 1;\n\n            if (index >= 0) {\n                this.focusActionAtIndex(index);\n            } else {\n                this._container.focus();\n            }\n        }\n\n        this.updateVisibility();\n    }\n\n    updateVisibility(): void {\n        this.active.next(this._focused || this._hovered || this.actionHasFocus());\n    }\n\n    private focusActionAtIndex(index: number): void {\n        if (index >= 0 && index < this._actions.length) {\n            this._actions[index].focus();\n        }\n    }\n\n    private getFocusedActionIndex(): number {\n        return this._actions.findIndex(action => action === this.getFocusedAction());\n    }\n\n    private containerHasFocus(): boolean {\n        return this._focused;\n    }\n\n    private actionHasFocus(): boolean {\n        return !!this.getFocusedAction();\n    }\n\n    private getFocusedAction(): HoverActionDirective {\n        return this._actions.find(action => action.focused);\n    }\n}","import { Directive, ElementRef, HostListener, Input, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { HoverActionService } from './hover-action.service';\n\n@Directive({\n    selector: '[uxHoverActionContainer]',\n    providers: [HoverActionService],\n    host: {\n        '[class.hover-action-container-active]': 'active',\n        '[tabindex]': 'tabindex'\n    }\n})\nexport class HoverActionContainerDirective implements OnDestroy {\n\n    @Input() tabindex: number = 0;\n    active: boolean = false;\n\n    private active$: Subscription;\n\n    constructor(private _elementRef: ElementRef, private _hoverActionService: HoverActionService) {\n        // register the container element with the service\n        this._hoverActionService.setContainer(this);\n\n        // apply a class based on the active state of the container and it's actions\n        this.active$ = this._hoverActionService.active.subscribe(active => this.active = active);\n    }\n\n    ngOnDestroy(): void {\n        this.active$.unsubscribe();\n    }\n\n    @HostListener('click') focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    @HostListener('focus') onFocus(): void {\n        this._hoverActionService.setFocusState(true);\n    }\n\n    @HostListener('blur') onBlur(): void {\n        this._hoverActionService.setFocusState(false);\n    }\n\n    @HostListener('mouseenter') onHover(): void {\n        this._hoverActionService.setHoverState(true);\n    }\n\n    @HostListener('mouseleave') onLeave(): void {\n        this._hoverActionService.setHoverState(false);\n    }\n\n    @HostListener('keydown.arrowright') next(): void {\n        this._hoverActionService.next();\n    }\n}","import { Directive, ElementRef, HostListener, OnDestroy, Input } from '@angular/core';\nimport { HoverActionService } from './hover-action.service';\nimport { Subscription } from 'rxjs/Subscription';\n\n@Directive({\n    selector: '[uxHoverAction]',\n    host: {\n        '[class.hover-action-active]': 'active',\n        '[class.hover-action-focused]': 'focused',\n        '[tabindex]': 'tabindex'\n    }\n})\nexport class HoverActionDirective implements OnDestroy {\n\n    @Input() tabindex: number = 1;\n    active: boolean = false;\n    focused: boolean = false;\n\n    private active$: Subscription;\n\n    constructor(private _elementRef: ElementRef, private _hoverActionService: HoverActionService) {\n\n        // register the action\n        this._hoverActionService.register(this);\n\n        // watch for changes to the activeness of the container\n        this.active$ = this._hoverActionService.active.subscribe(active => this.active = active);\n    }\n\n    ngOnDestroy(): void {\n        this._hoverActionService.unregister(this);\n        this.active$.unsubscribe();\n    }\n\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    @HostListener('focus') onFocus(): void {\n        this.focused = true;\n        this._hoverActionService.updateVisibility();\n    }\n\n    @HostListener('blur') onBlur(): void {\n        this.focused = false;\n        this._hoverActionService.updateVisibility();\n    }\n\n    @HostListener('keydown.arrowleft', ['$event']) previous(event: MouseEvent): void {\n        event.stopPropagation();        \n        this._hoverActionService.previous();\n    }\n\n    @HostListener('keydown.arrowright', ['$event']) next(event: MouseEvent): void {\n        event.stopPropagation();\n        this._hoverActionService.next();\n    }\n}","import { NgModule } from '@angular/core';\nimport { HoverActionContainerDirective } from './hover-action-container.directive';\nimport { HoverActionDirective } from './hover-action.directive';\n\nconst DECLARATIONS = [\n    HoverActionDirective,\n    HoverActionContainerDirective\n];\n\n@NgModule({\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS\n})\nexport class HoverActionModule { }\n","import { Directive, EmbeddedViewRef, Input, TemplateRef, ViewContainerRef } from '@angular/core';\n\n@Directive({\n    selector: '[uxLayoutSwitcherItem]'\n})\nexport class LayoutSwitcherItemDirective {\n\n    @Input('uxLayoutSwitcherItem') private _config: LayoutSwitcherItem;\n\n    private _embeddedView: EmbeddedViewRef<any>;\n\n    constructor(private _templateRef: TemplateRef<any>, private _viewContainerRef: ViewContainerRef) { }\n\n    getLayout(): TemplateRef<any> {\n        return this._templateRef;\n    }\n\n    getConfig(): LayoutSwitcherItem {\n        return this._config;\n    }\n\n    activate(): void {\n        this._embeddedView = this._viewContainerRef.createEmbeddedView(this._templateRef);\n    }\n\n    deactivate(): void {\n        let index = this._viewContainerRef.indexOf(this._embeddedView);\n        this._viewContainerRef.remove(index);\n        this._embeddedView = null;\n    }\n\n}\n\nexport interface LayoutSwitcherItem {\n    group?: string;\n    minWidth?: number;\n    maxWidth?: number;\n}","import { Directive, ElementRef, QueryList, ContentChildren, Input, AfterContentInit, ViewContainerRef, OnChanges, SimpleChanges } from '@angular/core';\nimport { ResizeService } from '../resize/index';\nimport { LayoutSwitcherItemDirective } from './layout-switcher-item.directive';\n\n@Directive({\n    selector: '[uxLayoutSwitcher]'\n})\nexport class LayoutSwitcherDirective implements AfterContentInit, OnChanges {\n\n    @Input() group: string;\n    @ContentChildren(LayoutSwitcherItemDirective) private _layouts: QueryList<LayoutSwitcherItemDirective>;\n    \n    private _width: number;\n    private _activeLayout: LayoutSwitcherItemDirective;\n\n    constructor(private _elementRef: ElementRef, resizeService: ResizeService,\n        private _viewContainerRef: ViewContainerRef) {\n\n        // watch for changes to the container size\n        resizeService.addResizeListener(_elementRef.nativeElement).subscribe(event => {\n            this._width = event.width;\n\n            // render the appropriate layout\n            this.updateActiveLayout();\n        });\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n\n        // if the active group has changed then render the appropriate layout\n        if (changes.group.currentValue !== changes.group.previousValue) {\n            this.updateActiveLayout();\n        }\n    }\n\n    getActiveLayout(): LayoutSwitcherItemDirective | null {\n\n        // if there are currently no layouts then do nothing\n        if (!this._layouts) {\n            return null;\n        }\n\n        // otherwise find layouts that match the active group and that meet the constraints\n        return this._layouts.filter(layout => this.group === layout.getConfig().group).find(layout => {\n\n            let minWidth = layout.getConfig().minWidth || 0;\n            let maxWidth = layout.getConfig().maxWidth || Infinity;\n\n            return this._width >= minWidth && this._width < maxWidth;\n        });\n    }\n\n    updateActiveLayout(): void {\n\n        // get the layout that should be shown\n        let layout = this.getActiveLayout();\n\n        // check if we are currently showing the layout\n        if (this._activeLayout === layout) {\n            return;\n        }\n\n        // remove the current layout\n        if (this._activeLayout) {\n            this._activeLayout.deactivate();\n        }\n\n        // store the new active layout\n        this._activeLayout = layout;\n\n        // if there is an active layout then activate\n        if (this._activeLayout) {\n            this._activeLayout.activate();\n        }\n    }\n\n    ngAfterContentInit(): void {\n\n        // store the initial current element width\n        this._width = this._elementRef.nativeElement.offsetWidth;\n\n        // render the appropriate layout - need a delay as Angular doesn't like changes like this in these lifecycle hooks\n        requestAnimationFrame(this.updateActiveLayout.bind(this));\n    }\n}","import { NgModule } from '@angular/core';\nimport { LayoutSwitcherDirective } from './layout-switcher.directive';\nimport { LayoutSwitcherItemDirective } from './layout-switcher-item.directive';\nimport { ResizeModule } from '../resize/index';\n\nconst DECLARATIONS = [\n    LayoutSwitcherDirective,\n    LayoutSwitcherItemDirective\n];\n\n@NgModule({\n    imports: [\n        ResizeModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS,\n    providers: [],\n})\nexport class LayoutSwitcherModule { }\n","import { SelectionService } from '../selection.service';\n\nexport class SelectionStrategy {\n\n  constructor(protected selectionService: SelectionService) { }\n\n  mousedown(event: MouseEvent, data: any): void { }\n\n  click(event: MouseEvent, data: any): void { }\n\n  keydown(event: KeyboardEvent, data: any): void { }\n\n  /**\n   * Select the item - default behavior\n   */\n  select(...data: any[]): void {\n    this.selectionService.select(...data);\n  }\n\n  /**\n   * Toggle the item's selected state - default behavior\n   */\n  toggle(...data: any[]): void {\n    this.selectionService.toggle(...data);\n  }\n\n  /**\n   * Deselect the item - default behavior\n   */\n  deselect(...data: any[]): void {\n    this.selectionService.deselect(...data);\n  }\n\n  /**\n   * Select all items - default behavior\n   */\n  selectAll(): void {\n    this.select(...this.selectionService.dataset);\n  }\n\n  /**\n   * Deselect all items - default behavior\n   */\n  deselectAll(): void {\n    this.deselect(...this.selectionService.dataset);\n  }\n\n  destroy(): void { }\n}\n","import { SelectionStrategy } from './selection.strategy';\n\nexport class RowSelectionStrategy extends SelectionStrategy {\n\n  // store the most recently selected row\n  private _selection: Selection = { start: null, end: null };\n\n  /**\n   * By default on shift click the browser will highlight\n   * text. This looks bad and we don't want this to occur\n   */\n  mousedown(event: MouseEvent): void {\n    event.preventDefault();\n  }\n\n  /**\n   * When a row is clicked we want to handle selection\n   */\n  click(event: MouseEvent, data: any): void {\n\n    // determine which modifier keys are pressed\n    const { ctrlKey, shiftKey } = event;\n\n    // if the shift key is pressed we want to perform a multiple selection\n    if (shiftKey) {\n      return this.multipleSelect(data);\n    }\n\n    // if the control key is pressed we want to perform an additive toggle selection\n    if (ctrlKey) {\n      return this.toggle(data);\n    }\n\n    // perform a single selection where all other rows are deselected\n    this.singleSelect(data);\n  }\n\n  /**\n   * To support full keyboard control we need to support the following:\n   * 1. Arrow keys to navigate up and down\n   * 2. Spacebar to toggle selection\n   * 3. Shift + Arrow keys to multiple select\n   * 4. Ctrl + Arrow keys to allow retained selection and navigation\n   */\n  keydown(event: KeyboardEvent, data: any): void {\n\n    switch (event.keyCode) {\n\n      case KeyCode.UpArrow:\n      case KeyCode.DownArrow:\n        event.preventDefault();\n        this.navigate(event, data);\n        break;\n        \n      case KeyCode.Spacebar:\n        event.preventDefault();\n        this.selectionService.strategy.toggle(data, true);\n        break;\n\n    }\n  }\n\n  /**\n   * Override the standard toggle function to store or clear the\n   * most recently selected item\n   */\n  toggle(data: any, activate: boolean = false): void {\n    super.toggle(data);\n\n    // store or clear the selection\n    this.selectionService.isSelected(data) ? this.setSelectionStart(data) : this.clearSelection();\n\n    // if we want to keep the item activated then activate\n    if (activate) {\n      this.selectionService.activate(data);\n    }\n  }\n\n  /**\n   * Clear all other selected items and select only\n   * the most recently selected item\n   */\n  private singleSelect(data: any): void {\n\n    // deselect all other rows if neither modifier key is pressed\n    this.deselectAll();\n\n    // select the current row\n    this.select(data);\n\n    // store the current item as the selection start\n    this.setSelectionStart(data);\n  }\n\n  /**\n   * Handle multiple selection:\n   * 1. If no start item selected - select it\n   * 2. If a start item has been selected - select all in between\n   * 3. If a start and end item have been selected clear the range and then select the new range\n   */\n  private multipleSelect(data: any): void {\n\n    // if no selection currently exists then perform initial selection\n    if (!this._selection.start) {\n\n      // select the row\n      this.select(data);\n\n      // store the starting point\n      return this.setSelectionStart(data);\n    }\n\n    // if a multiple selection already took place - clear the previous selection\n    if (this._selection.start && this._selection.end) {\n      this.deselect(...this.getSelectedItems());\n    }\n\n    // set the new selection end point\n    this.setSelectionEnd(data);\n\n    // select all the items in the range\n    this.select(...this.getSelectedItems());\n  }\n\n  /**\n   * Set the selection start point. If there was previously a\n   * selection end point then clear it as this is a new selection\n   */\n  private setSelectionStart(data: any): void {\n    this._selection.start = data;\n    this._selection.end = null;\n\n    // activate the item\n    this.selectionService.activate(data);\n  }\n\n  /**\n   * Set the selection end point\n   */\n  private setSelectionEnd(data: any): void {\n    this._selection.end = data;\n\n    // activate the item\n    this.selectionService.activate(data);\n  }\n\n  /**\n   * Clear both start and end selection points\n   */\n  private clearSelection(deactivate: boolean = true): void {\n\n    // reset the selected item\n    this._selection = { start: null, end: null };\n\n    // remove the current active item\n    if (deactivate) {\n      this.selectionService.deactivate();\n    }\n  }\n\n  /**\n   * Determine all the items affected by the current selection.\n   * Note that the end point may be above the start point so\n   * we need to account for this.\n   */\n  private getSelectedItems(): any[] {\n\n    // get the latest dataset\n    const { dataset } = this.selectionService;\n\n    // get the indexes of the start and end point\n    const startIdx = dataset.indexOf(this._selection.start);\n    const endIdx = dataset.indexOf(this._selection.end);\n\n    // get the region of the array that is selected - note the endIdx may be before the startIdx so account for this\n    return dataset.slice(Math.min(startIdx, endIdx), Math.max(startIdx, endIdx) + 1);\n  }\n\n  /**\n   * Activate the sibling item when arrow keys are pressed\n   */\n  private navigate(event: KeyboardEvent, data: any): void {\n\n    // determine which modifier keys are pressed\n    const { ctrlKey, shiftKey } = event;\n\n    // if no modifier keys are pressed then deselect all and clear the selection\n    if (!ctrlKey && !shiftKey) {\n      this.deselectAll();\n      this.clearSelection(false);\n    }\n\n    // activate the sibling - if the up arrow is pressed then navigate to the previous sibling\n    const sibling = this.selectionService.activateSibling(event.keyCode === KeyCode.UpArrow);\n\n    // if the shift key is pressed then we also want to toggle the state if the item\n    if (shiftKey && sibling) {\n\n      // if there is no current selection start then select the current row\n      if (!this._selection.start) {\n        this.multipleSelect(data);\n      }\n\n      this.multipleSelect(sibling);\n    }\n  }\n}\n\nexport interface Selection {\n  start: any;\n  end: any;\n}\n\nenum KeyCode {\n  UpArrow = 38,\n  DownArrow = 40,\n  Spacebar = 32\n}\n","import { SelectionStrategy } from './selection.strategy';\n\nexport class SimpleSelectionStrategy extends SelectionStrategy {\n\n  /**\n   * When the item is clicked simply toggle the current selected state\n   */\n  click(event: MouseEvent, data: any): void {\n    this.toggle(data);\n  }\n\n  /**\n   * Add basic keyboard support for navigating\n   * and selecting/deselecting items\n   */\n  keydown(event: KeyboardEvent, data: any): void {\n\n    switch (event.keyCode) {\n      \n      case KeyCode.UpArrow:\n        event.preventDefault();\n        return this.selectionService.activateSibling(true);\n        \n      case KeyCode.DownArrow:\n        event.preventDefault();\n        return this.selectionService.activateSibling(false);\n      \n      case KeyCode.Spacebar:\n        event.preventDefault();      \n        return this.toggle(data);\n    }\n  }\n\n  /**\n   * Override the standard toggle function to always activate the item\n   */\n  toggle(data: any): void {\n    super.toggle(data);\n    this.selectionService.activate(data);\n  }\n}\n\nenum KeyCode {\n  UpArrow = 38,\n  DownArrow = 40,\n  Spacebar = 32\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { RowSelectionStrategy } from './strategies/row-selection.strategy';\nimport { SelectionStrategy } from './strategies/selection.strategy';\nimport { SimpleSelectionStrategy } from './strategies/simple-selection.strategy';\n\n@Injectable()\nexport class SelectionService implements OnDestroy {\n\n  private _selection = new Set();\n  private _rowStrategy = new RowSelectionStrategy(this);\n  private _simpleStrategy = new SimpleSelectionStrategy(this);\n\n  dataset: any[] = [];\n  enabled: boolean = true;\n  clickEnabled: boolean = true;\n  keyboardEnabled: boolean = true;\n  strategy: SelectionStrategy = this._simpleStrategy;\n\n  active$ = new BehaviorSubject<any>(null);\n  selection$ = new BehaviorSubject<any[]>([]);\n\n  ngOnDestroy(): void {\n    this._rowStrategy.destroy();\n    this._simpleStrategy.destroy();\n  }\n\n  /**\n   * If the item is not currently selected then add it\n   * to the list of selected items\n   */\n  select(...selections: any[]): void {\n\n    // add each selection to the set\n    selections.forEach(selection => this._selection.add(selection));\n\n    // propagate the changes\n    this.selectionHasMutated();\n  }\n\n  /**\n   * Remove an item from the list of selected items\n   */\n  deselect(...selections: any[]): void {\n    // remove each item from the set\n    selections.forEach(selection => this._selection.delete(selection));\n\n    // propagate the changes\n    this.selectionHasMutated();\n  }\n\n  /**\n   * Toggle the selected state of any specified items\n   */\n  toggle(...selections: any[]): void {\n    selections.forEach(selection => this.isSelected(selection) ? this.deselect(selection) : this.select(selection));\n  }\n\n  /**\n   * Determine whether or not a specific item is currently selected\n   */\n  isSelected(data: any): boolean {\n    return this._selection.has(data);\n  }\n\n  /**\n   * Return an observable specifically for notifying the subscriber\n   * only when the selection state of a specific object has changed\n   */\n  selected$(data: any): Observable<boolean> {\n    return this.selection$.pipe(map(() => this.isSelected(data)), distinctUntilChanged());\n  }\n\n  /**\n   * Define how selections should be performed.\n   * This allows us to use an strategy pattern to handle the various keyboard\n   * and mouse interactions while keeping each mode separated and\n   * easily extensible if we want to add more modes in future!\n   */\n  setMode(mode: SelectionMode): void {\n\n    switch (mode.toLowerCase().trim()) {\n\n      case 'simple':\n        this.strategy = this._simpleStrategy;\n        break;\n\n      case 'row':\n        this.strategy = this._rowStrategy;\n        break;\n\n      default:\n        throw new Error(`The selection mode '${mode}' does not exist. Valid modes are 'simple' or 'row'.`);\n    }\n  }\n\n  /**\n   * Set the current active item\n   */\n  activate(data: any): void {\n    this.active$.next(data);\n  }\n\n  /**\n   * Deactive all items\n   */\n  deactivate(): void {\n    this.active$.next(null);\n  }\n\n  /**\n   * Activate the sibling of the current active item.\n   * If previous is set to true the previous sibling will be activated\n   * rather than the next sibling. This function will also return the\n   * data of the newly activated sibling\n   */\n  activateSibling(previous: boolean = false): any {\n\n    // get the currently active item\n    const current = this.active$.getValue();\n\n    // check if there is a current active item\n    if (!current) {\n      return;\n    }\n\n    // get the index of the current item\n    const idx = this.dataset.indexOf(current);\n    const target = this.dataset[previous ? idx - 1 : idx + 1];\n\n    // check if the target exists\n    if (target) {\n      this.activate(target);\n    }\n\n    return target;\n  }\n\n  setDisabled(disabled: boolean): void {\n    // store the current disabled state\n    this.enabled = !disabled;\n\n    // clear any stateful data\n    this.active$.next(null);\n    this._selection.clear();\n\n    // emit the selection change information\n    this.selectionHasMutated();\n  }\n\n  private selectionHasMutated(): void {\n    this.selection$.next(Array.from(this._selection));\n  }\n}\n\nexport type SelectionMode = 'simple' | 'row';\n","import { Directive, ElementRef, EventEmitter, HostBinding, HostListener, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { map } from 'rxjs/operators';\nimport { SelectionService } from './selection.service';\n\n@Directive({\n  selector: '[uxSelectionItem]',\n  exportAs: 'ux-selection-item'\n})\nexport class SelectionItemDirective implements OnInit, OnDestroy {\n\n  @Input() uxSelectionItem: any;\n\n  @Input() @HostBinding('class.ux-selection-selected')\n  set selected(selected: boolean) {\n    selected ? this.select() : this.deselect();\n  }\n\n  get selected(): boolean {\n    return this._selected;\n  }\n  \n  @Input() @HostBinding('tabindex') tabindex: number = 0;\n  @Output() selectedChange = new EventEmitter<boolean>();\n\n  @HostBinding('class.ux-selection-focused') active: boolean = false;\n\n  private _selected: boolean = false;\n  private _subscriptions = new Subscription();\n\n  constructor(private _selectionService: SelectionService, private _elementRef: ElementRef) { }\n\n  ngOnInit(): void {\n\n    // if there is no associated data then throw an error\n    if (!this.uxSelectionItem) {\n      throw new Error('The uxSelectionItem directive must have data associated with it.');\n    }\n\n    // subscribe to selection changes on this item\n    this._subscriptions.add(this._selectionService.selected$(this.uxSelectionItem).subscribe(selected => {\n\n      // store the selected state\n      this._selected = selected;\n\n      // emit the selected state\n      this.selectedChange.emit(selected);\n    }));\n\n    // subscribe to changes to the active state\n    this._subscriptions.add(this._selectionService.active$.pipe(map(active => active === this.uxSelectionItem)).subscribe(active => {\n\n      // store the focus state\n      this.active = active;\n\n      // if it is active then focus the element\n      if (active === true) {\n        this._elementRef.nativeElement.focus();\n      }\n    }));\n  }\n\n  ngOnDestroy(): void {\n    this._subscriptions.unsubscribe();\n  }\n\n  @HostListener('click', ['$event']) click(event: MouseEvent): void {\n    if (this._selectionService.enabled && this._selectionService.clickEnabled) {\n      this._selectionService.strategy.click(event, this.uxSelectionItem);\n    }\n  }\n\n  @HostListener('mousedown', ['$event']) mousedown(event: MouseEvent): void {\n    if (this._selectionService.enabled && this._selectionService.clickEnabled) {\n      this._selectionService.strategy.mousedown(event, this.uxSelectionItem);\n    }\n  }\n\n  @HostListener('keydown', ['$event']) keydown(event: KeyboardEvent): void {\n    if (this._selectionService.enabled && this._selectionService.keyboardEnabled) {\n      this._selectionService.strategy.keydown(event, this.uxSelectionItem);\n    }\n  }\n\n  /**\n   * Select this item using the current strategy\n   */\n  select(): void {\n    if (this._selectionService.enabled) {\n      this._selectionService.strategy.select(this.uxSelectionItem);\n    }\n  }\n\n  /**\n   * Deselect this item using the current strategy\n   */\n  deselect(): void {\n    if (this._selectionService.enabled) {\n      this._selectionService.strategy.deselect(this.uxSelectionItem);\n    }\n  }\n}\n","import { AfterContentInit, ContentChildren, Directive, EventEmitter, HostBinding, HostListener, Input, OnDestroy, Output, QueryList } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { SelectionItemDirective } from './selection-item.directive';\nimport { SelectionMode, SelectionService } from './selection.service';\n\n\n@Directive({\n  selector: '[uxSelection]',\n  exportAs: 'ux-selection',\n  providers: [ SelectionService ]\n})\nexport class SelectionDirective implements AfterContentInit, OnDestroy {\n\n  @Input() set uxSelection(items: any[]) {\n    this._selectionService.select(...items);\n  }\n\n  @Input() set disabled(disabled: boolean) {\n    this._selectionService.setDisabled(disabled);\n  }\n\n  @Input() set mode(mode: SelectionMode) {\n    this._selectionService.setMode(mode);\n  }\n\n  @Input() set clickSelection(enabled: boolean) {\n    this._selectionService.clickEnabled = enabled;\n  }\n\n  @Input() set keyboardSelection(enabled: boolean) {\n    this._selectionService.keyboardEnabled = enabled;\n  }\n\n  @Input() @HostBinding('tabindex') tabindex: number = 0;\n\n  @Output() uxSelectionChange = new EventEmitter<any[]>();\n\n  @ContentChildren(SelectionItemDirective) items: QueryList<SelectionItemDirective>;\n\n  private _subscriptions = new Subscription();\n\n  constructor(private _selectionService: SelectionService) {\n    this._subscriptions.add(_selectionService.selection$.subscribe(items => this.uxSelectionChange.emit(items)));\n  }\n\n  ngAfterContentInit(): void {\n    // provide the initial list of selection items\n    this.update();\n\n    // if the list changes then inform the service\n    this._subscriptions.add(this.items.changes.subscribe(() => this.update()));\n  }\n\n  ngOnDestroy(): void {\n    this._subscriptions.unsubscribe();\n  }\n\n  /**\n   * If the directive element receives focus then activate the first item\n   */\n  @HostListener('focus') focus(): void {\n    if (this._selectionService.enabled && this._selectionService.dataset.length > 0) {\n      this._selectionService.activate(this._selectionService.dataset[0]);\n    }\n  }\n\n  /**\n   * Update the dataset to reflect the latest selection items\n   */\n  update(): void {\n    this._selectionService.dataset = this.items.map(item => item.uxSelectionItem);\n  }\n\n  /**\n   * Select all the items in the list\n   */\n  selectAll(): void {\n    if (this._selectionService.enabled) {\n      this._selectionService.strategy.selectAll();\n    }\n  }\n\n  /**\n   * Deselect all currently selected items\n   */\n  deselectAll(): void {\n    if (this._selectionService.enabled) {\n      this._selectionService.strategy.deselectAll();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { SelectionItemDirective } from './selection-item.directive';\nimport { SelectionDirective } from './selection.directive';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [SelectionDirective, SelectionItemDirective],\n  exports: [SelectionDirective, SelectionItemDirective]\n})\nexport class SelectionModule { }\n","import { Pipe, Injectable, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'stringFilter'\n})\n@Injectable()\nexport class StringFilterPipe implements PipeTransform {\n    transform(items: any[], value: string): any[] {  \n        if (!items) {\n            return [];\n        }\n        return items.filter(it => it.toLowerCase().indexOf(value.toLowerCase()) >= 0);\n    }\n}","import { StringFilterPipe } from './string-filter.pipe';\nimport { NgModule } from '@angular/core';\n\n@NgModule({\n    exports: [StringFilterPipe],\n    declarations: [StringFilterPipe]\n})\nexport class StringFilterModule { }\n","import { StorageAdapter } from './storage-adapter';\n\nexport class CookieAdapter implements StorageAdapter {\n\n    getItem(key: string): string {\n\n        if (document.cookie) {\n\n            // get all the cookies for this site\n            const cookies = document.cookie.split(';');\n\n            // process the cookies into a from we can easily manage\n            const match = cookies\n                .map(cookie => ({ key: cookie.split('=')[0].trim(), value: cookie.split('=')[1].trim() }))\n                .find(cookie => cookie.key === key);\n\n            return match ? match.value : null;\n        }\n\n        return null;\n    }\n\n    setItem(key: string, value: string): void {\n        document.cookie = `${key}=${value}; path=/`;\n    }\n\n    removeItem(key: string): void {\n\n        document.cookie.split(';').forEach(cookie => {\n            const eqPos = cookie.indexOf('=');\n            const name = eqPos > -1 ? cookie.substr(0, eqPos).trim() : cookie;\n\n            if (name === key) {\n                document.cookie = cookie.trim().replace(/=.*/, `=;expires=${new Date().toUTCString()};path=/`);\n            }\n        });\n    }\n\n    clear(): void {\n\n        // call remove item on each cookie\n        document.cookie.split(';').map(cookie => cookie.split('=')[0].trim())\n            .forEach(cookie => this.removeItem(cookie));\n    }\n\n    getSupported(): StorageAdapter {\n        // cookies are supported in all browsers\n        return this;\n    }\n\n}","import { StorageAdapter } from './storage-adapter';\nimport { CookieAdapter } from './cookie-adapter';\n\nexport class LocalStorageAdapter implements StorageAdapter {\n\n    getItem(key: string): string {\n        return localStorage.getItem(key);\n    }\n\n    setItem(key: string, value: string): void {\n        localStorage.setItem(key, value);\n    }\n\n    removeItem(key: string): void {\n        localStorage.removeItem(key);\n    }\n\n    clear(): void {\n        localStorage.clear();\n    }\n\n    getSupported(): StorageAdapter {\n\n        // if local storage variable does not exist fall back to cookies\n        if (!localStorage) {\n            return new CookieAdapter();\n        }\n\n        // try to make a test save to local storage to see if there are any exceptions\n        try {\n            localStorage.setItem('ux-persistent-data-service', 'ux-persistent-data-service');\n            localStorage.removeItem('ux-persistent-data-service');\n\n            return this;\n        } catch (err) {\n            return new CookieAdapter();\n        }\n    }\n\n}","import { StorageAdapter } from './storage-adapter';\nimport { CookieAdapter } from './cookie-adapter';\n\nexport class SessionStorageAdapter implements StorageAdapter {\n\n    getItem(key: string): string {\n        return sessionStorage.getItem(key);\n    }\n\n    setItem(key: string, value: string): void {\n        sessionStorage.setItem(key, value);\n    }\n\n    removeItem(key: string): void {\n        sessionStorage.removeItem(key);\n    }\n\n    clear(): void {\n        sessionStorage.clear();\n    }\n\n    getSupported(): StorageAdapter {\n\n        // if local storage variable does not exist fall back to cookies\n        if (!sessionStorage) {\n            return new CookieAdapter();\n        }\n\n        // try to make a test save to local storage to see if there are any exceptions\n        try {\n            sessionStorage.setItem('ux-persistent-data-service', 'ux-persistent-data-service');\n            sessionStorage.removeItem('ux-persistent-data-service');\n\n            return this;\n        } catch (err) {\n            return new CookieAdapter();\n        }\n    }\n\n}","import { Injectable } from '@angular/core';\nimport { StorageAdapter } from './adapters/storage-adapter';\nimport { CookieAdapter } from './adapters/cookie-adapter';\nimport { LocalStorageAdapter } from './adapters/local-storage-adapter';\nimport { SessionStorageAdapter } from './adapters/session-storage-adapter';\n\n@Injectable()\nexport class PersistentDataService {\n\n    /**\n     * Save the item in some form of persistent storage\n     */\n    setItem(key: string, value: string, type: PersistentDataStorageType = PersistentDataStorageType.LocalStorage): void {\n        this.getAdapter(type).setItem(key, value);\n    }\n\n    /**\n     * Get a stored value from persistent storage\n     */\n    getItem(key: string, type: PersistentDataStorageType = PersistentDataStorageType.LocalStorage): string {\n        return this.getAdapter(type).getItem(key);\n    }\n\n    /**\n     * Remove a stored value from persistent storage\n     */\n    removeItem(key: string, type: PersistentDataStorageType = PersistentDataStorageType.LocalStorage): void {\n        this.getAdapter(type).removeItem(key);\n    }\n\n    /**\n     * Remove a stored value from persistent storage\n     */\n    clear(type: PersistentDataStorageType = PersistentDataStorageType.LocalStorage): void {\n        this.getAdapter(type).clear();\n    }\n\n    /**\n     * Return the appropriate adapter based on the type requested\n     */\n    private getAdapter(type: PersistentDataStorageType): StorageAdapter {\n\n        switch (type) {\n\n            case PersistentDataStorageType.Cookie:\n                return new CookieAdapter();\n\n            case PersistentDataStorageType.LocalStorage:\n                const localStorageAdapter = new LocalStorageAdapter();\n                return localStorageAdapter.getSupported();\n\n            case PersistentDataStorageType.SessionStorage:\n                const sessionStorageAdapter = new SessionStorageAdapter();\n                return sessionStorageAdapter.getSupported();\n        }\n    }\n}\n\nexport enum PersistentDataStorageType {\n    LocalStorage,\n    Cookie,\n    SessionStorage\n}","import { NgModule } from '@angular/core';\n\nimport { PersistentDataService } from './persistent-data.service';\n\n@NgModule({\n    providers: [PersistentDataService],\n})\nexport class PersistentDataModule { }\n","export abstract class StorageAdapter {\n    abstract getItem(key: string): string;\n    abstract setItem(key: string, value: string): void;\n    abstract removeItem(key: string): void;\n    abstract clear(): void;\n    abstract getSupported(): StorageAdapter;\n}","import { Directive, ElementRef, Injector, Input, Output, EventEmitter } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'contact-group'\n})\nexport class ContactsNg1Component extends UpgradeComponent {\n\n    @Input() contacts: Contact[];\n    @Input() organization: string;\n    @Input() size: 'medium' | 'small';\n    @Input() colors: any;\n    @Input() maxContacts: number;\n\n    @Output() overflowClick: EventEmitter<void> = new EventEmitter<void>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('contactGroup', elementRef, injector);\n    }\n}\n\nexport interface Contact {\n    test: string;\n    status: 'active' | 'passive';\n    customTooltip?: {\n        template: string,\n        tooltipPosition: string;\n        data?: any;\n    };\n}\n\nexport interface Organization {\n    text: string;\n    label: 'external' | 'risk';\n    tooltip?: string;\n    customTooltip?: {\n        template: string,\n        tooltipPosition: string;\n        data?: any;\n    };\n}","import { Directive, ElementRef, Injector, Input, Output, EventEmitter } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'expand-input'\n})\nexport class ExpandInputNg1Component extends UpgradeComponent {\n\n    @Input() elname: string;\n    @Input() placeHolder: string;\n    @Input() className: string;\n    @Input() clearTextIcon: string;\n    @Input() closeSearch: string;\n    @Input() expandAlways: boolean;\n    @Input() onEnter: Function;\n\n    @Output() focus: EventEmitter<string> = new EventEmitter<string>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('expandInput', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'floating-action-button'\n})\nexport class FloatingActionButtonNg1Component extends UpgradeComponent {\n\n    @Input() items: FloatingActionButtonItem[] = [];\n    @Input() primary: string;\n    @Input() direction: 'top' | 'right' | 'bottom' | 'left';\n    @Input() fabTooltip: string;\n    @Input() fabTooltipPlacement: 'top' | 'right' | 'bottom' | 'left';\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('floatingActionButton', elementRef, injector);\n    }\n}\n\nexport interface FloatingActionButtonItem {\n    icon: string;\n    event: Function;\n    tooltip?: string;\n    tooltipPlacement?: string;\n}","import { Directive, ElementRef, Injector, Input, Output, EventEmitter } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'flot'\n})\nexport class FlotNg1Component extends UpgradeComponent {\n\n    @Input() dataset: any;\n    @Input() options: any;\n    @Input() callback: any;\n    @Input() donutLabels: any;\n    @Output() onPlotClick = new EventEmitter<any>();\n    @Output() onPlotHover = new EventEmitter<any>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxFlotNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'grid'\n})\nexport class GridNg1Component extends UpgradeComponent {\n\n    @Input() source: any[] = [];\n    @Input() columns: GridColumn[] = [];\n\n    /**\n     * The following inputs are undocumented\n     */\n    @Input() options: any;\n    @Input() events: any;\n    @Input() plugins: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('grid', elementRef, injector);\n    }\n}\n\nexport interface GridColumn {\n    title: string;\n    template: string;\n    width?: string;\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'hierarchy-bar'\n})\nexport class HierarchyBarNg1Component extends UpgradeComponent {\n\n    @Input() data: any[];\n    @Input() options: HierarchyBarOptions;\n    @Input() selectNode: any;\n    @Input() containerClass: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('hierarchyBar', elementRef, injector);\n    }\n}\n\nexport interface HierarchyBarOptions {\n    enabled: boolean;\n    overview?: Function;\n    image: Function;\n    valueFormatter: Function;\n    action?: {\n        title: string;\n        event: Function;\n    };\n}","import { Directive, ElementRef, Injector, Input, Output, EventEmitter } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'marquee-wizard'\n})\nexport class MarqueeWizardNg1Component extends UpgradeComponent {\n\n    @Input() wizardIcon: string;\n    @Input() wizardSteps: MarqueeWizardStep[];\n    @Input() buttonOptions: MarqueeWizardOptions;\n    @Input() onChanging: Function;\n    @Input() onFinished: Function;\n    @Input() onFinishing: Function;\n    @Input() onCanceled: Function;\n    @Input() isVisited: boolean;\n    @Input() sideInfo: MarqueeWizardSideInfo;\n\n    @Output() wizardStepsChange: EventEmitter<MarqueeWizardStep[]> = new EventEmitter<MarqueeWizardStep[]>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('marqueeWizard', elementRef, injector);\n    }\n}\n\nexport interface MarqueeWizardStep {\n    title: string;\n    html?: string;\n    header?: string;\n    templateUrl?: string;\n    hidden?: boolean;\n    error?: boolean;\n    completed?: boolean;\n    visited?: boolean;\n}\n\nexport interface MarqueeWizardOptions {\n    nextText?: string;\n    previousText?: string;\n    finishText?: string;\n    showNext?: boolean;\n    showPrevious?: boolean;\n    showFinish?: boolean;\n    nextTooltip?: string;\n    previousTooltip?: string;\n    finishTooltip?: string;\n    previousEnabled?: boolean;\n    nextEnabled?: boolean;\n    finishEnabled?: boolean;\n}\n\nexport interface MarqueeWizardSideInfo {\n    title: string;\n    description: string;\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'nested-donut'\n})\nexport class NestedDonutNg1Component extends UpgradeComponent {\n\n    @Input() dataset: any;\n    @Input() options: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxNestedDonutNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input, Output, EventEmitter } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'organization-chart'\n})\nexport class OrganizationChartNg1Component extends UpgradeComponent {\n\n    @Input() data: any;\n    @Input() options: any;\n    @Output() dataChange = new EventEmitter<any>();\n    @Output() optionsChange = new EventEmitter<any>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxOrganizationChartNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'partition-map'\n})\nexport class PartitionMapNg1Component extends UpgradeComponent {\n\n    @Input() chartData: any;\n    @Input() chartOptions: any;\n    @Input() chartLoading: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxPartitionMapNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'bar-chart'\n})\nexport class PeityBarChartNg1Component extends UpgradeComponent {\n\n    @Input() data: any;\n    @Input() options: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxPeityBarChartNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'line-chart'\n})\nexport class PeityLineChartNg1Component extends UpgradeComponent {\n\n    @Input() data: any;\n    @Input() options: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxPeityLineChartNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'pie-chart'\n})\nexport class PeityPieChartNg1Component extends UpgradeComponent {\n\n    @Input() data: any;\n    @Input() options: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxPeityPieChartNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'updating-line-chart'\n})\nexport class PeityUpdatingLineChartNg1Component extends UpgradeComponent {\n\n    @Input() data: any;\n    @Input() options: any;\n    @Input() method: any;\n    @Input() updateinterval: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxPeityUpdatingLineChartNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'sankey'\n})\nexport class SankeyNg1Component extends UpgradeComponent {\n\n    @Input() chartSize: any;\n    @Input() chartData: any;\n    @Input() options: any;\n    @Input() click: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxSankeyNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'search-toolbar'\n})\nexport class SearchToolbarNg1Component extends UpgradeComponent {\n\n    @Input() searchTypeahead: any[];\n    @Input() placeHolder: string;\n    @Input() closeSearch: string;\n    @Input() onSearch: Function;\n    @Input() onFocus: Function;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('searchToolbar', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input, Output, EventEmitter } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'select-table'\n})\nexport class SelectTableNg1Component extends UpgradeComponent {\n\n    @Input() values: any[];\n    @Input() multipleSelect: boolean;\n    @Input() selectKey: string;\n    @Input() selected: string;\n    @Input() searchText: string;\n    @Input() tableHeight: string;\n    @Input() selectHiddenItems: 'clear' | 'reselect';\n\n    @Output() selectedChange: EventEmitter<string> = new EventEmitter<string>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('selectTable', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input, Output, EventEmitter, forwardRef } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const SLIDER_CHART_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => SliderChartNg1Component),\n    multi: true\n};\n\n@Directive({\n    selector: 'slider-chart',\n    providers: [SLIDER_CHART_VALUE_ACCESSOR]\n})\nexport class SliderChartNg1Component extends UpgradeComponent implements ControlValueAccessor {\n\n    @Input() sliderOptions: any;\n    @Input() ngModel: any;\n    @Input() chartOptions: any;\n    @Input() chartData: any;\n\n    @Output() ngModelChange: EventEmitter<any> = new EventEmitter<any>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('sliderChart', elementRef, injector);\n    }\n\n    writeValue(obj: any): void { }\n\n    registerOnChange(fn: any): void { }\n\n    registerOnTouched(fn: any): void { }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'social-chart'\n})\nexport class SocialChartNg1Component extends UpgradeComponent {\n\n    @Input() data: any;\n    @Input() options: any;\n    @Input() width: any;\n    @Input() height: any;\n    @Input() api: any;\n    @Input() communities: any;\n    @Input() detailStyle: any;\n    @Input() popoverStyle: any;\n    @Input() nodeDetail: any;\n    @Input() edgeDetail: any;\n    @Input() nodePopover: any;\n    @Input() edgePopover: any;\n    @Input() forceAtlasDuration: any;\n    @Input() nodeSizeAttribute: any;\n    @Input() startMaximized: any;\n    @Input() startMaximised: any;\n    @Input() showMaximizeControl: any;\n    @Input() showMaximiseControl: any;\n    @Input() socialChartContainer: any;\n    @Input() fullscreenButtonPosition: any;\n    @Input() localStrings: any;\n    @Input() chartTitle: any;\n    @Input() titleDisplayTime: any;\n    @Input() edgeWeightInfluence: any;\n    @Input() minLabels: any;\n    \n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxSocialChartNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'sort-direction-toggle'\n})\nexport class SortDirectionToggleNg1Component extends UpgradeComponent {\n\n    @Input() label: string;\n    @Input() sorters: SortDirectionToggleSorter[];\n    @Input() descend: boolean;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('sortDirectionToggle', elementRef, injector);\n    }\n}\n\nexport interface SortDirectionToggleSorter {\n    name: string;\n    sort: string;\n    defaultSorter: boolean;\n    select: Function;\n}","import { Directive, ElementRef, Injector, Input, Output, EventEmitter } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'treegrid'\n})\nexport class TreeGridNg1Component extends UpgradeComponent {\n\n    @Input() data: TreeGridData[] | Function;\n    @Input() columns: TreeGridColumn[];\n    @Input() treeData: TreeGridData[];\n    @Input() selected: any[];\n    @Input() currentRow: any;\n    @Input() options: TreeGridOptions;\n\n    @Output() optionsChange: EventEmitter<TreeGridOptions> = new EventEmitter<TreeGridOptions>();\n    @Output() selectedChange: EventEmitter<any[]> = new EventEmitter<any[]>();\n    @Output() currentRowChange: EventEmitter<any> = new EventEmitter<any>();\n    @Output() treeDataChange: EventEmitter<TreeGridData[]> = new EventEmitter<TreeGridData[]>();    \n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('treegrid', elementRef, injector);\n    }\n}\n\nexport interface TreeGridColumn {\n    name: string;\n    value?: string | Function;\n    template?: string;\n    headerClass?: string;\n    cellClass?: string;\n    width?: string;\n    tooltip?: string;\n    tooltipPlacement?: 'top' | 'bottom' | 'left' | 'right';\n}\n\nexport interface TreeGridData {\n    dataItem: any;\n    children: any[];\n    expanded: boolean;\n    expanding: boolean;\n    level: number;\n    api: any;\n}\n\nexport interface TreeGridOptions {\n    childrenProperty?: string;\n    hasChildren?: Function;\n    maxDepth?: number;\n    expandTopLevel?: boolean;\n    select?: any;\n    expander?: any;\n    icons?: any;\n    rowClass?: string | Function;\n    sort?: Function;\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'thumbnail'\n})\nexport class ThumbnailNg1Component extends UpgradeComponent {\n\n    @Input() url: string;\n    @Input() show: boolean;\n    @Input() width: string;\n    @Input() height: string;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('thumbnail', elementRef, injector);\n    }\n}","import { Injectable, Inject, Injector } from '@angular/core';\nimport { INavigationMenuService } from './navigation-menu.interface';\n\n@Injectable()\nexport class NavigationMenuService implements INavigationMenuService {\n\n    constructor( @Inject('$navigationMenu') private _navigationMenuService: INavigationMenuService) { }\n\n    show(): void {\n        this._navigationMenuService.show();\n    }\n\n    hide(): void {\n        this._navigationMenuService.hide();\n    }\n\n    visible(): boolean {\n        return this._navigationMenuService.visible();\n    }\n\n    collapseAtWidth(): number {\n        return this._navigationMenuService.collapseAtWidth();\n    }\n\n    setCollapseAtWidth(width: number): void {\n        this._navigationMenuService.setCollapseAtWidth(width);\n    }\n\n    setDefaultCollapseAtWidth(): void {\n        this._navigationMenuService.setDefaultCollapseAtWidth();\n    }\n\n}\n\nexport function navigationMenuServiceFactory(injector: Injector) {\n    return injector.get('$navigationMenu');\n}\n\nexport const navigationMenuServiceProvider = {\n    provide: '$navigationMenu',\n    useFactory: navigationMenuServiceFactory,\n    deps: ['$injector']\n};","import { Injectable, Inject, Injector } from '@angular/core';\nimport { IPdfService, PdfColumns, PdfOptions, PdfDocument } from './pdf.interface';\n\n@Injectable()\nexport class PdfService implements IPdfService {\n    \n    constructor(@Inject('$pdf') private _pdfService: IPdfService) { }\n    \n    createTable(columns: PdfColumns, rows: any[], options: PdfOptions = {}): PdfDocument {\n        return this._pdfService.createTable(columns, rows, options);\n    }\n}\n\nexport function pdfServiceFactory(injector: Injector) {\n    return injector.get('$pdf');\n}\n\nexport const pdfServiceProvider = {\n    provide: '$pdf',\n    useFactory: pdfServiceFactory,\n    deps: ['$injector']\n};","import { Injectable, Inject, Injector } from '@angular/core';\nimport { ITimeAgoService, TimeAgoLocalizedTimes } from './time-ago.interface';\n\n@Injectable()\nexport class TimeAgoService implements ITimeAgoService {\n\n    constructor(@Inject('timeAgoService') private _timeAgoService: ITimeAgoService) { }\n\n    setStrings(strings: TimeAgoLocalizedTimes): void {\n        this._timeAgoService.setStrings(strings);\n    }\n\n    timeSince(past: Date, present: Date): string {\n        return this._timeAgoService.timeSince(past, present);\n    }\n\n    timeSinceNow(moment: Date): string {\n        return this._timeAgoService.timeSinceNow(moment);\n    }\n\n}\n\nexport function timeAgoServiceFactory(injector: Injector) {\n    return injector.get('timeAgoService');\n}\n\nexport const timeAgoServiceProvider = {\n    provide: 'timeAgoService',\n    useFactory: timeAgoServiceFactory,\n    deps: ['$injector']\n};","import { NgModule, Injector } from '@angular/core';\n\nimport { FloatingActionButtonNg1Component } from './components/floating-action-button/floating-action-button.component';\nimport { FlotNg1Component } from './components/flot/flot.component';\nimport { NestedDonutNg1Component } from './components/nested-donut/nested-donut.component';\nimport { OrganizationChartNg1Component } from './components/organization-chart/organization-chart.component';\nimport { PartitionMapNg1Component } from './components/partition-map/partition-map.component';\nimport { PeityBarChartNg1Component } from './components/peity-chart/peity-bar-chart.component';\nimport { PeityLineChartNg1Component } from './components/peity-chart/peity-line-chart.component';\nimport { PeityPieChartNg1Component } from './components/peity-chart/peity-pie-chart.component';\nimport { PeityUpdatingLineChartNg1Component } from './components/peity-chart/peity-updating-line-chart.component';\nimport { SankeyNg1Component } from './components/sankey-chart/sankey.component';\nimport { SocialChartNg1Component } from './components/social-chart/social-chart.component';\nimport { TimeAgoService, timeAgoServiceProvider } from './services/time-ago/time-ago.service';\nimport { PdfService, pdfServiceProvider } from './services/pdf/pdf.service';\nimport { NavigationMenuService, navigationMenuServiceProvider } from './services/navigation-menu/navigation-menu.service';\nimport { GridNg1Component } from './components/grid/grid.component';\nimport { ThumbnailNg1Component } from './components/thumbnail/thumbnail.component';\nimport { HierarchyBarNg1Component } from './components/hierarchy-bar/hierarchy-bar.component';\nimport { ContactsNg1Component } from './components/contacts/contacts.component';\nimport { ExpandInputNg1Component } from './components/expand-input/expand-input.component';\nimport { SortDirectionToggleNg1Component } from './components/sort-direction-toggle/sort-direction-toggle.component';\nimport { SearchToolbarNg1Component } from './components/search-toolbar/search-toolbar.component';\nimport { TreeGridNg1Component } from './components/tree-grid/tree-grid.component';\nimport { SelectTableNg1Component } from './components/select-table/select-table.component';\nimport { MarqueeWizardNg1Component } from './components/marquee-wizard/marquee-wizard.component';\nimport { SliderChartNg1Component } from './components/slider-chart/slider-chart.directive';\n\nconst declarations = [\n    ContactsNg1Component,\n    ExpandInputNg1Component,\n    FloatingActionButtonNg1Component,\n    FlotNg1Component,\n    GridNg1Component,\n    HierarchyBarNg1Component,\n    MarqueeWizardNg1Component,\n    NestedDonutNg1Component,\n    OrganizationChartNg1Component,\n    PartitionMapNg1Component,\n    PeityBarChartNg1Component,\n    PeityLineChartNg1Component,\n    PeityPieChartNg1Component,\n    PeityUpdatingLineChartNg1Component,\n    SankeyNg1Component,\n    SearchToolbarNg1Component,\n    SelectTableNg1Component,\n    SliderChartNg1Component,\n    SocialChartNg1Component,\n    SortDirectionToggleNg1Component,\n    TreeGridNg1Component,\n    ThumbnailNg1Component,\n];\n\n@NgModule({\n    imports: [],\n    exports: declarations,\n    declarations: declarations,\n    providers: [\n        navigationMenuServiceProvider,\n        pdfServiceProvider,\n        timeAgoServiceProvider,\n        TimeAgoService,\n        PdfService,\n        NavigationMenuService,\n    ],\n})\nexport class HybridModule { }\n"]}