import { EventEmitter, OnDestroy } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { BehaviorSubject } from 'rxjs/BehaviorSubject';
import { Observable } from 'rxjs/Observable';
export declare const TIME_PICKER_VALUE_ACCESSOR: any;
export declare class TimePickerComponent implements ControlValueAccessor, OnDestroy {
    arrowkeys: boolean;
    mousewheel: boolean;
    disabled: boolean;
    readOnly: boolean;
    showMeridian: boolean;
    showHours: boolean;
    showMinutes: boolean;
    showSeconds: boolean;
    showSpinners: boolean;
    hourStep: number;
    minuteStep: number;
    secondStep: number;
    min: Date;
    max: Date;
    meridians: string[];
    value: Date;
    valueChange: EventEmitter<Date>;
    isValid: EventEmitter<boolean>;
    onTouchedCallback: () => void;
    onChangeCallback: (_: Date) => void;
    value$: BehaviorSubject<Date>;
    hour$: Observable<number>;
    minute$: Observable<number>;
    second$: Observable<number>;
    meridian$: Observable<string>;
    valid$: Observable<boolean>;
    private _meridian;
    private _subscription;
    constructor();
    ngOnDestroy(): void;
    writeValue(value: Date): void;
    registerOnChange(fn: (_: Date) => void): void;
    registerOnTouched(fn: () => void): void;
    setDisabledState(isDisabled: boolean): void;
    getMeridianTime(hour: number): number;
    setHour(hour: number): void;
    setMinute(minute: number): void;
    setSeconds(seconds: number): void;
    incrementHour(arrowkey?: boolean): void;
    decrementHour(arrowkey?: boolean): void;
    incrementMinute(arrowkey?: boolean): void;
    decrementMinute(arrowkey?: boolean): void;
    incrementSecond(arrowkey?: boolean): void;
    decrementSecond(arrowkey?: boolean): void;
    selectMeridian(meridian: string): void;
    checkValidity(date: Date): boolean;
    hourChange(value: string): void;
    minuteChange(value: string): void;
    secondChange(value: string): void;
}
