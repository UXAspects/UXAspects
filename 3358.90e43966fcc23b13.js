(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[3358],{92108:c=>{c.exports={snippet:'<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ux-progress-bar</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>m-b-md<span class="token punctuation">"</span></span> <span class="token attr-name">[value]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>value<span class="token punctuation">"</span></span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{ value }}%<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ux-progress-bar</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-primary<span class="token punctuation">"</span></span> <span class="token attr-name">(click)</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>randomize()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Random<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>',example:'<ux-progress-bar class="m-b-md" [value]="value" max="100">\n    <span>{{ value }}%</span>\n</ux-progress-bar>\n\n<button type="button" class="btn btn-primary" (click)="randomize()">Random</button>'}},80028:c=>{c.exports={snippet:'<span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@angular/core\'</span><span class="token punctuation">;</span>\n\n@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">selector</span><span class="token operator">:</span> <span class="token string">\'app-root\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">templateUrl</span><span class="token operator">:</span> <span class="token string">\'./app.component.html\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppComponent</span> <span class="token punctuation">{</span>\n\n    <span class="token literal-property property">value</span><span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>\n\n    <span class="token function">randomize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n',example:"import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html'\n})\nexport class AppComponent {\n\n    value: number = 15;\n\n    randomize() {\n        this.value = Math.floor((Math.random() * 100) + 1);\n    }\n}\n"}},42481:(c,i,a)=>{var r={"./app.html":92108,"./app.ts":80028,"docs/app/pages/components/components-sections/progress/progress-bar/snippets/app.html":92108,"docs/app/pages/components/components-sections/progress/progress-bar/snippets/app.ts":80028};function o(t){var p=l(t);return a(p)}function l(t){if(!a.o(r,t)){var p=new Error("Cannot find module '"+t+"'");throw p.code="MODULE_NOT_FOUND",p}return r[t]}o.keys=function(){return Object.keys(r)},o.resolve=l,c.exports=o,o.id=42481},63358:(c,i,a)=>{"use strict";a.r(i),a.d(i,{ComponentsProgressModule:()=>T});var r=a(80120),o=a(51950),l=a(1718),t=a(11950),p=a(4564),d=a(49420),g=a(68381),h=a(34308),n=a(54438),b=a(5776),v=a(56096),f=a(66187),F=a(32322),y=a(50517),x=a(54977),C=a(28227);let m=class k extends g.j{constructor(){super(a(42481)),this.value=15,this.playground={files:{"app.component.html":this.snippets.raw.appHtml,"app.component.ts":this.snippets.raw.appTs},modules:[{imports:["ProgressBarModule"],library:"@ux-aspects/ux-aspects"}]}}randomize(){this.value=Math.floor(100*Math.random()+1)}static#n=this.\u0275fac=function(e){return new(e||k)};static#a=this.\u0275cmp=n.VBU({type:k,selectors:[["uxd-progress-bar"]],features:[n.Vt3],decls:45,vars:5,consts:[["max","100",1,"m-b-md",3,"value"],["aria-hidden","true"],["type","button",1,"btn","btn-primary",3,"click"],["tableTitle","Inputs"],["uxd-api-property","","name","value","type","number"],["uxd-api-property","","name","min","type","number","defaultValue","0"],["uxd-api-property","","name","max","type","number","defaultValue","100"],["uxd-api-property","","name","trackColor","type","string","defaultValue","grey7"],["uxd-api-property","","name","barColor","type","string","defaultValue","accent"],[3,"minimal"],["heading","HTML"],["language","html",3,"content"],["heading","JavaScript"],["language","javascript",3,"content"]],template:function(e,s){1&e&&(n.j41(0,"ux-progress-bar",0)(1,"span",1),n.EFF(2),n.k0s()(),n.j41(3,"button",2),n.bIt("click",function(){return s.randomize()}),n.EFF(4,"Random"),n.k0s(),n.nrm(5,"hr"),n.j41(6,"p"),n.EFF(7," A progress bar can be created by using the "),n.j41(8,"code"),n.EFF(9,"ux-progress-bar"),n.k0s(),n.EFF(10," component. Custom content can be added to the bar by adding HTML inside the "),n.j41(11,"code"),n.EFF(12,"ux-progress-bar"),n.k0s(),n.EFF(13," tag.\n"),n.k0s(),n.j41(14,"p"),n.EFF(15," Additional contextual information can be provided to screen readers by adding an "),n.j41(16,"code"),n.EFF(17,"aria-valuetext"),n.k0s(),n.EFF(18," attribute to the "),n.j41(19,"code"),n.EFF(20,"ux-progress-bar"),n.k0s(),n.EFF(21,".\n"),n.k0s(),n.j41(22,"p"),n.EFF(23," The following attributes can be used to configure the appearance and behavior of the progress bar:\n"),n.k0s(),n.j41(24,"uxd-api-properties",3)(25,"tr",4),n.EFF(26," The value the bar should represent. This will be compared to the "),n.j41(27,"code"),n.EFF(28,"max"),n.k0s(),n.EFF(29," value to determine the width of the bar. "),n.k0s(),n.j41(30,"tr",5),n.EFF(31," The lower limit of the bar. "),n.k0s(),n.j41(32,"tr",6),n.EFF(33," The upper limit of the bar. "),n.k0s(),n.j41(34,"tr",7),n.EFF(35," The color of the track. "),n.k0s(),n.j41(36,"tr",8),n.EFF(37," The color of the bar. "),n.k0s()(),n.j41(38,"p"),n.EFF(39,"The following code can be used to create the example above:"),n.k0s(),n.j41(40,"ux-tabset",9)(41,"ux-tab",10),n.nrm(42,"uxd-snippet",11),n.k0s(),n.j41(43,"ux-tab",12),n.nrm(44,"uxd-snippet",13),n.k0s()()),2&e&&(n.Y8G("value",s.value),n.R7$(2),n.SpI("",s.value,"%"),n.R7$(38),n.Y8G("minimal",!1),n.R7$(2),n.Y8G("content",s.snippets.compiled.appHtml),n.R7$(2),n.Y8G("content",s.snippets.compiled.appTs))},dependencies:[b.H,v.p,f.N,F.G,y.a,x.f,C.j],encapsulation:2})};m=(0,d.Cg)([(0,h.zo)("ComponentsProgressBarComponent")],m);const E=[m],j=[{path:"**",component:t.i,data:{category:p.a.resolveCategoryData(p.E.Components,"Progress")}}];let T=(()=>{class u{constructor(e,s){s.registerResolver(e,E)}static#n=this.\u0275fac=function(s){return new(s||u)(n.KVO(n.OM3),n.KVO(p.a))};static#a=this.\u0275mod=n.$C({type:u});static#s=this.\u0275inj=n.G2t({imports:[l.f,o.dDe,r.iI.forChild(j),o.w9h]})}return u})()}}]);