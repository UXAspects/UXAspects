(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[1807],{34857:A=>{A.exports={snippet:'<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>component-list-container<span class="token punctuation">"</span></span> <span class="token attr-name">[formGroup]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>component-list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>component-list-component<span class="token punctuation">"</span></span>\n            <span class="token attr-name">[class.hoverable]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>items.length > 1<span class="token punctuation">"</span></span>\n            <span class="token attr-name">formArrayName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>items<span class="token punctuation">"</span></span>\n            <span class="token attr-name">*ngFor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>let item of items.controls; let idx = index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>component-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span>\n                    <span class="token attr-name">[focusIf]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>\n                    <span class="token attr-name">[formControlName]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>idx<span class="token punctuation">"</span></span>\n                    <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Enter text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>component-remove<span class="token punctuation">"</span></span>\n                    <span class="token attr-name">uxFocusIndicator</span>\n                    <span class="token attr-name">*ngIf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>items.controls.length > 1<span class="token punctuation">"</span></span>\n                    <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Remove field<span class="token punctuation">"</span></span>\n                    <span class="token attr-name">(click)</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>remove(idx)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ux-icon</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>close<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ux-icon</span><span class="token punctuation">></span></span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n\n\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span>\n        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>component-actions<span class="token punctuation">"</span></span>\n        <span class="token attr-name">[tabIndex]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form.invalid ? -1 : 0<span class="token punctuation">"</span></span>\n        <span class="token attr-name">[class.disabled]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form.invalid<span class="token punctuation">"</span></span>\n        <span class="token attr-name">(click)</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>component-add-btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ux-icon</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ux-icon</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>component-add-text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Add a field<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>',example:'<form class="component-list-container" [formGroup]="form">\n\n    <div class="component-list">\n\n        <div class="component-list-component"\n            [class.hoverable]="items.length > 1"\n            formArrayName="items"\n            *ngFor="let item of items.controls; let idx = index">\n\n            <div class="component-content">\n                <input class="form-control"\n                    [focusIf]="true"\n                    [formControlName]="idx"\n                    placeholder="Enter text">\n\n                <button class="component-remove"\n                    uxFocusIndicator\n                    *ngIf="items.controls.length > 1"\n                    aria-label="Remove field"\n                    (click)="remove(idx)">\n                    <ux-icon name="close"></ux-icon>\n                </button>\n            </div>\n\n\n        </div>\n    </div>\n\n    <button type="button"\n        class="component-actions"\n        [tabIndex]="form.invalid ? -1 : 0"\n        [class.disabled]="form.invalid"\n        (click)="add()">\n        <span class="component-add-btn">\n            <ux-icon name="add"></ux-icon>\n        </span>\n        <span class="component-add-text">Add a field</span>\n    </button>\n\n</form>'}},98729:A=>{A.exports={snippet:'<span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@angular/core\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> FormArray<span class="token punctuation">,</span> FormControl<span class="token punctuation">,</span> FormGroup<span class="token punctuation">,</span> Validators <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@angular/forms\'</span><span class="token punctuation">;</span>\n\n@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">selector</span><span class="token operator">:</span> <span class="token string">\'app-root\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">templateUrl</span><span class="token operator">:</span> <span class="token string">\'./app.component.html\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppComponent</span> <span class="token punctuation">{</span>\n\n    form <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormGroup</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">FormArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n            <span class="token keyword">new</span> <span class="token class-name">FormControl</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>Validators<span class="token punctuation">.</span>required<span class="token punctuation">]</span><span class="token punctuation">)</span>\n        <span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">get</span> <span class="token function">items</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> FormArray <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>form<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">\'items\'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> FormArray<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>form<span class="token punctuation">.</span>valid<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FormControl</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>Validators<span class="token punctuation">.</span>required<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">remove</span><span class="token punctuation">(</span>index<span class="token operator">:</span> number<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">removeAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n',example:"import { Component } from '@angular/core';\nimport { FormArray, FormControl, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html'\n})\nexport class AppComponent {\n\n    form = new FormGroup({\n        items: new FormArray([\n            new FormControl(null, [Validators.required])\n        ])\n    });\n\n    get items(): FormArray {\n        return this.form.get('items') as FormArray;\n    }\n\n    add(): void {\n        if (this.form.valid) {\n            this.items.push(new FormControl(null, [Validators.required]));\n        }\n    }\n\n    remove(index: number): void {\n        if (this.items.length > 1) {\n            this.items.removeAt(index);\n        }\n    }\n}\n"}},71806:(A,E,u)=>{var g={"./app.html":34857,"./app.ts":98729,"docs/app/pages/components/components-sections/component-list/component-list/snippets/app.html":34857,"docs/app/pages/components/components-sections/component-list/component-list/snippets/app.ts":98729};function i(y){var x=_(y);return u(x)}function _(y){if(!u.o(g,y)){var x=new Error("Cannot find module '"+y+"'");throw x.code="MODULE_NOT_FOUND",x}return g[y]}i.keys=function(){return Object.keys(g)},i.resolve=_,A.exports=i,i.id=71806},71807:(A,E,u)=>{"use strict";u.r(E),u.d(E,{ComponentsListModule:()=>V});var g=u(96814),i=u(40285),_=u(74289),y=u(78478),x=u(24535),L=u(991),q=u(64661),H=u(21802),X=u(56082),Y=u(89044),p=u(28830),R=u(81525),D=u(61525),S=u(5300),G=u(24315),P=u(6306),N=u(64056);function J(b,C){if(1&b){const v=p.EpF();p.TgZ(0,"button",15),p.NdJ("click",function(){p.CHM(v);const U=p.oxw().index,K=p.oxw();return p.KtG(K.remove(U))}),p._UZ(1,"ux-icon",16),p.qZA()}}function M(b,C){if(1&b&&(p.TgZ(0,"div",11)(1,"div",12),p._UZ(2,"input",13),p.YNc(3,J,2,0,"button",14),p.qZA()()),2&b){const v=C.index,m=p.oxw();p.ekj("hoverable",m.items.length>1),p.xp6(2),p.Q6J("focusIf",!0)("formControlName",v),p.xp6(1),p.Q6J("ngIf",m.items.controls.length>1)}}let Z=class B extends X.u{get items(){return this.form.get("items")}constructor(){super(u(71806)),this.playground={files:{"app.component.html":this.snippets.raw.appHtml,"app.component.ts":this.snippets.raw.appTs},modules:[{imports:["FocusIfModule"],library:"@ux-aspects/ux-aspects"}]},this.form=new i.cw({items:new i.Oe([new i.NI(null,[i.kI.required])])})}add(){this.form.valid&&this.items.push(new i.NI(null,[i.kI.required]))}remove(C){this.items.length>1&&this.items.removeAt(C)}static#n=this.\u0275fac=function(v){return new(v||B)};static#t=this.\u0275cmp=p.Xpm({type:B,selectors:[["uxd-component-list"]],features:[p.qOj],decls:24,vars:8,consts:[[1,"component-list-container",3,"formGroup"],[1,"component-list"],["class","component-list-component","formArrayName","items",3,"hoverable",4,"ngFor","ngForOf"],["type","button","uxFocusIndicator","",1,"component-actions",3,"tabIndex","click"],[1,"component-add-btn"],["name","add"],[1,"component-add-text"],[3,"minimal"],["heading","HTML"],[3,"content"],["heading","TypeScript"],["formArrayName","items",1,"component-list-component"],[1,"component-content"],["placeholder","Enter text",1,"form-control",3,"focusIf","formControlName"],["class","component-remove","uxFocusIndicator","","aria-label","Remove field",3,"click",4,"ngIf"],["uxFocusIndicator","","aria-label","Remove field",1,"component-remove",3,"click"],["name","close"]],template:function(v,m){1&v&&(p.TgZ(0,"form",0)(1,"div",1),p.YNc(2,M,4,5,"div",2),p.qZA(),p.TgZ(3,"button",3),p.NdJ("click",function(){return m.add()}),p.TgZ(4,"span",4),p._UZ(5,"ux-icon",5),p.qZA(),p.TgZ(6,"span",6),p._uU(7,"Add a field"),p.qZA()()(),p._UZ(8,"hr"),p.TgZ(9,"p"),p._uU(10," A component list can be used to dynamically add and remove components. It uses Angular's "),p.TgZ(11,"code"),p._uU(12,"FormGroup"),p.qZA(),p._uU(13," and "),p.TgZ(14,"code"),p._uU(15,"FormArray"),p.qZA(),p._uU(16," to store the fields and apply validation rules which can be used to determine whether or not we should be allowed to add additional fields.\n"),p.qZA(),p.TgZ(17,"p"),p._uU(18," The following code can be used to create the example above:\n"),p.qZA(),p.TgZ(19,"ux-tabset",7)(20,"ux-tab",8),p._UZ(21,"uxd-snippet",9),p.qZA(),p.TgZ(22,"ux-tab",10),p._UZ(23,"uxd-snippet",9),p.qZA()()),2&v&&(p.Q6J("formGroup",m.form),p.xp6(2),p.Q6J("ngForOf",m.items.controls),p.xp6(1),p.ekj("disabled",m.form.invalid),p.Q6J("tabIndex",m.form.invalid?-1:0),p.xp6(16),p.Q6J("minimal",!1),p.xp6(2),p.Q6J("content",m.snippets.compiled.appHtml),p.xp6(2),p.Q6J("content",m.snippets.compiled.appTs))},dependencies:[R.N,g.sg,g.O5,D.j,S.r,i._Y,i.Fj,i.JJ,i.JL,G.o,i.sg,i.u,i.CE,P.A,N.i],encapsulation:2})};Z=(0,H.gn)([(0,Y.cG)("ComponentsComponentListComponent")],Z);const F=[Z],Q=[{path:"**",component:L.R,data:{category:q.N.resolveCategoryData(q.I.Components,"Component List")}}];let V=(()=>{class b{constructor(v,m){m.registerResolver(v,F)}static#n=this.\u0275fac=function(m){return new(m||b)(p.LFG(p._Vd),p.LFG(q.N))};static#t=this.\u0275mod=p.oAB({type:b});static#a=this.\u0275inj=p.cJS({imports:[y.jKR,g.ez,x.N,y.kDY,i.u5,y.QX1,i.UX,_.Bz.forChild(Q),y.f_l]})}return b})()},21802:(A,E,u)=>{"use strict";function x(n,t,s,a){var c,e=arguments.length,o=e<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,s):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(n,t,s,a);else for(var l=n.length-1;l>=0;l--)(c=n[l])&&(o=(e<3?c(o):e>3?c(t,s,o):c(t,s))||o);return e>3&&o&&Object.defineProperty(t,s,o),o}u.d(E,{gn:()=>x}),"function"==typeof SuppressedError&&SuppressedError}}]);