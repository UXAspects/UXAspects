(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[2143],{88494:p=>{p.exports={snippet:'<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container-fluid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-sm-6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>Conduit One<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>conduit-search</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>conduit-search</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-sm-6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>Conduit Two<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>conduit-search</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>conduit-search</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>',example:'<div class="container-fluid">\n    <div class="row">\n        <div class="col-sm-6">\n            <h4>Conduit One</h4>\n            <conduit-search></conduit-search>\n        </div>\n        <div class="col-sm-6">\n            <h4>Conduit Two</h4>\n            <conduit-search></conduit-search>\n        </div>\n    </div>\n</div>'}},7531:p=>{p.exports={snippet:'<span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@angular/core\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ConduitZone<span class="token punctuation">,</span> ConduitZoneComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@ux-aspects/ux-aspects\'</span><span class="token punctuation">;</span>\n\n@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">selector</span><span class="token operator">:</span> <span class="token string">\'app-root\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">templateUrl</span><span class="token operator">:</span> <span class="token string">\'./app.component.html\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">providers</span><span class="token operator">:</span> <span class="token punctuation">[</span>ConduitZone<span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppComponent</span> <span class="token keyword">extends</span> <span class="token class-name">ConduitZoneComponent</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">zoneId</span><span class="token operator">:</span> string <span class="token operator">=</span> <span class="token string">\'root-zone\'</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n',example:"import { Component } from '@angular/core';\nimport { ConduitZone, ConduitZoneComponent } from '@ux-aspects/ux-aspects';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    providers: [ConduitZone]\n})\nexport class AppComponent extends ConduitZoneComponent {\n    zoneId: string = 'root-zone';\n}\n"}},63331:p=>{p.exports={snippet:'<span class="token keyword">class</span> <span class="token class-name">AppComponent</span> <span class="token punctuation">{</span>\n  @<span class="token function">Conduit</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">\'search\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> search <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BehaviorSubject</span><span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>',example:"class AppComponent {\n  @Conduit({ id: 'search' }) search = new BehaviorSubject<string>('');\n}"}},28773:p=>{p.exports={snippet:'@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">selector</span><span class="token operator">:</span> <span class="token string">\'app-root\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">templateUrl</span><span class="token operator">:</span> <span class="token string">\'./app.component.html\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">providers</span><span class="token operator">:</span> <span class="token punctuation">[</span>ConduitZone<span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppComponent</span> <span class="token keyword">extends</span> <span class="token class-name">ConduitZoneComponent</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">zoneId</span><span class="token operator">:</span> string <span class="token operator">=</span> <span class="token string">\'root-zone\'</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>',example:"@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    providers: [ConduitZone]\n})\nexport class AppComponent extends ConduitZoneComponent {\n    zoneId: string = 'root-zone';\n}"}},9304:p=>{p.exports={snippet:'<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>\n    <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span>\n    <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Search...<span class="token punctuation">"</span></span>\n    <span class="token attr-name">[ngModel]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>search | async<span class="token punctuation">"</span></span>\n    <span class="token attr-name">(ngModelChange)</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>search.next($event)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox-container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ux-checkbox</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>m-b-xs<span class="token punctuation">"</span></span> <span class="token attr-name">[(ngModel)]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>producesOutput<span class="token punctuation">"</span></span> <span class="token attr-name">(ngModelChange)</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateConduit()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Produces Output<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ux-checkbox</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ux-checkbox</span> <span class="token attr-name">[(ngModel)]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>acceptsInput<span class="token punctuation">"</span></span> <span class="token attr-name">(ngModelChange)</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateConduit()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Accepts Input<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ux-checkbox</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>',example:'<input type="text"\n    class="form-control"\n    placeholder="Search..."\n    [ngModel]="search | async"\n    (ngModelChange)="search.next($event)">\n\n<br>\n\n<div class="checkbox-container">\n    <ux-checkbox class="m-b-xs" [(ngModel)]="producesOutput" (ngModelChange)="updateConduit()">Produces Output</ux-checkbox>\n    <ux-checkbox [(ngModel)]="acceptsInput" (ngModelChange)="updateConduit()">Accepts Input</ux-checkbox>\n</div>'}},87357:p=>{p.exports={snippet:'<span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@angular/core\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Conduit<span class="token punctuation">,</span> ConduitComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@ux-aspects/ux-aspects\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> BehaviorSubject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'rxjs\'</span><span class="token punctuation">;</span>\n\n@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">selector</span><span class="token operator">:</span> <span class="token string">\'conduit-search\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">templateUrl</span><span class="token operator">:</span> <span class="token string">\'./search.component.html\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">SearchComponent</span> <span class="token keyword">extends</span> <span class="token class-name">ConduitComponent</span> <span class="token punctuation">{</span>\n\n    @<span class="token function">Conduit</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">\'search\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> search <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BehaviorSubject</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token literal-property property">producesOutput</span><span class="token operator">:</span> boolean <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token literal-property property">acceptsInput</span><span class="token operator">:</span> boolean <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\n    <span class="token function">updateConduit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setConduitProperties</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>search<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n            <span class="token literal-property property">producesOutput</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>producesOutput<span class="token punctuation">,</span>\n            <span class="token literal-property property">acceptsInput</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>acceptsInput\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>',example:"import { Component } from '@angular/core';\nimport { Conduit, ConduitComponent } from '@ux-aspects/ux-aspects';\nimport { BehaviorSubject } from 'rxjs';\n\n@Component({\n    selector: 'conduit-search',\n    templateUrl: './search.component.html'\n})\nexport class SearchComponent extends ConduitComponent {\n\n    @Conduit({ id: 'search' }) search = new BehaviorSubject('');\n\n    producesOutput: boolean = true;\n    acceptsInput: boolean = true;\n\n    updateConduit(): void {\n        this.setConduitProperties(this.search, {\n            producesOutput: this.producesOutput,\n            acceptsInput: this.acceptsInput\n        });\n    }\n}"}},76737:p=>{p.exports={snippet:'<span class="token selector">.zone-outline</span> <span class="token punctuation">{</span>\n    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>\n    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>\n    <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 0 1px 1px #0079ed<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>',example:".zone-outline {\n    display: block;\n    position: relative;\n    box-shadow: 0 0 1px 1px #0079ed;\n}"}},23600:p=>{p.exports={snippet:'<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container-fluid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-sm-12<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-toolbar</span> <span class="token attr-name">[class.zone-outline]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>showZones | async<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-toolbar</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-sm-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-list-view</span> <span class="token attr-name">[class.zone-outline]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>showZones | async<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-list-view</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-sm-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-filter</span> <span class="token attr-name">[class.zone-outline]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>showZones | async<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-filter</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>',example:'<div class="container-fluid">\n    <div class="row">\n        <div class="col-sm-12">\n            <app-toolbar [class.zone-outline]="showZones | async"></app-toolbar>\n        </div>\n    </div>\n    <div class="row">\n        <div class="col-sm-8">\n            <app-list-view [class.zone-outline]="showZones | async"></app-list-view>\n        </div>\n        <div class="col-sm-4">\n            <app-filter [class.zone-outline]="showZones | async"></app-filter>\n        </div>\n    </div>\n</div>'}},15752:p=>{p.exports={snippet:'<span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@angular/core\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Conduit<span class="token punctuation">,</span> ConduitZone<span class="token punctuation">,</span> ConduitZoneComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@ux-aspects/ux-aspects\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> BehaviorSubject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'rxjs\'</span><span class="token punctuation">;</span>\n\n@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">selector</span><span class="token operator">:</span> <span class="token string">\'app-root\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">templateUrl</span><span class="token operator">:</span> <span class="token string">\'./app.component.html\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">styleUrls</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'./app.component.css\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">providers</span><span class="token operator">:</span> <span class="token punctuation">[</span>ConduitZone<span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppComponent</span> <span class="token keyword">extends</span> <span class="token class-name">ConduitZoneComponent</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">zoneId</span><span class="token operator">:</span> string <span class="token operator">=</span> <span class="token string">\'root-zone\'</span><span class="token punctuation">;</span>\n\n    @<span class="token function">Conduit</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">\'show-zones\'</span><span class="token punctuation">,</span> <span class="token literal-property property">producesOutput</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    showZones <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BehaviorSubject</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n',example:"import { Component } from '@angular/core';\nimport { Conduit, ConduitZone, ConduitZoneComponent } from '@ux-aspects/ux-aspects';\nimport { BehaviorSubject } from 'rxjs';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css'],\n    providers: [ConduitZone]\n})\nexport class AppComponent extends ConduitZoneComponent {\n    zoneId: string = 'root-zone';\n\n    @Conduit({ id: 'show-zones', producesOutput: false })\n    showZones = new BehaviorSubject(false);\n}\n"}},70239:p=>{p.exports={snippet:'<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>input-group m-b<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>input-group-addon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ux-icon</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>conduit-search-icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ux-icon</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>\n           <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span>\n           <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Search...<span class="token punctuation">"</span></span>\n           <span class="token attr-name">[ngModel]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>search | async<span class="token punctuation">"</span></span>\n           <span class="token attr-name">(ngModelChange)</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>search.next($event)<span class="token punctuation">"</span></span>\n           <span class="token attr-name">aria-labelledby</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>conduit-search-icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-zone-inspector</span> <span class="token attr-name">*ngIf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>showZones | async<span class="token punctuation">"</span></span>\n    <span class="token attr-name">[zones]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[\'toolbar-zone\']<span class="token punctuation">"</span></span>\n    <span class="token attr-name">[(acceptsInput)]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>acceptsInput<span class="token punctuation">"</span></span>\n    <span class="token attr-name">[(producesOutput)]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>producesOutput<span class="token punctuation">"</span></span>\n    <span class="token attr-name">(acceptsInputChange)</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>setConduitProperties(search, { acceptsInput: acceptsInput, producesOutput: producesOutput })<span class="token punctuation">"</span></span>\n    <span class="token attr-name">(producesOutputChange)</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>setConduitProperties(search, { acceptsInput: acceptsInput, producesOutput: producesOutput })<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-zone-inspector</span><span class="token punctuation">></span></span>',example:'<div class="input-group m-b">\n    <div class="input-group-addon">\n        <ux-icon name="search" id="conduit-search-icon"></ux-icon>\n    </div>\n    <input type="text"\n           class="form-control"\n           placeholder="Search..."\n           [ngModel]="search | async"\n           (ngModelChange)="search.next($event)"\n           aria-labelledby="conduit-search-icon">\n</div>\n\n<app-zone-inspector *ngIf="showZones | async"\n    [zones]="[\'toolbar-zone\']"\n    [(acceptsInput)]="acceptsInput"\n    [(producesOutput)]="producesOutput"\n    (acceptsInputChange)="setConduitProperties(search, { acceptsInput: acceptsInput, producesOutput: producesOutput })"\n    (producesOutputChange)="setConduitProperties(search, { acceptsInput: acceptsInput, producesOutput: producesOutput })">\n</app-zone-inspector>'}},30731:p=>{p.exports={snippet:'<span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@angular/core\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Conduit<span class="token punctuation">,</span> ConduitZone<span class="token punctuation">,</span> ConduitZoneComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@ux-aspects/ux-aspects\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> BehaviorSubject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'rxjs\'</span><span class="token punctuation">;</span>\n\n@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">selector</span><span class="token operator">:</span> <span class="token string">\'app-filter\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">templateUrl</span><span class="token operator">:</span> <span class="token string">\'./filter.component.html\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">providers</span><span class="token operator">:</span> <span class="token punctuation">[</span>ConduitZone<span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">FilterComponent</span> <span class="token keyword">extends</span> <span class="token class-name">ConduitZoneComponent</span> <span class="token punctuation">{</span>\n\n    <span class="token literal-property property">zoneId</span><span class="token operator">:</span> string <span class="token operator">=</span> <span class="token string">\'filter-zone\'</span><span class="token punctuation">;</span>\n    <span class="token literal-property property">acceptsInput</span><span class="token operator">:</span> boolean <span class="token operator">|</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token literal-property property">producesOutput</span><span class="token operator">:</span> boolean <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\n    @<span class="token function">Conduit</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">\'search\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    search <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BehaviorSubject</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    @<span class="token function">Conduit</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">\'show-zones\'</span><span class="token punctuation">,</span> <span class="token literal-property property">producesOutput</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    showZones <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BehaviorSubject</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token punctuation">}</span>\n',example:"import { Component } from '@angular/core';\nimport { Conduit, ConduitZone, ConduitZoneComponent } from '@ux-aspects/ux-aspects';\nimport { BehaviorSubject } from 'rxjs';\n\n@Component({\n    selector: 'app-filter',\n    templateUrl: './filter.component.html',\n    providers: [ConduitZone]\n})\nexport class FilterComponent extends ConduitZoneComponent {\n\n    zoneId: string = 'filter-zone';\n    acceptsInput: boolean | string[] = true;\n    producesOutput: boolean = true;\n\n    @Conduit({ id: 'search' })\n    search = new BehaviorSubject('');\n\n    @Conduit({ id: 'show-zones', producesOutput: false })\n    showZones = new BehaviorSubject(false);\n\n}\n"}},75558:p=>{p.exports={snippet:'<span class="token selector">:host</span> <span class="token punctuation">{</span>\n    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>\n    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>\n    <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>\n    <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>\n    <span class="token property">z-index</span><span class="token punctuation">:</span> 4<span class="token punctuation">;</span>\n    <span class="token property">padding</span><span class="token punctuation">:</span> 2px<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>',example:":host {\n    display: flex;\n    position: absolute;\n    top: 0;\n    right: 0;\n    z-index: 4;\n    padding: 2px;\n}"}},40190:p=>{p.exports={snippet:'<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn button-accent<span class="token punctuation">"</span></span> <span class="token attr-name">[uxPopover]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>popover<span class="token punctuation">"</span></span> <span class="token attr-name">placement</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bottom<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Edit Conduit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ng-template</span> <span class="token attr-name">#popover</span><span class="token punctuation">></span></span>\n\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ng-container</span> <span class="token attr-name">*ngIf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>takesInput<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>Input:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>\n\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox-container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ux-checkbox</span> <span class="token attr-name">*ngFor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>let zone of zones<span class="token punctuation">"</span></span>\n                <span class="token attr-name">[ngModel]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isZoneSelected(zone)<span class="token punctuation">"</span></span>\n                <span class="token attr-name">(ngModelChange)</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>setZoneSelected(zone, $event)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n                {{ zone }}\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ux-checkbox</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ng-container</span><span class="token punctuation">></span></span>\n\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ng-container</span> <span class="token attr-name">*ngIf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isProducer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>Output:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ux-checkbox</span> <span class="token attr-name">[(ngModel)]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>producesOutput<span class="token punctuation">"</span></span> <span class="token attr-name">(ngModelChange)</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>producesOutputChange.emit($event)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Produces Output<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ux-checkbox</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ng-container</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ng-template</span><span class="token punctuation">></span></span>',example:'<button type="button" class="btn button-accent" [uxPopover]="popover" placement="bottom">Edit Conduit</button>\n\n<ng-template #popover>\n\n    <ng-container *ngIf="takesInput">\n        <h4>Input:</h4>\n\n        <div class="checkbox-container">\n            <ux-checkbox *ngFor="let zone of zones"\n                [ngModel]="isZoneSelected(zone)"\n                (ngModelChange)="setZoneSelected(zone, $event)">\n                {{ zone }}\n            </ux-checkbox>\n        </div>\n    </ng-container>\n\n    <ng-container *ngIf="isProducer">\n        <h4>Output:</h4>\n        <ux-checkbox [(ngModel)]="producesOutput" (ngModelChange)="producesOutputChange.emit($event)">Produces Output</ux-checkbox>\n    </ng-container>\n</ng-template>'}},89590:p=>{p.exports={snippet:'<span class="token keyword">import</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span> EventEmitter<span class="token punctuation">,</span> Input<span class="token punctuation">,</span> Output <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@angular/core\'</span><span class="token punctuation">;</span>\n\n@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">selector</span><span class="token operator">:</span> <span class="token string">\'app-zone-inspector\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">templateUrl</span><span class="token operator">:</span> <span class="token string">\'./inspector.component.html\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">styleUrls</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'./inspector.component.css\'</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ZoneInspectorComponent</span> <span class="token punctuation">{</span>\n\n    @<span class="token function">Input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> zones<span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    @<span class="token function">Input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> acceptsInput<span class="token operator">:</span> boolean <span class="token operator">|</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    @<span class="token function">Input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> producesOutput<span class="token operator">:</span> boolean<span class="token punctuation">;</span>\n    @<span class="token function">Input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> takesInput<span class="token operator">:</span> boolean <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    @<span class="token function">Input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> isProducer<span class="token operator">:</span> boolean <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\n    @<span class="token function">Output</span><span class="token punctuation">(</span><span class="token punctuation">)</span> acceptsInputChange <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token operator">&lt;</span>boolean <span class="token operator">|</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    @<span class="token function">Output</span><span class="token punctuation">(</span><span class="token punctuation">)</span> producesOutputChange <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token operator">&lt;</span>boolean<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token function">isZoneSelected</span><span class="token punctuation">(</span>zone<span class="token operator">:</span> string<span class="token punctuation">)</span><span class="token operator">:</span> boolean <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>acceptsInput <span class="token operator">===</span> <span class="token boolean">true</span> <span class="token operator">||</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>acceptsInput<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>acceptsInput<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>zone<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">setZoneSelected</span><span class="token punctuation">(</span>zone<span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">selected</span><span class="token operator">:</span> boolean<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n\n        <span class="token comment">// if it is not an array then convert it to an array</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>acceptsInput <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>acceptsInput <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>zones<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>acceptsInput <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>acceptsInput <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">// ensure there are no duplicates</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>acceptsInput <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>acceptsInput<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">input</span> <span class="token operator">=></span> input <span class="token operator">!==</span> zone<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// perform the selection if required</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>selected <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>acceptsInput<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>zone<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">this</span><span class="token punctuation">.</span>acceptsInputChange<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>acceptsInput<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n',example:"import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n    selector: 'app-zone-inspector',\n    templateUrl: './inspector.component.html',\n    styleUrls: ['./inspector.component.css']\n})\nexport class ZoneInspectorComponent {\n\n    @Input() zones: string[];\n    @Input() acceptsInput: boolean | string[];\n    @Input() producesOutput: boolean;\n    @Input() takesInput: boolean = true;\n    @Input() isProducer: boolean = true;\n\n    @Output() acceptsInputChange = new EventEmitter<boolean | string[]>();\n    @Output() producesOutputChange = new EventEmitter<boolean>();\n\n    isZoneSelected(zone: string): boolean {\n        return this.acceptsInput === true || Array.isArray(this.acceptsInput) && this.acceptsInput.indexOf(zone) !== -1;\n    }\n\n    setZoneSelected(zone: string, selected: boolean): void {\n\n        // if it is not an array then convert it to an array\n        if (this.acceptsInput === true) {\n            this.acceptsInput = this.zones.slice();\n        }\n\n        if (this.acceptsInput === false) {\n            this.acceptsInput = [];\n        }\n\n        // ensure there are no duplicates\n        this.acceptsInput = this.acceptsInput.filter(input => input !== zone);\n\n        // perform the selection if required\n        if (selected === true) {\n            this.acceptsInput.push(zone);\n        }\n\n        this.acceptsInputChange.emit(this.acceptsInput);\n    }\n}\n"}},12671:p=>{p.exports={snippet:'<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>table table-hover<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-black<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-black<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Author<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-black<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Date<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">*ngFor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>let document of documents<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>{{ document.document }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>{{ document.author }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>{{ document.date | date: \'shortDate\' }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-zone-inspector</span> <span class="token attr-name">*ngIf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>showZones | async<span class="token punctuation">"</span></span>\n    <span class="token attr-name">[zones]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[\'toolbar-zone\', \'filter-zone\']<span class="token punctuation">"</span></span>\n    <span class="token attr-name">[isProducer]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>\n    <span class="token attr-name">[(acceptsInput)]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>acceptsInput<span class="token punctuation">"</span></span>\n    <span class="token attr-name">(acceptsInputChange)</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>setConduitProperties(search, { acceptsInput: acceptsInput })<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-zone-inspector</span><span class="token punctuation">></span></span>',example:'<table class="table table-hover">\n    <thead>\n        <tr>\n            <th class="text-black">Document</th>\n            <th class="text-black">Author</th>\n            <th class="text-black">Date</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr *ngFor="let document of documents">\n            <td>{{ document.document }}</td>\n            <td>{{ document.author }}</td>\n            <td>{{ document.date | date: \'shortDate\' }}</td>\n        </tr>\n    </tbody>\n</table>\n\n<app-zone-inspector *ngIf="showZones | async"\n    [zones]="[\'toolbar-zone\', \'filter-zone\']"\n    [isProducer]="false"\n    [(acceptsInput)]="acceptsInput"\n    (acceptsInputChange)="setConduitProperties(search, { acceptsInput: acceptsInput })">\n</app-zone-inspector>'}},75668:p=>{p.exports={snippet:'<span class="token keyword">import</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span> OnDestroy <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@angular/core\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Conduit<span class="token punctuation">,</span> ConduitZone<span class="token punctuation">,</span> ConduitZoneComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@ux-aspects/ux-aspects\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">\'chance\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> BehaviorSubject<span class="token punctuation">,</span> Subscription <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'rxjs\'</span><span class="token punctuation">;</span>\n\n@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">selector</span><span class="token operator">:</span> <span class="token string">\'app-list-view\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">templateUrl</span><span class="token operator">:</span> <span class="token string">\'./list-view.component.html\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">providers</span><span class="token operator">:</span> <span class="token punctuation">[</span>ConduitZone<span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ListViewComponent</span> <span class="token keyword">extends</span> <span class="token class-name">ConduitZoneComponent</span> <span class="token keyword">implements</span> <span class="token class-name">OnDestroy</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">zoneId</span><span class="token operator">:</span> string <span class="token operator">=</span> <span class="token string">\'list-zone\'</span><span class="token punctuation">;</span>\n    <span class="token literal-property property">documents</span><span class="token operator">:</span> ConduitListItem<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token literal-property property">acceptsInput</span><span class="token operator">:</span> boolean <span class="token operator">|</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token literal-property property">producesOutput</span><span class="token operator">:</span> boolean <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\n    @<span class="token function">Conduit</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">\'search\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    search <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BehaviorSubject</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    @<span class="token function">Conduit</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">\'show-zones\'</span><span class="token punctuation">,</span> <span class="token literal-property property">producesOutput</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    showZones <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BehaviorSubject</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">private</span> readonly _documents<span class="token operator">:</span> ConduitListItem<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> readonly _subscription<span class="token operator">:</span> Subscription<span class="token punctuation">;</span>\n\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">zone</span><span class="token operator">:</span> ConduitZone</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">super</span><span class="token punctuation">(</span>zone<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>_documents<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n                <span class="token literal-property property">document</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Document </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>index<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n                <span class="token literal-property property">author</span><span class="token operator">:</span> chance<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                <span class="token literal-property property">date</span><span class="token operator">:</span> chance<span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">year</span><span class="token operator">:</span> chance<span class="token punctuation">.</span><span class="token function">integer</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">min</span><span class="token operator">:</span> <span class="token number">2015</span><span class="token punctuation">,</span> <span class="token literal-property property">max</span><span class="token operator">:</span> <span class="token number">2018</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">as</span> Date\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">// whenever the conduit receives a new query update the items</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>_subscription <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>search<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">filterItems</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">ngOnDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>_subscription<span class="token punctuation">.</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">filterItems</span><span class="token punctuation">(</span>value<span class="token operator">:</span> string <span class="token operator">=</span> <span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>documents <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_documents<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">_document</span> <span class="token operator">=></span>\n            _document<span class="token punctuation">.</span>document<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span>\n            _document<span class="token punctuation">.</span>author<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">ConduitListItem</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">document</span><span class="token operator">:</span> string<span class="token punctuation">;</span>\n    <span class="token literal-property property">author</span><span class="token operator">:</span> string<span class="token punctuation">;</span>\n    <span class="token literal-property property">date</span><span class="token operator">:</span> Date<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n',example:"import { Component, OnDestroy } from '@angular/core';\nimport { Conduit, ConduitZone, ConduitZoneComponent } from '@ux-aspects/ux-aspects';\nimport 'chance';\nimport { BehaviorSubject, Subscription } from 'rxjs';\n\n@Component({\n    selector: 'app-list-view',\n    templateUrl: './list-view.component.html',\n    providers: [ConduitZone]\n})\nexport class ListViewComponent extends ConduitZoneComponent implements OnDestroy {\n    zoneId: string = 'list-zone';\n    documents: ConduitListItem[] = [];\n    acceptsInput: boolean | string[] = true;\n    producesOutput: boolean = true;\n\n    @Conduit({ id: 'search' })\n    search = new BehaviorSubject('');\n\n    @Conduit({ id: 'show-zones', producesOutput: false })\n    showZones = new BehaviorSubject(false);\n\n    private readonly _documents: ConduitListItem[] = [];\n    private readonly _subscription: Subscription;\n\n    constructor(zone: ConduitZone) {\n        super(zone);\n\n        for (let index = 0; index < 10; index++) {\n            this._documents.push({\n                document: `Document ${index}`,\n                author: chance.name(),\n                date: chance.date({ year: chance.integer({ min: 2015, max: 2018 }) }) as Date\n            });\n        }\n\n        // whenever the conduit receives a new query update the items\n        this._subscription = this.search.subscribe(this.filterItems.bind(this));\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    filterItems(value: string = ''): void {\n        this.documents = this._documents.filter(_document =>\n            _document.document.toLowerCase().indexOf(value.toLowerCase()) !== -1 ||\n            _document.author.toLowerCase().indexOf(value.toLowerCase()) !== -1);\n    }\n\n}\n\ninterface ConduitListItem {\n    document: string;\n    author: string;\n    date: Date;\n}\n"}},16517:p=>{p.exports={snippet:'<span class="token selector">.toolbar</span> <span class="token punctuation">{</span>\n    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>\n    <span class="token property">justify-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">;</span>\n    <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #ddd<span class="token punctuation">;</span>\n    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>\n    <span class="token property">height</span><span class="token punctuation">:</span> 34px<span class="token punctuation">;</span>\n    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>',example:".toolbar {\n    display: flex;\n    justify-content: space-between;\n    border: 1px solid #ddd;\n    margin-bottom: 20px;\n    height: 34px;\n    align-items: center;\n}"}},34312:p=>{p.exports={snippet:'<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>toolbar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>toolbar-left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-link button-secondary<span class="token punctuation">"</span></span> <span class="token attr-name">(click)</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>toggle()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ux-icon</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>resources<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ux-icon</span><span class="token punctuation">></span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>p-l-xs<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ (showZones | async) ? \'Hide Zones\' : \'Show Zones\' }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>\n\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>toolbar-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-link button-secondary<span class="token punctuation">"</span></span> <span class="token attr-name">(click)</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clear()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>p-r-xs<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Clear Search<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ux-icon</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>close<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ux-icon</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-zone-inspector</span> <span class="token attr-name">*ngIf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>showZones | async<span class="token punctuation">"</span></span>\n    <span class="token attr-name">[takesInput]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>\n    <span class="token attr-name">[(producesOutput)]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>producesOutput<span class="token punctuation">"</span></span>\n    <span class="token attr-name">(producesOutputChange)</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>setConduitProperties(search, { producesOutput: producesOutput })<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-zone-inspector</span><span class="token punctuation">></span></span>',example:'<div class="toolbar">\n    <div class="toolbar-left">\n        <button type="button" class="btn btn-link button-secondary" (click)="toggle()">\n\n            <ux-icon name="resources"></ux-icon>\n            <span class="p-l-xs">{{ (showZones | async) ? \'Hide Zones\' : \'Show Zones\' }}</span>\n\n        </button>\n    </div>\n\n    <div class="toolbar-right">\n        <button type="button" class="btn btn-link button-secondary" (click)="clear()">\n            <span class="p-r-xs">Clear Search</span>\n            <ux-icon name="close"></ux-icon>\n        </button>\n    </div>\n</div>\n\n<app-zone-inspector *ngIf="showZones | async"\n    [takesInput]="false"\n    [(producesOutput)]="producesOutput"\n    (producesOutputChange)="setConduitProperties(search, { producesOutput: producesOutput })">\n</app-zone-inspector>'}},12612:p=>{p.exports={snippet:'<span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@angular/core\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Conduit<span class="token punctuation">,</span> ConduitZone<span class="token punctuation">,</span> ConduitZoneComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@ux-aspects/ux-aspects\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> BehaviorSubject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'rxjs\'</span><span class="token punctuation">;</span>\n\n@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">selector</span><span class="token operator">:</span> <span class="token string">\'app-toolbar\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">templateUrl</span><span class="token operator">:</span> <span class="token string">\'./toolbar.component.html\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">styleUrls</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'./toolbar.component.css\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">providers</span><span class="token operator">:</span> <span class="token punctuation">[</span>ConduitZone<span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ToolbarComponent</span> <span class="token keyword">extends</span> <span class="token class-name">ConduitZoneComponent</span> <span class="token punctuation">{</span>\n\n    <span class="token literal-property property">zoneId</span><span class="token operator">:</span> string <span class="token operator">=</span> <span class="token string">\'toolbar-zone\'</span><span class="token punctuation">;</span>\n    <span class="token literal-property property">acceptsInput</span><span class="token operator">:</span> boolean <span class="token operator">|</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token literal-property property">producesOutput</span><span class="token operator">:</span> boolean <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// We want to trigger this every time it changes - even if it emitting is the same value</span>\n    @<span class="token function">Conduit</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">\'search\'</span><span class="token punctuation">,</span> <span class="token literal-property property">acceptsInput</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token function-variable function">changeDetection</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    search <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BehaviorSubject</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    @<span class="token function">Conduit</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">\'show-zones\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    showZones <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BehaviorSubject</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>search<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>showZones<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>showZones<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n',example:"import { Component } from '@angular/core';\nimport { Conduit, ConduitZone, ConduitZoneComponent } from '@ux-aspects/ux-aspects';\nimport { BehaviorSubject } from 'rxjs';\n\n@Component({\n    selector: 'app-toolbar',\n    templateUrl: './toolbar.component.html',\n    styleUrls: ['./toolbar.component.css'],\n    providers: [ConduitZone]\n})\nexport class ToolbarComponent extends ConduitZoneComponent {\n\n    zoneId: string = 'toolbar-zone';\n    acceptsInput: boolean | string[] = true;\n    producesOutput: boolean = true;\n\n    // We want to trigger this every time it changes - even if it emitting is the same value\n    @Conduit({ id: 'search', acceptsInput: false, changeDetection: () => false })\n    search = new BehaviorSubject('');\n\n    @Conduit({ id: 'show-zones' })\n    showZones = new BehaviorSubject(false);\n\n    clear(): void {\n        this.search.next('');\n    }\n\n    toggle(): void {\n        this.showZones.next(!this.showZones.value);\n    }\n}\n"}},30217:(p,v,u)=>{var i={"./app.html":88494,"./app.ts":7531,"./create-conduit.ts":63331,"./create-zone.ts":28773,"./search.html":9304,"./search.ts":87357,"docs/app/pages/components/components-sections/conduits/conduit/snippets/app.html":88494,"docs/app/pages/components/components-sections/conduits/conduit/snippets/app.ts":7531,"docs/app/pages/components/components-sections/conduits/conduit/snippets/create-conduit.ts":63331,"docs/app/pages/components/components-sections/conduits/conduit/snippets/create-zone.ts":28773,"docs/app/pages/components/components-sections/conduits/conduit/snippets/search.html":9304,"docs/app/pages/components/components-sections/conduits/conduit/snippets/search.ts":87357};function r(c){var k=y(c);return u(k)}function y(c){if(!u.o(i,c)){var k=new Error("Cannot find module '"+c+"'");throw k.code="MODULE_NOT_FOUND",k}return i[c]}r.keys=function(){return Object.keys(i)},r.resolve=y,p.exports=r,r.id=30217},68543:(p,v,u)=>{var i={"./app.component.css":76737,"./app.component.html":23600,"./app.component.ts":15752,"./filter.component.html":70239,"./filter.component.ts":30731,"./inspector.component.css":75558,"./inspector.component.html":40190,"./inspector.component.ts":89590,"./list-view.component.html":12671,"./list-view.component.ts":75668,"./toolbar.component.css":16517,"./toolbar.component.html":34312,"./toolbar.component.ts":12612,"docs/app/pages/components/components-sections/conduits/multiple-zones/snippets/app.component.css":76737,"docs/app/pages/components/components-sections/conduits/multiple-zones/snippets/app.component.html":23600,"docs/app/pages/components/components-sections/conduits/multiple-zones/snippets/app.component.ts":15752,"docs/app/pages/components/components-sections/conduits/multiple-zones/snippets/filter.component.html":70239,"docs/app/pages/components/components-sections/conduits/multiple-zones/snippets/filter.component.ts":30731,"docs/app/pages/components/components-sections/conduits/multiple-zones/snippets/inspector.component.css":75558,"docs/app/pages/components/components-sections/conduits/multiple-zones/snippets/inspector.component.html":40190,"docs/app/pages/components/components-sections/conduits/multiple-zones/snippets/inspector.component.ts":89590,"docs/app/pages/components/components-sections/conduits/multiple-zones/snippets/list-view.component.html":12671,"docs/app/pages/components/components-sections/conduits/multiple-zones/snippets/list-view.component.ts":75668,"docs/app/pages/components/components-sections/conduits/multiple-zones/snippets/toolbar.component.css":16517,"docs/app/pages/components/components-sections/conduits/multiple-zones/snippets/toolbar.component.html":34312,"docs/app/pages/components/components-sections/conduits/multiple-zones/snippets/toolbar.component.ts":12612};function r(c){var k=y(c);return u(k)}function y(c){if(!u.o(i,c)){var k=new Error("Cannot find module '"+c+"'");throw k.code="MODULE_NOT_FOUND",k}return i[c]}r.keys=function(){return Object.keys(i)},r.resolve=y,p.exports=r,r.id=68543},82143:(p,v,u)=>{"use strict";u.r(v),u.d(v,{ComponentsConduitsModule:()=>W});var i=u(96814),r=u(40285),y=u(74289),c=u(78478),k=u(24535),S=u(991),Z=u(64661),d=u(21802),T=u(56082),U=u(89044),n=u(28830),j=u(12012),J=u(41597),B=u(61525),F=u(6306),P=u(64056),m=u(45125),q=u(42861);class C extends c.Q8F{constructor(){super(...arguments),this.search=new m.X(""),this.producesOutput=!0,this.acceptsInput=!0}updateConduit(){this.setConduitProperties(this.search,{producesOutput:this.producesOutput,acceptsInput:this.acceptsInput})}static#n=this.\u0275fac=function(){let e;return function(a){return(e||(e=n.n5z(C)))(a||C)}}();static#s=this.\u0275cmp=n.Xpm({type:C,selectors:[["uxd-conduit-search"]],features:[n.qOj],decls:8,vars:5,consts:[["type","text","placeholder","Search...",1,"form-control",3,"ngModel","ngModelChange"],[1,"checkbox-container"],[1,"m-b-xs",3,"ngModel","ngModelChange"],[3,"ngModel","ngModelChange"]],template:function(s,a){1&s&&(n.TgZ(0,"input",0),n.NdJ("ngModelChange",function(l){return a.search.next(l)}),n.ALo(1,"async"),n.qZA(),n._UZ(2,"br"),n.TgZ(3,"div",1)(4,"ux-checkbox",2),n.NdJ("ngModelChange",function(l){return a.producesOutput=l})("ngModelChange",function(){return a.updateConduit()}),n._uU(5,"Produces Output"),n.qZA(),n.TgZ(6,"ux-checkbox",3),n.NdJ("ngModelChange",function(l){return a.acceptsInput=l})("ngModelChange",function(){return a.updateConduit()}),n._uU(7,"Accepts Input"),n.qZA()()),2&s&&(n.Q6J("ngModel",n.lcZ(1,3,a.search)),n.xp6(4),n.Q6J("ngModel",a.producesOutput),n.xp6(2),n.Q6J("ngModel",a.acceptsInput))},dependencies:[q.b,r.Fj,r.JJ,r.On,i.Ov],encapsulation:2})}(0,d.gn)([(0,c.J14)((0,n.Gpc)(()=>({id:"search"})))],C.prototype,"search",void 0);let O=(()=>{class o extends c.DLK{constructor(){super(...arguments),this.zoneId="root-zone"}static#n=this.\u0275fac=function(){let s;return function(t){return(s||(s=n.n5z(o)))(t||o)}}();static#s=this.\u0275cmp=n.Xpm({type:o,selectors:[["uxd-conduit-example-zone"]],features:[n._Bn([c.J4b]),n.qOj],decls:10,vars:0,consts:[[1,"container-fluid"],[1,"row"],[1,"col-sm-6"]],template:function(a,t){1&a&&(n.TgZ(0,"div",0)(1,"div",1)(2,"div",2)(3,"h4"),n._uU(4,"Conduit One"),n.qZA(),n._UZ(5,"uxd-conduit-search"),n.qZA(),n.TgZ(6,"div",2)(7,"h4"),n._uU(8,"Conduit Two"),n.qZA(),n._UZ(9,"uxd-conduit-search"),n.qZA()()())},dependencies:[C],encapsulation:2})}return o})(),w=class I extends T.u{constructor(){super(u(30217)),this.playground={files:{"app.component.html":this.snippets.raw.appHtml,"app.component.ts":this.snippets.raw.appTs,"search.component.html":this.snippets.raw.searchHtml,"search.component.ts":this.snippets.raw.searchTs},modules:[{imports:["CheckboxModule"],library:"@ux-aspects/ux-aspects"},{imports:["SearchComponent"],library:"./search.component",declaration:!0}]}}static#n=this.\u0275fac=function(s){return new(s||I)};static#s=this.\u0275cmp=n.Xpm({type:I,selectors:[["uxd-conduit"]],features:[n.qOj],decls:213,vars:8,consts:[[3,"content"],["tableTitle","Conduit Decorator"],["uxd-api-property","","name","id","type","string",3,"required"],["uxd-api-property","","name","acceptsInput","type","boolean | string[]","defaultValue","true"],["uxd-api-property","","name","producesOutput","type","boolean","defaultValue","true"],["uxd-api-property","","name","changeDetection","type","(newValue: any, oldValue: any) => boolean"],["uxd-api-property","","name","map","type","(value: any) => any"],["tableTitle","Conduit Component Functions"],["uxd-api-property","","name","createConduit","args","Subject, ConduitProperties"],["uxd-api-property","","name","setConduitProperties","args","Subject, ConduitProperties"],[3,"minimal"],["heading","app.component.html"],["heading","app.component.ts"],["heading","search.component.html"],["heading","search.component.ts"]],template:function(s,a){1&s&&(n._UZ(0,"uxd-conduit-example-zone")(1,"hr"),n.TgZ(2,"p"),n._uU(3," Conduits provide a simple way of allowing multiple components to share data and remain in sync with minimal setup. It also provides simple control mechanisms to define how data is shared between components through zones.\n"),n.qZA(),n.TgZ(4,"h4"),n._uU(5,"Creating a Conduit"),n.qZA(),n.TgZ(6,"p"),n._uU(7," A conduit is built on top of the RxJS "),n.TgZ(8,"code"),n._uU(9,"Subject"),n.qZA(),n._uU(10,". To create a conduit you should create a public instance variable on your component class. This should be initialized as a new "),n.TgZ(11,"code"),n._uU(12,"Subject"),n.qZA(),n._uU(13," or "),n.TgZ(14,"code"),n._uU(15,"BehaviorSubject"),n.qZA(),n._uU(16," if you want to specify a default value.\n"),n.qZA(),n.TgZ(17,"p"),n._uU(18," When a conduit is created, for example when a component is initialized, it will check if there are any other conduits with the same id in accessible zones and if so will retrieve the latest value. This is useful in scenarios such as a customizable dashboard where widgets may be dynamically added or removed. When a dashboard widget is added it can automatically detect a value to consume from any other widgets with a matching conduit.\n"),n.qZA(),n.TgZ(19,"p"),n._uU(20," The variable should be given the "),n.TgZ(21,"code"),n._uU(22,"@Conduit"),n.qZA(),n._uU(23," decorator with the appropriate configuration. Additionally the component class should extend "),n.TgZ(24,"code"),n._uU(25,"ConduitComponent"),n.qZA(),n._uU(26," where possible to setup all conduits automatically. If it is not possible to extend this class, inject the "),n.TgZ(27,"code"),n._uU(28,"ConduitZone"),n.qZA(),n._uU(29," service and in the "),n.TgZ(30,"code"),n._uU(31,"ngOnInit"),n.qZA(),n._uU(32," hook call "),n.TgZ(33,"code"),n._uU(34,"zone.registerConduits(this)"),n.qZA(),n._uU(35,". In the "),n.TgZ(36,"code"),n._uU(37,"ngOnDestroy"),n.qZA(),n._uU(38," hook call "),n.TgZ(39,"code"),n._uU(40,"zone.unregisterConduits(this)"),n.qZA(),n._uU(41," to remove conduits when they are no longer needed.\n"),n.qZA(),n.TgZ(42,"p"),n._uU(43," Below is an example of creating a conduit:\n"),n.qZA(),n._UZ(44,"uxd-snippet",0),n.TgZ(45,"p"),n._uU(46," The following properties can be given to the "),n.TgZ(47,"code"),n._uU(48,"Conduit"),n.qZA(),n._uU(49," decorator:\n"),n.qZA(),n.TgZ(50,"uxd-api-properties",1)(51,"tr",2),n._uU(52," This is an identifier that is used to sync conduits across components. Any conduits with the same "),n.TgZ(53,"code"),n._uU(54,"id"),n.qZA(),n._uU(55," will be kept in sync if they accept input. "),n.qZA(),n.TgZ(56,"tr",3),n._uU(57," This can be used to limit when this conduit gets updated. If this property is set to "),n.TgZ(58,"code"),n._uU(59,"false"),n.qZA(),n._uU(60," then it will not update when other conduits with the same "),n.TgZ(61,"code"),n._uU(62,"id"),n.qZA(),n._uU(63," change. If this property is set to "),n.TgZ(64,"code"),n._uU(65,"true"),n.qZA(),n._uU(66," then it will always update when other conduits with the same "),n.TgZ(67,"code"),n._uU(68,"id"),n.qZA(),n._uU(69," change. Alternatively this can be set to a string array of zone ids. If a conduit with the same id changes in one of the specified zones then it will update, otherwise it will not. "),n.qZA(),n.TgZ(70,"tr",4),n._uU(71," This can be used to prevent the conduit having an effect on any other. If this property is set to "),n.TgZ(72,"code"),n._uU(73,"false"),n.qZA(),n._uU(74," then it will not emit this change to any other conduit. If this property is set to "),n.TgZ(75,"code"),n._uU(76,"true"),n.qZA(),n._uU(77," then it will emit this change to other conduits. "),n.qZA(),n.TgZ(78,"tr",5),n._uU(79," By default when a conduit emits an update, it first performs an equality check to see if the value has actually changed. By default the equality check is a "),n.TgZ(80,"code"),n._uU(81,"==="),n.qZA(),n._uU(82," comparison, however if the conduit value is an object or an array you may need to provide a custom equality check to ensure equality check is efficient and to prevent any infinite loops. The value should be a simple function that receives two arguments, the new value and old value. The function should return "),n.TgZ(83,"code"),n._uU(84,"true"),n.qZA(),n._uU(85," if the object are the same and "),n.TgZ(86,"code"),n._uU(87,"false"),n.qZA(),n._uU(88," if it has changed. "),n.qZA(),n.TgZ(89,"tr",6),n._uU(90," It may be desirable to extract or transform the conduit value when it changes. For example, we may have a "),n.TgZ(91,"code"),n._uU(92,"User"),n.qZA(),n._uU(93," conduit that contains an object. In one component we may want only to receive the name of the user. We can use this property to provide a function that takes in the conduit value and returns it in a format we require. "),n.qZA()(),n.TgZ(94,"h4"),n._uU(95,"Conduit Utilities"),n.qZA(),n.TgZ(96,"p"),n._uU(97," By having our component extend the "),n.TgZ(98,"code"),n._uU(99,"ConduitComponent"),n.qZA(),n._uU(100," we gain access to some utility functions that can be used to create and modify conduits dynamically at runtime.\n"),n.qZA(),n.TgZ(101,"p"),n._uU(102," The following methods are available:\n"),n.qZA(),n.TgZ(103,"uxd-api-properties",7)(104,"tr",8)(105,"p"),n._uU(106," This allows programmatic creation of a conduit at runtime. The function should be called with two parameters, the first is the "),n.TgZ(107,"code"),n._uU(108,"Subject"),n.qZA(),n._uU(109," or "),n.TgZ(110,"code"),n._uU(111,"BehaviorSubject"),n.qZA(),n._uU(112,", and the second is the properties object which is identical to the object normally passed to the "),n.TgZ(113,"code"),n._uU(114,"@Conduit"),n.qZA(),n._uU(115," decorator. "),n.qZA(),n.TgZ(116,"p")(117,"b"),n._uU(118,"Note: "),n.qZA(),n._uU(119," If your class does not extend "),n.TgZ(120,"code"),n._uU(121,"ConduitComponent"),n.qZA(),n._uU(122,", these functions are also available on the "),n.TgZ(123,"code"),n._uU(124,"ConduitZone"),n.qZA(),n._uU(125," service. "),n.qZA()(),n.TgZ(126,"tr",9)(127,"p"),n._uU(128," This allows conduit properties to be modified at any time. For example, you may wish to alter which zones a Conduit can accept data from. This function should be given two arguments. The first argument should be the "),n.TgZ(129,"code"),n._uU(130,"Subject"),n.qZA(),n._uU(131," or "),n.TgZ(132,"code"),n._uU(133,"BehaviorSubject"),n.qZA(),n._uU(134,", the second should be an object containing the properties you wish to update. "),n.qZA(),n.TgZ(135,"p")(136,"b"),n._uU(137,"Note: "),n.qZA(),n._uU(138," If your class does not extend "),n.TgZ(139,"code"),n._uU(140,"ConduitComponent"),n.qZA(),n._uU(141,", these functions are also available on the "),n.TgZ(142,"code"),n._uU(143,"ConduitZone"),n.qZA(),n._uU(144," service. "),n.qZA()()(),n.TgZ(145,"h4"),n._uU(146,"Conduit Zones"),n.qZA(),n.TgZ(147,"p"),n._uU(148," A conduit zone is a way of easily scoping what conduits can be effected when values change.\n"),n.qZA(),n.TgZ(149,"p"),n._uU(150," To create a conduit zone a component should register the "),n.TgZ(151,"code"),n._uU(152,"ConduitZone"),n.qZA(),n._uU(153," provider and where possible extend the "),n.TgZ(154,"code"),n._uU(155,"ConduitZoneComponent"),n.qZA(),n._uU(156," class. The "),n.TgZ(157,"code"),n._uU(158,"ConduitZoneComponent"),n.qZA(),n._uU(159," class extends "),n.TgZ(160,"code"),n._uU(161,"ConduitComponent"),n.qZA(),n._uU(162," so you also have access to the methods listed above. Each zone must also have a unique id which should be set by adding a "),n.TgZ(163,"code"),n._uU(164,"zoneId"),n.qZA(),n._uU(165," property to the class.\n"),n.qZA(),n.TgZ(166,"p"),n._uU(167," If a class extends "),n.TgZ(168,"code"),n._uU(169,"ConduitZoneComponent"),n.qZA(),n._uU(170," and uses the "),n.TgZ(171,"code"),n._uU(172,"ngOnInit"),n.qZA(),n._uU(173," or "),n.TgZ(174,"code"),n._uU(175,"ngOnDestroy"),n.qZA(),n._uU(176," lifecycle hook, you must call "),n.TgZ(177,"code"),n._uU(178,"super.ngOnInit()"),n.qZA(),n._uU(179," and "),n.TgZ(180,"code"),n._uU(181,"super.ngOnDestroy"),n.qZA(),n._uU(182," from within the respective hook.\n"),n.qZA(),n.TgZ(183,"p"),n._uU(184," If it is not possible to extend the "),n.TgZ(185,"code"),n._uU(186,"ConduitZoneComponent"),n.qZA(),n._uU(187," class, you should inject the "),n.TgZ(188,"code"),n._uU(189,"ConduitZone"),n.qZA(),n._uU(190," service and call the "),n.TgZ(191,"code"),n._uU(192,"setZoneId"),n.qZA(),n._uU(193," function passing it the unique zone id.\n"),n.qZA(),n.TgZ(194,"p"),n._uU(195," Below is an example of how to create a zone:\n"),n.qZA(),n._UZ(196,"uxd-snippet",0),n.TgZ(197,"p"),n._uU(198," Conduit zones work with Angular's "),n.TgZ(199,"code"),n._uU(200,"Injector"),n.qZA(),n._uU(201,", so a conduit created in the component, or a child component will be part of that zone. Zones may be nested, so a child component may create a new zone.\n"),n.qZA(),n.TgZ(202,"p"),n._uU(203," The following code can be used to create the example above:\n"),n.qZA(),n.TgZ(204,"ux-tabset",10)(205,"ux-tab",11),n._UZ(206,"uxd-snippet",0),n.qZA(),n.TgZ(207,"ux-tab",12),n._UZ(208,"uxd-snippet",0),n.qZA(),n.TgZ(209,"ux-tab",13),n._UZ(210,"uxd-snippet",0),n.qZA(),n.TgZ(211,"ux-tab",14),n._UZ(212,"uxd-snippet",0),n.qZA()()),2&s&&(n.xp6(44),n.Q6J("content",a.snippets.compiled.createConduitTs),n.xp6(7),n.Q6J("required",!0),n.xp6(145),n.Q6J("content",a.snippets.compiled.createZoneTs),n.xp6(8),n.Q6J("minimal",!1),n.xp6(2),n.Q6J("content",a.snippets.compiled.appHtml),n.xp6(2),n.Q6J("content",a.snippets.compiled.appTs),n.xp6(2),n.Q6J("content",a.snippets.compiled.searchHtml),n.xp6(2),n.Q6J("content",a.snippets.compiled.searchTs))},dependencies:[j.$,J.S,B.j,F.A,P.i,O],encapsulation:2})};w=(0,d.gn)([(0,U.cG)("ComponentsConduitComponent")],w);var A=u(1494),M=u(24315),L=u(10843);function D(o,e){if(1&o){const s=n.EpF();n.TgZ(0,"ux-checkbox",5),n.NdJ("ngModelChange",function(t){const nn=n.CHM(s).$implicit,sn=n.oxw(3);return n.KtG(sn.setZoneSelected(nn,t))}),n._uU(1),n.qZA()}if(2&o){const s=e.$implicit,a=n.oxw(3);n.Q6J("ngModel",a.isZoneSelected(s)),n.xp6(1),n.hij(" ",s," ")}}function E(o,e){if(1&o&&(n.ynx(0),n.TgZ(1,"h4"),n._uU(2,"Input:"),n.qZA(),n.TgZ(3,"div",3),n.YNc(4,D,2,2,"ux-checkbox",4),n.qZA(),n.BQk()),2&o){const s=n.oxw(2);n.xp6(4),n.Q6J("ngForOf",s.zones)}}function N(o,e){if(1&o){const s=n.EpF();n.ynx(0),n.TgZ(1,"h4"),n._uU(2,"Output:"),n.qZA(),n.TgZ(3,"ux-checkbox",5),n.NdJ("ngModelChange",function(t){n.CHM(s);const l=n.oxw(2);return n.KtG(l.producesOutput=t)})("ngModelChange",function(t){n.CHM(s);const l=n.oxw(2);return n.KtG(l.producesOutputChange.emit(t))}),n._uU(4,"Produces Output"),n.qZA(),n.BQk()}if(2&o){const s=n.oxw(2);n.xp6(3),n.Q6J("ngModel",s.producesOutput)}}function Q(o,e){if(1&o&&(n.YNc(0,E,5,1,"ng-container",2),n.YNc(1,N,5,1,"ng-container",2)),2&o){const s=n.oxw();n.Q6J("ngIf",s.takesInput),n.xp6(1),n.Q6J("ngIf",s.isProducer)}}let b=(()=>{class o{constructor(){this.takesInput=!0,this.isProducer=!0,this.acceptsInputChange=new n.vpe,this.producesOutputChange=new n.vpe}isZoneSelected(s){return!0===this.acceptsInput||Array.isArray(this.acceptsInput)&&-1!==this.acceptsInput.indexOf(s)}setZoneSelected(s,a){!0===this.acceptsInput&&(this.acceptsInput=this.zones.slice()),!1===this.acceptsInput&&(this.acceptsInput=[]),this.acceptsInput=this.acceptsInput.filter(t=>t!==s),!0===a&&this.acceptsInput.push(s),this.acceptsInputChange.emit(this.acceptsInput)}static#n=this.\u0275fac=function(a){return new(a||o)};static#s=this.\u0275cmp=n.Xpm({type:o,selectors:[["uxd-conduit-zone-inspector"]],inputs:{zones:"zones",acceptsInput:"acceptsInput",producesOutput:"producesOutput",takesInput:"takesInput",isProducer:"isProducer"},outputs:{acceptsInputChange:"acceptsInputChange",producesOutputChange:"producesOutputChange"},decls:4,vars:1,consts:[["type","button","placement","bottom",1,"btn","button-accent",3,"uxPopover"],["popover",""],[4,"ngIf"],[1,"checkbox-container"],[3,"ngModel","ngModelChange",4,"ngFor","ngForOf"],[3,"ngModel","ngModelChange"]],template:function(a,t){if(1&a&&(n.TgZ(0,"button",0),n._uU(1,"Edit Conduit"),n.qZA(),n.YNc(2,Q,2,2,"ng-template",null,1,n.W1O)),2&a){const l=n.MAs(3);n.Q6J("uxPopover",l)}},dependencies:[q.b,i.sg,i.O5,A.G,r.JJ,r.On,L.k],styles:["[_nghost-%COMP%]{display:flex;position:absolute;top:0;right:0;z-index:4;padding:2px}"]})}return o})();function G(o,e){if(1&o){const s=n.EpF();n.TgZ(0,"uxd-conduit-zone-inspector",9),n.NdJ("producesOutputChange",function(t){n.CHM(s);const l=n.oxw();return n.KtG(l.producesOutput=t)})("producesOutputChange",function(){n.CHM(s);const t=n.oxw();return n.KtG(t.setConduitProperties(t.search,{producesOutput:t.producesOutput}))}),n.qZA()}if(2&o){const s=n.oxw();n.Q6J("takesInput",!1)("producesOutput",s.producesOutput)}}class h extends c.DLK{constructor(){super(...arguments),this.zoneId="toolbar-zone",this.acceptsInput=!0,this.producesOutput=!0,this.search=new m.X(""),this.showZones=new m.X(!1)}clear(){this.search.next("")}toggle(){this.showZones.next(!this.showZones.value)}static#n=this.\u0275fac=function(){let e;return function(a){return(e||(e=n.n5z(h)))(a||h)}}();static#s=this.\u0275cmp=n.Xpm({type:h,selectors:[["uxd-components-conduit-toolbar"]],features:[n._Bn([c.J4b]),n.qOj],decls:14,vars:6,consts:[[1,"toolbar"],[1,"toolbar-left"],["type","button",1,"btn","btn-link","button-secondary",3,"click"],["name","resources"],[1,"p-l-xs"],[1,"toolbar-right"],[1,"p-r-xs"],["name","close"],[3,"takesInput","producesOutput","producesOutputChange",4,"ngIf"],[3,"takesInput","producesOutput","producesOutputChange"]],template:function(s,a){1&s&&(n.TgZ(0,"div",0)(1,"div",1)(2,"button",2),n.NdJ("click",function(){return a.toggle()}),n._UZ(3,"ux-icon",3),n.TgZ(4,"span",4),n._uU(5),n.ALo(6,"async"),n.qZA()()(),n.TgZ(7,"div",5)(8,"button",2),n.NdJ("click",function(){return a.clear()}),n.TgZ(9,"span",6),n._uU(10,"Clear Search"),n.qZA(),n._UZ(11,"ux-icon",7),n.qZA()()(),n.YNc(12,G,1,2,"uxd-conduit-zone-inspector",8),n.ALo(13,"async")),2&s&&(n.xp6(5),n.Oqu(n.lcZ(6,2,a.showZones)?"Hide Zones":"Show Zones"),n.xp6(7),n.Q6J("ngIf",n.lcZ(13,4,a.showZones)))},dependencies:[i.O5,A.G,M.o,b,i.Ov],styles:[".toolbar[_ngcontent-%COMP%]{display:flex;justify-content:space-between;border:1px solid #ddd;margin-bottom:20px;height:34px;align-items:center}"]})}function H(o,e){if(1&o&&(n.TgZ(0,"tr")(1,"td"),n._uU(2),n.qZA(),n.TgZ(3,"td"),n._uU(4),n.qZA(),n.TgZ(5,"td"),n._uU(6),n.ALo(7,"date"),n.qZA()()),2&o){const s=e.$implicit;n.xp6(2),n.Oqu(s.document),n.xp6(2),n.Oqu(s.author),n.xp6(2),n.Oqu(n.xi3(7,3,s.date,"shortDate"))}}(0,d.gn)([(0,c.J14)((0,n.Gpc)(()=>({id:"search",acceptsInput:!1,changeDetection:()=>!1})))],h.prototype,"search",void 0),(0,d.gn)([(0,c.J14)((0,n.Gpc)(()=>({id:"show-zones"})))],h.prototype,"showZones",void 0),u(66963);const K=function(){return["toolbar-zone","filter-zone"]};function X(o,e){if(1&o){const s=n.EpF();n.TgZ(0,"uxd-conduit-zone-inspector",4),n.NdJ("acceptsInputChange",function(t){n.CHM(s);const l=n.oxw();return n.KtG(l.acceptsInput=t)})("acceptsInputChange",function(){n.CHM(s);const t=n.oxw();return n.KtG(t.setConduitProperties(t.search,{acceptsInput:t.acceptsInput}))}),n.qZA()}if(2&o){const s=n.oxw();n.Q6J("zones",n.DdM(3,K))("isProducer",!1)("acceptsInput",s.acceptsInput)}}class f extends c.DLK{constructor(){super(),this.zoneId="list-zone",this.documents=[],this.acceptsInput=!0,this.producesOutput=!0,this.search=new m.X(""),this.showZones=new m.X(!1),this._documents=[];for(let e=0;e<10;e++)this._documents.push({document:`Document ${e}`,author:chance.name(),date:chance.date({year:chance.integer({min:2015,max:2018})})});this._subscription=this.search.subscribe(this.filterItems.bind(this))}ngOnDestroy(){this._subscription.unsubscribe()}filterItems(e=""){this.documents=this._documents.filter(s=>-1!==s.document.toLowerCase().indexOf(e.toLowerCase())||-1!==s.author.toLowerCase().indexOf(e.toLowerCase()))}static#n=this.\u0275fac=function(s){return new(s||f)};static#s=this.\u0275cmp=n.Xpm({type:f,selectors:[["uxd-components-conduit-list-view"]],features:[n._Bn([c.J4b]),n.qOj],decls:13,vars:4,consts:[[1,"table","table-hover"],[1,"text-black"],[4,"ngFor","ngForOf"],[3,"zones","isProducer","acceptsInput","acceptsInputChange",4,"ngIf"],[3,"zones","isProducer","acceptsInput","acceptsInputChange"]],template:function(s,a){1&s&&(n.TgZ(0,"table",0)(1,"thead")(2,"tr")(3,"th",1),n._uU(4,"Document"),n.qZA(),n.TgZ(5,"th",1),n._uU(6,"Author"),n.qZA(),n.TgZ(7,"th",1),n._uU(8,"Date"),n.qZA()()(),n.TgZ(9,"tbody"),n.YNc(10,H,8,6,"tr",2),n.qZA()(),n.YNc(11,X,1,4,"uxd-conduit-zone-inspector",3),n.ALo(12,"async")),2&s&&(n.xp6(10),n.Q6J("ngForOf",a.documents),n.xp6(1),n.Q6J("ngIf",n.lcZ(12,2,a.showZones)))},dependencies:[i.sg,i.O5,b,i.Ov,i.uU],encapsulation:2})}(0,d.gn)([(0,c.J14)({id:"search"})],f.prototype,"search",void 0),(0,d.gn)([(0,c.J14)((0,n.Gpc)(()=>({id:"show-zones",producesOutput:!1})))],f.prototype,"showZones",void 0);const V=function(){return["toolbar-zone"]};function $(o,e){if(1&o){const s=n.EpF();n.TgZ(0,"uxd-conduit-zone-inspector",5),n.NdJ("acceptsInputChange",function(t){n.CHM(s);const l=n.oxw();return n.KtG(l.acceptsInput=t)})("producesOutputChange",function(t){n.CHM(s);const l=n.oxw();return n.KtG(l.producesOutput=t)})("acceptsInputChange",function(){n.CHM(s);const t=n.oxw();return n.KtG(t.setConduitProperties(t.search,{acceptsInput:t.acceptsInput,producesOutput:t.producesOutput}))})("producesOutputChange",function(){n.CHM(s);const t=n.oxw();return n.KtG(t.setConduitProperties(t.search,{acceptsInput:t.acceptsInput,producesOutput:t.producesOutput}))}),n.qZA()}if(2&o){const s=n.oxw();n.Q6J("zones",n.DdM(3,V))("acceptsInput",s.acceptsInput)("producesOutput",s.producesOutput)}}class g extends c.DLK{constructor(){super(...arguments),this.zoneId="filter-zone",this.acceptsInput=!0,this.producesOutput=!0,this.search=new m.X(""),this.showZones=new m.X(!1)}static#n=this.\u0275fac=function(){let e;return function(a){return(e||(e=n.n5z(g)))(a||g)}}();static#s=this.\u0275cmp=n.Xpm({type:g,selectors:[["uxd-components-conduit-filter"]],features:[n._Bn([c.J4b]),n.qOj],decls:7,vars:6,consts:[[1,"input-group","m-b"],[1,"input-group-addon"],["name","search","id","conduit-search-icon"],["type","text","placeholder","Search...","aria-labelledby","conduit-search-icon",1,"form-control",3,"ngModel","ngModelChange"],[3,"zones","acceptsInput","producesOutput","acceptsInputChange","producesOutputChange",4,"ngIf"],[3,"zones","acceptsInput","producesOutput","acceptsInputChange","producesOutputChange"]],template:function(s,a){1&s&&(n.TgZ(0,"div",0)(1,"div",1),n._UZ(2,"ux-icon",2),n.qZA(),n.TgZ(3,"input",3),n.NdJ("ngModelChange",function(l){return a.search.next(l)}),n.ALo(4,"async"),n.qZA()(),n.YNc(5,$,1,4,"uxd-conduit-zone-inspector",4),n.ALo(6,"async")),2&s&&(n.xp6(3),n.Q6J("ngModel",n.lcZ(4,2,a.search)),n.xp6(2),n.Q6J("ngIf",n.lcZ(6,4,a.showZones)))},dependencies:[i.O5,r.Fj,r.JJ,r.On,M.o,b,i.Ov],encapsulation:2})}(0,d.gn)([(0,c.J14)((0,n.Gpc)(()=>({id:"search"})))],g.prototype,"search",void 0),(0,d.gn)([(0,c.J14)((0,n.Gpc)(()=>({id:"show-zones",producesOutput:!1})))],g.prototype,"showZones",void 0);class x extends c.DLK{constructor(){super(...arguments),this.zoneId="root-zone",this.showZones=new m.X(!1)}static#n=this.\u0275fac=function(){let e;return function(a){return(e||(e=n.n5z(x)))(a||x)}}();static#s=this.\u0275cmp=n.Xpm({type:x,selectors:[["uxd-conduit-zone-example"]],features:[n._Bn([c.J4b]),n.qOj],decls:12,vars:12,consts:[[1,"container-fluid"],[1,"row"],[1,"col-sm-12"],[1,"col-sm-8"],[1,"col-sm-4"]],template:function(s,a){1&s&&(n.TgZ(0,"div",0)(1,"div",1)(2,"div",2)(3,"uxd-components-conduit-toolbar"),n.ALo(4,"async"),n.qZA()()(),n.TgZ(5,"div",1)(6,"div",3)(7,"uxd-components-conduit-list-view"),n.ALo(8,"async"),n.qZA()(),n.TgZ(9,"div",4)(10,"uxd-components-conduit-filter"),n.ALo(11,"async"),n.qZA()()()()),2&s&&(n.xp6(3),n.ekj("zone-outline",n.lcZ(4,6,a.showZones)),n.xp6(4),n.ekj("zone-outline",n.lcZ(8,8,a.showZones)),n.xp6(3),n.ekj("zone-outline",n.lcZ(11,10,a.showZones)))},dependencies:[h,f,g,i.Ov],styles:[".zone-outline[_ngcontent-%COMP%]{display:block;position:relative;box-shadow:0 0 1px 1px #0079ed}"]})}(0,d.gn)([(0,c.J14)((0,n.Gpc)(()=>({id:"show-zones",producesOutput:!1})))],x.prototype,"showZones",void 0);let _=class z extends T.u{constructor(){super(u(68543)),this.playground={files:{"app.component.html":this.snippets.raw.appComponentHtml,"app.component.ts":this.snippets.raw.appComponentTs,"app.component.css":this.snippets.raw.appComponentCss,"filter/filter.component.ts":this.snippets.raw.filterComponentTs,"filter/filter.component.html":this.snippets.raw.filterComponentHtml,"inspector/inspector.component.html":this.snippets.raw.inspectorComponentHtml,"inspector/inspector.component.ts":this.snippets.raw.inspectorComponentTs,"inspector/inspector.component.css":this.snippets.raw.inspectorComponentCss,"list-view/list-view.component.ts":this.snippets.raw.listViewComponentTs,"list-view/list-view.component.html":this.snippets.raw.listViewComponentHtml,"toolbar/toolbar.component.html":this.snippets.raw.toolbarComponentHtml,"toolbar/toolbar.component.ts":this.snippets.raw.toolbarComponentTs,"toolbar/toolbar.component.css":this.snippets.raw.toolbarComponentCss},modules:[{imports:["CheckboxModule","PopoverModule"],library:"@ux-aspects/ux-aspects"},{imports:["FilterComponent"],library:"./filter/filter.component",declaration:!0},{imports:["ListViewComponent"],library:"./list-view/list-view.component",declaration:!0},{imports:["ZoneInspectorComponent"],library:"./inspector/inspector.component",declaration:!0},{imports:["ToolbarComponent"],library:"./toolbar/toolbar.component",declaration:!0}]}}static#n=this.\u0275fac=function(s){return new(s||z)};static#s=this.\u0275cmp=n.Xpm({type:z,selectors:[["uxd-components-multiple-zones"]],features:[n.qOj],decls:9,vars:0,template:function(s,a){1&s&&(n._UZ(0,"uxd-conduit-zone-example")(1,"hr"),n.TgZ(2,"p"),n._uU(3," The example above shows how conduits can be used across multiple components along with Zones to control the flow of data. By clicking the "),n.TgZ(4,"code"),n._uU(5,"Show Zones"),n.qZA(),n._uU(6," button, you will be able to dynamically modify the input and output properties of each conduit and see the effect it has when the search query changes.\n"),n.qZA(),n.TgZ(7,"p"),n._uU(8," The code for the example can be found by clicking the Edit in Plunker link above.\n"),n.qZA())},dependencies:[x],encapsulation:2})};_=(0,d.gn)([(0,U.cG)("ComponentsMultipleZonesComponent")],_);const Y=[w,C,O,_,h,f,g,x,b],R=[{path:"**",component:S.R,data:{category:Z.N.resolveCategoryData(Z.I.Components,"Conduits")}}];let W=(()=>{class o{constructor(s,a){a.registerResolver(s,Y)}static#n=this.\u0275fac=function(a){return new(a||o)(n.LFG(n._Vd),n.LFG(Z.N))};static#s=this.\u0275mod=n.oAB({type:o});static#a=this.\u0275inj=n.cJS({imports:[c.nDK,i.ez,k.N,r.u5,c.QX1,c.UUf,y.Bz.forChild(R),c.f_l]})}return o})()}}]);