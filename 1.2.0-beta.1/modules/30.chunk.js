webpackJsonp([30],{1479:function(t,e,n){"use strict";!function(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}(n(1480))},1480:function(t,e,n){"use strict";function o(t,e){return"rgba("+t.concat(e).join(",")+")"}function r(t,e){return Math.floor(Math.random()*(e-t+1))+t}function a(t){return{backgroundColor:o(t,.4),borderColor:o(t,1),pointBackgroundColor:o(t,1),pointBorderColor:"#fff",pointHoverBackgroundColor:"#fff",pointHoverBorderColor:o(t,.8)}}function d(t){return{backgroundColor:o(t,.6),borderColor:o(t,1),hoverBackgroundColor:o(t,.8),hoverBorderColor:o(t,1)}}function s(t){return{backgroundColor:t.map(function(t){return o(t,.6)}),borderColor:t.map(function(){return"#fff"}),pointBackgroundColor:t.map(function(t){return o(t,1)}),pointBorderColor:t.map(function(){return"#fff"}),pointHoverBackgroundColor:t.map(function(t){return o(t,1)}),pointHoverBorderColor:t.map(function(t){return o(t,1)})}}function i(t){return{backgroundColor:t.map(function(t){return o(t,.6)}),borderColor:t.map(function(t){return o(t,1)}),hoverBackgroundColor:t.map(function(t){return o(t,.8)}),hoverBorderColor:t.map(function(t){return o(t,1)})}}function l(){return[r(0,255),r(0,255),r(0,255)]}function c(t){return b.defaultColors[t]||l()}function h(t){for(var e=new Array(t),n=0;n<t;n++)e[n]=b.defaultColors[n]||l();return e}function u(t,e,n){return"pie"===t||"doughnut"===t?s(h(n)):"polarArea"===t?i(h(n)):"line"===t||"radar"===t?a(c(e)):"bar"===t||"horizontalBar"===t?d(c(e)):c(e)}var p=n(0),b=function(){function t(t){this.labels=[],this.options={},this.chartClick=new p.EventEmitter,this.chartHover=new p.EventEmitter,this.initFlag=!1,this.element=t}return t.prototype.ngOnInit=function(){this.ctx=this.element.nativeElement.getContext("2d"),this.cvs=this.element.nativeElement,this.initFlag=!0,(this.data||this.datasets)&&this.refresh()},t.prototype.ngOnChanges=function(t){this.initFlag&&(t.hasOwnProperty("data")||t.hasOwnProperty("datasets")?(t.data?this.updateChartData(t.data.currentValue):this.updateChartData(t.datasets.currentValue),this.chart.update()):this.refresh())},t.prototype.ngOnDestroy=function(){this.chart&&(this.chart.destroy(),this.chart=void 0)},t.prototype.getChartBuilder=function(t){var e=this,n=this.getDatasets(),o=Object.assign({},this.options);!1===this.legend&&(o.legend={display:!1}),o.hover=o.hover||{},o.hover.onHover||(o.hover.onHover=function(t){t&&!t.length||e.chartHover.emit({active:t})}),o.onClick||(o.onClick=function(t,n){e.chartClick.emit({event:t,active:n})});var r={type:this.chartType,data:{labels:this.labels,datasets:n},options:o};if("undefined"==typeof Chart)throw new Error("ng2-charts configuration issue: Embedding Chart.js lib is mandatory");return new Chart(t,r)},t.prototype.updateChartData=function(t){Array.isArray(t[0].data)?this.chart.data.datasets.forEach(function(e,n){e.data=t[n].data,t[n].label&&(e.label=t[n].label)}):this.chart.data.datasets[0].data=t},t.prototype.getDatasets=function(){var t=this,e=void 0;if((!this.datasets||!this.datasets.length&&this.data&&this.data.length)&&(e=Array.isArray(this.data[0])?this.data.map(function(e,n){return{data:e,label:t.labels[n]||"Label "+n}}):[{data:this.data,label:"Label 0"}]),(this.datasets&&this.datasets.length||e&&e.length)&&(e=(this.datasets||e).map(function(e,n){var o=Object.assign({},e);return t.colors&&t.colors.length?Object.assign(o,t.colors[n]):Object.assign(o,u(t.chartType,n,o.data.length)),o})),!e)throw new Error("ng-charts configuration error,\n      data or datasets field are required to render char "+this.chartType);return e},t.prototype.refresh=function(){this.ngOnDestroy(),this.chart=this.getChartBuilder(this.ctx)},t.defaultColors=[[255,99,132],[54,162,235],[255,206,86],[231,233,237],[75,192,192],[151,187,205],[220,220,220],[247,70,74],[70,191,189],[253,180,92],[148,159,177],[77,83,96]],t.decorators=[{type:p.Directive,args:[{selector:"canvas[baseChart]",exportAs:"base-chart"}]}],t.ctorParameters=function(){return[{type:p.ElementRef}]},t.propDecorators={data:[{type:p.Input}],datasets:[{type:p.Input}],labels:[{type:p.Input}],options:[{type:p.Input}],chartType:[{type:p.Input}],colors:[{type:p.Input}],legend:[{type:p.Input}],chartClick:[{type:p.Output}],chartHover:[{type:p.Output}]},t}();e.BaseChartDirective=b;var g=function(){function t(){}return t.decorators=[{type:p.NgModule,args:[{declarations:[b],exports:[b],imports:[]}]}],t.ctorParameters=function(){return[]},t}();e.ChartsModule=g},1539:function(t,e){t.exports=".demo-chart-container {\n    display: block;\n    position: relative;\n    height: 200px;\n}"},1540:function(t,e){t.exports='<div class="demo-chart-container">\n\n    <canvas baseChart \n            [datasets]="donutChartData"\n            [labels]="donutChartLabels"\n            [options]="donutChartOptions"\n            [legend]="donutChartLegend"\n            [colors]="donutChartColors"\n            chartType="doughnut">\n    </canvas>\n\n</div>'},1541:function(t,e){t.exports="import { Component } from '@angular/core';\nimport { ColorService } from 'ux-aspects';\n\n@Component({\n    selector: 'app',\n    templateUrl: './src/app.component.html',\n    styleUrls: ['./src/app.component.css']\n})\nexport class AppComponent {\n\n    // configure the directive data\n    donutChartData: Chart.ChartData = [{\n        data: [25, 15, 18, 20, 10],\n        borderWidth: 0\n    }];\n\n    donutChartLabels: string[] = ['Sales 1', 'Sales 2', 'Sales 3', 'Sales 4', 'Sales 5'];\n    donutChartOptions: Chart.ChartOptions;\n    donutChartLegend: boolean = true;\n    donutChartColors: any;\n\n    constructor(colorService: ColorService) {\n\n        let tooltipBackgroundColor = colorService.getColor('grey2').toHex();\n\n        this.donutChartOptions = {\n            maintainAspectRatio: false,\n            responsive: true,\n            cutoutPercentage: 70,\n            legend: {\n                position: 'right',\n                labels: {\n                    boxWidth: 12\n                }\n            },\n            tooltips: {\n                callbacks: {\n                    title: (item: Chart.ChartTooltipItem[]) => {\n                        return;\n                    },\n                    label: (item: Chart.ChartTooltipItem, data: any) => {\n\n                        // get the dataset (we only have one)\n                        let dataset = data.datasets[0];\n\n                        // calculate the total of all segment values\n                        let total = dataset.data.reduce((previousValue: any, currentValue: any) => {\n                            return previousValue + currentValue;\n                        });\n\n                        // get the value of the current segment\n                        let segmentValue = dataset.data[item.index];\n\n                        // calculate the percentage of the current segment compared to the total\n                        let precentage = Math.round(((segmentValue / total) * 100));\n\n                        return `${ precentage }%, Sales ${ item.index + 1 }`;\n                    }\n                },\n                backgroundColor: tooltipBackgroundColor,\n                cornerRadius: 0,\n                displayColors: false\n            } as any\n        };\n\n        this.donutChartColors = [\n            {\n                backgroundColor: [\n                    colorService.getColor('chart1').toRgb(),\n                    colorService.getColor('chart2').toRgb(),\n                    colorService.getColor('chart3').toRgb(),\n                    colorService.getColor('chart4').toRgb(),\n                    colorService.getColor('chart5').toRgb()\n                ],\n                hoverBackgroundColor: [\n                    colorService.getColor('chart1').setAlpha(0.3).toRgba(),\n                    colorService.getColor('chart2').setAlpha(0.3).toRgba(),\n                    colorService.getColor('chart3').setAlpha(0.3).toRgba(),\n                    colorService.getColor('chart4').setAlpha(0.3).toRgba(),\n                    colorService.getColor('chart5').setAlpha(0.3).toRgba()\n                ]\n            }\n        ];\n    }\n\n}"},1666:function(t,e,n){"use strict";var o=this&&this.__decorate||function(t,e,n,o){var r,a=arguments.length,d=a<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)d=Reflect.decorate(t,e,n,o);else for(var s=t.length-1;s>=0;s--)(r=t[s])&&(d=(a<3?r(d):a>3?r(e,n,d):r(e,n))||d);return a>3&&d&&Object.defineProperty(e,n,d),d},r=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)};Object.defineProperty(e,"__esModule",{value:!0});var a=n(0),d=n(145),s=n(265),i=function(){function t(t){this.colorService=t,this.chartHtml=n(2364),this.chartJs=n(2365),this.accessibilityHtml=n(2363),this.labelsHtml=n(2366),this.labelsJs=n(2367),this.legendJs=n(2369),this.legendCss=n(2368),this.codepen={html:this.chartHtml,htmlAttributes:{"ng-controller":"DonutChartCtrl as dc"},js:[this.chartJs]};var e={chartColor1:t.getColor("chart1").toRgb(),chartColor2:t.getColor("chart2").toRgb(),chartColor3:t.getColor("chart3").toRgb(),chartColor4:t.getColor("chart4").toRgb(),chartColor5:t.getColor("chart5").toRgb(),chartHover1:t.getColor("chart1").setAlpha(.2).toRgba(),chartHover2:t.getColor("chart2").setAlpha(.3).toRgba(),chartHover3:t.getColor("chart3").setAlpha(.3).toRgba(),chartHover4:t.getColor("chart4").setAlpha(.3).toRgba(),chartHover5:t.getColor("chart5").setAlpha(.3).toRgba(),gridColor:t.getColor("grey4").toHex(),labelColor:t.getColor("grey2").toHex()};this.data=[{label:"Sales 1",data:25,color:[e.chartColor1],highlightColor:[e.chartHover1]},{label:"Sales 2",data:15,color:[e.chartColor2],highlightColor:[e.chartHover2]},{label:"Sales 3",data:18,color:[e.chartColor3],highlightColor:[e.chartHover3]},{label:"Sales 4",data:20,color:[e.chartColor4],highlightColor:[e.chartHover4]},{label:"Sales 5",data:10,color:[e.chartColor5],highlightColor:[e.chartHover5]}],this.options={series:{pie:{show:!0,innerRadius:.7,centerLabel:{show:!0,color:e.gridColor,text:"65%",font:"Source Sans Pro",fontSize:18,paddingX:4,paddingY:0,textBaseline:"bottom"},subLabel:{show:!0,color:e.chartColor1,text:"Sales",font:"Source Sans Pro",fontSize:22,paddingX:1,paddingY:10,textBaseline:"middle"},donutLabel:{show:!0,color:e.labelColor,text:"Proprietary",font:"Source Sans Pro",fontSize:20},stroke:{width:0}}},grid:{hoverable:!0},tooltip:{show:!0,shifts:{x:0,y:-30},content:"%p.0%, %s"},legend:{show:!0,backgroundColor:"transparent",labelFormatter:function(t){return'<span class="legend-styling">'+t+"</span>"},labelBoxBorderColor:"transparent"}}}return t.prototype.onPlotClick=function(){},t.prototype.onPlotHover=function(){},t}();i=o([a.Component({selector:"uxd-charts-donut-chart-ng1",template:n(2071),changeDetection:a.ChangeDetectionStrategy.OnPush}),s.DocumentationSectionComponent("ChartsDonutChartNg1Component"),r("design:paramtypes",[d.ColorService])],i),e.ChartsDonutChartNg1Component=i},1667:function(t,e,n){"use strict";var o=this&&this.__decorate||function(t,e,n,o){var r,a=arguments.length,d=a<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)d=Reflect.decorate(t,e,n,o);else for(var s=t.length-1;s>=0;s--)(r=t[s])&&(d=(a<3?r(d):a>3?r(e,n,d):r(e,n))||d);return a>3&&d&&Object.defineProperty(e,n,d),d},r=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)};Object.defineProperty(e,"__esModule",{value:!0});var a=n(0),d=n(265),s=n(145),i=function(){function t(t){this.plunk={files:{"app.component.ts":n(1541),"app.component.html":n(1540),"app.component.css":n(1539)},modules:[{library:"chart.js"},{imports:["ChartsModule"],library:"ng2-charts"},{imports:["ColorServiceModule"],library:"ux-aspects"}],mappings:[{alias:"chart.js",source:"https://unpkg.com/chart.js@2.5.0/dist/Chart.min.js"},{alias:"ng2-charts",source:"https://unpkg.com/ng2-charts@1.5.0/bundles/ng2-charts.umd.min.js"}]},this.donutChartData=[{data:[25,15,18,20,10],borderWidth:0}],this.donutChartLabels=["Sales 1","Sales 2","Sales 3","Sales 4","Sales 5"],this.donutChartLegend=!0,this.htmlCode=n(1540),this.tsCode=n(1541),this.cssCode=n(1539);var e=t.getColor("grey2").toHex();this.donutChartOptions={maintainAspectRatio:!1,responsive:!0,cutoutPercentage:70,legend:{position:"right",labels:{boxWidth:12}},tooltips:{callbacks:{title:function(t){},label:function(t,e){var n=e.datasets[0],o=n.data.reduce(function(t,e){return t+e}),r=n.data[t.index];return Math.round(r/o*100)+"%, Sales "+(t.index+1)}},backgroundColor:e,cornerRadius:0,displayColors:!1}},this.donutChartColors=[{backgroundColor:[t.getColor("chart1").toRgb(),t.getColor("chart2").toRgb(),t.getColor("chart3").toRgb(),t.getColor("chart4").toRgb(),t.getColor("chart5").toRgb()],hoverBackgroundColor:[t.getColor("chart1").setAlpha(.3).toRgba(),t.getColor("chart2").setAlpha(.3).toRgba(),t.getColor("chart3").setAlpha(.3).toRgba(),t.getColor("chart4").setAlpha(.3).toRgba(),t.getColor("chart5").setAlpha(.3).toRgba()]}]}return t}();i=o([a.Component({selector:"uxd-charts-donut-chart",template:n(2072)}),d.DocumentationSectionComponent("ChartsDonutChartComponent"),r("design:paramtypes",[s.ColorService])],i),e.ChartsDonutChartComponent=i},1668:function(t,e,n){"use strict";var o=this&&this.__decorate||function(t,e,n,o){var r,a=arguments.length,d=a<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)d=Reflect.decorate(t,e,n,o);else for(var s=t.length-1;s>=0;s--)(r=t[s])&&(d=(a<3?r(d):a>3?r(e,n,d):r(e,n))||d);return a>3&&d&&Object.defineProperty(e,n,d),d},r=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)};Object.defineProperty(e,"__esModule",{value:!0});var a=n(0),d=n(19),s=n(144),i=n(269),l=n(268),c=n(1479),h=n(1666),u=n(1669),p=n(267),b=n(266),g=n(1667),f=[h.ChartsDonutChartNg1Component,u.ChartsNestedDonutChartNg1Component,g.ChartsDonutChartComponent],C=[{path:"**",component:p.DocumentationCategoryComponent,data:{category:s.ResolverService.resolveCategoryData(s.DocumentationPage.Charts,"Donut Charts")}}],v=function(){function t(t,e){e.registerResolver(t)}return t}();v=o([a.NgModule({imports:[b.DocumentationComponentsModule,l.TabsModule,i.WrappersModule,c.ChartsModule,d.RouterModule.forChild(C)],exports:f,declarations:f,entryComponents:f,providers:[]}),r("design:paramtypes",[a.ComponentFactoryResolver,s.ResolverService])],v),e.ChartsDonutChartsModule=v},1669:function(t,e,n){"use strict";var o=this&&this.__decorate||function(t,e,n,o){var r,a=arguments.length,d=a<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)d=Reflect.decorate(t,e,n,o);else for(var s=t.length-1;s>=0;s--)(r=t[s])&&(d=(a<3?r(d):a>3?r(e,n,d):r(e,n))||d);return a>3&&d&&Object.defineProperty(e,n,d),d},r=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)};Object.defineProperty(e,"__esModule",{value:!0});var a=n(0),d=n(265),s=n(145),i=function(){function t(t){this.htmlCode=n(2371),this.jsCode=n(2372),this.cssCode=n(2370),this.codepen={html:this.htmlCode,js:[this.jsCode],css:[this.cssCode],htmlAttributes:{"ng-controller":"NestedDonutChartCtrl as dc"}},this.data=[{label:"documents",color:t.getColor("chart1").toHex(),value:23456},{label:"reviewed",color:t.getColor("chart2").toHex(),value:19876},{label:"produced",color:t.getColor("chart3").toHex(),value:11123}],this.options={size:100,donutWidth:4,donutSpacing:4,hoverAnimation:!0,onHover:function(){},onClick:function(){},tooltip:{show:!0,content:function(t){return'<div style="display: inline-block; width: 10px; height: 10px; margin-right: 2px; background-color: '+t.color+'"></div> <b>'+t.value+"</b> "+t.label},shifts:{x:0,y:0}}}}return t}();i=o([a.Component({selector:"uxd-charts-nested-donut-chart",template:n(2073),changeDetection:a.ChangeDetectionStrategy.OnPush}),d.DocumentationSectionComponent("ChartsNestedDonutChartNg1Component"),r("design:paramtypes",[s.ColorService])],i),e.ChartsNestedDonutChartNg1Component=i},2071:function(t,e){t.exports='<div class="flot-chart">\n    <ux-flot-ng1 [dataset]="data" [options]="options" (on-plot-click)="onPlotClick(event, pos, item)" (on-hover-click)="onPlotHover(event, pos, item)">\n    </ux-flot-ng1>\n</div>\n\n<hr>\n\n<div class="demo-attributes table-responsive">\n    <table class="table">\n        <tbody>\n            <tr>\n                <th>Property</th>\n                <th>Type</th>\n                <th>Description</th>\n                <th>Optional</th>\n            </tr>\n            <tr>\n                <td class="attribute">label</td>\n                <td>string</td>\n                <td>Label name specified in the legend.</td>\n                <td>true</td>\n            </tr>\n            <tr>\n                <td class="attribute">data</td>\n                <td>number or array</td>\n                <td>A number in the donut chart defining the area of each donut section.</td>\n                <td>false</td>\n            </tr>\n            <tr>\n                <td class="attribute">color</td>\n                <td>color</td>\n                <td>Defines the color of each donut section.</td>\n                <td>true</td>\n            </tr>\n            <tr>\n                <td class="attribute">highlightColor</td>\n                <td>color</td>\n                <td>Default color of the translucent overlay used to highlight on mouse hover.</td>\n                <td>true</td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n\n<p>Donut Charts are defined by the <code>flot</code> directive. The dataset and options attribute define the donut chart data\n    and options respectively. Dataset and Options are defined within the DonutChartCtrl.</p>\n\n<tabset>\n    <tab heading="HTML">\n        <uxd-snippet language="html" [code]="chartHtml"></uxd-snippet>\n    </tab>\n    \n    <tab heading="Javascript">\n        <uxd-snippet language="javascript" [code]="chartJs"></uxd-snippet>\n    </tab>\n</tabset>\n\n<div class="demo-attributes table-responsive">\n    <table class="table">\n        <tbody>\n            <tr>\n                <th>Property</th>\n                <th>Type</th>\n                <th>Description</th>\n                <th>Optional</th>\n            </tr>\n            <tr>\n                <td class="attribute">series</td>\n                <td>string</td>\n                <td>Defines the chart type and its layout. Values include \'lines\', \'bar\' and \'points\', e.g. if data represents\n                    a donut chart, then the value is set to \'pie\'.</td>\n                <td>false</td>\n            </tr>\n            <tr>\n                <td class="attribute">grid</td>\n                <td>array</td>\n                <td>Helps configure the grid options.</td>\n                <td>true</td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n\n<p>Chart layout parameters are explained below. These are defined in <code>series</code>.</p>\n\n<div class="demo-attributes table-responsive">\n    <table class="table">\n        <tbody>\n            <tr>\n                <th>Property</th>\n                <th>Type</th>\n                <th>Description</th>\n                <th>Optional</th>\n            </tr>\n            <tr>\n                <td class="attribute">show</td>\n                <td>boolean</td>\n                <td>If set to true displays the chart.</td>\n                <td>false</td>\n            </tr>\n            <tr>\n                <td class="attribute">innerRadius</td>\n                <td>number</td>\n                <td>Sets the radius of the donut hole. If value is between 0 and 1 (inclusive) then it will use that as a percentage\n                    of the radius, otherwise it will use the value as a direct pixel length.</td>\n                <td>true</td>\n            </tr>\n            <tr>\n                <td class="attribute">centerLabel</td>\n                <td>array</td>\n                <td>Defines how a label should be shown in the center of the donut.</td>\n                <td>true</td>\n            </tr>\n            <tr>\n                <td class="attribute">subLabel</td>\n                <td>array</td>\n                <td>Defines how a label should be shown in the center of the donut beneath the center label.</td>\n                <td>true</td>\n            </tr>\n            <tr>\n                <td class="attribute">donutLabel</td>\n                <td>array</td>\n                <td>Defines how a label should be shown beneath the donut.</td>\n                <td>true</td>\n            </tr>\n            <tr>\n                <td class="attribute">width</td>\n                <td>number</td>\n                <td>Defined inside stroke object, pixel width of the border of each slice.</td>\n                <td>true</td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n\n<p>The following attributes should be defined within <code>centerLabel</code>.</p>\n\n<div class="demo-attributes table-responsive">\n    <table class="table">\n        <tbody>\n            <tr>\n                <th>Property</th>\n                <th>Type</th>\n                <th>Description</th>\n                <th>Optional</th>\n            </tr>\n            <tr>\n                <td class="attribute">show</td>\n                <td>boolean</td>\n                <td>Whether or not the chart should show a center label.</td>\n                <td>true</td>\n            </tr>\n            <tr>\n                <td class="attribute">color</td>\n                <td>string</td>\n                <td>Specifies the color to be used for the center label.</td>\n                <td>true</td>\n            </tr>\n            <tr>\n                <td class="attribute">text</td>\n                <td>string</td>\n                <td>The text to display in the center label.</td>\n                <td>true</td>\n            </tr>\n            <tr>\n                <td class="attribute">font</td>\n                <td>string</td>\n                <td>The name of the font family to be used by the label.</td>\n                <td>true</td>\n            </tr>\n            <tr>\n                <td class="attribute">fontSize</td>\n                <td>number</td>\n                <td>The desired font size of the label. The size may be reduced automatically to fit the label inside the donut.</td>\n                <td>true</td>\n            </tr>\n            <tr>\n                <td class="attribute">paddingX</td>\n                <td>number</td>\n                <td>Defines the horizontal padding required to center the position.</td>\n                <td>true</td>\n            </tr>\n            <tr>\n                <td class="attribute">paddingY</td>\n                <td>number</td>\n                <td>Defines the vertical padding required to center the position.</td>\n                <td>true</td>\n            </tr>\n            <tr>\n                <td class="attribute">textBaseline</td>\n                <td>HTML</td>\n                <td>Canvas textBaseline property, defines the position of the label.</td>\n                <td>true</td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n\n<p>The following attributes should be defined within <code>subLabel</code>.</p>\n\n<div class="demo-attributes table-responsive">\n    <table class="table">\n        <tbody>\n            <tr>\n                <th>Property</th>\n                <th>Type</th>\n                <th>Description</th>\n                <th>Optional</th>\n            </tr>\n            <tr>\n                <td class="attribute">show</td>\n                <td>boolean</td>\n                <td>Whether or not the chart should show a sub label.</td>\n                <td>true</td>\n            </tr>\n            <tr>\n                <td class="attribute">color</td>\n                <td>string</td>\n                <td>Specifies the color to be used for the sub label.</td>\n                <td>true</td>\n            </tr>\n            <tr>\n                <td class="attribute">text</td>\n                <td>string</td>\n                <td>The text to display in the sub label.</td>\n                <td>true</td>\n            </tr>\n            <tr>\n                <td class="attribute">font</td>\n                <td>string</td>\n                <td>The name of the font family to be used by the label.</td>\n                <td>true</td>\n            </tr>\n            <tr>\n                <td class="attribute">fontSize</td>\n                <td>number</td>\n                <td>The desired font size of the label. The size may be reduced automatically to fit the label inside the donut.</td>\n                <td>true</td>\n            </tr>\n            <tr>\n                <td class="attribute">paddingX</td>\n                <td>number</td>\n                <td>Defines the horizontal padding required to center the position.</td>\n                <td>true</td>\n            </tr>\n            <tr>\n                <td class="attribute">paddingY</td>\n                <td>number</td>\n                <td>Defines the vertical padding required to center the position.</td>\n                <td>true</td>\n            </tr>\n            <tr>\n                <td class="attribute">textBaseline</td>\n                <td>HTML</td>\n                <td>Canvas textBaseline property, defines the position of the label.</td>\n                <td>true</td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n\n<p>The following attributes should be defined within <code>donutLabel</code>.</p>\n\n<div class="demo-attributes table-responsive">\n    <table class="table">\n        <tbody>\n            <tr>\n                <th>Property</th>\n                <th>Type</th>\n                <th>Description</th>\n                <th>Optional</th>\n            </tr>\n            <tr>\n                <td class="attribute">show</td>\n                <td>boolean</td>\n                <td>Whether or not the chart should show a donut label.</td>\n                <td>true</td>\n            </tr>\n            <tr>\n                <td class="attribute">color</td>\n                <td>string</td>\n                <td>Specifies the color to be used for the donut label.</td>\n                <td>true</td>\n            </tr>\n            <tr>\n                <td class="attribute">text</td>\n                <td>string</td>\n                <td>The text to display in the donut label.</td>\n                <td>true</td>\n            </tr>\n            <tr>\n                <td class="attribute">font</td>\n                <td>string</td>\n                <td>The name of the font family to be used by the label.</td>\n                <td>true</td>\n            </tr>\n            <tr>\n                <td class="attribute">fontSize</td>\n                <td>number</td>\n                <td>The desired font size of the label. The size may be reduced automatically to fit the label inside the donut.</td>\n                <td>true</td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n\n<p>Grid options are explained below.</p>\n\n<div class="demo-attributes table-responsive">\n    <table class="table">\n        <tbody>\n            <tr>\n                <th>Property</th>\n                <th>Type</th>\n                <th>Description</th>\n                <th>Optional</th>\n            </tr>\n            <tr>\n                <td class="attribute">hoverable</td>\n                <td>boolean</td>\n                <td>If set to true enables interactivity in the grid.</td>\n                <td>true</td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n\n<blockquote>\n    <p><strong>Note</strong>: Refer to the <a routerLink="/charts/flot-options">Flot Options</a> page for details of chart options.</p>\n</blockquote>\n\n<p>To convey chart information to users with assistive technologies, you can include a text version of the data. Use the <code>sr-only</code>    class to make the text hidden but visible to screen readers, and give the container a <code>tabindex</code> attribute\n    so it can be reached with the keyboard, and place it near the chart.</p>\n\n<uxd-snippet [code]="accessibilityHtml"></uxd-snippet>\n\n<h4 id="dynamic-chart-labels">Dynamic Chart Labels</h4>\n\n<p>If the text displayed in the chart labels needs to be changed dynamically, add the <code>donut-labels</code> attribute to\n    the <code>flot</code> directive and add the following to the controller. Now if any of the values in this object change\n    the labels will automatically update to reflect the new values.</p>\n\n<tabset>\n    <tab heading="HTML">\n        <uxd-snippet language="html" [code]="labelsHtml"></uxd-snippet>\n    </tab>\n    \n    <tab heading="Javascript">\n        <uxd-snippet language="javascript" [code]="labelsJs"></uxd-snippet>\n    </tab>\n</tabset>\n\n<h4 id="custom-legend-styling">Custom Legend Styling</h4>\n\n<p>If you wish to apply your own styling to the legend (e.g labels), this can be done by specifying properties in the <code>legend</code>    object, which is contained within the Chart Options. For example, <code>labelFormatter</code>. This is a function that\n    allows you to format the labels as required. In the example below, any series that is very small (&lt;2%) will have its\n    label in the legend updated. This is useful when a series is too small visually to be seen on the chart so that the user\n    understands why it is not visible.</p>\n\n<tabset>\n\n    <tab heading="Javascript">\n        <uxd-snippet language="javascript" [code]="legendJs"></uxd-snippet>\n    </tab>\n\n    <tab heading="CSS">\n        <uxd-snippet language="css" [code]="legendCss"></uxd-snippet>\n    </tab>\n\n</tabset>\n\n<blockquote>\n    <p><strong>Note</strong>: To upgrade this component to use in an Angular 4 application use: <code>upgradeAdapter.upgradeNg1Component(\'uxFlotNg1\')</code></p>\n</blockquote>'},2072:function(t,e){t.exports='<div class="demo-chart-container">\n\n    <canvas baseChart \n            [datasets]="donutChartData"\n            [labels]="donutChartLabels"\n            [options]="donutChartOptions"\n            [legend]="donutChartLegend"\n            [colors]="donutChartColors"\n            chartType="doughnut">\n    </canvas>\n\n</div>\n\n<hr>\n\n<p>\n    Donut Charts can be added using the <code>ng2-charts</code> library. \n    The <code>chart.js</code> library needs to be imported and the <code>ChartsModule</code> needs to be added to the appropriate NgModule.\n</p>\n\n<br>\n\n<p>The <code>baseChart</code> directive should be added to a <code>canvas</code> element and the following attributes can be used to customize the chart behavior and appearance:</p>\n\n\n<table class="table">\n\n    <thead>\n        <tr>\n            <th>Name</th>\n            <th>Type</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n\n    <tbody>\n\n        <tr>\n            <td><b>@Input</b> datasets</td>\n            <td><b>object[]</b></td>\n            <td>Contains the data and properties for each data set to be displayed in the chart.</td>\n        </tr>\n\n        <tr>\n            <td><b>@Input</b> chartType</td>\n            <td><b>string</b></td>\n            <td>Indicates the type of the chart. Possible options are: <code>line</code>, <code>bar</code>, <code>radar</code>, <code>pie</code>, <code>polarArea</code>, <code>doughnut</code></td>\n        </tr>\n\n        <tr>\n            <td><b>@Input</b> options</td>\n            <td><b>ChartOptions</b></td>\n            <td>Configures the appearance and behavior of all aspects of the chart.</td>\n        </tr>\n\n        <tr>\n            <td><b>@Input</b> colors</td>\n            <td><b>object[]</b></td>\n            <td>Configure the color values to be used within the chart.</td>\n        </tr>\n\n        <tr>\n            <td><b>@Input</b> legend</td>\n            <td><b>boolean</b></td>\n            <td>Determines whether or not the legend should be displayed.</td>\n        </tr>\n\n        <tr>\n            <td><b>@Output</b> chartClick</td>\n            <td></td>\n            <td>Fires when click on a chart has occurred, returns information regarding active points and labels</td>\n        </tr>\n\n        <tr>\n            <td><b>@Output</b> chartHover</td>\n            <td></td>\n            <td>Fires when mousemove (hover) on a chart has occurred, returns information regarding active points and labels.</td>\n        </tr>\n\n    </tbody>\n</table>\n\n<p>Complete documentation on the directive and chart options can be found at the documentation links below.</p>\n\n<p>The following code can be used to create the example above: </p>\n\n<tabset>\n\n    <tab heading="HTML">\n        <uxd-snippet language="html" [code]="htmlCode"></uxd-snippet>\n    </tab>\n    \n    <tab heading="TypeScript">\n        <uxd-snippet language="javascript" [code]="tsCode"></uxd-snippet>\n    </tab>\n    \n    <tab heading="CSS">\n        <uxd-snippet language="css" [code]="cssCode"></uxd-snippet>\n    </tab>\n\n</tabset>\n\n<br>\n\n<blockquote>\n\n    <p class="m-b-nil">\n        <b>Dependencies: </b>\n        <a class="hyperlink" href="https://www.npmjs.com/package/ng2-charts">ng2-charts</a>, \n        <a class="hyperlink" href="https://www.npmjs.com/package/chart.js">chart.js</a>\n    </p>\n\n    <p class="m-b-nil">\n        <b>Type Definitions: </b>\n        <a class="hyperlink" href="https://www.npmjs.com/package/@types/chart.js">@types/chart.js</a>\n    </p>\n\n    <p class="m-b-nil">\n        <b>Modules: </b>\n        <span>ChartsModule</span>\n    </p>\n\n\n    <p class="m-b-nil">\n        <b>Documentation: </b>\n        <a class="hyperlink" href="http://valor-software.com/ng2-charts/">Angular Directive Documentation</a>, \n        <a class="hyperlink" href="http://www.chartjs.org/docs/">Chart Library Documentation</a>\n    </p>\n</blockquote>'},2073:function(t,e){t.exports='<div class="nested-donut-example">\n    <div class="nested-donut-text">\n        <div>\n            <p class="documents"><span>23,456</span><span> documents</span></p>\n            <p class="reviewed"><span>19,876</span><span> reviewed</span></p>\n            <p class="produced"><span>11,123</span><span> produced</span></p>\n        </div>\n    </div>\n    <ux-nested-donut-ng1 [dataset]="data" [options]="options"></ux-nested-donut-ng1>\n</div>\n<hr>\n\n<p>The available options are:</p>\n\n<div class="demo-attributes table-responsive">\n    <table class="table">\n        <tbody>\n            <tr>\n                <th>Property</th>\n                <th>Type</th>\n                <th>Description</th>\n                <th>Optional</th>\n            </tr>\n            <tr>\n                <td class="attribute">size</td>\n                <td>number</td>\n                <td>Defines the diameter of the chart. (default: 150). This will also accept a percentage value in the form of\n                    a string, e.g. "50%".</td>\n                <td>true</td>\n            </tr>\n            <tr>\n                <td class="attribute">donutWidth</td>\n                <td>number</td>\n                <td>Defines the width of each ring. (default: 4)</td>\n                <td>true</td>\n            </tr>\n            <tr>\n                <td class="attribute">donutSpacing</td>\n                <td>number</td>\n                <td>Defines the spacing between each ring. (default: 4)</td>\n                <td>true</td>\n            </tr>\n            <tr>\n                <td class="attribute">hoverAnimation</td>\n                <td>boolean</td>\n                <td>Defines whether or not ring should show a hover effect when the mouse is over it (default: true)</td>\n                <td>true</td>\n            </tr>\n            <tr>\n                <td class="attribute">onHover</td>\n                <td>function</td>\n                <td>Defines a function to be called when a ring is hovered. The function should accept one argument that will\n                    contain the data corresponding to the hovered ring.</td>\n                <td>true</td>\n            </tr>\n            <tr>\n                <td class="attribute">onClick</td>\n                <td>function</td>\n                <td>Defines a function to be called when a ring is clicked. The function should accept one argument that will\n                    contain the data corresponding to the clicked ring.</td>\n                <td>true</td>\n            </tr>\n            <tr>\n                <td class="attribute">centerLabel</td>\n                <td>object</td>\n                <td>Defines the content and appearance of a center label if one is defined.</td>\n                <td>true</td>\n            </tr>\n            <tr>\n                <td class="attribute">tooltip</td>\n                <td>object</td>\n                <td>Defines tooltip options.</td>\n                <td>true</td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n\n<p>The following attributes should be defined within <code>centerLabel.</code></p>\n\n<div class="demo-attributes table-responsive">\n    <table class="table">\n        <tbody>\n            <tr>\n                <th>Property</th>\n                <th>Type</th>\n                <th>Description</th>\n                <th>Optional</th>\n            </tr>\n            <tr>\n                <td class="attribute">show</td>\n                <td>boolean</td>\n                <td>Whether or not the chart should show a center label.</td>\n                <td>true</td>\n            </tr>\n            <tr>\n                <td class="attribute">text</td>\n                <td>string</td>\n                <td>Defines the content of the center label.</td>\n                <td>true</td>\n            </tr>\n            <tr>\n                <td class="attribute">color</td>\n                <td>color</td>\n                <td>Defines the color of the center label text.</td>\n                <td>true</td>\n            </tr>\n            <tr>\n                <td class="attribute">font</td>\n                <td>string</td>\n                <td>Defines the font family of the center label.</td>\n                <td>true</td>\n            </tr>\n            <tr>\n                <td class="attribute">fontSize</td>\n                <td>number</td>\n                <td>Defines the font size of the center label. Take into account the size of the chart when considering a font\n                    size to ensure text is suitably displayed within the chart.</td>\n                <td>true</td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n\n<p>The following attributes should be defined within <code>tooltip.</code></p>\n\n<div class="demo-attributes table-responsive">\n    <table class="table">\n        <tbody>\n            <tr>\n                <th>Property</th>\n                <th>Type</th>\n                <th>Description</th>\n                <th>Optional</th>\n            </tr>\n            <tr>\n                <td class="attribute">show</td>\n                <td>boolean</td>\n                <td>Defines whether a tooltip should show when a ring is hovered (default: true)</td>\n                <td>true</td>\n            </tr>\n            <tr>\n                <td class="attribute">content</td>\n                <td>function</td>\n                <td>Defines the content of the tooltip. The function should accept one argument which will contain the data corresponding\n                    to the ring that was hovered. The function should return a HTML string.</td>\n                <td>false</td>\n            </tr>\n            <tr>\n                <td class="attribute">shifts</td>\n                <td>object</td>\n                <td>Defines how the tooltip should be offset from the mouse position.</td>\n                <td>true</td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n\n<p>The following attributes should be defined within <code>shifts.</code></p>\n\n<div class="demo-attributes table-responsive">\n    <table class="table">\n        <tbody>\n            <tr>\n                <th>Property</th>\n                <th>Type</th>\n                <th>Description</th>\n                <th>Optional</th>\n            </tr>\n            <tr>\n                <td class="attribute">x</td>\n                <td>number</td>\n                <td>Defines how many pixels left or right the tooltip should be positioned from the mouse position (default:\n                    0)</td>\n                <td>true</td>\n            </tr>\n            <tr>\n                <td class="attribute">y</td>\n                <td>number</td>\n                <td>Defines how many pixels up or down the tooltip should be positioned from the mouse position (default: 0)</td>\n                <td>true</td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n\n<p>Nested Donut Charts are defined by the <code>nested-donut</code> directive. The dataset and options\n    attributes define the nested donut chart data and options respectively. Dataset and Options are defined within the NestedDonutChartCtrl.</p>\n\n<blockquote>\n    <p><strong>Note</strong>: Refer to the <a routerLink="/charts/flot-options">Flot Options</a> page for details of chart options.</p>\n</blockquote>\n\n<tabset>\n    <tab heading="HTML">\n        <uxd-snippet language="html" [code]="htmlCode"></uxd-snippet>\n    </tab>\n\n    <tab heading="Javascript">\n        <uxd-snippet language="javascript" [code]="jsCode"></uxd-snippet>\n    </tab>\n\n    <tab heading="CSS">\n        <uxd-snippet language="css" [code]="cssCode"></uxd-snippet>\n    </tab>\n</tabset>\n\n<blockquote>\n    <p><strong>Note</strong>: To upgrade this component to use in an Angular 4 application use: <code>upgradeAdapter.upgradeNg1Component(\'uxNestedDonutNg1\')</code></p>\n</blockquote>'},2363:function(t,e){t.exports='<span tabindex="2" class="sr-only">\n  <span ng-repeat="item in dc.donutChart.data">{{item.label}},{{item.data}},</span>\n</span>'},2364:function(t,e){t.exports='<div class="flot-chart">\n    <flot dataset="dc.donutChart.data" options="dc.donutChart.options" on-plot-click="dc.donutChart.onPlotClick(event,pos,item)"\n        on-hover-click="dc.donutChart.onPlotHover(event,pos,item)">\n    </flot>\n</div>'},2365:function(t,e){t.exports="angular.module('app').controller('DonutChartCtrl', DonutChartCtrl);\n\nDonutChartCtrl.$inject = ['$colorService'];\n\nfunction DonutChartCtrl($colorService) {\n\n    var dc = this;\n\n    var flotChartColors = {\n        chartColor1: $colorService.getColor('chart1').toRgb(),\n        chartColor2: $colorService.getColor('chart2').toRgb(),\n        chartColor3: $colorService.getColor('chart3').toRgb(),\n        chartColor4: $colorService.getColor('chart4').toRgb(),\n        chartColor5: $colorService.getColor('chart5').toRgb(),\n        chartHover1: $colorService.getColor('chart1').setAlpha(0.2).toRgba(),\n        chartHover2: $colorService.getColor('chart2').setAlpha(0.3).toRgba(),\n        chartHover3: $colorService.getColor('chart3').setAlpha(0.3).toRgba(),\n        chartHover4: $colorService.getColor('chart4').setAlpha(0.3).toRgba(),\n        chartHover5: $colorService.getColor('chart5').setAlpha(0.3).toRgba(),\n        gridColor: $colorService.getColor('grey4').toHex(),\n        labelColor: $colorService.getColor('grey2').toHex()\n    };\n\n    dc.donutChart = {\n        data: [{\n            label: \"Sales 1\",\n            data: 25,\n            color: [flotChartColors.chartColor1],\n            highlightColor: [flotChartColors.chartHover1]\n        }, {\n            label: \"Sales 2\",\n            data: 15,\n            color: [flotChartColors.chartColor2],\n            highlightColor: [flotChartColors.chartHover2]\n        }, {\n            label: \"Sales 3\",\n            data: 18,\n            color: [flotChartColors.chartColor3],\n            highlightColor: [flotChartColors.chartHover3]\n        }, {\n            label: \"Sales 4\",\n            data: 20,\n            color: [flotChartColors.chartColor4],\n            highlightColor: [flotChartColors.chartHover4]\n        }, {\n            label: \"Sales 5\",\n            data: 10,\n            color: [flotChartColors.chartColor5],\n            highlightColor: [flotChartColors.chartHover5]\n        }],\n        options: {\n            series: {\n                pie: {\n                    show: true,\n                    innerRadius: 0.7,\n                    centerLabel: {\n                        show: true,\n                        color: flotChartColors.gridColor,\n                        text: \"65%\",\n                        font: \"Source Sans Pro\",\n                        fontSize: 18,\n                        paddingX: 4,\n                        paddingY: 0,\n                        textBaseline: 'bottom'\n                    },\n                    subLabel: {\n                        show: true,\n                        color: flotChartColors.chartColor1,\n                        text: \"Sales\",\n                        font: \"Source Sans Pro\",\n                        fontSize: 22,\n                        paddingX: 1,\n                        paddingY: 10,\n                        textBaseline: 'middle'\n                    },\n                    donutLabel: {\n                        show: true,\n                        color: flotChartColors.labelColor,\n                        text: \"Proprietary\",\n                        font: \"Source Sans Pro\",\n                        fontSize: 20\n                    },\n                    stroke: {\n                        width: 0\n                    }\n                }\n            },\n            grid: {\n                hoverable: true\n            },\n            tooltip: {\n                show: true,\n                shifts: {\n                    x: 0,\n                    y: -30\n                },\n                content: \"%p.0%, %s\"\n            },\n            legend: {\n                show: true,\n                backgroundColor: \"transparent\",\n                labelFormatter: function (label) {\n                    return '<span class=\"legend-styling\">' + label + '</span>';\n                },\n                labelBoxBorderColor: \"transparent\"\n            }\n        },\n        onPlotClick: function () {\n            //Code to be executed when plot is clicked.\n        },\n        onPlotHover: function () {\n            //Code to be executed when plot area is hovered.\n        },\n        donutLabels: {\n            centerLabel: 'SALES',\n            subLabel: '5%',\n            donutLabel: 'PROPRIETARY'\n        }\n    };\n\n}"},2366:function(t,e){t.exports='<div class="flot-chart">\n    <flot dataset="dc.donutChart.data" options="dc.donutChart.options" on-plot-click="dc.donutChart.onPlotClick(event,pos,item)"\n        on-hover-click="dc.donutChart.onPlotHover(event,pos,item)" donut-labels="dc.donutChart.donutLabels">\n    </flot>\n</div>'},2367:function(t,e){t.exports="donutLabels: {\n    centerLabel: 'SALES',\n    subLabel: '5%',\n    donutLabel: 'Proprietary'\n}"},2368:function(t,e){t.exports='.legend-styling {\n    font-family: "Source Sans Pro";\n    padding-left: 4px;\n    color: #999;\n}'},2369:function(t,e){t.exports="legend: {\n  show: true,\n  backgroundColor: \"transparent\",\n  labelFormatter: function(label, series) {\n    var total = 0;\n    for (var i = 0; i < vm.donutChart.data.length; i++) {\n      total += vm.donutChart.data[0].data;\n    }\n    var percent = (series.data[0][1] / total) * 100;\n    if (percent < 2) label += '<span> (<2%)</span>';\n\n    return  '<span class=\"legend-styling\">' + label + '</span>';\n  },\n  labelBoxBorderColor: \"transparent\"\n}"},2370:function(t,e){t.exports='.nested-donut-example {\n    width: 100%;\n    margin-top: 15px;\n}\n\n.nested-donut-example:before {\n    content: \' \';\n    display: inline-block;\n    vertical-align: middle;\n    height: 100%;\n}\n\n.nested-donut-example .nested-donut-text {\n    margin-right: 50px;\n    display: inline-block;\n    vertical-align: middle;\n}\n\n.nested-donut-example .nested-donut-container {\n    vertical-align: middle;\n}\n\n.nested-donut-text p {\n    font: 18px "Source Sans Pro";\n    font-weight: 600;\n}\n\n.nested-donut-text p.documents {\n    color: #00a7a2;\n}\n\n.nested-donut-text p.reviewed {\n    color: #7b63a3;\n}\n\n.nested-donut-text p.produced {\n    color: #3baa43;\n}\n\n.nested-donut-text p span + span {\n    font: 14px "Source Sans Pro";\n    color: #999;\n}'},2371:function(t,e){t.exports='<div class="container-fluid">\n    <div class="row">\n        <div class="col-md-12 m-t-md">\n            <div class="nested-donut-example">\n                <div class="nested-donut-text">\n                    <div>\n                        <p class="documents"><span>23,456</span><span> documents</span></p>\n                        <p class="reviewed"><span>19,876</span><span> reviewed</span></p>\n                        <p class="produced"><span>11,123</span><span> produced</span></p>\n                    </div>\n                </div>\n                <nested-donut dataset="dc.nestedDonutData" options="dc.nestedDonutOptions"></nested-donut>\n            </div>\n        </div>\n    </div>\n</div>'},2372:function(t,e){t.exports="angular.module('app').controller('NestedDonutChartCtrl', NestedDonutChartCtrl);\n\nNestedDonutChartCtrl.$import = ['$colorService'];\n\nfunction NestedDonutChartCtrl($colorService) {\n\n    var dc = this;\n\n    // nested donut chart\n    dc.nestedDonutData = [{\n      label: 'documents',\n      color: $colorService.getColor('chart1').toHex(),\n      value: 23456\n    }, {\n      label: 'reviewed',\n      color: $colorService.getColor('chart2').toHex(),\n      value: 19876\n    }, {\n      label: 'produced',\n      color: $colorService.getColor('chart3').toHex(),\n      value: 11123\n    }];\n\n    dc.nestedDonutOptions = {\n        size: 100,\n        donutWidth: 4,\n        donutSpacing: 4,\n        hoverAnimation: true,\n        onHover: function(data) {\n        // perform any actions here on hover\n      },\n      onClick: function(data) {\n        // perform any actions here on hover        \n      },\n      tooltip: {\n        show: true,\n        content: function(data) {\n            return '<div style=\"display: inline-block; width: 10px; height: 10px; margin-right: 2px; background-color: ' + data.color + '\"></div> <b>' + data.value + '</b> ' + data.label;\n        },\n        shifts: {\n            x: 0,\n            y: 0\n        }\n      }\n    };\n\n}"}});