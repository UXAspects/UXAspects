webpackJsonp([62],{1633:function(t,n,e){"use strict";var a=this&&this.__decorate||function(t,n,e,a){var r,o=arguments.length,d=o<3?n:null===a?a=Object.getOwnPropertyDescriptor(n,e):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)d=Reflect.decorate(t,n,e,a);else for(var i=t.length-1;i>=0;i--)(r=t[i])&&(d=(o<3?r(d):o>3?r(n,e,d):r(n,e))||d);return o>3&&d&&Object.defineProperty(n,e,d),d},r=this&&this.__metadata||function(t,n){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,n)};Object.defineProperty(n,"__esModule",{value:!0});var o=e(0),d=e(259),i=e(141),h=function(){function t(t){this.htmlCode=e(2297),this.jsCode=e(2298),this.codepen={html:this.htmlCode,htmlAttributes:{"ng-controller":"PeityChartCtrl as pc"},js:[this.jsCode]};var n={chartColor1:t.getColor("chart1").toRgb(),chartColor2:t.getColor("chart2").toRgb(),chartFill1:t.getColor("chart1").setAlpha(.2).toRgba()};this.lineChart={data_1:[5,3,9,6,5,9,7,3,5,2],data_2:[5,3,2,-1,-3,-2,2,3,5,2],data_3:[0,-3,-6,-4,-5,-4,-7,-3,-5,-2],options:{fill:[n.chartFill1],stroke:[n.chartColor1]}},this.updatingLineChart={data:[5,3,9,6,5,9,7,3,5,2,5,3,9,6,5,9,7,3,5,2],options:{fill:[n.chartFill1],stroke:[n.chartColor1],width:64},method:function(t){var n=Math.round(10*Math.random()),e=t;return e.shift(),e.push(n),e},updateinterval:300},this.barChart={data_1:[5,3,9,6,5,9,7,3,5,2],data_2:[5,3,2,-1,-3,-2,2,3,5,2],options:{fill:[[n.chartColor1],[n.chartColor2]]}}}return t}();h=a([o.Component({selector:"uxd-charts-peity-charts-ng1",template:e(1992),changeDetection:o.ChangeDetectionStrategy.OnPush}),d.DocumentationSectionComponent("ChartsPeityChartNg1Component"),r("design:paramtypes",[i.ColorService])],h),n.ChartsPeityChartNg1Component=h},1634:function(t,n,e){"use strict";var a=this&&this.__decorate||function(t,n,e,a){var r,o=arguments.length,d=o<3?n:null===a?a=Object.getOwnPropertyDescriptor(n,e):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)d=Reflect.decorate(t,n,e,a);else for(var i=t.length-1;i>=0;i--)(r=t[i])&&(d=(o<3?r(d):o>3?r(n,e,d):r(n,e))||d);return o>3&&d&&Object.defineProperty(n,e,d),d},r=this&&this.__metadata||function(t,n){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,n)};Object.defineProperty(n,"__esModule",{value:!0});var o=e(0),d=e(18),i=e(1633),h=e(261),c=e(260),p=e(140),l=e(263),s=e(262),u=[i.ChartsPeityChartNg1Component],C=[{path:"**",component:h.DocumentationCategoryComponent,data:{category:p.ResolverService.resolveCategoryData(p.DocumentationPage.Charts,"Peity Charts")}}],g=function(){function t(t,n){n.registerResolver(t)}return t}();g=a([o.NgModule({imports:[s.TabsModule,l.WrappersModule,c.DocumentationComponentsModule,d.RouterModule.forChild(C)],exports:u,declarations:u,entryComponents:u}),r("design:paramtypes",[o.ComponentFactoryResolver,p.ResolverService])],g),n.ChartsPeityChartsModule=g},1992:function(t,n){t.exports='<div class="demo-attributes table-responsive">\n    <table class="table table-bordered white-bg">\n        <thead>\n            <tr>\n                <th>Graph</th>\n                <th>Code</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>\n                    <ux-peity-line-chart-ng1 [data]="lineChart.data_1" [options]="lineChart.options"></ux-peity-line-chart-ng1>\n                </td>\n                <td>\n                    <code>&lt;line-chart data=&quot;pc.LineChart.data_1&quot; options=&quot;pc.LineChart.options&quot;&gt;&lt;/line-chart&gt;</code>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <ux-peity-line-chart-ng1 [data]="lineChart.data_2" [options]="lineChart.options"></ux-peity-line-chart-ng1>\n                </td>\n                <td>\n                    <code>&lt;line-chart data=&quot;pc.LineChart.data_2&quot; options=&quot;pc.LineChart.options&quot;&gt;&lt;/line-chart&gt;</code>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <ux-peity-line-chart-ng1 [data]="lineChart.data_3" [options]="lineChart.options"></ux-peity-line-chart-ng1>\n                </td>\n                <td>\n                    <code>&lt;line-chart data=&quot;pc.LineChart.data_3&quot; options=&quot;pc.LineChart.options&quot;&gt;&lt;/line-chart&gt;</code>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <ux-peity-bar-chart-ng1 [data]="barChart.data_1" [options]="barChart.options"></ux-peity-bar-chart-ng1>\n                </td>\n                <td>\n                    <code>&lt;bar-chart data=&quot;pc.BarChart.data_1&quot; options=&quot;pc.BarChart.options&quot;&gt;&lt;/bar-chart&gt;</code>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <ux-peity-bar-chart-ng1 [data]="barChart.data_2" [options]="barChart.options"></ux-peity-bar-chart-ng1>\n                </td>\n                <td>\n                    <code>&lt;bar-chart data=&quot;pc.BarChart.data_2&quot; options=&quot;pc.BarChart.options&quot;&gt;&lt;/bar-chart&gt;</code>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <ux-peity-updating-line-chart-ng1 [data]="updatingLineChart.data" [method]="updatingLineChart.method" [options]="updatingLineChart.options" [updateinterval]="updatingLineChart.updateinterval"></ux-peity-updating-line-chart-ng1>\n                </td>\n                <td>\n                    <code>&lt;updating-linechart data=&quot;pc.UpdatingLineChart.data&quot; method=&quot;pc.UpdatingLineChart.method&quot; options=&quot;pc.UpdatingLineChart.options&quot; updateinterval=&quot;pc.UpdatingLineChart.updateinterval&quot;&gt;&lt;/updating-linechart&gt;</code>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n\n<hr>\n\n<p>In the template, pass <code>pc.UpdatingLineChart.data</code> to define the chart data, <code>pc.UpdatingLineChart.options</code> to define the \nchart rendering options, <code>pc.UpdatingLineChart.method</code> to define the method that generates updated values and <code>pc.UpdatingLineChart.updateinterval</code> \nto define the interval.</p>\n\n<p>Updating Line Charts are rendered by passing the <code>data</code>, <code>options</code>, <code>method</code> and <code>updateinterval</code> parameters to the controller.</p>\n\n<div class="demo-attributes table-responsive">\n<table class="table">\n  <tbody><tr>\n    <th>Name</th>\n    <th>Type</th>\n    <th>Description</th>\n    <th>Optional</th>\n  </tr>\n  <tr>\n    <td class="attribute">data</td>\n    <td>array</td>\n    <td>Array of data points for the chart to display.</td>\n    <td>false</td>\n  </tr>\n  <tr>\n    <td class="attribute">stroke</td>\n    <td>string</td>\n    <td>Provides the color of the stroke in a chart.</td>\n    <td>true</td>\n  </tr>\n  <tr>\n    <td class="attribute">fill</td>\n    <td>string</td>\n    <td>Written inside the options, these are the colors used to fill line or bar chart.</td>\n    <td>true</td>\n  </tr>\n  <tr>\n    <td class="attribute">width</td>\n    <td>number</td>\n    <td>Number, defines the width of the graph.</td>\n    <td>true</td>\n  </tr>\n  <tr>\n    <td class="attribute">height</td>\n    <td>number</td>\n    <td>Number, defines the height of the graph.</td>\n    <td>true</td>\n  </tr>\n  <tr>\n    <td class="attribute">method</td>\n    <td>function</td>\n    <td>Function that updates the line chart. Parameters: oldData; Return Parameter: newData.</td>\n    <td>true</td>\n  </tr>\n  <tr>\n    <td class="attribute">updateinterval</td>\n    <td>number</td>\n    <td>Milliseconds, time interval for re-generation.</td>\n    <td>true</td>\n  </tr>\n</tbody></table>\n</div>\n\n\n<tabset>\n    <tab heading="HTML">\n        <uxd-snippet language="html" [code]="htmlCode"></uxd-snippet>\n    </tab>\n    \n    <tab heading="Javascript">\n        <uxd-snippet language="javascript" [code]="jsCode"></uxd-snippet>\n    </tab>\n</tabset>\n\n<p>To provide accessibility for users with assistive technologies, include a <code>span</code> with the <code>sr-only</code> class which conveys the same information as the chart. \nFor updating charts and line charts, the most appropriate information to provide will depend on the purpose of the chart.</p>\n\n<blockquote>\n    <p><strong>Note</strong>: To upgrade these components to use in an Angular 4 application use:<br /> \n    <code>upgradeAdapter.upgradeNg1Component(\'uxPeityLineChartNg1\')</code><br />\n    <code>upgradeAdapter.upgradeNg1Component(\'uxPeityBarChartNg1\')</code><br />\n    <code>upgradeAdapter.upgradeNg1Component(\'uxPeityPieChartNg1\')</code><br />\n    <code>upgradeAdapter.upgradeNg1Component(\'uxPeityUpdatingLineChartNg1\')</code></p>\n</blockquote>'},2297:function(t,n){t.exports='<div class="container-fluid">\n    <div class="row">\n        <div class="col-md-12 m-t-md">\n            <div ng-controller="PeityChartCtrl as pc">\n                <table class="table table-bordered white-bg">\n                    <thead>\n                        <tr>\n                            <th>Graphs</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td>\n                                <line-chart data="pc.LineChart.data_1" options="pc.LineChart.options"></line-chart>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                <line-chart data="pc.LineChart.data_2" options="pc.LineChart.options"></line-chart>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                <line-chart data="pc.LineChart.data_3" options="pc.LineChart.options"></line-chart>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                <bar-chart data="pc.BarChart.data_1" options="pc.BarChart.options"></bar-chart>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                <bar-chart data="pc.BarChart.data_2" options="pc.BarChart.options"></bar-chart>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                <updating-linechart data="pc.UpdatingLineChart.data" method="pc.UpdatingLineChart.method" options="pc.UpdatingLineChart.options"\n                                    updateinterval="pc.UpdatingLineChart.updateinterval"></updating-linechart>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    </div>\n</div>'},2298:function(t,n){t.exports="angular.module('app').controller('PeityChartCtrl', PeityChartCtrl);\n\nPeityChartCtrl.$inject = ['$colorService'];\n\nfunction PeityChartCtrl($colorService) {\n  var pc = this;\n\n  var peityChartColors = {\n    chartColor1: $colorService.getColor('chart1').toRgb(),\n    chartColor2: $colorService.getColor('chart2').toRgb(),\n    chartFill1: $colorService.getColor('chart1').setAlpha(0.2).toRgba()\n  };\n\n  pc.LineChart = {\n    data_1: [5, 3, 9, 6, 5, 9, 7, 3, 5, 2],\n    data_2: [5, 3, 2, -1, -3, -2, 2, 3, 5, 2],\n    data_3: [0, -3, -6, -4, -5, -4, -7, -3, -5, -2],\n    options: {\n      fill: [peityChartColors.chartFill1],\n      stroke: [peityChartColors.chartColor1]\n    }\n  };\n\n  pc.UpdatingLineChart = {\n    data: [5, 3, 9, 6, 5, 9, 7, 3, 5, 2, 5, 3, 9, 6, 5, 9, 7, 3, 5, 2],\n    options: {\n      fill: [peityChartColors.chartFill1],\n      stroke: [peityChartColors.chartColor1],\n      width: 64\n    },\n    method: function (oldData) {\n      // START - write code here.. that updates the old value to update the chart.\n      var random = Math.round(Math.random() * 10);\n      var newData = oldData;\n      newData.shift();\n      newData.push(random);\n      // END\n\n      // return the newData to update the chart.\n      return newData;\n    },\n    updateinterval: 300\n  };\n\n  pc.BarChart = {\n    data_1: [5, 3, 9, 6, 5, 9, 7, 3, 5, 2],\n    data_2: [5, 3, 2, -1, -3, -2, 2, 3, 5, 2],\n    options: {\n      fill: [\n        [peityChartColors.chartColor1],\n        [peityChartColors.chartColor2]\n      ]\n    }\n  };\n}"}});