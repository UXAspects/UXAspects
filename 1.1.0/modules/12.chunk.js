webpackJsonp([12],{1436:function(n,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var e=function(){function n(n,t,o,e,i){this.snippets={compiled:{},raw:{}},this.loadSnippetsFromRequireContext(this.snippets.raw,i),this.snippets.compiled=this.snippets.raw}return n.prototype.loadSnippetsFromRequireContext=function(n,t){t&&t.keys().forEach(function(o){var e=o.replace("./","").replace(/\W+(\w)/g,function(n){return n[1].toUpperCase()});n[e]=t(o)})},n}();t.BaseDocumentationSection=e},1559:function(n,t,o){function e(n){return o(i(n))}function i(n){var t=a[n];if(!(t+1))throw new Error("Cannot find module '"+n+"'.");return t}var a={"./controller.js":2490,"./layout.html":2491};e.keys=function(){return Object.keys(a)},e.resolve=i,n.exports=e,e.id=1559},1560:function(n,t,o){function e(n){return o(i(n))}function i(n){var t=a[n];if(!(t+1))throw new Error("Cannot find module '"+n+"'.");return t}var a={"./controller.js":2492,"./layout.html":2493};e.keys=function(){return Object.keys(a)},e.resolve=i,n.exports=e,e.id=1560},1561:function(n,t,o){function e(n){return o(i(n))}function i(n){var t=a[n];if(!(t+1))throw new Error("Cannot find module '"+n+"'.");return t}var a={"./button.example.html":2494,"./controller.js":2495,"./dropdown.example.html":2496,"./layout.html":2497,"./modalController.js":2498,"./modalLayout.html":288,"./notification.html":289,"./styles.css":2499};e.keys=function(){return Object.keys(a)},e.resolve=i,n.exports=e,e.id=1561},1562:function(n,t,o){function e(n){return o(i(n))}function i(n){var t=a[n];if(!(t+1))throw new Error("Cannot find module '"+n+"'.");return t}var a={"./controller.js":2500,"./layout.html":2501,"./modalController.js":2502,"./modalLayout.html":290,"./modalOptions.example.js":2503,"./notification.html":291,"./styles.css":2504};e.keys=function(){return Object.keys(a)},e.resolve=i,n.exports=e,e.id=1562},1563:function(n,t,o){function e(n){return o(i(n))}function i(n){var t=a[n];if(!(t+1))throw new Error("Cannot find module '"+n+"'.");return t}var a={"./controller.example.js":2505,"./controller.js":2506,"./layout.example.html":2507,"./layout.html":2508,"./styles.css":2509};e.keys=function(){return Object.keys(a)},e.resolve=i,n.exports=e,e.id=1563},1721:function(n,t,o){"use strict";var e=this&&this.__extends||function(){var n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var o in t)t.hasOwnProperty(o)&&(n[o]=t[o])};return function(t,o){function e(){this.constructor=t}n(t,o),t.prototype=null===o?Object.create(o):(e.prototype=o.prototype,new e)}}(),i=this&&this.__decorate||function(n,t,o,e){var i,a=arguments.length,s=a<3?t:null===e?e=Object.getOwnPropertyDescriptor(t,o):e;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(n,t,o,e);else for(var r=n.length-1;r>=0;r--)(i=n[r])&&(s=(a<3?i(s):a>3?i(t,o,s):i(t,o))||s);return a>3&&s&&Object.defineProperty(t,o,s),s},a=this&&this.__metadata||function(n,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(n,t)};Object.defineProperty(t,"__esModule",{value:!0});var s=o(0),r=o(1436),c=o(259),l=function(n){function t(){var t=n.call(this,null,null,null,null,o(1559))||this;return t.codepen={html:t.snippets.raw.layoutHtml,htmlAttributes:{"ng-controller":"AlertStylesDemoCtrl as vm"},js:[t.snippets.raw.controllerJs]},t}return e(t,n),t}(r.BaseDocumentationSection);l=i([s.Component({selector:"uxd-alert-styles-ng1",template:o(2059),changeDetection:s.ChangeDetectionStrategy.OnPush}),c.DocumentationSectionComponent("ComponentsAlertStylesNg1Component"),a("design:paramtypes",[])],l),t.ComponentsAlertStylesNg1Component=l},1722:function(n,t,o){"use strict";var e=this&&this.__extends||function(){var n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var o in t)t.hasOwnProperty(o)&&(n[o]=t[o])};return function(t,o){function e(){this.constructor=t}n(t,o),t.prototype=null===o?Object.create(o):(e.prototype=o.prototype,new e)}}(),i=this&&this.__decorate||function(n,t,o,e){var i,a=arguments.length,s=a<3?t:null===e?e=Object.getOwnPropertyDescriptor(t,o):e;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(n,t,o,e);else for(var r=n.length-1;r>=0;r--)(i=n[r])&&(s=(a<3?i(s):a>3?i(t,o,s):i(t,o))||s);return a>3&&s&&Object.defineProperty(t,o,s),s},a=this&&this.__metadata||function(n,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(n,t)};Object.defineProperty(t,"__esModule",{value:!0});var s=o(0),r=o(1436),c=o(259),l=function(n){function t(){var t=n.call(this,null,null,null,null,o(1560))||this;return t.codepen={html:t.snippets.raw.layoutHtml,htmlAttributes:{"ng-controller":"DismissableStylesDemoCtrl as vm"},js:[t.snippets.raw.controllerJs]},t}return e(t,n),t}(r.BaseDocumentationSection);l=i([s.Component({selector:"uxd-dismissable-styles-ng1",template:o(2060),changeDetection:s.ChangeDetectionStrategy.OnPush}),c.DocumentationSectionComponent("ComponentsDismissableStylesNg1Component"),a("design:paramtypes",[])],l),t.ComponentsDismissableStylesNg1Component=l},1723:function(n,t,o){"use strict";var e=this&&this.__extends||function(){var n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var o in t)t.hasOwnProperty(o)&&(n[o]=t[o])};return function(t,o){function e(){this.constructor=t}n(t,o),t.prototype=null===o?Object.create(o):(e.prototype=o.prototype,new e)}}(),i=this&&this.__decorate||function(n,t,o,e){var i,a=arguments.length,s=a<3?t:null===e?e=Object.getOwnPropertyDescriptor(t,o):e;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(n,t,o,e);else for(var r=n.length-1;r>=0;r--)(i=n[r])&&(s=(a<3?i(s):a>3?i(t,o,s):i(t,o))||s);return a>3&&s&&Object.defineProperty(t,o,s),s},a=this&&this.__metadata||function(n,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(n,t)};Object.defineProperty(t,"__esModule",{value:!0});var s=o(0),r=o(1436),c=o(259),l=function(n){function t(){var t=n.call(this,null,null,null,null,o(1561))||this;return t.codepen={html:t.snippets.raw.layoutHtml,htmlAttributes:{"ng-controller":"NotificationDropdownDemoCtrl as vm"},htmlTemplates:[{id:"modalLayout.html",content:t.snippets.raw.modalLayoutHtml},{id:"notification.html",content:t.snippets.raw.notificationHtml}],css:[t.snippets.raw.stylesCss],js:[t.snippets.raw.controllerJs,t.snippets.raw.modalControllerJs]},t}return e(t,n),t}(r.BaseDocumentationSection);l=i([s.Component({selector:"uxd-notification-dropdown-ng1",template:o(2061),changeDetection:s.ChangeDetectionStrategy.OnPush}),c.DocumentationSectionComponent("ComponentsNotificationDropdownNg1Component"),a("design:paramtypes",[])],l),t.ComponentsNotificationDropdownNg1Component=l},1724:function(n,t,o){"use strict";var e=this&&this.__extends||function(){var n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var o in t)t.hasOwnProperty(o)&&(n[o]=t[o])};return function(t,o){function e(){this.constructor=t}n(t,o),t.prototype=null===o?Object.create(o):(e.prototype=o.prototype,new e)}}(),i=this&&this.__decorate||function(n,t,o,e){var i,a=arguments.length,s=a<3?t:null===e?e=Object.getOwnPropertyDescriptor(t,o):e;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(n,t,o,e);else for(var r=n.length-1;r>=0;r--)(i=n[r])&&(s=(a<3?i(s):a>3?i(t,o,s):i(t,o))||s);return a>3&&s&&Object.defineProperty(t,o,s),s},a=this&&this.__metadata||function(n,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(n,t)};Object.defineProperty(t,"__esModule",{value:!0});var s=o(0),r=o(1436),c=o(259),l=function(n){function t(){var t=n.call(this,null,null,null,null,o(1562))||this;return t.codepen={html:t.snippets.raw.layoutHtml,htmlAttributes:{"ng-controller":"NotificationListDemoCtrl as vm"},htmlTemplates:[{id:"modalLayout.html",content:t.snippets.raw.modalLayoutHtml},{id:"notification.html",content:t.snippets.raw.notificationHtml}],css:[t.snippets.raw.stylesCss],js:[t.snippets.raw.controllerJs,t.snippets.raw.modalControllerJs]},t}return e(t,n),t}(r.BaseDocumentationSection);l=i([s.Component({selector:"uxd-notification-list-ng1",template:o(2062),styles:[o(2864)],encapsulation:s.ViewEncapsulation.None,changeDetection:s.ChangeDetectionStrategy.OnPush}),c.DocumentationSectionComponent("ComponentsNotificationListNg1Component"),a("design:paramtypes",[])],l),t.ComponentsNotificationListNg1Component=l},1725:function(n,t,o){"use strict";var e=this&&this.__extends||function(){var n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var o in t)t.hasOwnProperty(o)&&(n[o]=t[o])};return function(t,o){function e(){this.constructor=t}n(t,o),t.prototype=null===o?Object.create(o):(e.prototype=o.prototype,new e)}}(),i=this&&this.__decorate||function(n,t,o,e){var i,a=arguments.length,s=a<3?t:null===e?e=Object.getOwnPropertyDescriptor(t,o):e;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(n,t,o,e);else for(var r=n.length-1;r>=0;r--)(i=n[r])&&(s=(a<3?i(s):a>3?i(t,o,s):i(t,o))||s);return a>3&&s&&Object.defineProperty(t,o,s),s},a=this&&this.__metadata||function(n,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(n,t)};Object.defineProperty(t,"__esModule",{value:!0});var s=o(0),r=o(1436),c=o(259),l=function(n){function t(){var t=n.call(this,null,null,null,null,o(1563))||this;return t.codepen={html:t.snippets.raw.layoutHtml,htmlAttributes:{"ng-controller":"NotificationsDemoCtrl as vm"},css:[t.snippets.raw.stylesCss],js:[t.snippets.raw.controllerJs,t.snippets.raw.modalControllerJs]},t}return e(t,n),t}(r.BaseDocumentationSection);l=i([s.Component({selector:"uxd-notifications-ng1",template:o(2063),styles:[o(2865)],encapsulation:s.ViewEncapsulation.None,changeDetection:s.ChangeDetectionStrategy.OnPush}),c.DocumentationSectionComponent("ComponentsNotificationsNg1Component"),a("design:paramtypes",[])],l),t.ComponentsNotificationsNg1Component=l},1726:function(n,t,o){"use strict";var e=this&&this.__decorate||function(n,t,o,e){var i,a=arguments.length,s=a<3?t:null===e?e=Object.getOwnPropertyDescriptor(t,o):e;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(n,t,o,e);else for(var r=n.length-1;r>=0;r--)(i=n[r])&&(s=(a<3?i(s):a>3?i(t,o,s):i(t,o))||s);return a>3&&s&&Object.defineProperty(t,o,s),s},i=this&&this.__metadata||function(n,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(n,t)};Object.defineProperty(t,"__esModule",{value:!0});var a=o(0),s=o(18),r=o(260),c=o(140),l=o(261),p=o(1725),d=o(1724),f=o(1723),m=o(1721),u=o(1722),h=o(263),g=o(262),b=[p.ComponentsNotificationsNg1Component,d.ComponentsNotificationListNg1Component,f.ComponentsNotificationDropdownNg1Component,m.ComponentsAlertStylesNg1Component,u.ComponentsDismissableStylesNg1Component],v=[{path:"**",component:l.DocumentationCategoryComponent,data:{category:c.ResolverService.resolveCategoryData(c.DocumentationPage.Components,"Notifications")}}],x=function(){function n(n,t){t.registerResolver(n)}return n}();x=e([a.NgModule({imports:[h.WrappersModule,g.TabsModule,r.DocumentationComponentsModule,s.RouterModule.forChild(v)],exports:b,declarations:b,entryComponents:b}),i("design:paramtypes",[a.ComponentFactoryResolver,c.ResolverService])],x),t.ComponentsNotificationsModule=x},2059:function(n,t){n.exports='<uxd-alert-styles-wrapper></uxd-alert-styles-wrapper>\n\n<hr>\n\n<p>Alerts are used to notify the result of an activity. Info alert is used to convey information and error alert shows failure. Specify the <code class="highlighter-rouge">type</code> attribute on <code class="highlighter-rouge">alert</code> element.</p>\n\n<p>The <code class="highlighter-rouge">info</code> and <code class="highlighter-rouge">error</code> types depict info and error alerts respectively.</p>\n\n<tabset>\n    <tab heading="HTML">\n        <uxd-snippet [content]="snippets.compiled.layoutHtml" language="html"></uxd-snippet>\n    </tab>\n    <tab heading="JavaScript">\n        <uxd-snippet [content]="snippets.compiled.controllerJs" language="javascript"></uxd-snippet>\n    </tab>\n</tabset>'},2060:function(n,t){n.exports='<uxd-dismissable-styles-wrapper></uxd-dismissable-styles-wrapper>\n\n<hr>\n\n<p>Alerts can be made dismissible by specifying the <code class="highlighter-rouge">close</code> attribute.</p>\n\n<tabset>\n    <tab heading="HTML">\n        <uxd-snippet [content]="snippets.compiled.layoutHtml" language="html"></uxd-snippet>\n    </tab>\n    <tab heading="JavaScript">\n        <uxd-snippet [content]="snippets.compiled.controllerJs" language="javascript"></uxd-snippet>\n    </tab>\n</tabset>'},2061:function(n,t){n.exports='<p>The recommended way of presenting notifications is as a dropdown menu that appears by clicking the notification button (\n  <span\n    class="hpe-icon hpe-notification"></span>) in the page header. This should display a few of the most recent notifications, with an optional link at the bottom\n    of the list that will launch the side modal containing a more complete history of all notifications. See below for an\n    example of how to use a dropdown menu to launch to the notification modal:</p>\n\n<div class="m-b-lg">\n  <uxd-notification-dropdown-wrapper></uxd-notification-dropdown-wrapper>\n</div>\n\n<tabset>\n  <tab heading="HTML">\n    <uxd-snippet [content]="snippets.compiled.dropdownExampleHtml" language="html"></uxd-snippet>\n  </tab>\n  <tab heading="JavaScript">\n    <uxd-snippet [content]="snippets.compiled.controllerJs" language="javascript"></uxd-snippet>\n  </tab>\n  <tab heading="CSS">\n    <uxd-snippet [content]="snippets.compiled.stylesCss" language="css"></uxd-snippet>\n  </tab>\n</tabset>\n\n<p>The following code was used to add the button that will display notifications:</p>\n\n<uxd-snippet [content]="snippets.compiled.buttonExampleHtml" language="html"></uxd-snippet>\n\n<blockquote>\n  <p>Refer to the <a routerLink="/components/modals" fragment="side-modal-ng1">Side Modal</a> page for more information on how to use the side modal.</p>\n</blockquote>\n\n<blockquote>\n  <p>Refer to the <a routerLink="/components/scrollbar">Scrollbar</a> page for more information on how to use the custom scrollbar control and implement\n    paging.</p>\n</blockquote>\n\n<blockquote>\n  <p>Refer to the <a routerLink="/components/utilities" fragment="time-ago-service-ng1">Time Ago Service</a> page for more information on how to use the time ago service and directive.</p>\n</blockquote>\n\n<blockquote>\n  <p>Refer to the <a routerLink="/css/page-header" fragment="standard-header">Standard Header</a> page for more information on how to create the page header.</p>\n</blockquote>'},2062:function(n,t){n.exports='<uxd-notification-list-wrapper></uxd-notification-list-wrapper>\n\n<hr>\n\n<p>Notifications are often used to display information based on events that are occurring at a specific time, however to display the full history of any past notifications consider using a side modal.</p>\n\n<p>The button above was created using the following code:</p>\n\n<uxd-snippet [content]="snippets.compiled.layoutHtml" language="html"></uxd-snippet>\n\n<p>The modal options in the example are as follows:</p>\n\n<uxd-snippet [content]="snippets.compiled.modalOptionsExampleJs" language="javascript"></uxd-snippet>\n\n<p>The content of the side modal is simply a list of notifications that uses a custom scrollbar and has paging. The notifications in this list are randomly generated. For use in production notifications should be loaded from a data store.</p>\n\n<tabset>\n    <tab heading="HTML">\n        <uxd-snippet [content]="snippets.compiled.modalLayoutHtml" language="html"></uxd-snippet>\n    </tab>\n    <tab heading="JavaScript">\n        <uxd-snippet [content]="snippets.compiled.modalControllerJs" language="javascript"></uxd-snippet>\n    </tab>\n    <tab heading="CSS">\n        <uxd-snippet [content]="snippets.compiled.stylesCss" language="css"></uxd-snippet>\n    </tab>\n    <tab heading="Notification Template">\n        <uxd-snippet [content]="snippets.compiled.notificationHtml" language="html"></uxd-snippet>\n    </tab>\n</tabset>'},2063:function(n,t){n.exports='<uxd-notifications-wrapper></uxd-notifications-wrapper>\n\n<hr>\n\n<p>Notifications can be used to inform the user of occurring events or to alert the user of something that may require their\n  attention. Notifications will appear in the top right corner of the browser window and can be dismissed by the user by\n  clicking the close button.</p>\n\n<p>Notifications are controlled by the <code class="highlighter-rouge">notificationService</code> which can be injected into\n  any controller in the application.</p>\n\n<p>The <code class="highlighter-rouge">notificationService</code> has several functions available to control notifications.</p>\n<div class="demo-attributes table-responsive">\n  <table class="table">\n    <tbody>\n      <tr>\n        <th>Property</th>\n        <th>Description</th>\n      </tr>\n      <tr>\n        <td class="attribute">showNotification</td>\n        <td>This function should be called to show a notification. It should be given an object containing properties to configure\n          the appearance and content of the notification. It will return the notification element (if notifications are visible\n          - see <code>setNotificationVisibility</code>), this can be used to dismiss this individual notification at a later\n          point.\n        </td>\n      </tr>\n      <tr>\n        <td class="attribute">dismissNotification</td>\n        <td>This function can be called to dismiss a notification. It should be passed the notification element to dismiss.</td>\n      </tr>\n      <tr>\n        <td class="attribute">dismissAllNotifications</td>\n        <td>This function will dismiss any currently visible notifications.</td>\n      </tr>\n      <tr>\n        <td class="attribute">getNotifications</td>\n        <td>this function will return an array of all notifications shown since the browser was last refreshed. The objects in\n          the array returned will contain the properties passed to the <code>showNotification</code> function along with\n          an additional <code>date</code> property which will contain the time at which the notification was shown. If a\n          more permanent history of notifications is required consider using local storage or a database.</td>\n      </tr>\n      <tr>\n        <td class="attribute">setNotificationVisibility</td>\n        <td>This function will determine whether notifications should be visibly displayed on screen when the <code>showNotification</code> function is called. If the <code>showNotification</code> function is called and the visibility is set to false,\n          no notification will show, however a record of it will still be kept and can be accessed using the <code>getNotifications</code> function. This function expects a boolean value as an argument, a value of <code>true</code> will display notifications\n          and a value of <code>false</code> will hide them. The default value is <code>true</code>.</td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n<p>The following options can be used to configure the appearance and content of the notification:</p>\n<div class="demo-attributes table-responsive">\n  <table class="table m-t">\n    <tbody>\n      <tr>\n        <th>Name</th>\n        <th>Type</th>\n        <th>Description</th>\n      </tr>\n      <tr>\n        <td class="attribute">icon</td>\n        <td>string</td>\n        <td>Sets the icon from the icon set to display within the notification.</td>\n      </tr>\n      <tr>\n        <td class="attribute">title</td>\n        <td>string</td>\n        <td>Sets the title displayed at the top of the notification.</td>\n      </tr>\n      <tr>\n        <td class="attribute">text</td>\n        <td>string</td>\n        <td>Sets the text displayed within the notification.</td>\n      </tr>\n      <tr>\n        <td class="attribute">subtitle</td>\n        <td>string</td>\n        <td>Sets the text displayed beneath the main notification text. This is useful for adding a timestamp to the notification.</td>\n      </tr>\n      <tr>\n        <td class="attribute">duration</td>\n        <td>number</td>\n        <td>Sets the duration (in milliseconds) the notification should appear before automatically dismissing. A value of <code>0</code> will show the notification until manually dismissed.</td>\n      </tr>\n      <tr>\n        <td class="attribute">backgroundColor</td>\n        <td>string</td>\n        <td>Sets the background color of the notification.</td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n<p>The HTML tab provides sample code to call the functions within the controller, while the Javascript tab provides an example\n  of how the <code>notificationService</code> can be used to show or dismiss notifications.</p>\n\n<tabset>\n  <tab heading="HTML">\n    <uxd-snippet [content]="snippets.compiled.layoutExampleHtml" language="html"></uxd-snippet>\n  </tab>\n  <tab heading="JavaScript">\n    <uxd-snippet [content]="snippets.compiled.controllerExampleJs" language="javascript"></uxd-snippet>\n  </tab>\n  <tab heading="CSS">\n    <uxd-snippet [content]="snippets.compiled.stylesCss" language="css"></uxd-snippet>\n  </tab>\n</tabset>'},2490:function(n,t){n.exports="angular.module('app').controller('AlertStylesDemoCtrl', AlertStylesDemoCtrl);\n\nfunction AlertStylesDemoCtrl() {\n    var vm = this;\n\n    vm.infoAlert = {\n        type: 'info',\n        msg: 'This is an example of an info alert.',\n        linkText: 'Alert Link'\n    };\n    vm.errorAlert = {\n        type: 'error',\n        msg: 'This is an example of an error alert.',\n        linkText: 'Alert Link'\n    };\n}"},2491:function(n,t){n.exports='<alert type="{{vm.infoAlert.type}}">\n    <span ng-bind="vm.infoAlert.msg"></span> &nbsp;\n    <a href="" class="alert-link" ng-bind="vm.infoAlert.linkText"></a>\n</alert>\n<alert type="{{vm.errorAlert.type}}">\n    <span ng-bind="vm.errorAlert.msg"></span> &nbsp;\n    <a href="" class="alert-link" ng-bind="vm.errorAlert.linkText"></a>\n</alert>'},2492:function(n,t){n.exports="angular.module('app').controller('DismissableStylesDemoCtrl', DismissableStylesDemoCtrl);\n\nfunction DismissableStylesDemoCtrl() {\n    var vm = this;\n\n    vm.addDismissAlert = function (type) {\n        vm.dismissAlerts.push({\n            type: type,\n            msg: 'This is an example of a dismissible ' + type + ' alert.',\n            linkText: 'Alert Link'\n        });\n    };\n\n    vm.dismissAlerts = [];\n    vm.addDismissAlert('info');\n    vm.addDismissAlert('error');\n    \n    vm.close = function (item) {\n        vm.dismissAlerts.splice(vm.dismissAlerts.indexOf(item), 1);\n    };\n}"},2493:function(n,t){n.exports='<alert ng-repeat="alert in vm.dismissAlerts" type="{{alert.type}}" close="vm.close(alert)">\n    <span ng-bind="alert.msg"></span>&nbsp;\n    <a href="" class="alert-link" ng-bind="alert.linkText"></a>\n</alert>\n<button ng-click="vm.addDismissAlert(\'info\')" class="btn button-secondary">Add Info Alert</button> &nbsp;\n<button ng-click="vm.addDismissAlert(\'error\')" class="btn btn-alert">Add Error Alert</button>'},2494:function(n,t){n.exports='<button type="button" class="btn button-primary m-t-sm" ng-click="vm.showNextNotification()">Show Notification</button>'},2495:function(n,t){n.exports="angular.module('app').controller('NotificationDropdownDemoCtrl', NotificationDropdownDemoCtrl);\n\nNotificationDropdownDemoCtrl.$inject = ['$scope', 'notificationService', '$colorService'];\n\nfunction NotificationDropdownDemoCtrl($scope, notificationService, $colorService) {\n    var vm = this;\n\n    var sampleNotifications = [{\n        icon: 'hpe-user',\n        text: 'Add new custodians (23) submitted',\n        duration: 2000,\n        backgroundColor: $colorService.getColor('primary').toHex()\n    }, {\n        icon: 'hpe-alert',\n        text: 'Export Michael J. Angelakis completed with 2 errors',\n        duration: 2000,\n        backgroundColor: $colorService.getColor('accent').toHex()\n    }, {\n        icon: 'hpe-archive',\n        text: 'Export Marc Andressen submitted',\n        duration: 2000,\n        backgroundColor: $colorService.getColor('critical').toHex()\n    }];\n\n    var currentNotification = 0;\n\n    //update the visibility of the notifications\n    vm.hideNotifications = false;\n\n    //watch the notifications that have been displayed\n    vm.previousNotifications = [];\n\n    //keep a count of the number of notifications\n    vm.notificationCount = 0;\n\n    vm.showNextNotification = function () {\n\n        //next notification\n        var nextNotification = sampleNotifications[currentNotification];\n\n        //show the next notifications\n        notificationService.showNotification(nextNotification);\n\n        //increment notification counter\n        currentNotification++;\n\n        //loop notifications\n        if (currentNotification > 2) currentNotification = 0;\n    };\n\n    //when a notification has been added update the array\n    $scope.$watch(function () {\n        return notificationService.getNotifications();\n    }, function (nv, ov) {\n\n        //update notification count\n        vm.notificationCount = nv.length;\n\n        //return the three most recent notifications\n        if (!angular.equals(nv, ov)) vm.previousNotifications = nv.slice().reverse().slice(0, 3);\n\n    }, true);\n\n    //watch when the visibility of the notifications changes\n    $scope.$watch('vm.hideNotifications', function (nv, ov) {\n        if (nv !== ov) notificationService.setNotificationVisibility(!nv);\n    });\n\n    vm.notificationModalOptions = {\n        title: \"Alerts\",\n        main: \"modalLayout.html\",\n        modalColumns: \"notification-modal\",\n        affixHeader: true\n    };\n\n    // Clean up scope\n    vm.$onDestroy = function () {\n        $scope.$destroy();\n    };\n}\n\n"},2496:function(n,t){n.exports='\x3c!-- Notification dropdown in page header --\x3e\n<li class="dropdown count-info">\n    <a class="dropdown-toggle" data-toggle="dropdown">\n        <i class="hpe-icon hpe-notification"></i> <span class="label label-primary" ng-show="vm.notificationCount > 0"\n            ng-bind="vm.notificationCount"></span>\n    </a>\n    <ul class="dropdown-menu">\n        <li ng-show="vm.notificationCount === 0">\n            <p class="no-notifications-dropdown"><span class="hpe-icon hpe-notification m-r-sm"></span> No Notifications</p>\n        </li>\n        <li ng-repeat="notification in vm.previousNotifications">\n            <a class="dropdown-notification">\n                <div class="notification-icon">\n                    <i class="hpe-icon hpe-fw text-muted" ng-class="notification.icon"></i>\n                </div>\n                <div class="notification-text">\n                    <span ng-bind="notification.text"></span>\n                </div>\n                <div class="notification-time">\n                    <span class="text-muted small" time-ago="notification.date"></span>\n                </div>\n            </a>\n        </li>\n        <li>\n            <div class="dropdown-notification-options">\n                <a href="" class="hyperlink" ng-show="vm.notificationCount > 0" side-modal-window="vm.notificationModalOptions">View all alerts</a>\n                <div class="hide-notifications">\n                    <checkbox ng-model="vm.hideNotifications" name="hide-notifications">Hide notifications</checkbox>\n                </div>\n            </div>\n        </li>\n    </ul>\n</li>\n'},2497:function(n,t){n.exports='<div class="notification-header">\n    <ol class="breadcrumb">\n        <li class="hidden-xs">\n            <span>Home<i class="hpe-icon hpe-up" aria-hidden="true"></i></span>\n        </li>\n        <li class="hidden-xs">\n            <span>Components<i class="hpe-icon hpe-up" aria-hidden="true"></i></span>\n        </li>\n        <li class="visible-xs-block">\n            <span><i class="hpe-icon hpe-more" aria-hidden="true" tooltip="Home > Components" tooltip-placement="bottom"></i><i class="hpe-icon hpe-up" aria-hidden="true"></i></span>\n        </li>\n    </ol>\n    <h1 class="heading m-t-nil">Notifications</h1>\n\n    <ul class="nav-buttons">\n        <li class="dropdown hidden-xs">\n            <a class="dropdown-toggle">\n                <i class="hpe-icon hpe-help"></i>\n            </a>\n        </li>\n        <li class="dropdown hidden-xs">\n            <a class="dropdown-toggle">\n                <i class="hpe-icon hpe-search"></i>\n            </a>\n        </li>\n        <li class="dropdown count-info hidden-xs">\n            <a class="dropdown-toggle" data-toggle="dropdown">\n                <i class="hpe-icon hpe-notification"></i> <span class="label label-primary" ng-show="vm.notificationCount > 0"\n                    ng-bind="vm.notificationCount"></span>\n            </a>\n            <ul class="dropdown-menu">\n                <li ng-show="vm.notificationCount === 0">\n                    <p class="no-notifications-dropdown"><span class="hpe-icon hpe-notification m-r-sm"></span> No Notifications</p>\n                </li>\n                <li ng-repeat="notification in vm.previousNotifications">\n                    <a class="dropdown-notification">\n                        <div class="notification-icon">\n                            <i class="hpe-icon hpe-fw text-muted" ng-class="notification.icon"></i>\n                        </div>\n                        <div class="notification-text">\n                            <span ng-bind="notification.text"></span>\n                        </div>\n                        <div class="notification-time">\n                            <span class="text-muted small" time-ago="notification.date"></span>\n                        </div>\n                    </a>\n                </li>\n                <li>\n                    <div class="dropdown-notification-options">\n                        <a href="" class="hyperlink text-primary" ng-show="vm.notificationCount > 0" side-modal-window="vm.notificationModalOptions">View all alerts</a>\n                        <div class="hide-notifications">\n                            <checkbox ng-model="vm.hideNotifications" name="hide-notifications">Hide notifications</checkbox>\n                        </div>\n                    </div>\n                </li>\n            </ul>\n        </li>\n        <li class="dropdown hidden-xs">\n            <a class="dropdown-toggle">\n                <i class="hpe-icon hpe-actions"></i>\n            </a>\n        </li>\n        <li class="dropdown visible-xs">\n            <a class="dropdown-toggle" ng-click="vm.iconHeaderVisible = !vm.iconHeaderVisible">\n                <i class="hpe-icon text-primary" ng-class="vm.iconHeaderVisible ? \'hpe-down\' : \'hpe-previous\'"></i>\n            </a>\n        </li>\n    </ul>\n</div>\n\n<div class="notification-icon-header visible-xs" ng-show="vm.iconHeaderVisible">\n    <ul class="nav-buttons">\n        <li class="dropdown">\n            <a class="dropdown-toggle">\n                <i class="hpe-icon hpe-help"></i>\n            </a>\n        </li>\n        <li class="dropdown">\n            <a class="dropdown-toggle">\n                <i class="hpe-icon hpe-search"></i>\n            </a>\n        </li>\n        <li class="dropdown count-info">\n            <a class="dropdown-toggle" data-toggle="dropdown">\n                <i class="hpe-icon hpe-notification"></i> <span class="label label-primary" ng-show="vm.notificationCount > 0"\n                    ng-bind="vm.notificationCount"></span>\n            </a>\n            <ul class="dropdown-menu">\n                <li ng-show="vm.notificationCount === 0">\n                    <p class="no-notifications-dropdown"><span class="hpe-icon hpe-notification m-r-sm"></span> No Notifications</p>\n                </li>\n                <li ng-repeat="notification in vm.previousNotifications">\n                    <a class="dropdown-notification">\n                        <div class="notification-icon">\n                            <i class="hpe-icon hpe-fw text-muted" ng-class="notification.icon"></i>\n                        </div>\n                        <div class="notification-text">\n                            <span ng-bind="notification.text"></span>\n                        </div>\n                        <div class="notification-time">\n                            <span class="text-muted small" time-ago="notification.date"></span>\n                        </div>\n                    </a>\n                </li>\n                <li>\n                    <div class="dropdown-notification-options">\n                        <a href="" class="hyperlink text-primary" ng-show="vm.notificationCount > 0" side-modal-window="vm.notificationModalOptions">View all alerts</a>\n                        <div class="hide-notifications">\n                            <checkbox ng-model="vm.hideNotifications" name="hide-notifications">Hide notifications</checkbox>\n                        </div>\n                    </div>\n                </li>\n            </ul>\n        </li>\n        <li class="dropdown">\n            <a class="dropdown-toggle">\n                <i class="hpe-icon hpe-actions"></i>\n            </a>\n        </li>\n    </ul>\n</div>\n\n<p>Use the button below to trigger a notification. This will update the notifications shown in the dropdown.</p>\n\n<button type="button" class="btn button-primary m-t-sm" ng-click="vm.showNextNotification()">Show Notification</button>\n'},2498:function(n,t){n.exports="angular.module('app').controller('NotificationDropdownDemoModalCtrl', NotificationDropdownDemoModalCtrl);\n\nNotificationDropdownDemoModalCtrl.$inject = ['$q', '$scope', 'safeTimeout', 'timeAgoService']\n\nfunction NotificationDropdownDemoModalCtrl($q, $scope, safeTimeout, timeAgoService) {\n    var vm = this;\n\n    //create safe timeout instance\n    var safeTimeoutInstance = safeTimeout.create($scope);\n\n    vm.itemTemplateUrl = 'notification.html';\n\n    vm.getPage = function (pageNumber, pageSize) {\n        //return promise to simulate loading from a server\n        var defer = $q.defer();\n\n        safeTimeoutInstance.timeout(function () {\n\n            //generate some fake notifications here\n            var notifications = [];\n\n            //show a maximimum of 10 pages\n            if (pageNumber >= 10) {\n                defer.resolve([]);\n                return;\n            }\n\n            for (var i = 0; i < pageSize; i++) {\n                notifications.push(generateNotification(pageNumber, i));\n            }\n\n            defer.resolve(notifications);\n        }, 500);\n\n        return defer.promise;\n    };\n\n    function generateNotification(pageNumber, index) {\n\n        var type = Math.floor(Math.random() * 5);\n\n        var icon, text;\n\n        switch (type) {\n            case 0:\n                icon = 'hpe-user';\n                text = 'Add new custodians (' + (Math.floor(Math.random() * 25) + 1) + ') submitted';\n                break;\n            case 1:\n                icon = 'hpe-alert';\n                text = 'Export ' + chance.name() + ' completed with ' + (Math.floor(Math.random() * 5) + 1) + ' errors';\n                break;\n            case 2:\n                icon = 'hpe-archive';\n                text = 'Export ' + chance.name() + ' submitted';\n                break;\n            case 3:\n                icon = 'hpe-checkmark';\n                text = 'Add new custodians (' + (Math.floor(Math.random() * 25) + 1) + ') completed';\n                break;\n            case 4:\n                icon = 'hpe-checkmark';\n                text = 'Export ' + chance.name() + ' completed';\n                break;\n        }\n\n        //units that represent time periods in milliseconds\n        var timeUnits = {\n            second: 1000,\n            minute: 60000,\n            hour: 3600000,\n            day: 86400000,\n            week: 604800000,\n            month: 2419200000,\n            year: 31536000000\n        };\n\n        //get the current time in milliseconds\n        var now = new Date().getTime();\n        var pastTime, idx = index + 1;\n\n        //emulate a point in time in the past based on the pageNumber and index\n        if (pageNumber === 0) pastTime = new Date(now - (timeUnits.second * idx));\n        else if (pageNumber === 1) pastTime = new Date(now - (timeUnits.minute * idx));\n        else if (pageNumber === 2) pastTime = new Date(now - (timeUnits.hour * idx));\n        else if (pageNumber === 3) pastTime = new Date(now - (timeUnits.day * Math.ceil(idx / 3)));\n        else if (pageNumber === 4) pastTime = new Date(now - (timeUnits.week * Math.ceil(idx / 5)));\n        else if (pageNumber === 5) pastTime = new Date(now - (timeUnits.month * Math.ceil(idx / 1.7)));\n        else pastTime = new Date(now - timeUnits.year);\n\n        //generate string based on how long ago it was\n        var date = timeAgoService.timeSinceNow(pastTime);\n\n        return {\n            icon: icon,\n            text: text,\n            date: date\n        };\n    }\n}"},2499:function(n,t){n.exports=".notification-modal {\n    width: 340px;\n}\n\n.notification-scroll-container {\n    height: 100%;\n}\n\n.inset-scroll {\n  overflow: auto;\n  height: 100%; \n}\n\n.notification-header, \n.notification-icon-header {\n  position: relative;\n  width: 100%;\n  height: 57px;\n  box-shadow: 0px 5px 5px -2px #c3c3c3;\n  padding: 16px 0 10px 20px;\n  font-size: 15px;\n  color: #fff;\n}\n\n.notification-header {\n  margin-bottom: 15px;\n  background-color: #333;\n}\n\n.notification-icon-header {\n  margin-top: -15px;\n  background-color: #2a2a2a;\n}\n\n.notification-header .breadcrumb {\n  display: inline-block;\n  font-size: 15px;\n  margin-top: 2px;\n}\n\n.notification-header .breadcrumb > li:after {\n  content: none;\n}\n\n.notification-header .breadcrumb > li i {\n  transform: rotate(90deg);\n  font-size: 11px;\n  vertical-align: middle;\n  padding: 9px 5px 5px 3px;\n  display: inline-block;\n  opacity: 0.8;\n}\n.notification-header .breadcrumb > li i.hpe-more {\n  transform: none;\n}\n\n.notification-header .nav-buttons, .notification-icon-header .nav-buttons {\n  position: absolute;\n  top: 8px;\n  right: 5px;\n  list-style-type: none;\n  bottom: 8px;\n  margin: 0;\n  padding: 0;\n}\n\n.notification-header .nav-buttons .dropdown, .notification-icon-header .nav-buttons .dropdown {\n  position: relative;\n  display: inline-block;\n  width: 40px;\n  color: #333;\n  cursor: pointer;\n}\n\n.notification-header .nav-buttons .dropdown:hover,\n.notification-header .nav-buttons .dropdown.open,\n.notification-icon-header .nav-buttons .dropdown:hover,\n.notification-icon-header .nav-buttons .dropdown.open {\n  background-color: #4d4d4d;\n}\n\n.notification-header .nav-buttons .dropdown .dropdown-toggle,\n.notification-icon-header .nav-buttons .dropdown .dropdown-toggle {\n  display: inline-block;\n  padding: 10px;\n  color: #fff;\n}\n\n.notification-header .nav-buttons .dropdown .dropdown-menu,\n.notification-icon-header .nav-buttons .dropdown .dropdown-menu {\n  width: 310px;\n  color: #666;\n  right: 0;\n  left: auto;\n}\n\n.notification-header .heading {\n  display: inline-block;\n  font-size: 15px;\n}\n\n/*\n  Notification Dropdown Example\n*/\n\n.dropdown-notification {\n  display: table !important;\n  width: 100%;\n  min-height: 40px;\n  font-size: 16px;\n  padding: 10px !important;\n  margin: 0 !important;\n  border-bottom: 1px solid #e5e5e5;\n  border-bottom-left-radius: 0 !important;\n  border-bottom-right-radius: 0 !important;\n}\n\n.dropdown-notification .notification-icon {\n  display: table-cell;\n  width: 30px;\n  padding-right: 10px;\n  text-align: center;\n  vertical-align: middle;\n  font-size: 22px;\n  color: #888;\n}\n\n.dropdown-notification .notification-text {\n  display: table-cell;\n  vertical-align: middle;\n  color: #888;\n  font-size: 17px;\n}\n\n.dropdown-notification .notification-text span,\n.dropdown-notification .notification-time span {\n  white-space: normal;\n}\n\n.dropdown-notification  .notification-time {\n  display: table-cell;\n  width: 90px;\n  text-align: right;\n  vertical-align: middle;\n}\n\n.no-notifications-dropdown {\n  height: 47px;\n  margin: 0;\n  text-align: center;\n  line-height: 47px;\n  color: #888;\n  border-bottom: 1px solid #e5e5e5;\n}\n\n.dropdown-notification-options {\n  height: 40px;\n  font-size: 17px;\n  padding: 6px 10px 10px;\n  cursor: default;\n}\n\n.dropdown-notification-options .hyperlink {\n  padding: 0 !important;\n}\n\n.dropdown-notification-options .hide-notifications {\n  display: inline-block;\n  float: right;\n  font-size: 14px;\n  color: #888888;\n}\n\n.dropdown-notification-options .hide-notifications span {\n  display: inline-block;\n  padding-top: 0px;\n  height: 23px;\n  line-height: 23px;\n  vertical-align: bottom;\n}"},2500:function(n,t){n.exports='angular.module(\'app\').controller(\'NotificationListDemoCtrl\', NotificationListDemoCtrl);\n\nfunction NotificationListDemoCtrl() {\n    var vm = this;\n\n    vm.notificationModalOptions = {\n        title: "Alerts",\n        main: "modalLayout.html",\n        modalColumns: "notification-modal",\n        affixHeader: true\n    };\n}\n\n'},2501:function(n,t){n.exports='<button type="button" class="btn button-secondary" side-modal-window="vm.notificationModalOptions">Show Notification History</button>\n'},2502:function(n,t){n.exports="angular.module('app').controller('NotificationListDemoModalCtrl', NotificationListDemoModalCtrl);\n\nNotificationListDemoModalCtrl.$inject = ['$q', '$scope', 'safeTimeout', 'timeAgoService']\n\nfunction NotificationListDemoModalCtrl($q, $scope, safeTimeout, timeAgoService) {\n    var vm = this;\n\n    //create safe timeout instance\n    var safeTimeoutInstance = safeTimeout.create($scope);\n\n    vm.itemTemplateUrl = 'notification.html';\n\n    vm.getPage = function (pageNumber, pageSize) {\n        //return promise to simulate loading from a server\n        var defer = $q.defer();\n\n        safeTimeoutInstance.timeout(function () {\n\n            //generate some fake notifications here\n            var notifications = [];\n\n            //show a maximimum of 10 pages\n            if (pageNumber >= 10) {\n                defer.resolve([]);\n                return;\n            }\n\n            for (var i = 0; i < pageSize; i++) {\n                notifications.push(generateNotification(pageNumber, i));\n            }\n\n            defer.resolve(notifications);\n        }, 500);\n\n        return defer.promise;\n    };\n\n    function generateNotification(pageNumber, index) {\n\n        var type = Math.floor(Math.random() * 5);\n\n        var icon, text;\n\n        switch (type) {\n            case 0:\n                icon = 'hpe-user';\n                text = 'Add new custodians (' + (Math.floor(Math.random() * 25) + 1) + ') submitted';\n                break;\n            case 1:\n                icon = 'hpe-alert';\n                text = 'Export ' + chance.name() + ' completed with ' + (Math.floor(Math.random() * 5) + 1) + ' errors';\n                break;\n            case 2:\n                icon = 'hpe-archive';\n                text = 'Export ' + chance.name() + ' submitted';\n                break;\n            case 3:\n                icon = 'hpe-checkmark';\n                text = 'Add new custodians (' + (Math.floor(Math.random() * 25) + 1) + ') completed';\n                break;\n            case 4:\n                icon = 'hpe-checkmark';\n                text = 'Export ' + chance.name() + ' completed';\n                break;\n        }\n\n        //units that represent time periods in milliseconds\n        var timeUnits = {\n            second: 1000,\n            minute: 60000,\n            hour: 3600000,\n            day: 86400000,\n            week: 604800000,\n            month: 2419200000,\n            year: 31536000000\n        };\n\n        //get the current time in milliseconds\n        var now = new Date().getTime();\n        var pastTime, idx = index + 1;\n\n        //emulate a point in time in the past based on the pageNumber and index\n        if (pageNumber === 0) pastTime = new Date(now - (timeUnits.second * idx));\n        else if (pageNumber === 1) pastTime = new Date(now - (timeUnits.minute * idx));\n        else if (pageNumber === 2) pastTime = new Date(now - (timeUnits.hour * idx));\n        else if (pageNumber === 3) pastTime = new Date(now - (timeUnits.day * Math.ceil(idx / 3)));\n        else if (pageNumber === 4) pastTime = new Date(now - (timeUnits.week * Math.ceil(idx / 5)));\n        else if (pageNumber === 5) pastTime = new Date(now - (timeUnits.month * Math.ceil(idx / 1.7)));\n        else pastTime = new Date(now - timeUnits.year);\n\n        //generate string based on how long ago it was\n        var date = timeAgoService.timeSinceNow(pastTime);\n\n        return {\n            icon: icon,\n            text: text,\n            date: date\n        };\n    }\n}"},2503:function(n,t){n.exports='vm.notificationModalOptions = {\n    title: "Alerts",\n    main: "notificationHistory.html",\n    modalColumns: "notification-modal",\n    affixHeader: true\n};'},2504:function(n,t){n.exports=".notification-modal {\n  width: 340px;\n}\n\n.notification-scroll-container {\n  height: 100%;\n}\n\n.notification-panel {\n  display: table;\n  border-top: 1px solid #E5E5E5;\n  padding: 6px 0;\n}\n\n.notification-panel .notification-panel-icon {\n  display: table-cell;\n  width: 20px;\n  padding-right: 15px;\n  text-align: center;\n  vertical-align: middle;\n  font-size: 22px;\n  color: #888;\n}\n\n.notification-panel .notification-panel-text {\n  display: table-cell;\n}\n\n.notification-panel .notification-panel-text .notification-text {\n  margin: 0;\n  color: #666666;\n  font-size: 16px;\n  line-height: 1.2em;\n}\n\n.notification-panel .notification-panel-timestamp {\n  display: table-cell;\n  width: 110px;\n  text-align: right;\n  vertical-align: middle;\n}\n\n.notification-panel .notification-panel-timestamp .notification-timestamp {\n  margin: 0;\n  color: #999;\n  font-size: 14px;\n  padding-right: 5px;\n}\n\n.inset-scroll {\n  overflow: auto;\n  height: 100%;\n}"},2505:function(n,t){n.exports="angular.module(\"elements\").controller(\"NotificationCtrl\", NotificationCtrl);\n\nNotificationCtrl.$inject = ['notificationService', '$colorService'];\n\nfunction NotificationCtrl(notificationService, $colorService) {\n    var vm = this;\n\n    vm.showNotification = function () {\n\n        var options = {\n            icon: 'hpe-chat',\n            title: 'Messages Received',\n            text: 'You have 16 messages',\n            subtitle: new Date().toLocaleDateString() + ' ' + new Date().toLocaleTimeString(),\n            duration: 4000,\n            backgroundColor: $colorService.getColor('primary').toHex()\n        };\n\n        notificationService.showNotification(options);\n    };\n\n    vm.dismissAll = function () {\n        notificationService.dismissAllNotifications();\n    };\n}"},2506:function(n,t){n.exports="angular.module('app').controller('NotificationsDemoCtrl', NotificationsDemoCtrl);\n\nNotificationsDemoCtrl.$inject = ['$colorService', 'notificationService'];\n\nfunction NotificationsDemoCtrl($colorService, notificationService) {\n    var vm = this;\n\n    vm.notificationColors = {\n        primary: $colorService.getColor('primary').toHex(),\n        accent: $colorService.getColor('accent').toHex(),\n        chart4: $colorService.getColor('chart4').toHex(),\n        chart5: $colorService.getColor('chart5').toHex(),\n        ok: $colorService.getColor('ok').toHex(),\n        warning: $colorService.getColor('warning').toHex(),\n        critical: $colorService.getColor('critical').toHex()\n    };\n\n    vm.setColor = function (color) {\n        vm.backgroundColor = vm.notificationColors[color];\n    };\n\n    vm.showNotification = function () {\n\n        var options = {\n            icon: vm.icon,\n            title: vm.title,\n            text: vm.text,\n            subtitle: vm.subtitle,\n            duration: vm.duration,\n            backgroundColor: vm.backgroundColor\n        };\n\n        //ensure notifications are visible - next example allows hiding them\n        if (vm.hideNotifications === true) {\n            vm.hideNotifications = false;\n            notificationService.setNotificationVisibility(true);\n        }\n\n        notificationService.showNotification(options);\n    };\n\n    vm.dismissAll = function () {\n        notificationService.dismissAllNotifications();\n    };\n\n    vm.setDefaultValues = function () {\n        vm.icon = 'hpe-chat';\n        vm.title = 'Messages Received';\n        vm.text = 'You have 16 messages';\n        vm.subtitle = new Date().toLocaleDateString() + ' ' + new Date().toLocaleTimeString();\n        vm.duration = 4000;\n        vm.backgroundColor = vm.notificationColors.primary;\n    };\n\n    //set initial default values\n    vm.setDefaultValues();\n}\n\n"},2507:function(n,t){n.exports='<button type="button" class="btn button-primary" ng-click="vm.showNotification()">Show Notification</button>\n<button type="button" class="btn button-secondary" ng-click="vm.dismissAll()">Dismiss Notifications</button>'},2508:function(n,t){n.exports='<button type="button" class="btn button-primary m-r-sm" ng-click="vm.showNotification()">Show Notification</button>\n<button type="button" class="btn button-secondary m-r-sm" ng-click="vm.dismissAll()">Dismiss Notifications</button>\n<button type="button" class="btn button-secondary" ng-click="vm.setDefaultValues()">Default Values</button>\n<hr />\n<h4 class="p-b-sm">Customize the Notification</h4>\n<div class="row">\n    <div class="col-md-6">\n        <div class="form-group">\n            <label class="form-label">Notification Title</label>\n            <input type="text" placeholder="Enter title" class="form-control" ng-model="vm.title">\n        </div>\n        <div class="form-group">\n            <label class="form-label">Notification Text</label>\n            <input type="text" placeholder="Enter text" class="form-control" ng-model="vm.text">\n        </div>\n        <div class="form-group">\n            <label class="form-label">Notification Subtitle</label>\n            <input type="text" placeholder="Enter subtitle" class="form-control" ng-model="vm.subtitle">\n        </div>\n    </div>\n\n    <div class="col-md-6">\n        <div class="form-group">\n            <label class="form-label">Icon</label>\n            <input type="text" placeholder="Enter icon (eg. hpe-chat)" class="form-control" ng-model="vm.icon">\n        </div>\n        <div class="form-group">\n            <label class="form-label">Duration (in milliseconds)</label>\n            <input type="number" placeholder="Enter duration (milliseconds)" class="form-control" ng-model="vm.duration">\n        </div>\n        <div class="form-group">\n            <label class="form-label">Background Color</label>\n            <div class="input-group m-b-sm">\n                <input type="text" placeholder="Enter color" class="form-control" ng-model="vm.backgroundColor" text-string-color>\n                <span class="input-group-addon color-display" ng-style="{ \'background-color\': vm.backgroundColor }">&nbsp;</span>\n            </div>\n            <small class="text-muted">Recommended Colors</small>\n            <div class="color-palette">\n                <div class="color-box primary-color" ng-click="vm.setColor(\'primary\')"></div>\n                <div class="color-box accent-color" ng-click="vm.setColor(\'accent\')"></div>\n                <div class="color-box chart4-color" ng-click="vm.setColor(\'chart4\')"></div>\n                <div class="color-box chart5-color" ng-click="vm.setColor(\'chart5\')"></div>\n                <div class="color-box ok-color" ng-click="vm.setColor(\'ok\')"></div>\n                <div class="color-box warning-color" ng-click="vm.setColor(\'warning\')"></div>\n                <div class="color-box critical-color" ng-click="vm.setColor(\'critical\')"></div>\n            </div>\n        </div>\n    </div>\n</div>'},2509:function(n,t){n.exports=".color-palette {\n  padding-top: 5px;\n}\n\n.color-palette .color-box {\n  display: inline-block;\n  width: 25px;\n  height: 25px;\n  margin: 0 3px;\n  border: 2px solid rgba(0, 0, 0, 0.3);\n  cursor: pointer;\n}\n\n.color-display {\n  border: 2px solid rgba(0, 0, 0, 0.3) !important;\n  transition: background-color 0.3s linear;\n}"},2864:function(n,t){n.exports=".notification-modal {\n  width: 340px;\n}\n.notification-scroll-container {\n  height: 100%;\n}\n.notification-panel {\n  display: table;\n  border-top: 1px solid #E5E5E5;\n  padding: 6px 0;\n}\n.notification-panel .notification-panel-icon {\n  display: table-cell;\n  width: 20px;\n  padding-right: 15px;\n  text-align: center;\n  vertical-align: middle;\n  font-size: 22px;\n  color: #888;\n}\n.notification-panel .notification-panel-text {\n  display: table-cell;\n}\n.notification-panel .notification-panel-text .notification-text {\n  margin: 0;\n  color: #666666;\n  font-size: 16px;\n  line-height: 1.2em;\n}\n.notification-panel .notification-panel-timestamp {\n  display: table-cell;\n  width: 110px;\n  text-align: right;\n  vertical-align: middle;\n}\n.notification-panel .notification-panel-timestamp .notification-timestamp {\n  margin: 0;\n  color: #999;\n  font-size: 14px;\n  padding-right: 5px;\n}\n.inset-scroll {\n  overflow: auto;\n  height: 100%;\n}\n"},2865:function(n,t){n.exports=".color-palette {\n  padding-top: 5px;\n}\n.color-palette .color-box {\n  display: inline-block;\n  width: 25px;\n  height: 25px;\n  margin: 0 3px;\n  border: 2px solid rgba(0, 0, 0, 0.3);\n  cursor: pointer;\n}\n.color-display {\n  border: 2px solid rgba(0, 0, 0, 0.3) !important;\n  transition: background-color 0.3s linear;\n}\n"}});