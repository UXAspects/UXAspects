webpackJsonp([26],{1517:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t,n,o,s){this.snippets={compiled:{},raw:{}},this.loadSnippetsFromRequireContext(this.snippets.raw,s),this.snippets.compiled=this.snippets.raw}return e.prototype.loadSnippetsFromRequireContext=function(e,t){t&&t.keys().forEach(function(n){var o=n.replace("./","").replace(/\W+(\w)/g,function(e){return e[1].toUpperCase()});e[o]=t(n)})},e}();t.BaseDocumentationSection=o},1662:function(e,t){e.exports='<div class="hotkey-demo-box aspects-focus-outline" tabindex="0" [focusIf]="qFocused === 0">\n    <div class="hotkey-demo-hint">\n        <div class="hotkey-group-hint">q</div>\n    </div>\n    <div class="hotkey-demo-button-layout">\n        <button class="btn button button-secondary" (keydown.space)="qText = \'Active\'" (keydown.enter)="qText = \'Active\'" (click)="qText = \'Active\'" [focusIf]="qFocused === 1">\n            <i class="hpe-icon hpe-active"></i>\n        </button>\n        <button class="btn button button-secondary" (keydown.space)="qText = \'Inactive\'" (keydown.enter)="qText = \'Inactive\'" (click)="qText = \'Inactive\'" [focusIf]="qFocused === 2">\n            <i class="hpe-icon hpe-inactive"></i>\n        </button>\n        <button class="btn button button-secondary" (keydown.space)="qText = \'Lock\'" (keydown.enter)="qText = \'Lock\'" (click)="qText = \'Lock\'" [focusIf]="qFocused === 3">\n            <i class="hpe-icon hpe-lock"></i>\n        </button>\n    </div>\n    <p class="hotkey-demo-text">Selected: <span>{{ qText }}</span></p>\n</div>\n\n<div class="hotkey-demo-box aspects-focus-outline m-l-lg" tabindex="0" [focusIf]="wFocused === 0">\n    <div class="hotkey-demo-hint">\n        <div class="hotkey-group-hint">w</div>\n    </div>\n    <div class="hotkey-demo-button-layout">\n        <button class="btn button button-secondary" (focus)="wText = \'Decelerate\'" [focusIf]="wFocused === 1">\n            <i class="hpe-icon hpe-rewind"></i>\n        </button>\n        <button class="btn button button-secondary" (focus)="wText = \'Drive\'" [focusIf]="wFocused === 2">\n            <i class="hpe-icon hpe-play"></i>\n        </button>\n        <button class="btn button button-secondary" (focus)="wText = \'Accelerate\'" [focusIf]="wFocused === 3">\n            <i class="hpe-icon hpe-fast-forward"></i>\n        </button>\n    </div>\n    <p class="hotkey-demo-text">Selected: <span>{{ wText }}</span></p>\n</div>'},1663:function(e,t){e.exports="import { Component, Inject, ElementRef } from '@angular/core';\n\n@Component({\n    selector: 'app',\n    templateUrl: './src/app.component.html',\n    styleUrls: ['./src/app.component.less'],\n    host: {\n        '(window:keydown.q)': 'focusNextQ()',\n        '(window:keydown.w)': 'focusNextW()'\n    }\n})\nexport class AppComponent {\n\n    qText: string = 'None';\n    wText: string = 'None';\n    qFocused: number = null;\n    wFocused: number = null;\n\n    focusNextQ() {\n        this.qFocused = this.qFocused === null || this.qFocused === 3 ? 0 : this.qFocused + 1;\n    }\n\n    focusNextW() {\n        this.wFocused = this.wFocused === null || this.wFocused === 3 ? 0 : this.wFocused + 1;\n    }\n\n}"},1668:function(e,t,n){var o=n(2093);e.exports="string"==typeof o?o:o.toString()},1703:function(e,t,n){function o(e){return n(s(e))}function s(e){var t=i[e];if(!(t+1))throw new Error("Cannot find module '"+e+"'.");return t}var i={"./callback.js":2665,"./controller.js":2666,"./layout.html":2667,"./styles.css":2668};o.keys=function(){return Object.keys(i)},o.resolve=s,e.exports=o,o.id=1703},1704:function(e,t,n){function o(e){return n(s(e))}function s(e){var t=i[e];if(!(t+1))throw new Error("Cannot find module '"+e+"'.");return t}var i={"./app.html":1662,"./app.less":1668,"./app.ts":1663};o.keys=function(){return Object.keys(i)},o.resolve=s,e.exports=o,o.id=1704},1705:function(e,t,n){function o(e){return n(s(e))}function s(e){var t=i[e];if(!(t+1))throw new Error("Cannot find module '"+e+"'.");return t}var i={"./controller.js":2669,"./layout.html":2670};o.keys=function(){return Object.keys(i)},o.resolve=s,e.exports=o,o.id=1705},1875:function(e,t,n){"use strict";var o=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),s=this&&this.__decorate||function(e,t,n,o){var s,i=arguments.length,a=i<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,o);else for(var c=e.length-1;c>=0;c--)(s=e[c])&&(a=(i<3?s(a):i>3?s(t,n,a):s(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var a=n(0),c=n(1517),r=n(285),l=function(e){function t(){var t=e.call(this,null,null,null,null,n(1703))||this;return t.codepen={html:t.snippets.raw.layoutHtml,htmlAttributes:{"ng-controller":"HotkeysDemoCtrl as vm"},css:[t.snippets.raw.stylesCss],js:[t.snippets.raw.controllerJs]},t}return o(t,e),t}(c.BaseDocumentationSection);l=s([a.Component({selector:"uxd-hotkeys-ng1",template:n(2220),styles:[n(3067)],encapsulation:a.ViewEncapsulation.None,changeDetection:a.ChangeDetectionStrategy.OnPush}),r.DocumentationSectionComponent("ComponentsHotkeysNg1Component"),i("design:paramtypes",[])],l),t.ComponentsHotkeysNg1Component=l},1876:function(e,t,n){"use strict";var o=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),s=this&&this.__decorate||function(e,t,n,o){var s,i=arguments.length,a=i<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,o);else for(var c=e.length-1;c>=0;c--)(s=e[c])&&(a=(i<3?s(a):i>3?s(t,n,a):s(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var a=n(0),c=n(285),r=n(1517),l=function(e){function t(){var t=e.call(this,null,null,null,null,n(1704))||this;return t.qText="None",t.wText="None",t.qFocused=null,t.wFocused=null,t.plunk={files:{"app.component.ts":n(1663),"app.component.html":n(1662),"app.component.less":n(1668)},modules:[{imports:["FocusIfModule"],library:"ux-aspects"}]},t}return o(t,e),t.prototype.focusNextQ=function(){this.qFocused=null===this.qFocused||3===this.qFocused?0:this.qFocused+1},t.prototype.focusNextW=function(){this.wFocused=null===this.wFocused||3===this.wFocused?0:this.wFocused+1},t}(r.BaseDocumentationSection);l=s([a.Component({selector:"uxd-components-hotkeys",template:n(2221),styles:[n(3068)],host:{"(window:keydown.q)":"focusNextQ()","(window:keydown.w)":"focusNextW()"}}),c.DocumentationSectionComponent("ComponentsHotkeysComponent"),i("design:paramtypes",[])],l),t.ComponentsHotkeysComponent=l},1877:function(e,t,n){"use strict";var o=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),s=this&&this.__decorate||function(e,t,n,o){var s,i=arguments.length,a=i<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,o);else for(var c=e.length-1;c>=0;c--)(s=e[c])&&(a=(i<3?s(a):i>3?s(t,n,a):s(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var a=n(0),c=n(1517),r=n(285),l=function(e){function t(){var t=e.call(this,null,null,null,null,n(1705))||this;return t.codepen={html:t.snippets.raw.layoutHtml,htmlAttributes:{"ng-controller":"KeyboardServiceDemoCtrl as vm"},js:[t.snippets.raw.controllerJs]},t}return o(t,e),t}(c.BaseDocumentationSection);l=s([a.Component({selector:"uxd-keyboard-service-ng1",template:n(2222),changeDetection:a.ChangeDetectionStrategy.OnPush}),r.DocumentationSectionComponent("ComponentsKeyboardServiceNg1Component"),i("design:paramtypes",[])],l),t.ComponentsKeyboardServiceNg1Component=l},1878:function(e,t,n){"use strict";var o=this&&this.__decorate||function(e,t,n,o){var s,i=arguments.length,a=i<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,o);else for(var c=e.length-1;c>=0;c--)(s=e[c])&&(a=(i<3?s(a):i>3?s(t,n,a):s(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a},s=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var i=n(291),a=n(0),c=n(19),r=n(286),l=n(150),d=n(287),u=n(1875),p=n(1877),h=n(288),y=n(289),m=n(1876),f=[m.ComponentsHotkeysComponent,u.ComponentsHotkeysNg1Component,p.ComponentsKeyboardServiceNg1Component],b=[{path:"**",component:d.DocumentationCategoryComponent,data:{category:l.ResolverService.resolveCategoryData(l.DocumentationPage.Components,"Keyboard")}}],v=function(){function e(e,t){t.registerResolver(e)}return e}();v=o([a.NgModule({imports:[y.WrappersModule,h.TabsModule,i.FocusIfModule,r.DocumentationComponentsModule,c.RouterModule.forChild(b)],exports:f,declarations:f,entryComponents:f}),s("design:paramtypes",[a.ComponentFactoryResolver,l.ResolverService])],v),t.ComponentsKeyboardModule=v},2091:function(e,t,n){t=e.exports=n(9)(void 0),t.push([e.i,".hotkey-demo-only {\n  width: 210px;\n  height: 80px;\n  border: 2px solid #f1f1f1;\n  border-radius: 3px;\n}\n.hotkey-demo-only .hotkey-group-hint {\n  margin-left: -2px;\n  margin-top: -2px;\n}\n.hotkey-demo-only-button-layout {\n  padding-left: 30px;\n  padding-top: 20px;\n}\n",""])},2092:function(e,t,n){t=e.exports=n(9)(void 0),t.push([e.i,".hotkey-demo-box {\n  width: 210px;\n  height: 80px;\n  border: 2px solid #f1f1f1;\n  border-radius: 3px;\n  display: inline-block;\n}\n.hotkey-demo-box .hotkey-demo-button-layout {\n  padding-left: 30px;\n  padding-top: 20px;\n}\n.hotkey-demo-box .hotkey-demo-text {\n  margin-top: 5px;\n  text-align: center;\n}\n.hotkey-demo-box .hotkey-demo-hint {\n  position: relative;\n  width: 0;\n  height: 0;\n}\n.hotkey-demo-box .hotkey-demo-hint .hotkey-group-hint {\n  margin-left: -2px;\n  margin-top: -2px;\n}\n",""])},2093:function(e,t,n){t=e.exports=n(9)(void 0),t.push([e.i,".hotkey-demo-box {\n  width: 210px;\n  height: 80px;\n  border: 2px solid #f1f1f1;\n  border-radius: 3px;\n  display: inline-block;\n}\n.hotkey-demo-box .hotkey-demo-button-layout {\n  padding-left: 30px;\n  padding-top: 20px;\n}\n.hotkey-demo-box .hotkey-demo-text {\n  margin-top: 5px;\n  text-align: center;\n}\n.hotkey-demo-box .hotkey-demo-hint {\n  position: relative;\n  width: 0;\n  height: 0;\n}\n.hotkey-demo-box .hotkey-demo-hint .hotkey-group-hint {\n  margin-left: -2px;\n  margin-top: -2px;\n}\n",""])},2220:function(e,t){e.exports='<uxd-hotkeys-wrapper></uxd-hotkeys-wrapper>\n\n<hr>\n\n<p>Hotkeys in UX Aspects can be configured in a number of ways. The above example shows two default behaviours - on the left,\n  the hotkey tabs between each item in the group, including the group itself. In this case the user can ‘press’ the button\n  using the spacebar or associated default keybinding for the control - this will be unchanged.</p>\n\n<p>In the example on the right, the hotkey tabs between each item in the group and also immediately invokes the behaviour associated\n  with that button.</p>\n\n<p>Both groups display the ‘hotkey hint’ in their upper-left corner. This can be used to inform the user of available keys and\n  is optional.</p>\n\n<p>In order to create a group of hotkeys, use the <code>hotkey</code> directive. This is an attribute directive so should be\n  placed as an attribute on another element. The value set to this attribute should be the key you want to bind your hotkey\n  functionality to. If you are making a group of items, this attribute should be placed on the outermost container. To associate\n  child elements as being part of that hotkey group, give them the <code>hotkey-item</code> attribute.</p>\n\n<p>The container element can take two additional attribute parameters:</p>\n<div class="demo-attributes table-responsive">\n  <table class="table m-t">\n    <tbody>\n      <tr>\n        <th>Name</th>\n        <th>Type</th>\n        <th>Binding</th>\n        <th>Description</th>\n        <th>Optional</th>\n      </tr>\n      <tr>\n        <td class="attribute">hotkey-action</td>\n        <td>function</td>\n        <td>variable</td>\n        <td>A function which will be called every time your hotkey is pressed, in addition to the tabbing/focusing logic. This\n          function is called with the focused element as an argument, so you can configure different behaviour for each child\n          element.\n        </td>\n        <td>true</td>\n      </tr>\n      <tr>\n        <td class="attribute">hotkey-hint</td>\n        <td>boolean</td>\n        <td>literal</td>\n        <td>This attribute will place the hotkey hint graphic in the top-left corner.</td>\n        <td>true</td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n<p>When using the <code>hotkey-hint</code>, the precise styling can be controlled using the\n  <code>hotkey-group-hint</code> class. This class exists in UX Aspects and will show a hotkey hint in the style shown in this\n  page. To customise the appearance of the hotkey hint, you can override this class with your own values. As an example of\n  this - on this page, the default styling has been extended to provide a top and left margin of <code>-2px</code> on the\n  hotkey hint, because the example button panels above use a <code>2px</code> width border and we want them to appear flush.\n  This also allows you to change the appearance of the hotkey hint depending on the component. For example, the demo above\n  is wrapped with a\n  <code>hotkey-demo-only</code> class, so defining a CSS class <code>.hotkey-demo-only .hotkey-group-hint</code> allows us\n  to override the CSS for just this instance.</p>\n\n<h4>Hotkey Action</h4>\n\n<p>This directive will allow your users to focus a set of controls using the keyboard and navigate around them using the same\n  key. Each time that key is pressed, the function you have supplied to the <code>hotkey-action</code> attribute will be\n  invoked. This function will be called with the highlighted element as the argument. This allows your callback to check\n  which item the user currently has selected, and perform logic accordingly. For instance, if you want the hotkey to also\n  trigger the “click” event of that button as if the user had clicked it, your code might look like this:</p>\n\n<uxd-snippet [content]="snippets.compiled.callbackJs" language="javascript"></uxd-snippet>\n\n<h4>Usage Notes</h4>\n\n<p>This example uses some styles which are purely for illustrative purposes; however the ‘focus’ style is important to provide.\n  UX Aspects supplies the <code>aspects-focus-outline</code> class which you may place on your container element; this will apply\n  the same ‘focus’ style as other controls in UX Aspects. If required you may write your own class to change the styling of\n  your element using the <code>:focus</code> CSS pseudo-selector.</p>\n\n<p>In order to allow the elements within your hotkey group to receive keyboard focus, the directive will assign them a\n  <code>tabindex</code> if one is not already present. This is related to expected browser behaviour and is not a requirement\n  of UX Aspects itself.</p>\n\n<p>Hotkeys created by this directive will be bound to the <code>document</code> node; this means they should trigger when the\n  key is pressed anywhere on your page. The exception to this is <code>input</code>,\n  <code>textarea</code>, <code>select</code> and <code>contenteditable</code> elements, which will <em>not</em> invoke hotkeys\n  (so that the user can type). If you wish to disable hotkey triggering on additional elements, add the <code>hotkey-ignore</code>  attribute to that element. Hotkey events will no longer trigger when that event is focused.</p>\n\n<p>Hotkeys created by this directive will be deleted when the element is destroyed. In practical terms this means that users\n  navigating to other pages of your application will not continue to have unwanted hotkey events - however the developer\n  is responsible for ensuring their application is structured as per Angular recommendations so that the <code>$destroy</code>  event for each element <code>$scope</code> is guaranteed to execute: refer to the <a href="https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$destroy">Angular JS $scope documentation</a>  for more details.</p>\n\n<p>See below for information on manually unbinding hotkeys and having hotkeys which exist across an entire application.</p>\n\n<h4>Sample Code</h4>\n\n<p>The sample code for both examples above is presented below. Note that the example-specific styling has been removed for the\n  sake of clarity.</p>\n\n<tabset>\n    <tab heading="HTML">\n        <uxd-snippet [content]="snippets.compiled.layoutHtml" language="html"></uxd-snippet>\n    </tab>\n    <tab heading="TypeScript">\n        <uxd-snippet [content]="snippets.compiled.controllerJs" language="javascript"></uxd-snippet>\n    </tab>\n    <tab heading="CSS">\n        <uxd-snippet [content]="snippets.compiled.appLess" language="css"></uxd-snippet>\n    </tab>\n</tabset>'},2221:function(e,t){e.exports='<div class="hotkey-demo-box aspects-focus-outline" tabindex="0" [focusIf]="qFocused === 0">\n    <div class="hotkey-demo-hint">\n        <div class="hotkey-group-hint">q</div>\n    </div>\n    <div class="hotkey-demo-button-layout">\n        <button class="btn button button-secondary" (keydown.space)="qText = \'Active\'" (keydown.enter)="qText = \'Active\'" (click)="qText = \'Active\'" [focusIf]="qFocused === 1">\n            <i class="hpe-icon hpe-active"></i>\n        </button>\n        <button class="btn button button-secondary" (keydown.space)="qText = \'Inactive\'" (keydown.enter)="qText = \'Inactive\'" (click)="qText = \'Inactive\'" [focusIf]="qFocused === 2">\n            <i class="hpe-icon hpe-inactive"></i>\n        </button>\n        <button class="btn button button-secondary" (keydown.space)="qText = \'Lock\'" (keydown.enter)="qText = \'Lock\'" (click)="qText = \'Lock\'" [focusIf]="qFocused === 3">\n            <i class="hpe-icon hpe-lock"></i>\n        </button>\n    </div>\n    <p class="hotkey-demo-text">Selected: <span>{{ qText }}</span></p>\n</div>\n\n<div class="hotkey-demo-box aspects-focus-outline m-l-lg" tabindex="0" [focusIf]="wFocused === 0">\n    <div class="hotkey-demo-hint">\n        <div class="hotkey-group-hint">w</div>\n    </div>\n    <div class="hotkey-demo-button-layout">\n        <button class="btn button button-secondary" (focus)="wText = \'Decelerate\'" [focusIf]="wFocused === 1">\n            <i class="hpe-icon hpe-rewind"></i>\n        </button>\n        <button class="btn button button-secondary" (focus)="wText = \'Drive\'" [focusIf]="wFocused === 2">\n            <i class="hpe-icon hpe-play"></i>\n        </button>\n        <button class="btn button button-secondary" (focus)="wText = \'Accelerate\'" [focusIf]="wFocused === 3">\n            <i class="hpe-icon hpe-fast-forward"></i>\n        </button>\n    </div>\n    <p class="hotkey-demo-text">Selected: <span>{{ wText }}</span></p>\n</div>\n\n<hr>\n\n<p>Hotkeys can be added to elements by adding <code>window:keydown</code> to the host property of your component.\n    This will trigger the specified function any time a key is pressed on the window offering a wide range of uses. </p>\n\n<p>The above example shows two different example behaviours - on the left, the hotkey tabs between each item in the group, including\n    the group itself. In this case the user can ‘press’ the button using the spacebar or associated default keybinding for\n    the control - this will be unchanged.</p>\n\n<p>In the example on the right, the hotkey tabs between each item in the group and also immediately invokes the behavior associated\n    with that button.</p>\n\n<p>Both groups display the ‘hotkey hint’ in their upper-left corner. This can be used to inform the user of available keys and\n    is optional.</p>\n\n<p>When using the <code>hotkey-hint</code>, the precise styling can be controlled using the <code>hotkey-group-hint</code> class.\n    This class exists in UX Aspects and will show a hotkey hint in the style shown in this page. To customize the appearance\n    of the hotkey hint, you can override this class with your own values. As an example of this - on this page, the default\n    styling has been extended to provide a top and left margin of <code>-2px</code> on the hotkey hint, because the example\n    button panels above use a <code>2px</code> width border and we want them to appear flush. This also allows you to change\n    the appearance of the hotkey hint depending on the component. For example, the demo above is wrapped with a <code>hotkey-demo-hint</code>    class, so defining a CSS class <code>.hotkey-demo-hint\n    .hotkey-group-hint</code> allows us to override the CSS for just this instance.</p>\n\n<h4>Usage Notes</h4>\n\n<p>This example uses some styles which are purely for illustrative purposes; however the ‘focus’ style is important to provide.\n    UX Aspects supplies the <code>aspects-focus-outline</code> class which you may place on your container element; this\n    will apply the same ‘focus’ style as other controls in UX Aspects. If required you may write your own class to change\n    the styling of your element using the <code>:focus</code> CSS pseudo-selector.</p>\n\n<p>The above example was was produced using the following code:</p>\n\n<tabset>\n    <tab heading="HTML">\n        <uxd-snippet [content]="snippets.compiled.appHtml" language="html"></uxd-snippet>\n    </tab>\n    <tab heading="TypeScript">\n        <uxd-snippet [content]="snippets.compiled.appTs" language="javascript"></uxd-snippet>\n    </tab>\n</tabset>\n\n<blockquote>\n  <p><strong>Note</strong>: Refer to the <a routerLink="/components/utilities" fragment="focus-if">Focus If</a> page for details on how to use the <code>focusIf</code> directive.</p>\n</blockquote>\n'},2222:function(e,t){e.exports='<p>The Keyboard Service, <code>keyboardService</code>, allows you to bind a key event to any element in your application. For\n  example, it can be used to enable navigation on a list of items using selected keys from the keyboard (such as the\n  <a routerLink="/components/panels" fragment="item-display-panel-ng1">Item Display Panel</a>). The <a routerLink="/components/keyboard"\n    fragment="hotkeys-ng1">Hotkey</a> directive also uses this service.</p>\n\n<p>Hotkeys bound to individual elements will be life-cycle bound to that element. If you wish to have a hotkey which works across\n  your entire application, you can directly use the <code>keyboardService</code>. Note that “target” here refers to the element\n  against which the key event is registered by the browser. The full API for this service is as follows:</p>\n\n<div class="demo-attributes table-responsive">\n  <table class="table">\n    <tbody>\n      <tr>\n        <th>Name</th>\n        <th>Description</th>\n      </tr>\n      <tr>\n        <td class="attribute">keydown</td>\n        <td>\n          Arguments:\n          <ul>\n            <li><code>element</code> - (DOM element), specifies the element you wish to attach the keydown event listener to.</li>\n            <li><code>keyCode</code> - (integer), specifies the key the event listener will listen for.</li>\n            <li><code>callback</code> - (function), specifies the function which will be executed when the correct key is pressed.\n              Takes the <code>event</code> as a parameter.</li>\n            <li><code>priority</code> - (integer: optional), specifies the priority of the attached event. If multiple events\n              are attached to a single element, then the highest priority event callback will be executed first (default:\n              <code>1</code>).</li>\n            <li><code>stopPropagation</code> - (boolean: optional), specifies whether or not to stop event propagation when the\n              key is pressed (default: <code>false</code>).</li>\n          </ul>\n          <p>This function allows the user to attach a keydown event listener to an element. The user can then supply a callback\n            they wish to be executed when the correct key is pressed.</p>\n        </td>\n      </tr>\n      <tr>\n        <td class="attribute">getCharCode</td>\n        <td>\n          Arguments:\n          <ul>\n            <li><code>character</code> - string</li>\n          </ul>\n          <p>Returns the integer keycode for a single character on the keyboard - also accepts the following special strings\n            for non-printing characters: <em>backspace, tab, clear, enter, return, escape, space, left, right, up, down, delete, home, end, pageup, pagedown</em>.</p>\n        </td>\n      </tr>\n      <tr>\n        <td class="attribute">bindKey</td>\n        <td>\n          Arguments:\n          <ul>\n            <li><code>key</code> - integer or keycode object (see below)</li>\n            <li><code>callback</code> - function</li>\n            <li><code>element</code> - DOMElement, optional</li>\n            <li><code>target</code> - DOMElement, optional</li>\n          </ul>\n          <p>The function <code>callback</code> will be invoked with no arguments when the key defined by <code>key</code> is\n            pressed, when the element <code>target</code> has focus. If no target is provided, the hotkey will bind to the\n            <code>document</code>. If an <code>element</code> is provided, the hotkey binding will be removed when that element\n            is <code>$destroyed</code>.</p>\n        </td>\n      </tr>\n      <tr>\n        <td class="attribute">unbindKey</td>\n        <td>\n          Arguments:\n          <ul>\n            <li><code>key</code> - integer or keycode object (see below)</li>\n            <li><code>target</code> - DOMElement, optional</li>\n          </ul>\n          <p>Removes a previously bound <code>key</code> hotkey from a <code>target</code>. If no target is provided, the binding\n            will be removed from the <code>document</code>.</p>\n        </td>\n      </tr>\n      <tr>\n        <td class="attribute">createHotkeyHint</td>\n        <td>\n          Arguments:\n          <ul>\n            <li><code>element</code> - DOMElement</li>\n            <li><code>text</code> - string</li>\n          </ul>\n          <p>Creates a small hotkey hint graphic in the style of those seen in the above examples. The supplied <code>text</code> will be used, and will be added to the top-left of the <code>element</code>.</p>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n\n<p>As noted above, the <code>key</code> parameter may be either an integer or an object. As an integer it specifies a keycode\n  and will bind to a key press without any modifiers. Using an object as described below, a hotkey event may be bound with\n  one or more modifiers.</p>\n\n<div class="demo-attributes table-responsive">\n  <table class="table m-t">\n    <tbody>\n      <tr>\n        <th>Name</th>\n        <th>Type</th>\n        <th>Description</th>\n        <th>Optional</th>\n      </tr>\n      <tr>\n        <td class="attribute">code</td>\n        <td>numeric</td>\n        <td>The keycode to bind the event to. The <code>getCharCode</code> API function may be used to convert many characters\n          into keycodes.</td>\n        <td>false</td>\n      </tr>\n      <tr>\n        <td class="attribute">shiftKey</td>\n        <td>boolean</td>\n        <td>Specifies whether the shift key must be pressed in combination with the hotkey. Default is false.</td>\n        <td>true</td>\n      </tr>\n      <tr>\n        <td class="attribute">ctrlKey</td>\n        <td>boolean</td>\n        <td>Specifies whether the control key must be pressed in combination with the hotkey. Default is false.</td>\n        <td>true</td>\n      </tr>\n      <tr>\n        <td class="attribute">altKey</td>\n        <td>boolean</td>\n        <td>Specifies whether the alt key must be pressed in combination with the hotkey. Default is false.</td>\n        <td>true</td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n\n<h4>Using the Service</h4>\n\n<p>To use this service, inject it as you would any other dependency using its full name, <code>keyboardService</code>. You can\n  then call its methods as shown below:</p>\n\n<uxd-snippet [content]="snippets.compiled.controllerJs" language="javascript"></uxd-snippet>\n\n<h4>Demonstration</h4>\n\n<p>Set up a keybind using the fields below, and press it to test.</p>\n\n<uxd-keyboard-service-wrapper></uxd-keyboard-service-wrapper>'},2665:function(e,t){e.exports='vm.callback = function (elem) {\n    elem.trigger("click");\n};'},2666:function(e,t){e.exports="angular.module('app').controller('HotkeysDemoCtrl', HotkeysDemoCtrl);\n\nHotkeysDemoCtrl.$inject = ['$scope', 'keyboardService'];\n\nfunction HotkeysDemoCtrl($scope, keyboardService) {\n    var vm = this;\n\n    vm.selected = 'None';\n    vm.otherSelected = 'None';\n\n    vm.callback1 = function () {\n    };\n    vm.callback2 = function (elem) {\n        elem.trigger('click');\n    };\n\n    vm.button1 = function () {\n        vm.selected = 'Active';\n    };\n    vm.button2 = function () {\n        vm.selected = 'Inactive';\n    };\n    vm.button3 = function () {\n        vm.selected = 'Lock';\n    };\n    vm.buttonA = function () {\n        vm.otherSelected = 'Decelerate';\n    };\n    vm.buttonB = function () {\n        vm.otherSelected = 'Drive';\n    };\n    vm.buttonC = function () {\n        vm.otherSelected = 'Accelerate';\n    };\n\n    vm.testKeyInput = '';\n    vm.testKey = {};\n    vm.testKeyBound = false;\n    vm.testMessage = '';\n\n    vm.toggleBind = function () {\n        if (vm.testKeyBound) {\n            keyboardService.unbindKey(vm.testKey);\n            vm.testKeyBound = false;\n        }\n        else {\n            var code = keyboardService.getCharCode(vm.testKeyInput);\n            if (code === 0) { return; }\n\n            vm.testKey.code = code;\n            keyboardService.bindKey(vm.testKey, function () {\n                $scope.$apply(function () {\n                    vm.testMessage = 'Hotkey was pressed at ' + new Date().toLocaleTimeString();\n                });\n            });\n            vm.testKeyBound = true;\n        }\n        vm.testMessage = '';\n    };\n}\n"},2667:function(e,t){e.exports='<div style="display:flex;">\n\n  <div class="aspects-focus-outline hotkey-demo-only" hotkey=\'y\' hotkey-action="vm.callback1" hotkey-hint>\n\n    <div class="hotkey-demo-only-button-layout">\n      <button class="btn button button-secondary" hotkey-item ng-click="vm.button1()">\n      <i class="hpe-icon hpe-active"></i>\n    </button> &nbsp;\n      <button class="btn button button-secondary" hotkey-item ng-click="vm.button2()">\n      <i class="hpe-icon hpe-inactive"></i>\n    </button> &nbsp;\n      <button class="btn button button-secondary" hotkey-item ng-click="vm.button3()">\n      <i class="hpe-icon hpe-lock"></i>\n    </button>\n    </div>\n\n    <p class="m-t-xs" style="text-align: center;">\n      Selected: <span ng-bind="vm.selected"></span>\n    </p>\n\n  </div>\n\n  <div class="aspects-focus-outline hotkey-demo-only m-l-lg" hotkey=\'m\' hotkey-action="vm.callback2" hotkey-hint>\n\n    <div class="hotkey-demo-only-button-layout">\n\n      <button class="btn button button-secondary" hotkey-item ng-click="vm.buttonA()">\n      <i class="hpe-icon hpe-rewind"></i>\n    </button> &nbsp;\n      <button class="btn button button-secondary" hotkey-item ng-click="vm.buttonB()">\n      <i class="hpe-icon hpe-play"></i>\n    </button> &nbsp;\n      <button class="btn button button-secondary" hotkey-item ng-click="vm.buttonC()">\n      <i class="hpe-icon hpe-fast-forward"></i>\n    </button>\n\n    </div>\n    <p class="m-t-xs" style="text-align: center;">\n      Selected: <span ng-bind="vm.otherSelected"></span>\n    </p>\n  </div>\n\n</div>'},2668:function(e,t){e.exports=".hotkey-demo-only{\n\twidth: 210px;\n\theight: 80px;\n\tborder: 2px solid #f1f1f1;\n\tborder-radius: 3px;\n}\n.hotkey-demo-only .hotkey-group-hint {\n\tmargin-left: -2px;\n\tmargin-top: -2px;\n}\n.hotkey-demo-only-button-layout{\n\tpadding-left:30px;\n\tpadding-top:20px;\n}"},2669:function(e,t){e.exports="angular.module('app').controller('KeyboardServiceDemoCtrl', KeyboardServiceDemoCtrl);\n\nKeyboardServiceDemoCtrl.$inject = ['$scope', 'keyboardService'];\n\nfunction KeyboardServiceDemoCtrl($scope, keyboardService) {\n    var vm = this;\n\n    vm.testKeyInput = '';\n    vm.testKey = {};\n    vm.testKeyBound = false;\n    vm.testMessage = '';\n\n    vm.toggleBind = function () {\n        if (vm.testKeyBound) {\n            keyboardService.unbindKey(vm.testKey);\n            vm.testKeyBound = false;\n        } else {\n            var code = keyboardService.getCharCode(vm.testKeyInput);\n            if (code === 0) { return; }\n\n            vm.testKey.code = code;\n            keyboardService.bindKey(vm.testKey, function () {\n                $scope.$apply(function () {\n                    vm.testMessage = 'Hotkey was pressed at ' + new Date().toLocaleTimeString();\n                });\n            });\n            vm.testKeyBound = true;\n        }\n        vm.testMessage = '';\n    };\n}\n"},2670:function(e,t){e.exports='<div class="row m-t-md m-b-md">\n  <div class="col-sm-1 m-t-xs">\n    <checkbox name="shift-check" ng-model="vm.testKey.shiftKey" ng-disabled="vm.testKeyBound">Shift</checkbox>\n  </div>\n  <div class="col-sm-1 m-t-xs">\n    <checkbox name="ctrl-check" ng-model="vm.testKey.ctrlKey" ng-disabled="vm.testKeyBound">Ctrl</checkbox>\n  </div>\n  <div class="col-sm-1 m-t-xs">\n    <checkbox name="alt-check" ng-model="vm.testKey.altKey" ng-disabled="vm.testKeyBound">Alt</checkbox>\n  </div>\n  <div class="col-sm-2">\n    <input type="text" placeholder="Key" class="form-control" maxlength="1" ng-model="vm.testKeyInput" ng-disabled="vm.testKeyBound"\n    />\n  </div>\n  <div class="col-sm-2">\n    <button type="button" class="btn button-primary" ng-click="vm.toggleBind()">{{ vm.testKeyBound ? "Unbind Key" : "Bind Key" }}</button>\n  </div>\n</div>\n<alert ng-if="vm.testMessage.length > 0" type="info">\n  <span ng-bind="vm.testMessage"></span>\n</alert>'},3067:function(e,t,n){var o=n(2091);e.exports="string"==typeof o?o:o.toString()},3068:function(e,t,n){var o=n(2092);e.exports="string"==typeof o?o:o.toString()}});