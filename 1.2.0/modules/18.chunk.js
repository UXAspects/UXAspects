webpackJsonp([18],{1518:function(t,e,n){"use strict";!function(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}(n(1519))},1519:function(t,e,n){"use strict";function o(t,e){return"rgba("+t.concat(e).join(",")+")"}function r(t,e){return Math.floor(Math.random()*(e-t+1))+t}function a(t){return{backgroundColor:o(t,.4),borderColor:o(t,1),pointBackgroundColor:o(t,1),pointBorderColor:"#fff",pointHoverBackgroundColor:"#fff",pointHoverBorderColor:o(t,.8)}}function s(t){return{backgroundColor:o(t,.6),borderColor:o(t,1),hoverBackgroundColor:o(t,.8),hoverBorderColor:o(t,1)}}function c(t){return{backgroundColor:t.map(function(t){return o(t,.6)}),borderColor:t.map(function(){return"#fff"}),pointBackgroundColor:t.map(function(t){return o(t,1)}),pointBorderColor:t.map(function(){return"#fff"}),pointHoverBackgroundColor:t.map(function(t){return o(t,1)}),pointHoverBorderColor:t.map(function(t){return o(t,1)})}}function l(t){return{backgroundColor:t.map(function(t){return o(t,.6)}),borderColor:t.map(function(t){return o(t,1)}),hoverBackgroundColor:t.map(function(t){return o(t,.8)}),hoverBorderColor:t.map(function(t){return o(t,1)})}}function i(){return[r(0,255),r(0,255),r(0,255)]}function d(t){return f.defaultColors[t]||i()}function h(t){for(var e=new Array(t),n=0;n<t;n++)e[n]=f.defaultColors[n]||i();return e}function p(t,e,n){return"pie"===t||"doughnut"===t?c(h(n)):"polarArea"===t?l(h(n)):"line"===t||"radar"===t?a(d(e)):"bar"===t||"horizontalBar"===t?s(d(e)):d(e)}var b=this&&this.__decorate||function(t,e,n,o){var r,a=arguments.length,s=a<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,o);else for(var c=t.length-1;c>=0;c--)(r=t[c])&&(s=(a<3?r(s):a>3?r(e,n,s):r(e,n))||s);return a>3&&s&&Object.defineProperty(e,n,s),s},u=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},g=n(0),C=n(1521),f=function(){function t(t){this.labels=[],this.options={},this.chartClick=new g.EventEmitter,this.chartHover=new g.EventEmitter,this.initFlag=!1,this.element=t}return t.prototype.ngOnInit=function(){this.ctx=this.element.nativeElement.getContext("2d"),this.cvs=this.element.nativeElement,this.initFlag=!0,(this.data||this.datasets)&&this.refresh()},t.prototype.ngOnChanges=function(t){this.initFlag&&(t.hasOwnProperty("data")||t.hasOwnProperty("datasets")?(t.data?this.updateChartData(t.data.currentValue):this.updateChartData(t.datasets.currentValue),this.chart.update()):this.refresh())},t.prototype.ngOnDestroy=function(){this.chart&&(this.chart.destroy(),this.chart=void 0)},t.prototype.getChartBuilder=function(t){var e=this,n=this.getDatasets(),o=Object.assign({},this.options);!1===this.legend&&(o.legend={display:!1}),o.hover=o.hover||{},o.hover.onHover||(o.hover.onHover=function(t){t&&!t.length||e.chartHover.emit({active:t})}),o.onClick||(o.onClick=function(t,n){e.chartClick.emit({event:t,active:n})});var r={type:this.chartType,data:{labels:this.labels,datasets:n},options:o};return new C.Chart(t,r)},t.prototype.updateChartData=function(t){Array.isArray(t[0].data)?this.chart.data.datasets.forEach(function(e,n){e.data=t[n].data,t[n].label&&(e.label=t[n].label)}):this.chart.data.datasets[0].data=t},t.prototype.getDatasets=function(){var t=this,e=void 0;if((!this.datasets||!this.datasets.length&&this.data&&this.data.length)&&(e=Array.isArray(this.data[0])?this.data.map(function(e,n){return{data:e,label:t.labels[n]||"Label "+n}}):[{data:this.data,label:"Label 0"}]),(this.datasets&&this.datasets.length||e&&e.length)&&(e=(this.datasets||e).map(function(e,n){var o=Object.assign({},e);return t.colors&&t.colors.length?Object.assign(o,t.colors[n]):Object.assign(o,p(t.chartType,n,o.data.length)),o})),!e)throw new Error("ng-charts configuration error,\n      data or datasets field are required to render char "+this.chartType);return e},t.prototype.refresh=function(){this.ngOnDestroy(),this.chart=this.getChartBuilder(this.ctx)},t}();f.defaultColors=[[255,99,132],[54,162,235],[255,206,86],[231,233,237],[75,192,192],[151,187,205],[220,220,220],[247,70,74],[70,191,189],[253,180,92],[148,159,177],[77,83,96]],b([g.Input(),u("design:type",Array)],f.prototype,"data",void 0),b([g.Input(),u("design:type",Array)],f.prototype,"datasets",void 0),b([g.Input(),u("design:type",Array)],f.prototype,"labels",void 0),b([g.Input(),u("design:type",Object)],f.prototype,"options",void 0),b([g.Input(),u("design:type",String)],f.prototype,"chartType",void 0),b([g.Input(),u("design:type",Array)],f.prototype,"colors",void 0),b([g.Input(),u("design:type",Boolean)],f.prototype,"legend",void 0),b([g.Output(),u("design:type",g.EventEmitter)],f.prototype,"chartClick",void 0),b([g.Output(),u("design:type",g.EventEmitter)],f.prototype,"chartHover",void 0),f=b([g.Directive({selector:"canvas[baseChart]",exportAs:"base-chart"}),u("design:paramtypes",[g.ElementRef])],f),e.BaseChartDirective=f;var m=function(){function t(){}return t}();m=b([g.NgModule({declarations:[f],exports:[f],imports:[]})],m),e.ChartsModule=m},1618:function(t,e){t.exports=".demo-chart-container {\n    display: block;\n    position: relative;\n    height: 200px;\n}"},1619:function(t,e){t.exports='<div class="demo-chart-container">\n\n    <canvas baseChart \n            [datasets]="barChartData" \n            [labels]="barChartLabels" \n            [options]="barChartOptions" \n            [legend]="barChartLegend"\n            [colors]="barChartColors" \n            chartType="bar">\n    </canvas>\n\n</div>'},1620:function(t,e){t.exports="import { Component, ViewChild, AfterViewInit } from '@angular/core';\nimport { ColorService } from 'ux-aspects';\nimport { BaseChartDirective } from 'ng2-charts';\nimport { Chart } from 'chart.js';\n\n@Component({\n    selector: 'app',\n    templateUrl: './src/app.component.html',\n    styleUrls: ['./src/app.component.css']\n})\nexport class AppComponent implements AfterViewInit {\n\n    // access the chart directive properties\n    @ViewChild(BaseChartDirective) baseChart: BaseChartDirective;\n\n    // configure the directive data\n    barChartData: Chart.ChartData = [{\n        data: [34, 25, 19, 34, 32, 44, 50, 67],\n        borderWidth: 1\n    }];\n\n    barChartLabels: string[] = ['.doc', '.ppt', '.pdf', '.xls', '.html', '.txt', '.csv', '.mht'];\n    barChartOptions: Chart.ChartOptions;\n    barChartLegend: boolean = false;\n    barChartColors: any;\n\n    constructor(colorService: ColorService) {\n\n        // Prepare colors used in chart\n        let borderColor = colorService.getColor('grey2').setAlpha(0.5).toRgba();\n        let barBackgroundColor = colorService.getColor('chart1').setAlpha(0.1).toRgba();\n        let barHoverBackgroundColor = colorService.getColor('chart1').setAlpha(0.2).toRgba();\n        let barBorderColor = colorService.getColor('chart1').toHex();\n        let tooltipBackgroundColor = colorService.getColor('grey2').toHex();\n\n        this.barChartOptions = {\n            maintainAspectRatio: false,\n            responsive: true,\n            scales: {\n                xAxes: [{\n                    barPercentage: 0.5,\n                    categoryPercentage: 1,\n                    gridLines: {\n                        display: true,\n                        zeroLineColor: borderColor,\n                        color: 'transparent'\n                    }\n                }],\n                yAxes: [{\n                    type: 'linear',\n                    gridLines: {\n                        zeroLineColor: borderColor\n                    },\n                    ticks: {\n                        min: 0,\n                        max: 80,\n                        stepSize: 20\n                    } as Chart.LinearTickOptions\n                }]\n            },\n            tooltips: {\n                backgroundColor: tooltipBackgroundColor,\n                cornerRadius: 0,\n                callbacks: {\n                    title: (item: Chart.ChartTooltipItem[]) => {\n                        return;\n                    },\n                    label: (item: Chart.ChartTooltipItem) => {\n                        return `x: ${ item.xLabel }, y: ${ item.yLabel }`;\n                    }\n                },\n                displayColors: false\n            } as any\n        };\n\n        this.barChartColors = [\n            {\n                backgroundColor: barBackgroundColor,\n                hoverBackgroundColor: barHoverBackgroundColor,\n                borderColor: barBorderColor\n            }\n        ];\n\n    }\n\n    ngAfterViewInit() {\n\n        // get instance of the chart\n        let chartInstance = this.baseChart.chart;\n\n        // create reference to Chart with type of any\n        let chartJs = Chart as any;\n\n        // Added dashed borders to forecast data\n        chartJs.helpers.each(chartInstance.getDatasetMeta(0).data, (bar: any, index: number) => {\n\n            // only alter the bars that are forecast data\n            if (index >= 6) {\n                bar.draw = function () {\n                    chartInstance.chart.ctx.save();\n                    chartInstance.chart.ctx.setLineDash([2, 2]);\n                    chartJs.elements.Rectangle.prototype.draw.apply(this, arguments);\n                    chartInstance.chart.ctx.restore();\n                };\n            }\n        });\n    }\n\n}"},1621:function(t,e){t.exports=".demo-chart-container {\n    display: block;\n    position: relative;\n    height: 200px;\n}"},1622:function(t,e){t.exports='<div class="demo-chart-container">\n\n    <canvas baseChart \n            [datasets]="barChartData"\n            [labels]="barChartLabels"\n            [options]="barChartOptions"\n            [legend]="barChartLegend"\n            [colors]="barChartColors"\n            chartType="horizontalBar">\n    </canvas>\n\n</div>'},1623:function(t,e){t.exports="import { Component } from '@angular/core';\nimport { ColorService } from 'ux-aspects';\n\n@Component({\n    selector: 'app',\n    templateUrl: './src/app.component.html',\n    styleUrls: ['./src/app.component.css']\n})\nexport class AppComponent {\n\n    // configure the directive data\n    barChartData: Chart.ChartData = [{\n        data: [44, 32, 34, 19, 25, 34],\n        borderWidth: 1\n    }];\n\n    barChartLabels: string[] = ['.txt', '.html', '.xls', '.pdf', '.ppt', '.doc'];\n    barChartOptions: Chart.ChartOptions;\n    barChartLegend: boolean = false;\n    barChartColors: any;\n\n    constructor(colorService: ColorService) {\n\n        let borderColor = colorService.getColor('grey2').setAlpha(0.5).toRgba();\n        let tooltipBackgroundColor = colorService.getColor('grey2').toHex();\n        let barBackgroundColor = colorService.getColor('chart1').setAlpha(0.1).toRgba();\n        let barHoverBackgroundColor = colorService.getColor('chart1').setAlpha(0.2).toRgba();\n        let barBorderColor = colorService.getColor('chart1').toHex();\n\n        this.barChartOptions = {\n            maintainAspectRatio: false,\n            responsive: true,\n            scales: {\n                xAxes: [{\n                    gridLines: {\n                        color: 'transparent'\n                    },\n                    ticks: {\n                        min: 0,\n                        max: 45,\n                        stepSize: 5\n                    } as Chart.LinearTickOptions\n                }],\n                yAxes: [{\n                    barPercentage: 0.5,\n                    categoryPercentage: 1,\n                    gridLines: {\n                        color: 'transparent'\n                    }\n                } as Chart.ChartXAxe]\n            },\n            tooltips: {\n                backgroundColor: tooltipBackgroundColor,\n                cornerRadius: 0,\n                callbacks: {\n                    title: (item: Chart.ChartTooltipItem[]) => {\n                        return;\n                    },\n                    label: (item: Chart.ChartTooltipItem) => {\n                        return `x: ${ item.xLabel }, y: ${ item.yLabel }`;\n                    }\n                },\n                displayColors: false\n            } as any\n        };\n\n        this.barChartColors = [{\n            backgroundColor: barBackgroundColor,\n            hoverBackgroundColor: barHoverBackgroundColor,\n            borderColor: barBorderColor\n        }];\n\n    }\n\n}"},1624:function(t,e){t.exports=".demo-chart-container-stack {\n    display: block;\n    position: relative;        \n    height: 400px;\n}"},1625:function(t,e){t.exports='<div class="demo-chart-container-stack">\n\n    <canvas baseChart \n            [datasets]="barChartData"\n            [labels]="barChartLabels"\n            [options]="barChartOptions"\n            [legend]="barChartLegend"\n            [colors]="barChartColors"\n            chartType="bar">\n    </canvas>\n\n</div>'},1626:function(t,e){t.exports="import { Component } from '@angular/core';\nimport { ColorService } from 'ux-aspects';\n\n@Component({\n    selector: 'app',\n    templateUrl: './src/app.component.html',\n    styleUrls: ['./src/app.component.css']\n})\nexport class AppComponent {\n\n    // configure the directive data\n    barChartData: Chart.ChartDataSets[];\n    barChartLabels: string[] = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13'];\n    barChartOptions: Chart.ChartOptions;\n    barChartLegend: boolean = false;\n    barChartColors: any;\n\n    constructor(private colorService: ColorService) {\n\n        let borderColor = colorService.getColor('grey2').setAlpha(0.5).toRgba();\n        let tooltipBackgroundColor = colorService.getColor('grey2').toHex();\n        let barBorderColor = colorService.getColor('chart1').toHex();\n\n        this.barChartData = [\n            {\n                data: this.generateRandomData()\n            },\n            {\n                data: this.generateRandomData()\n            },\n            {\n                data: this.generateRandomData()\n            }\n        ];\n\n        this.barChartOptions = {\n            maintainAspectRatio: false,\n            responsive: true,\n            hover: {\n                mode: 'nearest'\n            },\n            scales: {\n                xAxes: [{\n                    barPercentage: 0.6,\n                    categoryPercentage: 1,\n                    gridLines: {\n                        color: 'transparent'\n                    }\n                }],\n                yAxes: [{\n                    stacked: true,\n                    ticks: {\n                        min: 0,\n                        max: 30000,\n                        stepSize: 5000,\n                        callback: (value: any, index: any, values: any) => {\n                            return value + '€';\n                        }\n                    } as Chart.LinearTickOptions\n                }]\n            },\n            tooltips: {\n                backgroundColor: tooltipBackgroundColor,\n                cornerRadius: 0,\n                callbacks: {\n                    title: (item: Chart.ChartTooltipItem[]) => {\n                        return `Sales ${item[0].datasetIndex + 1}`;\n                    },\n                    label: (item: Chart.ChartTooltipItem) => {\n                        return `${item.yLabel}€ in cycle ${item.index}`;\n                    }\n                },\n                displayColors: false\n            } as any\n        };\n\n        this.barChartColors = [\n            this.generateBarColors('chart1'),\n            this.generateBarColors('chart2'),\n            this.generateBarColors('chart3')\n        ];\n\n    }\n\n    generateRandomData(): number[] {\n\n        let data: number[] = [];\n\n        // generate random data\n        for (let idx = 0; idx < 13; idx++) {\n            data.push(Math.floor(Math.random() * 10000));\n        }\n\n        return data;\n    }\n\n    generateBarColors(baseColor: string) {\n\n        let backgroundColors = [];\n        let hoverColors = [];\n\n        for (let idx = 0; idx < 13; idx++) {\n\n            backgroundColors.push(\n                this.colorService.getColor(baseColor)\n                    .setAlpha(idx < 10 ? 0.7 : 0.3)\n                    .toRgba());\n\n            hoverColors.push(\n                this.colorService.getColor(baseColor)\n                    .setAlpha(idx < 10 ? 0.8 : 0.4)\n                    .toRgba());\n        }\n\n        return {\n            backgroundColor: backgroundColors,\n            hoverBackgroundColor: hoverColors\n        };\n    }\n\n}"},1761:function(t,e,n){"use strict";var o=this&&this.__decorate||function(t,e,n,o){var r,a=arguments.length,s=a<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,o);else for(var c=t.length-1;c>=0;c--)(r=t[c])&&(s=(a<3?r(s):a>3?r(e,n,s):r(e,n))||s);return a>3&&s&&Object.defineProperty(e,n,s),s},r=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)};Object.defineProperty(e,"__esModule",{value:!0});var a=n(0),s=n(285),c=n(151),l=function(){function t(t){this.htmlCode=n(2430),this.jsCode=n(2431),this.accessibilityCode=n(2429),this.codepen={html:this.htmlCode,js:[this.jsCode],htmlAttributes:{"ng-controller":"BarChartCtrl as bc"}},this.data=[{label:"bar",data:[[1,34],[2,25],[3,19],[4,34],[5,32],[6,44]],forecastData:[[7,50],[8,67]]}],this.options={series:{bars:{show:!0,fill:!0,fillColor:{colors:[{opacity:.1},{opacity:.1}]},barWidth:.5,lineWidth:1,align:"center"},highlightColor:t.getColor("chart1").setAlpha(.2).toRgba(),forecastFillColor:t.getColor("chart1").setAlpha(.3).toRgba(),forecastColor:t.getColor("chart1").setAlpha(.8).toRgba(),forecastHighLightColor:t.getColor("chart1").setAlpha(.2).toRgba(),forecastDashStyle:[5]},xaxis:{tickDecimals:0,color:t.getColor("secondary").toHex(),ticks:[[1,".doc"],[2,".ppt"],[3,".pdf"],[4,".xls"],[5,".html"],[6,".txt"],[7,".csv"],[8,".mht"]]},colors:[t.getColor("primary").toRgb()],grid:{color:t.getColor("grey4").toHex(),hoverable:!0,clickable:!0,borderWidth:{left:1,bottom:1,right:0,top:0},borderColor:{left:t.getColor("grey2").setAlpha(.5).toRgba(),bottom:t.getColor("grey2").setAlpha(.5).toRgba()}},legend:{show:!1},tooltip:{show:!0,shifts:{x:0,y:-30},content:function(t,e,n){return"x: %x, y: "+n}}}}return t}();l=o([a.Component({selector:"uxd-charts-bar-chart-ng1",template:n(2133),changeDetection:a.ChangeDetectionStrategy.OnPush}),s.DocumentationSectionComponent("ChartsBarChartNg1Component"),r("design:paramtypes",[c.ColorService])],l),e.ChartsBarChartNg1Component=l},1762:function(t,e,n){"use strict";var o=this&&this.__decorate||function(t,e,n,o){var r,a=arguments.length,s=a<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,o);else for(var c=t.length-1;c>=0;c--)(r=t[c])&&(s=(a<3?r(s):a>3?r(e,n,s):r(e,n))||s);return a>3&&s&&Object.defineProperty(e,n,s),s},r=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)};Object.defineProperty(e,"__esModule",{value:!0});var a=n(0),s=n(285),c=n(151),l=n(1518),i=n(1521),d=function(){function t(t){this.plunk={files:{"app.component.ts":n(1620),"app.component.html":n(1619),"app.component.css":n(1618)},modules:[{library:"chart.js"},{imports:["ChartsModule"],library:"ng2-charts"},{imports:["ColorServiceModule"],library:"ux-aspects"}],mappings:[{alias:"chart.js",source:"https://unpkg.com/chart.js@2.5.0/dist/Chart.min.js"},{alias:"ng2-charts",source:"https://unpkg.com/ng2-charts@1.5.0/bundles/ng2-charts.umd.min.js"}]},this.barChartData=[{data:[34,25,19,34,32,44,50,67],borderWidth:1}],this.barChartLabels=[".doc",".ppt",".pdf",".xls",".html",".txt",".csv",".mht"],this.barChartLegend=!1,this.htmlCode=n(1619),this.tsCode=n(1620),this.cssCode=n(1618);var e=t.getColor("grey2").setAlpha(.5).toRgba(),o=t.getColor("chart1").setAlpha(.1).toRgba(),r=t.getColor("chart1").setAlpha(.2).toRgba(),a=t.getColor("chart1").toHex(),s=t.getColor("grey2").toHex();this.barChartOptions={maintainAspectRatio:!1,responsive:!0,scales:{xAxes:[{barPercentage:.5,categoryPercentage:1,gridLines:{display:!0,zeroLineColor:e,color:"transparent"}}],yAxes:[{type:"linear",gridLines:{zeroLineColor:e},ticks:{min:0,max:80,stepSize:20}}]},tooltips:{backgroundColor:s,cornerRadius:0,callbacks:{title:function(t){},label:function(t){return"x: "+t.xLabel+", y: "+t.yLabel}},displayColors:!1}},this.barChartColors=[{backgroundColor:o,hoverBackgroundColor:r,borderColor:a}]}return t.prototype.ngAfterViewInit=function(){var t=this.baseChart.chart,e=i.Chart;e.helpers.each(t.getDatasetMeta(0).data,function(n,o){o>=6&&(n.draw=function(){t.chart.ctx.save(),t.chart.ctx.setLineDash([2,2]),e.elements.Rectangle.prototype.draw.apply(this,arguments),t.chart.ctx.restore()})})},t}();o([a.ViewChild(l.BaseChartDirective),r("design:type",l.BaseChartDirective)],d.prototype,"baseChart",void 0),d=o([a.Component({selector:"uxd-charts-bar-chart",template:n(2134)}),s.DocumentationSectionComponent("ChartsBarChartComponent"),r("design:paramtypes",[c.ColorService])],d),e.ChartsBarChartComponent=d},1763:function(t,e,n){"use strict";var o=this&&this.__decorate||function(t,e,n,o){var r,a=arguments.length,s=a<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,o);else for(var c=t.length-1;c>=0;c--)(r=t[c])&&(s=(a<3?r(s):a>3?r(e,n,s):r(e,n))||s);return a>3&&s&&Object.defineProperty(e,n,s),s},r=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)};Object.defineProperty(e,"__esModule",{value:!0});var a=n(0),s=n(19),c=n(1518),l=n(286),i=n(288),d=n(289),h=n(150),p=n(1761),b=n(1764),u=n(1766),g=n(287),C=n(1762),f=n(1765),m=n(1767),v=[C.ChartsBarChartComponent,p.ChartsBarChartNg1Component,b.ChartsHorizontalBarChartNg1Component,u.ChartsStackedBarChartNg1Component,f.ChartsHorizontalBarChartComponent,m.ChartsStackedBarChartComponent],y=[{path:"**",component:g.DocumentationCategoryComponent,data:{category:h.ResolverService.resolveCategoryData(h.DocumentationPage.Charts,"Bar Charts")}}],x=function(){function t(t,e){e.registerResolver(t)}return t}();x=o([a.NgModule({imports:[l.DocumentationComponentsModule,i.TabsModule,d.WrappersModule,c.ChartsModule,s.RouterModule.forChild(y)],exports:v,declarations:v,entryComponents:v}),r("design:paramtypes",[a.ComponentFactoryResolver,h.ResolverService])],x),e.ChartsBarChartsModule=x},1764:function(t,e,n){"use strict";var o=this&&this.__decorate||function(t,e,n,o){var r,a=arguments.length,s=a<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,o);else for(var c=t.length-1;c>=0;c--)(r=t[c])&&(s=(a<3?r(s):a>3?r(e,n,s):r(e,n))||s);return a>3&&s&&Object.defineProperty(e,n,s),s},r=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)};Object.defineProperty(e,"__esModule",{value:!0});var a=n(0),s=n(285),c=n(151),l=function(){function t(t){this.htmlCode=n(2432),this.jsCode=n(2433),this.codepen={html:this.htmlCode,htmlAttributes:{"ng-controller":"HorizontalBarChartCtrl as bc"},js:[this.jsCode]},this.data=[{label:"bar",data:[[34,1],[25,2],[19,3],[34,4],[32,5],[44,6]]}],this.options={series:{bars:{show:!0,fill:!0,fillColor:{colors:[{opacity:.1},{opacity:.1}]},barWidth:.5,lineWidth:1,horizontal:!0,align:"center"},highlightColor:[t.getColor("chart1").setAlpha(.2).toRgba()],valueLabels:{show:!0,valign:"top",plotAxis:"y",xoffset:-30,yoffset:-5,font:"13px 'Source Sans Pro'",fontcolor:"#545454",labelFormatter:function(t){return[".doc",".ppt",".pdf",".xls",".html",".txt"][parseInt(t)-1]}}},xaxis:{tickDecimals:0,color:[t.getColor("secondary").toHex()]},yaxis:{ticks:[]},colors:[t.getColor("chart1").toRgb()],grid:{color:[t.getColor("grey4").toHex()],hoverable:!0,clickable:!0,borderWidth:{left:1,bottom:1,right:0,top:0},borderColor:{left:[t.getColor("grey1").setAlpha(.2).toRgba()],bottom:[t.getColor("grey1").setAlpha(.2).toRgba()]}},legend:{show:!1},tooltip:{show:!0,shifts:{x:0,y:-38},content:function(t,e,n){return"x: "+e+", y: "+[".doc",".ppt",".pdf",".xls",".html",".txt"][parseInt(n)-1]}}}}return t}();l=o([a.Component({selector:"uxd-charts-horizontal-bar-chart-ng1",template:n(2135),changeDetection:a.ChangeDetectionStrategy.OnPush}),s.DocumentationSectionComponent("ChartsHorizontalBarChartNg1Component"),r("design:paramtypes",[c.ColorService])],l),e.ChartsHorizontalBarChartNg1Component=l},1765:function(t,e,n){"use strict";var o=this&&this.__decorate||function(t,e,n,o){var r,a=arguments.length,s=a<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,o);else for(var c=t.length-1;c>=0;c--)(r=t[c])&&(s=(a<3?r(s):a>3?r(e,n,s):r(e,n))||s);return a>3&&s&&Object.defineProperty(e,n,s),s},r=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)};Object.defineProperty(e,"__esModule",{value:!0});var a=n(0),s=n(285),c=n(151),l=function(){function t(t){this.plunk={files:{"app.component.ts":n(1623),"app.component.html":n(1622),"app.component.css":n(1621)},modules:[{library:"chart.js"},{imports:["ChartsModule"],library:"ng2-charts"},{imports:["ColorServiceModule"],library:"ux-aspects"}],mappings:[{alias:"chart.js",source:"https://unpkg.com/chart.js@2.5.0/dist/Chart.min.js"},{alias:"ng2-charts",source:"https://unpkg.com/ng2-charts@1.5.0/bundles/ng2-charts.umd.min.js"}]},this.barChartData=[{data:[44,32,34,19,25,34],borderWidth:1}],this.barChartLabels=[".txt",".html",".xls",".pdf",".ppt",".doc"],this.barChartLegend=!1,this.htmlCode=n(1622),this.tsCode=n(1623),this.cssCode=n(1621);var e=(t.getColor("grey2").setAlpha(.5).toRgba(),t.getColor("grey2").toHex()),o=t.getColor("chart1").setAlpha(.1).toRgba(),r=t.getColor("chart1").setAlpha(.2).toRgba(),a=t.getColor("chart1").toHex();this.barChartOptions={maintainAspectRatio:!1,responsive:!0,scales:{xAxes:[{gridLines:{color:"transparent"},ticks:{min:0,max:45,stepSize:5}}],yAxes:[{barPercentage:.5,categoryPercentage:1,gridLines:{color:"transparent"}}]},tooltips:{backgroundColor:e,cornerRadius:0,callbacks:{title:function(t){},label:function(t){return"x: "+t.xLabel+", y: "+t.yLabel}},displayColors:!1}},this.barChartColors=[{backgroundColor:o,hoverBackgroundColor:r,borderColor:a}]}return t}();l=o([a.Component({selector:"uxd-charts-horizontal-bar-chart",template:n(2136)}),s.DocumentationSectionComponent("ChartsHorizontalBarChartComponent"),r("design:paramtypes",[c.ColorService])],l),e.ChartsHorizontalBarChartComponent=l},1766:function(t,e,n){"use strict";var o=this&&this.__decorate||function(t,e,n,o){var r,a=arguments.length,s=a<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,o);else for(var c=t.length-1;c>=0;c--)(r=t[c])&&(s=(a<3?r(s):a>3?r(e,n,s):r(e,n))||s);return a>3&&s&&Object.defineProperty(e,n,s),s},r=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)};Object.defineProperty(e,"__esModule",{value:!0});var a=n(0),s=n(285),c=n(151),l=function(){function t(t){this.htmlCode=n(2435),this.jsCode=n(2436),this.accessibilityCode=n(2434),this.legendHtml=n(2438),this.legendCss=n(2437),this.legendJs=n(2439),this.codepen={html:this.htmlCode,htmlAttributes:{"ng-controller":"StackedBarChartCtrl as bc"},js:[this.jsCode]};for(var e={chartColor1:t.getColor("chart1").setAlpha(.7).toRgba(),chartColor2:t.getColor("chart2").setAlpha(.7).toRgba(),chartColor3:t.getColor("chart3").setAlpha(.7).toRgba(),chartHover1:t.getColor("chart1").setAlpha(.2).toRgba(),chartHover2:t.getColor("chart2").setAlpha(.3).toRgba(),chartHover3:t.getColor("chart3").setAlpha(.3).toRgba(),forecastColor1:t.getColor("chart1").setAlpha(.3).toRgba(),forecastColor2:t.getColor("chart2").setAlpha(.2).toRgba(),forecastColor3:t.getColor("chart3").setAlpha(.2).toRgba(),gridColor:t.getColor("grey4").toHex(),tickColor:t.getColor("grey6").toHex(),transparent:"rgba(0, 0, 0, 0)",borderColor:t.getColor("grey2").toHex()},o=[],r=[],a=[],s=[],c=[],l=[],i=1;i<=10;i+=1)o.push([i,Math.floor(1e4*Math.random())]),r.push([i,Math.floor(1e4*Math.random())]),a.push([i,Math.floor(1e4*Math.random())]);for(var i=11;i<=13;i++)s.push([i,Math.floor(1e4*Math.random())]),c.push([i,Math.floor(1e4*Math.random())]),l.push([i,Math.floor(1e4*Math.random())]);this.data=[{label:"Sales 1",data:o,color:[e.chartColor1],highlightColor:[e.chartHover1],forecastData:s,forecastFillColor:[e.forecastColor1],forecastColor:[e.chartColor1],forecastHighLightColor:[e.chartHover1],forecastDashStyle:[5]},{label:"Sales 2",data:r,color:[e.chartColor2],highlightColor:[e.chartHover2],forecastData:c,forecastFillColor:[e.forecastColor2],forecastColor:[e.chartColor2],forecastHighLightColor:[e.chartColor2],forecastDashStyle:[5]},{label:"Sales 3",data:a,color:[e.chartColor3],highlightColor:[e.chartHover3],forecastData:l,forecastFillColor:[e.forecastColor3],forecastColor:[e.chartColor3],forecastHighLightColor:[e.chartHover3],forecastDashStyle:[5]}],this.options={series:{stack:!0,bars:{show:!0,barWidth:.6,lineWidth:0,align:"center"}},xaxis:{tickColor:"transparent"},yaxis:{tickFormatter:this.euroFormatter},grid:{color:[e.gridColor],hoverable:!0,clickable:!0,tickcolor:[e.tickColor],borderWidth:{left:1,bottom:1,right:0,top:0},borderColor:{left:[e.borderColor],bottom:[e.borderColor]}},legend:{show:!0,container:"#legendHolderBar",noColumns:0},tooltip:{show:!0,shifts:{x:0,y:-44},content:'<strong>%s</strong><br/><span class="font-size-small"> %y in cycle %x</span>'}}}return t.prototype.euroFormatter=function(t,e){return t.toFixed(e.tickDecimals)+"€"},t}();l=o([a.Component({selector:"uxd-charts-stacked-bar-chart-ng1",template:n(2137),changeDetection:a.ChangeDetectionStrategy.OnPush}),s.DocumentationSectionComponent("ChartsStackedBarChartNg1Component"),r("design:paramtypes",[c.ColorService])],l),e.ChartsStackedBarChartNg1Component=l},1767:function(t,e,n){"use strict";var o=this&&this.__decorate||function(t,e,n,o){var r,a=arguments.length,s=a<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,o);else for(var c=t.length-1;c>=0;c--)(r=t[c])&&(s=(a<3?r(s):a>3?r(e,n,s):r(e,n))||s);return a>3&&s&&Object.defineProperty(e,n,s),s},r=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)};Object.defineProperty(e,"__esModule",{value:!0});var a=n(0),s=n(285),c=n(151),l=function(){function t(t){this.colorService=t,this.plunk={files:{"app.component.ts":n(1626),"app.component.html":n(1625),"app.component.css":n(1624)},modules:[{library:"chart.js"},{imports:["ChartsModule"],library:"ng2-charts"},{imports:["ColorServiceModule"],library:"ux-aspects"}],mappings:[{alias:"chart.js",source:"https://unpkg.com/chart.js@2.5.0/dist/Chart.min.js"},{alias:"ng2-charts",source:"https://unpkg.com/ng2-charts@1.5.0/bundles/ng2-charts.umd.min.js"}]},this.barChartLabels=["1","2","3","4","5","6","7","8","9","10","11","12","13"],this.barChartLegend=!1,this.htmlCode=n(1625),this.tsCode=n(1626),this.cssCode=n(1624);var e=(t.getColor("grey2").setAlpha(.5).toRgba(),t.getColor("grey2").toHex());t.getColor("chart1").toHex();this.barChartData=[{data:this.generateRandomData()},{data:this.generateRandomData()},{data:this.generateRandomData()}],this.barChartOptions={maintainAspectRatio:!1,responsive:!0,hover:{mode:"nearest"},scales:{xAxes:[{barPercentage:.6,categoryPercentage:1,gridLines:{color:"transparent"}}],yAxes:[{stacked:!0,ticks:{min:0,max:3e4,stepSize:5e3,callback:function(t,e,n){return t+"€"}}}]},tooltips:{backgroundColor:e,cornerRadius:0,callbacks:{title:function(t){return"Sales "+(t[0].datasetIndex+1)},label:function(t){return t.yLabel+"€ in cycle "+t.index}},displayColors:!1}},this.barChartColors=[this.generateBarColors("chart1"),this.generateBarColors("chart2"),this.generateBarColors("chart3")]}return t.prototype.generateRandomData=function(){for(var t=[],e=0;e<13;e++)t.push(Math.floor(1e4*Math.random()));return t},t.prototype.generateBarColors=function(t){for(var e=[],n=[],o=0;o<13;o++)e.push(this.colorService.getColor(t).setAlpha(o<10?.7:.3).toRgba()),n.push(this.colorService.getColor(t).setAlpha(o<10?.8:.4).toRgba());return{backgroundColor:e,hoverBackgroundColor:n}},t}();l=o([a.Component({selector:"uxd-charts-stacked-bar-chart",template:n(2138)}),s.DocumentationSectionComponent("ChartsStackedBarChartComponent"),r("design:paramtypes",[c.ColorService])],l),e.ChartsStackedBarChartComponent=l},2133:function(t,e){t.exports='<div class="flot-chart">\n    <ux-flot-ng1 [dataset]="data" [options]="options"></ux-flot-ng1>\n</div>\n\n<hr>\n\n<div class="demo-attributes table-responsive">\n    <table class="table">\n        <tbody>\n            <tr>\n                <th>Property</th>\n                <th>Type</th>\n                <th>Description</th>\n                <th>Optional</th>\n            </tr>\n            <tr>\n                <td class="attribute">label</td>\n                <td>string</td>\n                <td>Label name specified in the legend.</td>\n                <td>true</td>\n            </tr>\n            <tr>\n                <td class="attribute">data</td>\n                <td>number or array</td>\n                <td>An array of coordinates in chart e.g. [ [x1, y1], [x2, y2], ... ]</td>\n                <td>false</td>\n            </tr>\n            <tr>\n                <td class="attribute">forecastData</td>\n                <td>number or array</td>\n                <td>An array of coordinates defining the forecast or future data, e.g [ [x1, y1], [x2, y2], ... ]</td>\n                <td>true</td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n\n<p>Bar Charts are defined by the <code>flot</code> directive. The dataset and options attribute define the bar chart data and\n    options respectively. Dataset and Options are defined within the BarChartCtrl.</p>\n\n<tabset>\n    <tab heading="HTML">\n        <uxd-snippet language="html" [code]="htmlCode"></uxd-snippet>\n    </tab>\n\n    <tab heading="Javascript">\n        <uxd-snippet language="javascript" [code]="jsCode"></uxd-snippet>\n    </tab>\n</tabset>\n\n<blockquote>\n    <p><strong>Note</strong>: Refer to the <a routerLink="/charts/flot-options">Flot Options</a> page for details of chart options.</p>\n</blockquote>\n\n<p>To convey chart information to users with assistive technologies, you can include a text version of the data. Use the <code>sr-only</code>    class to make the text hidden but visible to screen readers, and give the container a <code>tabindex</code> attribute\n    so it can be reached with the keyboard, and place it near the chart.</p>\n\n<uxd-snippet language="html" [code]="accessibilityCode"></uxd-snippet>\n\n<blockquote>\n    <p><strong>Note</strong>: To upgrade this component to use in an Angular 4 application use: <code>upgradeAdapter.upgradeNg1Component(\'uxFlotNg1\')</code></p>\n</blockquote>'},2134:function(t,e){t.exports='<div class="demo-chart-container">\n\n    <canvas baseChart [datasets]="barChartData" [labels]="barChartLabels" [options]="barChartOptions" [legend]="barChartLegend"\n        [colors]="barChartColors" chartType="bar">\n    </canvas>\n\n</div>\n\n<hr>\n\n<p>\n    Bar Charts can be added using the <code>ng2-charts</code> library. \n    The <code>chart.js</code> library needs to be imported and the <code>ChartsModule</code> needs to be added to the appropriate NgModule.\n</p>\n\n<br>\n\n<p>The <code>baseChart</code> directive should be added to a <code>canvas</code> element and the following attributes can be used to customize the chart behavior and appearance:</p>\n\n\n<table class="table">\n\n    <thead>\n        <tr>\n            <th>Name</th>\n            <th>Type</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n\n    <tbody>\n\n        <tr>\n            <td><b>@Input</b> datasets</td>\n            <td><b>object[]</b></td>\n            <td>Contains the data and properties for each data set to be displayed in the chart.</td>\n        </tr>\n\n        <tr>\n            <td><b>@Input</b> chartType</td>\n            <td><b>string</b></td>\n            <td>Indicates the type of the chart. Possible options are: <code>line</code>, <code>bar</code>, <code>radar</code>, <code>pie</code>, <code>polarArea</code>, <code>doughnut</code></td>\n        </tr>\n\n        <tr>\n            <td><b>@Input</b> options</td>\n            <td><b>ChartOptions</b></td>\n            <td>Configures the appearance and behavior of all aspects of the chart.</td>\n        </tr>\n\n        <tr>\n            <td><b>@Input</b> colors</td>\n            <td><b>object[]</b></td>\n            <td>Configure the color values to be used within the chart.</td>\n        </tr>\n\n        <tr>\n            <td><b>@Input</b> legend</td>\n            <td><b>boolean</b></td>\n            <td>Determines whether or not the legend should be displayed.</td>\n        </tr>\n\n        <tr>\n            <td><b>@Output</b> chartClick</td>\n            <td></td>\n            <td>Fires when click on a chart has occurred, returns information regarding active points and labels</td>\n        </tr>\n\n        <tr>\n            <td><b>@Output</b> chartHover</td>\n            <td></td>\n            <td>Fires when mousemove (hover) on a chart has occurred, returns information regarding active points and labels.</td>\n        </tr>\n\n    </tbody>\n</table>\n\n<p>Complete documentation on the directive and chart options can be found at the documentation links below.</p>\n\n<p>The following code can be used to create the example above: </p>\n\n<tabset>\n\n    <tab heading="HTML">\n        <uxd-snippet language="html" [code]="htmlCode"></uxd-snippet>\n    </tab>\n    \n    <tab heading="TypeScript">\n        <uxd-snippet language="javascript" [code]="tsCode"></uxd-snippet>\n    </tab>\n    \n    <tab heading="CSS">\n        <uxd-snippet language="css" [code]="cssCode"></uxd-snippet>\n    </tab>\n\n</tabset>\n\n<br>\n\n<blockquote>\n\n    <p class="m-b-nil">\n        <b>Dependencies: </b>\n        <a class="hyperlink" href="https://www.npmjs.com/package/ng2-charts">ng2-charts</a>, \n        <a class="hyperlink" href="https://www.npmjs.com/package/chart.js">chart.js</a>\n    </p>\n\n    <p class="m-b-nil">\n        <b>Type Definitions: </b>\n        <a class="hyperlink" href="https://www.npmjs.com/package/@types/chart.js">@types/chart.js</a>\n    </p>\n\n    <p class="m-b-nil">\n        <b>Modules: </b>\n        <span>ChartsModule</span>\n    </p>\n\n\n    <p class="m-b-nil">\n        <b>Documentation: </b>\n        <a class="hyperlink" href="http://valor-software.com/ng2-charts/">Angular Directive Documentation</a>, \n        <a class="hyperlink" href="http://www.chartjs.org/docs/">Chart Library Documentation</a>\n    </p>\n</blockquote>'},2135:function(t,e){t.exports='<div class="flot-chart">\n    <ux-flot-ng1 [dataset]="data" [options]="options"></ux-flot-ng1>\n</div>\n\n<hr>\n\n<div class="demo-attributes table-responsive">\n<table class="table">\n    <tbody><tr>\n        <th>Property</th>\n        <th>Type</th>\n        <th>Description</th>\n        <th>Optional</th>\n    </tr>\n    <tr>\n        <td class="attribute">horizontal</td>\n        <td>boolean</td>\n        <td>If true the bars will be presented horizontally.</td>\n        <td>true</td>\n    </tr>\n</tbody></table>\n</div>\n\n<p>Horizontal Bar Charts are defined by the <code>flot</code> directive. The dataset and options attributes define the chart data and options respectively.\nDataset and Options are defined within the HorizontalBarChartCtrl.</p>\n\n<tabset>\n    <tab heading="HTML">\n        <uxd-snippet language="html" [code]="htmlCode"></uxd-snippet>\n    </tab>\n\n    <tab heading="Javascript">\n        <uxd-snippet language="javascript" [code]="jsCode"></uxd-snippet>\n    </tab>\n</tabset>\n\n<blockquote>\n  <p><strong>Note</strong>: Refer to the <a routerLink="/charts/flot-options">Flot Options</a> page for details of chart options.</p>\n</blockquote>\n\n<p>Horizontal bar charts are an enhanced version of bar charts. For more information on options, refer to the bar chart documentation.</p>\n\n<blockquote>\n  <p>Refer to <a href="https://github.com/winne27/flot-valuelabels/wiki">flot-valuelabels</a> for more options on value labels.</p>\n</blockquote>\n\n<blockquote>\n    <p><strong>Note</strong>: To upgrade this component to use in an Angular 4 application use: <code>upgradeAdapter.upgradeNg1Component(\'uxFlotNg1\')</code></p>\n</blockquote>'},2136:function(t,e){t.exports='<div class="demo-chart-container">\n\n    <canvas baseChart \n            [datasets]="barChartData"\n            [labels]="barChartLabels"\n            [options]="barChartOptions"\n            [legend]="barChartLegend"\n            [colors]="barChartColors"\n            chartType="horizontalBar">\n    </canvas>\n\n</div>\n\n<hr>\n\n<p>\n    Horizontal Bar Charts can be added using the <code>ng2-charts</code> library. \n    The <code>chart.js</code> library needs to be imported and the <code>ChartsModule</code> needs to be added to the appropriate NgModule.\n</p>\n\n<br>\n\n<p>The <code>baseChart</code> directive should be added to a <code>canvas</code> element and the following attributes can be used to customize the chart behavior and appearance:</p>\n\n\n<table class="table">\n\n    <thead>\n        <tr>\n            <th>Name</th>\n            <th>Type</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n\n    <tbody>\n\n        <tr>\n            <td><b>@Input</b> datasets</td>\n            <td><b>object[]</b></td>\n            <td>Contains the data and properties for each data set to be displayed in the chart.</td>\n        </tr>\n\n        <tr>\n            <td><b>@Input</b> chartType</td>\n            <td><b>string</b></td>\n            <td>Indicates the type of the chart. Possible options are: <code>line</code>, <code>bar</code>, <code>radar</code>, <code>pie</code>, <code>polarArea</code>, <code>doughnut</code></td>\n        </tr>\n\n        <tr>\n            <td><b>@Input</b> options</td>\n            <td><b>ChartOptions</b></td>\n            <td>Configures the appearance and behavior of all aspects of the chart.</td>\n        </tr>\n\n        <tr>\n            <td><b>@Input</b> colors</td>\n            <td><b>object[]</b></td>\n            <td>Configure the color values to be used within the chart.</td>\n        </tr>\n\n        <tr>\n            <td><b>@Input</b> legend</td>\n            <td><b>boolean</b></td>\n            <td>Determines whether or not the legend should be displayed.</td>\n        </tr>\n\n        <tr>\n            <td><b>@Output</b> chartClick</td>\n            <td></td>\n            <td>Fires when click on a chart has occurred, returns information regarding active points and labels</td>\n        </tr>\n\n        <tr>\n            <td><b>@Output</b> chartHover</td>\n            <td></td>\n            <td>Fires when mousemove (hover) on a chart has occurred, returns information regarding active points and labels.</td>\n        </tr>\n\n    </tbody>\n</table>\n\n<p>Complete documentation on the directive and chart options can be found at the documentation links below.</p>\n\n<p>The following code can be used to create the example above: </p>\n\n<tabset>\n\n    <tab heading="HTML">\n        <uxd-snippet language="html" [code]="htmlCode"></uxd-snippet>\n    </tab>\n    \n    <tab heading="TypeScript">\n        <uxd-snippet language="javascript" [code]="tsCode"></uxd-snippet>\n    </tab>\n    \n    <tab heading="CSS">\n        <uxd-snippet language="css" [code]="cssCode"></uxd-snippet>\n    </tab>\n\n</tabset>\n\n<br>\n\n<blockquote>\n\n    <p class="m-b-nil">\n        <b>Dependencies: </b>\n        <a class="hyperlink" href="https://www.npmjs.com/package/ng2-charts">ng2-charts</a>, \n        <a class="hyperlink" href="https://www.npmjs.com/package/chart.js">chart.js</a>\n    </p>\n\n    <p class="m-b-nil">\n        <b>Type Definitions: </b>\n        <a class="hyperlink" href="https://www.npmjs.com/package/@types/chart.js">@types/chart.js</a>\n    </p>\n\n    <p class="m-b-nil">\n        <b>Modules: </b>\n        <span>ChartsModule</span>\n    </p>\n\n\n    <p class="m-b-nil">\n        <b>Documentation: </b>\n        <a class="hyperlink" href="http://valor-software.com/ng2-charts/">Angular Directive Documentation</a>, \n        <a class="hyperlink" href="http://www.chartjs.org/docs/">Chart Library Documentation</a>\n    </p>\n</blockquote>'},2137:function(t,e){t.exports='<div class="flot-chart-stack">\n    <ux-flot-ng1 [dataset]="data" [options]="options"></ux-flot-ng1>\n</div>\n\n<hr>\n\n<div class="demo-attributes table-responsive">\n    <table class="table">\n        <tbody>\n            <tr>\n                <th>Property</th>\n                <th>Type</th>\n                <th>Description</th>\n                <th>Optional</th>\n            </tr>\n            <tr>\n                <td class="attribute">label</td>\n                <td>string</td>\n                <td>Label name specified in the legend.</td>\n                <td>true</td>\n            </tr>\n            <tr>\n                <td class="attribute">data</td>\n                <td>number or array</td>\n                <td>An array of coordinates defining the data, e.g. [ [x1, y1], [x2, y2], ... ]</td>\n                <td>false</td>\n            </tr>\n            <tr>\n                <td class="attribute">color</td>\n                <td>color</td>\n                <td>Defines the color of each section.</td>\n                <td>true</td>\n            </tr>\n            <tr>\n                <td class="attribute">highlightColor</td>\n                <td>color</td>\n                <td>Default color of the translucent overlay used to highlight on mouse hover.</td>\n                <td>true</td>\n            </tr>\n            <tr>\n                <td class="attribute">forecastFillColor</td>\n                <td>color</td>\n                <td>Defines the fill color for the portion representing forecast data.</td>\n                <td>true</td>\n            </tr>\n            <tr>\n                <td class="attribute">forecastColor</td>\n                <td>color</td>\n                <td>Defines the stroke color for the portion representing forecast data.</td>\n                <td>true</td>\n            </tr>\n            <tr>\n                <td class="attribute">forecastHighLightColor</td>\n                <td>color</td>\n                <td>Default color of the translucent overlay used to highlight on mouse hover for the portion representing forecast\n                    data.</td>\n                <td>true</td>\n            </tr>\n            <tr>\n                <td class="attribute">forecastDashStyle</td>\n                <td>array</td>\n                <td>Defines a list of numbers that specifies distances to alternately draw a line and a gap (in coordinate space\n                    units). Similar to this property in HTML5 Canvas. Default is [5].</td>\n                <td>true</td>\n            </tr>\n            <tr>\n                <td class="attribute">forecastData</td>\n                <td>number or array</td>\n                <td>An array of coordinates defining the forecast or future data, e.g. [ [x1, y1], [x2, y2], ... ]</td>\n                <td>true</td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n\n<p>Stacked Bar Charts are defined by the <code>flot</code> directive. The dataset and options attributes\n    define the chart data and options respectively.</p>\n\n<tabset>\n    <tab heading="HTML">\n        <uxd-snippet language="html" [code]="htmlCode"></uxd-snippet>\n    </tab>\n\n    <tab heading="Javascript">\n        <uxd-snippet language="javascript" [code]="jsCode"></uxd-snippet>\n    </tab>\n</tabset>\n\n<div class="demo-attributes table-responsive">\n    <table class="table">\n        <tbody>\n            <tr>\n                <th>Property</th>\n                <th>Type</th>\n                <th>Description</th>\n                <th>Optional</th>\n            </tr>\n            <tr>\n                <td class="attribute">stack</td>\n                <td>boolean</td>\n                <td>If set to true shows the chart in stacked form.</td>\n                <td>true</td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n\n<blockquote>\n    <p><strong>Note</strong>: Refer to the <a routerLink="/charts/flot-options">Flot Options</a> page for details of chart options.</p>\n</blockquote>\n\n<p>Stacked bar charts are an enhanced version of bar charts. For more information on options, refer to the bar chart documentation.</p>\n\n<p>To convey chart information to users with assistive technologies, you can include a text version of the data. Use the\n    <code\n       >sr-only</code> class to make the text hidden but visible to screen readers, and give the container a <code>tabindex</code>        attribute so it can be reached with the keyboard, and place it near the chart.</p>\n\n<uxd-snippet language="html" [code]="accessibilityCode"></uxd-snippet>\n\n<p>The legends are custom-styled in this example. To place the legends separately from the chart, you can define a <code>div</code>    with an id and specify this in legend options. The <code>div</code> is then placed below the\n    HTML of the stacked bar chart. The styles and options applied here are:</p>\n\n<tabset>\n    <tab heading="Legend HTML">\n        <uxd-snippet language="html" [code]="legendHtml"></uxd-snippet>\n    </tab>\n\n    <tab heading="Legend CSS">\n        <uxd-snippet language="css" [code]="legendCss"></uxd-snippet>\n    </tab>\n\n    <tab heading="Legend Options">\n        <uxd-snippet language="javascript" [code]="legendJs"></uxd-snippet>\n    </tab>\n</tabset>\n\n<blockquote>\n    <p><strong>Note</strong>: To upgrade this component to use in an Angular 4 application use: <code>upgradeAdapter.upgradeNg1Component(\'uxFlotNg1\')</code></p>\n</blockquote>'},2138:function(t,e){t.exports='<div class="demo-chart-container-stack">\n\n    <canvas baseChart \n            [datasets]="barChartData"\n            [labels]="barChartLabels"\n            [options]="barChartOptions"\n            [legend]="barChartLegend"\n            [colors]="barChartColors"\n            chartType="bar">\n    </canvas>\n\n</div>\n\n<hr>\n\n<p>\n    Stacked Bar Charts can be added using the <code>ng2-charts</code> library. \n    The <code>chart.js</code> library needs to be imported and the <code>ChartsModule</code> needs to be added to the appropriate NgModule.\n</p>\n\n<br>\n\n<p>The <code>baseChart</code> directive should be added to a <code>canvas</code> element and the following attributes can be used to customize the chart behavior and appearance:</p>\n\n\n<table class="table">\n\n    <thead>\n        <tr>\n            <th>Name</th>\n            <th>Type</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n\n    <tbody>\n\n        <tr>\n            <td><b>@Input</b> datasets</td>\n            <td><b>object[]</b></td>\n            <td>Contains the data and properties for each data set to be displayed in the chart.</td>\n        </tr>\n\n        <tr>\n            <td><b>@Input</b> chartType</td>\n            <td><b>string</b></td>\n            <td>Indicates the type of the chart. Possible options are: <code>line</code>, <code>bar</code>, <code>radar</code>, <code>pie</code>, <code>polarArea</code>, <code>doughnut</code></td>\n        </tr>\n\n        <tr>\n            <td><b>@Input</b> options</td>\n            <td><b>ChartOptions</b></td>\n            <td>Configures the appearance and behavior of all aspects of the chart.</td>\n        </tr>\n\n        <tr>\n            <td><b>@Input</b> colors</td>\n            <td><b>object[]</b></td>\n            <td>Configure the color values to be used within the chart.</td>\n        </tr>\n\n        <tr>\n            <td><b>@Input</b> legend</td>\n            <td><b>boolean</b></td>\n            <td>Determines whether or not the legend should be displayed.</td>\n        </tr>\n\n        <tr>\n            <td><b>@Output</b> chartClick</td>\n            <td></td>\n            <td>Fires when click on a chart has occurred, returns information regarding active points and labels</td>\n        </tr>\n\n        <tr>\n            <td><b>@Output</b> chartHover</td>\n            <td></td>\n            <td>Fires when mousemove (hover) on a chart has occurred, returns information regarding active points and labels.</td>\n        </tr>\n\n    </tbody>\n</table>\n\n<p>Complete documentation on the directive and chart options can be found at the documentation links below.</p>\n\n<p>The following code can be used to create the example above: </p>\n\n<tabset>\n\n    <tab heading="HTML">\n        <uxd-snippet language="html" [code]="htmlCode"></uxd-snippet>\n    </tab>\n    \n    <tab heading="TypeScript">\n        <uxd-snippet language="javascript" [code]="tsCode"></uxd-snippet>\n    </tab>\n    \n    <tab heading="CSS">\n        <uxd-snippet language="css" [code]="cssCode"></uxd-snippet>\n    </tab>\n\n</tabset>\n\n<br>\n\n<blockquote>\n\n    <p class="m-b-nil">\n        <b>Dependencies: </b>\n        <a class="hyperlink" href="https://www.npmjs.com/package/ng2-charts">ng2-charts</a>, \n        <a class="hyperlink" href="https://www.npmjs.com/package/chart.js">chart.js</a>\n    </p>\n\n    <p class="m-b-nil">\n        <b>Type Definitions: </b>\n        <a class="hyperlink" href="https://www.npmjs.com/package/@types/chart.js">@types/chart.js</a>\n    </p>\n\n    <p class="m-b-nil">\n        <b>Modules: </b>\n        <span>ChartsModule</span>\n    </p>\n\n\n    <p class="m-b-nil">\n        <b>Documentation: </b>\n        <a class="hyperlink" href="http://valor-software.com/ng2-charts/">Angular Directive Documentation</a>, \n        <a class="hyperlink" href="http://www.chartjs.org/docs/">Chart Library Documentation</a>\n    </p>\n</blockquote>'},2429:function(t,e){t.exports='<span tabindex="0" class="sr-only">\n    <span ng-repeat="item in bc.barChart.data[0].data">{{item[1]}},</span>\n</span>'},2430:function(t,e){t.exports='<div class="flot-chart">\n    <flot dataset="bc.data" options="bc.options" on-plot-click="bc.barChart.onPlotClick(event,pos,item)"\n        on-hover-click="bc.barChart.onPlotHover(event,pos,item)">\n    </flot>\n</div>'},2431:function(t,e){t.exports="angular.module(\"app\").controller(\"BarChartCtrl\", BarChartCtrl);\n\nBarChartCtrl.$inject = ['$colorService'];\n\nfunction BarChartCtrl($colorService) {\n    var bc = this;\n\n    bc.data = [{\n        label: 'bar',\n        data: [\n            [1, 34],\n            [2, 25],\n            [3, 19],\n            [4, 34],\n            [5, 32],\n            [6, 44]\n        ],\n        forecastData: [\n            [7, 50],\n            [8, 67]\n        ]\n    }];\n\n    bc.options = {\n        series: {\n            bars: {\n                show: true,\n                fill: true,\n                fillColor: {\n                    colors: [{\n                        opacity: 0.1\n                    }, {\n                        opacity: 0.1\n                    }]\n                },\n                barWidth: 0.5,\n                lineWidth: 1,\n                align: 'center'\n            },\n            highlightColor: $colorService.getColor(\"chart1\").setAlpha(0.2).toRgba(),\n            forecastFillColor: $colorService.getColor(\"chart1\").setAlpha(0.3).toRgba(),\n            forecastColor: $colorService.getColor(\"chart1\").setAlpha(0.8).toRgba(),\n            forecastHighLightColor: $colorService.getColor(\"chart1\").setAlpha(0.2).toRgba(),\n            forecastDashStyle: [5]\n        },\n        xaxis: {\n            tickDecimals: 0,\n            color: $colorService.getColor(\"secondary\").toHex(),\n            ticks: [\n                [1, '.doc'],\n                [2, '.ppt'],\n                [3, '.pdf'],\n                [4, '.xls'],\n                [5, '.html'],\n                [6, '.txt'],\n                [7, '.csv'],\n                [8, '.mht']\n            ]\n\n        },\n        colors: [$colorService.getColor('primary').toRgb()],\n        grid: {\n            color: $colorService.getColor('grey4').toHex(),\n            hoverable: true,\n            clickable: true,\n            borderWidth: {\n                left: 1,\n                bottom: 1,\n                right: 0,\n                top: 0\n            },\n            borderColor: {\n                left: $colorService.getColor(\"grey2\").setAlpha(0.5).toRgba(),\n                bottom: $colorService.getColor(\"grey2\").setAlpha(0.5).toRgba()\n            }\n        },\n        legend: {\n            show: false\n        },\n        tooltip: {\n            show: true,\n            shifts: {\n                x: 0,\n                y: -30\n            },\n            content: function (label, xval, yval) {\n                var content = 'x: ' + '%x' + ', y: ' + yval;\n                return content;\n            }\n        }\n    };\n}"},2432:function(t,e){t.exports='<div class="flot-chart">\n    <flot dataset="bc.horizbarChart.data" options="bc.horizbarChart.baroptions" on-plot-click="bc.horizbarChart.onPlotClick(event,pos,item)"\n        on-hover-click="bc.horizbarChart.onPlotHover(event,pos,item)"></flot>\n</div>'},2433:function(t,e){t.exports="angular.module(\"app\").controller(\"HorizontalBarChartCtrl\", HorizontalBarChartCtrl);\n\nHorizontalBarChartCtrl.$inject = ['$colorService'];\n\nfunction HorizontalBarChartCtrl($colorService) {\n    var bc = this;\n\n    bc.horizbarChart = {\n        data: [{\n            label: 'bar',\n            data: [\n                [34, 1],\n                [25, 2],\n                [19, 3],\n                [34, 4],\n                [32, 5],\n                [44, 6]\n            ]\n        }],\n        baroptions: {\n            series: {\n                bars: {\n                    show: true,\n                    fill: true,\n                    fillColor: {\n                        colors: [{\n                            opacity: 0.1\n                        }, {\n                            opacity: 0.1\n                        }]\n                    },\n                    barWidth: 0.5,\n                    lineWidth: 1,\n                    horizontal: true,\n                    align: 'center'\n                },\n                highlightColor: [$colorService.getColor(\"chart1\").setAlpha(0.2).toRgba()],\n                valueLabels: {\n                    show: true,\n                    valign: 'top',\n                    plotAxis: 'y',\n                    xoffset: -30,\n                    yoffset: -5,\n                    font: '13px \\'Source Sans Pro\\'',\n                    fontcolor: '#545454',\n                    labelFormatter: function (v) {\n                        var ticks = ['.doc', '.ppt', '.pdf', '.xls', '.html', '.txt'];\n                        return ticks[parseInt(v) - 1];\n                    }\n                }\n            },\n            xaxis: {\n                tickDecimals: 0,\n                color: [$colorService.getColor(\"secondary\").toHex()]\n            },\n            yaxis: {\n                ticks: []\n            },\n            colors: [$colorService.getColor(\"chart1\").toRgb()],\n            grid: {\n                color: [$colorService.getColor('grey4').toHex()],\n                hoverable: true,\n                clickable: true,\n                borderWidth: {\n                    left: 1,\n                    bottom: 1,\n                    right: 0,\n                    top: 0\n                },\n                borderColor: {\n                    left: [$colorService.getColor(\"grey1\").setAlpha(0.2).toRgba()],\n                    bottom: [$colorService.getColor(\"grey1\").setAlpha(0.2).toRgba()]\n                }\n            },\n            legend: {\n                show: false\n            },\n            tooltip: {\n                show: true,\n                shifts: {\n                    x: 0,\n                    y: -38\n                },\n                content: function (label, xval, yval) {\n                    var ticks = ['.doc', '.ppt', '.pdf', '.xls', '.html', '.txt'];\n                    return 'x: ' + xval + ', y: ' + ticks[parseInt(yval) - 1];\n                }\n            }\n        }\n    };\n\n}"},2434:function(t,e){t.exports='<span tabindex="0" class="sr-only">\n    <span ng-repeat="item in bc.stackChart.data[0].data">{{item[1]}},</span>\n</span>'},2435:function(t,e){t.exports='<div class="flot-chart-stack">\n    <flot dataset="bc.stackBarChart.data" options="bc.stackBarChart.stackoptions" on-plot-click="bc.stackBarChart.onPlotClick(event, pos, item)"\n        on-hover-click="bc.stackBarChart.onPlotHover(event, pos, item)"></flot>\n</div>'},2436:function(t,e){t.exports='angular.module("app").controller("StackedBarChartCtrl", StackedBarChartCtrl);\n\nStackedBarChartCtrl.$inject = ["$colorService"];\n\nfunction StackedBarChartCtrl($colorService) {\n\n    var bc = this;\n\n    var flotChartColors = {\n        chartColor1: $colorService.getColor("chart1").setAlpha(0.7).toRgba(),\n        chartColor2: $colorService.getColor("chart2").setAlpha(0.7).toRgba(),\n        chartColor3: $colorService.getColor("chart3").setAlpha(0.7).toRgba(),\n        chartHover1: $colorService.getColor("chart1").setAlpha(0.2).toRgba(),\n        chartHover2: $colorService.getColor("chart2").setAlpha(0.3).toRgba(),\n        chartHover3: $colorService.getColor("chart3").setAlpha(0.3).toRgba(),\n        forecastColor1: $colorService.getColor("chart1").setAlpha(0.3).toRgba(),\n        forecastColor2: $colorService.getColor("chart2").setAlpha(0.2).toRgba(),\n        forecastColor3: $colorService.getColor("chart3").setAlpha(0.2).toRgba(),\n        gridColor: $colorService.getColor("grey4").toHex(),\n        tickColor: $colorService.getColor("grey6").toHex(),\n        transparent: "rgba(0, 0, 0, 0)",\n        borderColor: $colorService.getColor("grey2").toHex()\n    };\n\n    var d1 = [],\n        d2 = [],\n        d3 = [],\n        fd1 = [],\n        fd2 = [],\n        fd3 = [];\n\n    for (var i = 1; i <= 10; i += 1) {\n        d1.push([i, parseInt(Math.random() * 10000)]);\n        d2.push([i, parseInt(Math.random() * 10000)]);\n        d3.push([i, parseInt(Math.random() * 10000)]);\n    }\n\n    for (i = 11; i <= 13; i++) {\n        fd1.push([i, parseInt(Math.random() * 10000)]);\n        fd2.push([i, parseInt(Math.random() * 10000)]);\n        fd3.push([i, parseInt(Math.random() * 10000)]);\n    }\n\n    function euroFormatter(v, axis) {\n        return v.toFixed(axis.tickDecimals) + "€";\n    }\n\n    bc.stackBarChart = {\n        data: [{\n            label: "Sales 1",\n            data: d1,\n            color: [flotChartColors.chartColor1],\n            highlightColor: [flotChartColors.chartHover1],\n            forecastData: fd1,\n            forecastFillColor: [flotChartColors.forecastColor1],\n            forecastColor: [flotChartColors.chartColor1],\n            forecastHighLightColor: [flotChartColors.chartHover1],\n            forecastDashStyle: [5]\n        }, {\n            label: "Sales 2",\n            data: d2,\n            color: [flotChartColors.chartColor2],\n            highlightColor: [flotChartColors.chartHover2],\n            forecastData: fd2,\n            forecastFillColor: [flotChartColors.forecastColor2],\n            forecastColor: [flotChartColors.chartColor2],\n            forecastHighLightColor: [flotChartColors.chartColor2],\n            forecastDashStyle: [5]\n        }, {\n            label: "Sales 3",\n            data: d3,\n            color: [flotChartColors.chartColor3],\n            highlightColor: [flotChartColors.chartHover3],\n            forecastData: fd3,\n            forecastFillColor: [flotChartColors.forecastColor3],\n            forecastColor: [flotChartColors.chartColor3],\n            forecastHighLightColor: [flotChartColors.chartHover3],\n            forecastDashStyle: [5]\n        }],\n        stackoptions: {\n            series: {\n                stack: true,\n                bars: {\n                    show: true,\n                    barWidth: 0.6,\n                    lineWidth: 0,\n                    align: "center"\n                }\n            },\n            xaxis: {\n                tickColor: "transparent"\n            },\n            yaxis: {\n                tickFormatter: euroFormatter\n            },\n            grid: {\n                color: [flotChartColors.gridColor],\n                hoverable: true,\n                clickable: true,\n                tickcolor: [flotChartColors.tickColor],\n                borderWidth: {\n                    "left": 1,\n                    "bottom": 1,\n                    "right": 0,\n                    "top": 0\n                },\n                borderColor: {\n                    "left": [flotChartColors.borderColor],\n                    "bottom": [flotChartColors.borderColor]\n                }\n            },\n            legend: {\n                show: true,\n                container: "#legendHolderBar",\n                noColumns: 0\n            },\n            tooltip: {\n                show: true,\n                shifts: {\n                    x: 0,\n                    y: -44\n                },\n                content: "<strong>%s</strong><br/><span class=\\"font-size-small\\"> %y in cycle %x</span>"\n            }\n        }\n    };\n}'},2437:function(t,e){t.exports="#legendHolderBar {\n    margin-left: 33%;\n}\n\n#legendHolderBar .legendLabel {\n    padding-right:40px;\n    font-size:16px;\n    padding-left: 6px;\n}\n\n#legendHolderBar .legendColorBox > div {\n    border: 0px !important;\n}\n\n#legendHolderBar .legendColorBox > div > div {\n    opacity:0.5;\n}"},2438:function(t,e){t.exports='<div class="flot-chart-stack">\n    ...\n</div>\n<div id="legendHolderBar" class="p-l-lg"></div>'},2439:function(t,e){t.exports='...\nlegend: {\n    show: true,\n    container:"#legendHolderBar",\n    noColumns: 0\n},\n...'}});