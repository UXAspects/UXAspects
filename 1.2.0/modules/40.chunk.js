webpackJsonp([40],{1832:function(e,n,a){"use strict";var t=this&&this.__decorate||function(e,n,a,t){var l,d=arguments.length,i=d<3?n:null===t?t=Object.getOwnPropertyDescriptor(n,a):t;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,n,a,t);else for(var o=e.length-1;o>=0;o--)(l=e[o])&&(i=(d<3?l(i):d>3?l(n,a,i):l(n,a))||i);return d>3&&i&&Object.defineProperty(n,a,i),i};Object.defineProperty(n,"__esModule",{value:!0});var l=a(0),d=a(285),i=function(){function e(){this.htmlCode=a(2577),this.containerHtmlCode=a(2575),this.panelHtmlCode=a(2576),this.codepen={html:this.htmlCode}}return e}();i=t([l.Component({selector:"uxd-draggable-panels-ng1",template:a(2185)}),d.DocumentationSectionComponent("ComponentsDraggablePanelsNg1Component")],i),n.ComponentsDraggablePanelsNg1Component=i},1833:function(e,n,a){"use strict";var t=this&&this.__decorate||function(e,n,a,t){var l,d=arguments.length,i=d<3?n:null===t?t=Object.getOwnPropertyDescriptor(n,a):t;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,n,a,t);else for(var o=e.length-1;o>=0;o--)(l=e[o])&&(i=(d<3?l(i):d>3?l(n,a,i):l(n,a))||i);return d>3&&i&&Object.defineProperty(n,a,i),i};Object.defineProperty(n,"__esModule",{value:!0});var l=a(0),d=a(285),i=function(){function e(){this.htmlCode=a(2579),this.cssCode=a(2578),this.javascriptCode=a(2580),this.codepen={html:this.htmlCode,htmlAttributes:{"ng-controller":"DraggablePanelsViewsDemoCtrl as vm"},css:[this.cssCode],js:[this.javascriptCode]}}return e}();i=t([l.Component({selector:"uxd-draggable-panels-views-ng1",template:a(2186),styles:[a(3064)],encapsulation:l.ViewEncapsulation.None}),d.DocumentationSectionComponent("ComponentsDraggablePanelsViewsNg1Component")],i),n.ComponentsDraggablePanelsViewsNg1Component=i},1834:function(e,n,a){"use strict";var t=this&&this.__decorate||function(e,n,a,t){var l,d=arguments.length,i=d<3?n:null===t?t=Object.getOwnPropertyDescriptor(n,a):t;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,n,a,t);else for(var o=e.length-1;o>=0;o--)(l=e[o])&&(i=(d<3?l(i):d>3?l(n,a,i):l(n,a))||i);return d>3&&i&&Object.defineProperty(n,a,i),i},l=this&&this.__metadata||function(e,n){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,n)};Object.defineProperty(n,"__esModule",{value:!0});var d=a(0),i=a(19),o=a(286),s=a(150),r=a(287),c=a(1832),g=a(1833),p=a(289),h=a(288),u=[c.ComponentsDraggablePanelsNg1Component,g.ComponentsDraggablePanelsViewsNg1Component],b=[{path:"**",component:r.DocumentationCategoryComponent,data:{category:s.ResolverService.resolveCategoryData(s.DocumentationPage.Components,"Draggable Panels")}}],m=function(){function e(e,n){n.registerResolver(e)}return e}();m=t([d.NgModule({imports:[p.WrappersModule,h.TabsModule,o.DocumentationComponentsModule,i.RouterModule.forChild(b)],exports:u,declarations:u,entryComponents:u}),l("design:paramtypes",[d.ComponentFactoryResolver,s.ResolverService])],m),n.ComponentsDraggablePanelsModule=m},2088:function(e,n,a){n=e.exports=a(9)(void 0),n.push([e.i,".draggable-panel-list-demo {\n  background-color: #f7f7f7;\n  height: 400px;\n}\n.body-dark .draggable-panel-list-demo {\n  background-color: #404040;\n}\n.body-dark .draggable-panel-list-demo div {\n  background-color: #444444;\n}\n.draggable-panel-list-demo div {\n  background-color: #ffffff;\n}\n.list-item-large-demo {\n  height: 130px;\n}\n.list-item-small-demo {\n  height: 50px;\n}\n",""])},2185:function(e,n){e.exports='<uxd-draggable-panels-wrapper></uxd-draggable-panels-wrapper>\n\n<hr>\n\n<h4 id="draggable-panel-container">Draggable Panel Container</h4>\n\n<p>Draggable functionality can be implemented by adding a <code>draggable-panel-container</code> directive to the page. \nThis will act as a container for any <code>draggable-panel</code> directives.</p>\n\n<uxd-snippet [code]="containerHtmlCode" language="html"></uxd-snippet>\n\n<p>To specify the size of the <code>draggable-panel-container</code> you can apply a class that will set the width and height, such as <code>.col-xs-6</code> as in the sample code above.</p>\n\n<p>It is possible to have multiple <code>draggable-panel-container</code> elements on one page. \nBy default any <code>draggable-panel</code> can be moved to any <code>draggable-panel-container</code>, however this can be restricted.</p>\n\n<p>If a <code>draggable-group</code> attribute has been added this will limit which <code>draggable-panel</code> elements can be moved to which <code>draggable-panel-container</code>. \nAny <code>draggable-panel-container</code> elements that share the same <code>draggable-group</code> can move <code>draggable-panel</code> elements between each other.</p>\n\n<h4 id="events">Events</h4>\n\n<p>You can also add the following attributes to a <code>draggable-panel-container</code> directive to specify which function to be called when certain events occur.</p>\n<div class="demo-attributes table-responsive">\n<table class="table">\n  <tbody><tr>\n    <th>Name</th>\n    <th>Type</th>\n    <th>Binding</th>\n    <th>Description</th>\n    <th>Optional</th>\n  </tr>\n  <tr>\n    <td class="attribute">on-drag-start</td>\n    <td>function</td>\n    <td>variable</td>\n    <td>Will be called when the user first begins to move a panel.</td>\n    <td>true</td>\n  </tr>\n  <tr>\n    <td class="attribute">on-drag-over</td>\n    <td>function</td>\n    <td>variable</td>\n    <td>Will be called when the user moves a panel over a <code>draggable-panel-container</code>.</td>\n    <td>true</td>\n  </tr>\n  <tr>\n    <td class="attribute">on-drag-end</td>\n    <td>function</td>\n    <td>variable</td>\n    <td>Will be called when the user finishes dragging a panel.</td>\n    <td>true</td>\n  </tr>\n</tbody></table>\n</div>\n<p>Each function should expect two arguments:</p>\n\n<ul>\n  <li><code>event</code> - event, contains the mouse event that was triggered.</li>\n  <li><code>ui</code> - object, contains information about the panel being dragged.\n    <ul>\n      <li><code>item</code> - object, represents the current dragged element.</li>\n      <li><code>offset</code> - object, absolute position represented as {{\'{\'}} top, left }.</li>\n      <li><code>position</code> - object, current position represented as {{\'{\'}} top, left }.</li>\n      <li><code>originalPosition</code> - object, original position represented as {{\'{\'}} top, left }.</li>\n      <li><code>sender</code> - object, the source <code>draggable-panel-container</code> if moving a <code>draggable-panel</code> from one <code>draggable-panel-container</code> to another.</li>\n      <li><code>placeholder</code> - object, the element being used as a placeholder.</li>\n    </ul>\n  </li>\n</ul>\n\n<h4 id="draggable-panels">Draggable Panels</h4>\n\n<p>To identify which elements should be draggable use the <code>draggable-panel</code> directive. \nThe <code>draggable-panel</code> directives should be placed within the <code>draggable-card-container</code> they will begin in.</p>\n\n<uxd-snippet [code]="panelHtmlCode" language="html"></uxd-snippet>\n\n<p>The <code>draggable-panel</code> directive should contain a single <code>div</code> element which will become the draggable panel. \nThis <code>div</code> can be styled in any way and have child elements.</p>\n\n<h4 id="drag-handle">Drag Handle</h4>\n\n<p>An element within the <code>draggable-panel</code> directive should be given the <code>drag-handle</code> attribute. \nThis will identify the element that the user must mouse down on to drag the panel. \nIf the user should be allowed to drag anywhere within the panel simply apply the attribute to the <code>div</code> immediately inside the <code>draggable-panel</code>.</p>\n\n<h4 id="sample-code">Sample Code</h4>\n\n<p>The following code is used to produce the example displayed at the top of the page. \nThis example uses two different <code>draggable-panel-container</code> elements, both with the same <code>draggable-group</code> so cards can be moved between them.</p>\n\n<uxd-snippet [code]="htmlCode" language="html"></uxd-snippet>'},2186:function(e,n){e.exports='<uxd-draggable-panels-views-wrapper></uxd-draggable-panels-views-wrapper>\n\n<hr>\n\n<p>Above is an example of the draggable panels using the <code>draggable-view</code> attribute. The sample code to re-create this has been supplied below and the classes used to style the demo can be used or replaced with custom styling.</p>\n\n<tabset>\n    <tab heading="HTML">\n        <uxd-snippet [code]="htmlCode" language="html"></uxd-snippet>\n    </tab>\n    <tab heading="JavaScript">\n        <uxd-snippet [code]="javascriptCode" language="javascript"></uxd-snippet>\n    </tab>\n    <tab heading="CSS">\n        <uxd-snippet [code]="cssCode" language="css"></uxd-snippet>\n    </tab>\n</tabset>'},2575:function(e,n){e.exports='<draggable-panel-container class="col-xs-6" draggable-group="my-draggable-list">\n  \x3c!-- Panels Go Here --\x3e\n</draggable-panel-container>'},2576:function(e,n){e.exports='<draggable-panel>\n    <div class="hpebox">\n        <div class="hpebox-title">\n            <div class="hpebox-draghandle drag-handle" drag-handle></div>\n            <h3>Draggable 1</h3>\n        </div>\n        <div class="hpebox-content">\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum...</p>\n        </div>\n    </div>\n</draggable-panel>'},2577:function(e,n){e.exports='<div class="row">\n    <draggable-panel-container class="col-xs-6" draggable-group="my-draggable-list" render-delay>\n\n        <draggable-panel>\n            <div class="hpebox">\n                <div class="hpebox-title">\n                    <div class="hpebox-draghandle drag-handle" drag-handle></div>\n                    <h3>Draggable 1</h3>\n                </div>\n                <div class="hpebox-content">\n                    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum tincidunt est vitae ultrices accumsan.\n                        Aliquam ornare lacus adipiscing, posuere lectus et, fringilla augue.</p>\n                </div>\n            </div>\n        </draggable-panel>\n\n        <draggable-panel>\n            <div class="hpebox">\n                <div class="hpebox-title">\n                    <div class="hpebox-draghandle drag-handle" drag-handle></div>\n                    <h3>Draggable 2</h3>\n                </div>\n                <div class="hpebox-content">\n                    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum tincidunt est vitae ultrices accumsan.\n                        Aliquam ornare lacus adipiscing, posuere lectus et, fringilla augue.</p>\n                </div>\n            </div>\n        </draggable-panel>\n\n    </draggable-panel-container>\n\n    <draggable-panel-container class="col-xs-6" draggable-group="my-draggable-list" render-delay>\n\n        <draggable-panel>\n            <div class="hpebox">\n                <div class="hpebox-title">\n                    <div class="hpebox-draghandle drag-handle" drag-handle></div>\n                    <h3>Draggable 3</h3>\n                </div>\n                <div class="hpebox-content">\n                    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum tincidunt est vitae ultrices accumsan.\n                        Aliquam ornare lacus adipiscing, posuere lectus et, fringilla augue.</p>\n                </div>\n            </div>\n        </draggable-panel>\n\n        <draggable-panel>\n            <div class="hpebox">\n                <div class="hpebox-title">\n                    <div class="hpebox-draghandle drag-handle" drag-handle></div>\n                    <h3>Draggable 4</h3>\n                </div>\n                <div class="hpebox-content">\n                    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum tincidunt est vitae ultrices accumsan.\n                        Aliquam ornare lacus adipiscing, posuere lectus et, fringilla augue.</p>\n                </div>\n            </div>\n        </draggable-panel>\n\n        <draggable-panel>\n            <div class="hpebox">\n                <div class="hpebox-title">\n                    <div class="hpebox-draghandle drag-handle" drag-handle></div>\n                    <h3>Draggable 5</h3>\n                </div>\n                <div class="hpebox-content">\n                    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum tincidunt est vitae ultrices accumsan.\n                        Aliquam ornare lacus adipiscing, posuere lectus et, fringilla augue.</p>\n                </div>\n            </div>\n        </draggable-panel>\n\n    </draggable-panel-container>\n</div>'},2578:function(e,n){e.exports=".draggable-panel-list-demo {\n\tbackground-color: #f7f7f7;\n\theight: 400px;\n}\n\n.body-dark .draggable-panel-list-demo {\n\tbackground-color: #404040;\n}\n\n.body-dark .draggable-panel-list-demo div {\n\tbackground-color: #444444;\n}\n\n.draggable-panel-list-demo div {\n\tbackground-color: #ffffff;\n}\n\n.list-item-large-demo {\n\theight: 130px;\n}\n\n.list-item-small-demo {\n\theight: 50px;\n}"},2579:function(e,n){e.exports='<div class="row">\n\n    <div class="m-l-md">\n        <h4>Drag cards to add them to the list</h4>\n    </div>\n\n    <draggable-panel-container class="col-xs-6 draggable-panel-card-container p-l-md p-r-nil" draggable-group="my-draggable-list"\n        draggable-view="card" on-drag-start="vm.onDragStart" on-drag-end="vm.onDragEnd" custom-placeholder-size="true">\n\n        <draggable-panel>\n            <div class="draggable-panel-card card">\n                <div class="gutter" drag-handle>\n                    <div class="drag-handle"></div>\n                </div>\n                <div class="content">\n                    <i class="hpe-icon hpe-down p-t-sm p-b-sm m-b-xs" aria-hidden="true"></i>\n                    <h4 class="m-t-nil m-b-md">Dropdown</h4>\n                    <p class="align-left inline m-t-xs">Dropdown</p>\n                    <p class="align-right inline p-r-sm m-t-xs lighten">Dropdown</p>\n                </div>\n            </div>\n\n            <div class="draggable-panel-list list list-item-small-demo">\n                <div class="gutter" drag-handle>\n                    <div class="drag-handle"></div>\n                </div>\n                <div class="title">\n                    <p>Dropdown</p>\n                </div>\n                <div class="content">\n                    <div class="btn-group">\n                        <button type="button" class="btn button-secondary">Action </button>\n                        <button data-toggle="dropdown" class="btn button-secondary dropdown-toggle" aria-expanded="false">\n                <span class="hpe-icon hpe-down"></span>\n                <span class="sr-only">Toggle Dropdown</span>\n              </button>\n                        <ul class="dropdown-menu" role="menu" aria-labelledby="btnDropDown2">\n                            <li><a>Action</a></li>\n                            <li><a>Another action</a></li>\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        </draggable-panel>\n\n        <draggable-panel>\n            <div class="draggable-panel-card card">\n                <div class="gutter" drag-handle>\n                    <div class="drag-handle"></div>\n                </div>\n                <div class="content">\n                    <i class="hpe-icon hpe-document-text p-t-sm p-b-sm m-b-xs" aria-hidden="true"></i>\n                    <h4 class="m-t-nil m-b-md">Comments</h4>\n                    <p class="align-left inline m-t-xs">Text area</p>\n                    <p class="align-right inline p-r-sm m-t-xs lighten">Text</p>\n                </div>\n            </div>\n\n            <div class="draggable-panel-list list list-item-large-demo">\n                <div class="gutter" drag-handle>\n                    <div class="drag-handle"></div>\n                </div>\n                <div class="title">\n                    <p>Comments</p>\n                </div>\n                <div class="content">\n                    <textarea class="form-control inline" rows="4" placeholder="Enter text"></textarea>\n                </div>\n            </div>\n        </draggable-panel>\n\n        <draggable-panel>\n            <div class="draggable-panel-card card">\n                <div class="gutter" drag-handle>\n                    <div class="drag-handle"></div>\n                </div>\n                <div class="content">\n                    <i class="hpe-icon hpe-divide p-t-sm p-b-sm m-b-xs" aria-hidden="true"></i>\n                    <h4 class="m-t-nil m-b-md">Buttons</h4>\n                    <p class="align-left inline m-t-xs">Single Select</p>\n                    <p class="align-right inline p-r-sm m-t-xs lighten">Text</p>\n                </div>\n            </div>\n\n            <div class="draggable-panel-list list list-item-small-demo">\n                <div class="gutter" drag-handle>\n                    <div class="drag-handle"></div>\n                </div>\n                <div class="title">\n                    <p>Buttons</p>\n                </div>\n                <div class="content">\n                    <div class="btn-group" role="group" aria-label="Alignment">\n                        <button class="btn button-secondary btn-grouped" type="button">Left</button>\n                        <button class="btn button-secondary btn-grouped" type="button">Right</button>\n                    </div>\n                </div>\n            </div>\n        </draggable-panel>\n\n    </draggable-panel-container>\n\n    <draggable-panel-container class="col-xs-6 p-r-nil p-l-nil draggable-panel-list-container draggable-panel-list-demo" draggable-group="my-draggable-list"\n        draggable-view="list" custom-placeholder-size="true">\n\n    </draggable-panel-container>\n</div>'},2580:function(e,n){e.exports="angular.module('app').controller('DraggablePanelsViewsDemoCtrl', DraggablePanelsViewsDemoCtrl);\n\nfunction DraggablePanelsViewsDemoCtrl() {\n    var vm = this;\n\n    // store reference to the container element for better performance\n    var listContainer;\n\n    function getContainer() {\n        // if container has already been found then return it\n        if (listContainer) { return listContainer; }\n\n        // otherwise find the element\n        listContainer = angular.element(document.getElementsByClassName('draggable-panel-list-container')[0]);\n\n        // return found element\n        return listContainer;\n    }\n\n    vm.onDragStart = function (panel) {\n        if (panel.toElement && panel.toElement.className === 'drag-handle') {\n            panel.toElement.parentElement.classList.add('panel-dragging');\n        } else if (panel.toElement) {\n            panel.toElement.classList.add('panel-dragging');\n        }\n\n        getContainer().addClass('draggable-panel-highlight');\n    };\n\n    vm.onDragEnd = function (panel) {\n        if (panel.toElement && panel.toElement.className === 'drag-handle') {\n            panel.toElement.parentElement.classList.remove('panel-dragging');\n        } else if (panel.toElement) {\n            panel.toElement.classList.remove('panel-dragging');\n        }\n\n        getContainer().removeClass('draggable-panel-highlight');\n    };\n}\n"},3064:function(e,n,a){var t=a(2088);e.exports="string"==typeof t?t:t.toString()}});