webpackJsonp([24],{1517:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t,n,o,i){this.snippets={compiled:{},raw:{}},this.loadSnippetsFromRequireContext(this.snippets.raw,i),this.snippets.compiled=this.snippets.raw}return e.prototype.loadSnippetsFromRequireContext=function(e,t){t&&t.keys().forEach(function(n){var o=n.replace("./","").replace(/\W+(\w)/g,function(e){return e[1].toUpperCase()});e[o]=t(n)})},e}();t.BaseDocumentationSection=o},1723:function(e,t,n){function o(e){return n(i(e))}function i(e){var t=a[e];if(!(t+1))throw new Error("Cannot find module '"+e+"'.");return t}var a={"./controller.js":2733,"./layout.example.html":2734,"./layout.html":2735,"./styles.css":2736};o.keys=function(){return Object.keys(a)},o.resolve=i,e.exports=o,o.id=1723},1724:function(e,t,n){function o(e){return n(i(e))}function i(e){var t=a[e];if(!(t+1))throw new Error("Cannot find module '"+e+"'.");return t}var a={"./controller.js":2737,"./itemTemplate.html":330,"./layout.html":2738,"./styles.css":2739};o.keys=function(){return Object.keys(a)},o.resolve=i,e.exports=o,o.id=1724},1725:function(e,t,n){function o(e){return n(i(e))}function i(e){var t=a[e];if(!(t+1))throw new Error("Cannot find module '"+e+"'.");return t}var a={"./controller.js":2740,"./itemTemplate.html":331,"./layout.html":2741,"./styles.css":2742};o.keys=function(){return Object.keys(a)},o.resolve=i,e.exports=o,o.id=1725},1905:function(e,t,n){"use strict";var o=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),i=this&&this.__decorate||function(e,t,n,o){var i,a=arguments.length,r=a<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,o);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(r=(a<3?i(r):a>3?i(t,n,r):i(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},a=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),s=n(1517),l=n(285),c=function(e){function t(){var t=e.call(this,null,null,null,null,n(1723))||this;return t.codepen={html:t.snippets.raw.layoutHtml,htmlAttributes:{"ng-controller":"CustomScrollbarDemoCtrl as vm"},css:[t.snippets.raw.stylesCss],js:[t.snippets.raw.controllerJs]},t}return o(t,e),t}(s.BaseDocumentationSection);c=i([r.Component({selector:"uxd-custom-scrollbar-ng1",template:n(2246),styles:[n(3075)],encapsulation:r.ViewEncapsulation.None,changeDetection:r.ChangeDetectionStrategy.OnPush}),l.DocumentationSectionComponent("ComponentsCustomScrollbarNg1Component"),a("design:paramtypes",[])],c),t.ComponentsCustomScrollbarNg1Component=c},1906:function(e,t,n){"use strict";var o=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),i=this&&this.__decorate||function(e,t,n,o){var i,a=arguments.length,r=a<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,o);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(r=(a<3?i(r):a>3?i(t,n,r):i(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},a=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),s=n(1517),l=n(285),c=function(e){function t(){var t=e.call(this,null,null,null,null,n(1724))||this;return t.codepen={html:t.snippets.raw.layoutHtml,htmlAttributes:{"ng-controller":"InfiniteScrollLoadMoreDemoCtrl as vm"},htmlTemplates:[{id:"itemTemplate.html",content:t.snippets.raw.itemTemplateHtml}],css:[t.snippets.raw.stylesCss],js:[t.snippets.raw.controllerJs]},t}return o(t,e),t}(s.BaseDocumentationSection);c=i([r.Component({selector:"uxd-infinite-scroll-load-more-ng1",template:n(2247),styles:[n(3076)],encapsulation:r.ViewEncapsulation.None,changeDetection:r.ChangeDetectionStrategy.OnPush}),l.DocumentationSectionComponent("ComponentsInfiniteScrollLoadMoreNg1Component"),a("design:paramtypes",[])],c),t.ComponentsInfiniteScrollLoadMoreNg1Component=c},1907:function(e,t,n){"use strict";var o=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),i=this&&this.__decorate||function(e,t,n,o){var i,a=arguments.length,r=a<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,o);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(r=(a<3?i(r):a>3?i(t,n,r):i(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},a=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),s=n(1517),l=n(285),c=function(e){function t(){var t=e.call(this,null,null,null,null,n(1725))||this;return t.codepen={html:t.snippets.raw.layoutHtml,htmlAttributes:{"ng-controller":"InfiniteScrollDemoCtrl as vm"},htmlTemplates:[{id:"itemTemplate.html",content:t.snippets.raw.itemTemplateHtml}],css:[t.snippets.raw.stylesCss],js:[t.snippets.raw.controllerJs]},t}return o(t,e),t}(s.BaseDocumentationSection);c=i([r.Component({selector:"uxd-infinite-scroll-ng1",template:n(2248),styles:[n(3077)],encapsulation:r.ViewEncapsulation.None,changeDetection:r.ChangeDetectionStrategy.OnPush}),l.DocumentationSectionComponent("ComponentsInfiniteScrollNg1Component"),a("design:paramtypes",[])],c),t.ComponentsInfiniteScrollNg1Component=c},1908:function(e,t,n){"use strict";var o=this&&this.__decorate||function(e,t,n,o){var i,a=arguments.length,r=a<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,o);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(r=(a<3?i(r):a>3?i(t,n,r):i(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},i=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var a=n(0),r=n(19),s=n(286),l=n(150),c=n(287),d=n(1905),u=n(1907),p=n(1906),m=n(289),h=n(288),f=[d.ComponentsCustomScrollbarNg1Component,u.ComponentsInfiniteScrollNg1Component,p.ComponentsInfiniteScrollLoadMoreNg1Component],b=[{path:"**",component:c.DocumentationCategoryComponent,data:{category:l.ResolverService.resolveCategoryData(l.DocumentationPage.Components,"Scrollbar")}}],g=function(){function e(e,t){t.registerResolver(e)}return e}();g=o([a.NgModule({imports:[m.WrappersModule,h.TabsModule,s.DocumentationComponentsModule,r.RouterModule.forChild(b)],exports:f,declarations:f,entryComponents:f}),i("design:paramtypes",[a.ComponentFactoryResolver,l.ResolverService])],g),t.ComponentsScrollbarModule=g},2100:function(e,t,n){t=e.exports=n(9)(void 0),t.push([e.i,".scroll-example {\n  overflow: auto;\n  height: 300px;\n  border: 1px solid #e7eaec;\n}\n.scroll-example h4 {\n  margin-top: 0;\n}\n",""])},2101:function(e,t,n){t=e.exports=n(9)(void 0),t.push([e.i,".employee-list-container {\n  border: 1px solid #ddd;\n  padding: 5px;\n  padding-left: 0;\n}\n.employee-list {\n  width: 100%;\n  height: 250px;\n}\n.employee-item {\n  width: 100%;\n  height: 65px;\n  padding: 10px 20px;\n  border-bottom: 1px solid #eee;\n}\n.body-dark .employee-list {\n  border: 1px solid #666666;\n}\n.body-dark .employee-item {\n  border-bottom: 1px solid #666666;\n}\n.body-dark .employee-item .text-black {\n  color: #fff !important;\n}\n",""])},2102:function(e,t,n){t=e.exports=n(9)(void 0),t.push([e.i,".employee-list-container {\n  border: 1px solid #ddd;\n  padding: 5px;\n  padding-left: 0;\n}\n.employee-list {\n  width: 100%;\n  height: 250px;\n}\n.employee-item {\n  width: 100%;\n  height: 65px;\n  padding: 10px 20px;\n  border-bottom: 1px solid #eee;\n}\n.body-dark .employee-list {\n  border: 1px solid #666666;\n}\n.body-dark .employee-item {\n  border-bottom: 1px solid #666666;\n}\n.body-dark .employee-item .text-black {\n  color: #fff !important;\n}\n",""])},2246:function(e,t){e.exports='<uxd-custom-scrollbar-wrapper></uxd-custom-scrollbar-wrapper>\n\n<hr>\n\n<p>Custom scrollbar implements vertical scrollbar and does not support horizontal scrollbar.</p>\n\n<p>Custom scrollbar can be used on elements with a relevant overflow property. The scrollbar can be added to an element by providing\n  the <code>scroll-pane</code> attribute. The element should have an <code>id</code> or an attribute <code>scroll-name</code>\n  which is assigned an id for the scrollbar to work. The options for scrollbar should be passed to the <code>scroll-config</code>\n  attribute. Some of the options are:</p>\n<div class="demo-attributes table-responsive">\n  <table class="table m-t">\n    <tbody>\n      <tr>\n        <th>Name</th>\n        <th>Type</th>\n        <th>Description</th>\n      </tr>\n      <tr>\n        <td class="attribute">showOnlyOnHover</td>\n        <td>boolean</td>\n        <td>The scrollbar will be displayed only on hover when this option is set to <code>true</code>.</td>\n      </tr>\n      <tr>\n        <td class="attribute">resizeSensor</td>\n        <td>boolean</td>\n        <td>The scrollbar will be re-initialised automatically when the content changes size or the viewport size changes. Use\n          <code>resizeSensorDelay</code> property to add a delay before reinitialising.</td>\n      </tr>\n      <tr>\n        <td class="attribute">autoReinitialise</td>\n        <td>boolean</td>\n        <td>An alternative to the resizeSensor property. This is a less performant option and uses polling to check for size\n          changes, however in certain circumstances due to positioning of elements resizeSensor may not be suitable. The\n          scrollbar will be re-initialised automatically when there is a change in size of the viewport.</td>\n      </tr>\n      <tr>\n        <td class="attribute">enableKeyboardNavigation</td>\n        <td>boolean</td>\n        <td>The content will scroll using keyboard controls when it is given focus.</td>\n      </tr>\n      <tr>\n        <td class="attribute">isScrollableH</td>\n        <td>boolean</td>\n        <td>Disables the horizontal scrollbar when this option is set to <code>false</code>.</td>\n      </tr>\n      <tr>\n        <td class="attribute">scrollMargin</td>\n        <td>number</td>\n        <td>Margin in pixels to add around the scrollable area. The recommended margin as seen in the example above is 5. Default is 0.</td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n<p>Example code for custom scrollbar is shown below:</p>\n\n<tabset>\n  <tab heading="HTML">\n    <uxd-snippet [content]="snippets.compiled.layoutExampleHtml" language="html"></uxd-snippet>\n  </tab>\n  <tab heading="JavaScript">\n    <uxd-snippet [content]="snippets.compiled.controllerJs" language="javascript"></uxd-snippet>\n  </tab>\n  <tab heading="CSS">\n    <uxd-snippet [content]="snippets.compiled.stylesCss" language="css"></uxd-snippet>\n  </tab>\n</tabset>\n\n<blockquote>\n  <p>Refer to <a href="http://jscrollpane.kelvinluck.com/">jScrollPane</a> and <a href="https://github.com/lght/angular-scroll-pane">angular-scroll-pane</a>\n    for more information.</p>\n</blockquote>'},2247:function(e,t){e.exports='<uxd-infinite-scroll-load-more-wrapper></uxd-infinite-scroll-load-more-wrapper>\n\n<hr>\n\n<p>The above example shows how the infinite scroll list will be displayed if a <code>load-more-button</code> is added.</p>\n\n<p>The following code was used to create the above example:</p>\n\n<tabset>\n  <tab heading="HTML">\n    <uxd-snippet [content]="snippets.compiled.layoutHtml" language="html"></uxd-snippet>\n  </tab>\n  <tab heading="JavaScript">\n    <uxd-snippet [content]="snippets.compiled.controllerJs" language="javascript"></uxd-snippet>\n  </tab>\n  <tab heading="CSS">\n    <uxd-snippet [content]="snippets.compiled.stylesCss" language="css"></uxd-snippet>\n  </tab>\n  <tab heading="Item Template HTML">\n    <uxd-snippet [content]="snippets.compiled.itemTemplateHtml" language="html"></uxd-snippet>\n  </tab>\n</tabset>'},2248:function(e,t){e.exports='<uxd-infinite-scroll-wrapper></uxd-infinite-scroll-wrapper>\n\n<hr>\n\n<p>When displaying long lists of data it is often preferable to add paging to the list. By using paging data is loaded in small\n  blocks improving load times and reducing the workload on the server providing the data.</p>\n\n<p>To implement paging functionality add the <code>infinite-scroll</code> directive as an attribute to the element that has\n  the scrollbar. This will also work on elements using the <em>custom scrollbar</em>.</p>\n\n<p>There are several other attributes that can be added to configure the behavior:</p>\n<div class="demo-attributes table-responsive">\n  <table class="table m-t">\n    <tbody>\n      <tr>\n        <th>Name</th>\n        <th>Type</th>\n        <th>Binding</th>\n        <th>Description</th>\n        <th>Optional</th>\n      </tr>\n      <tr>\n        <td class="attribute">page-size</td>\n        <td>number</td>\n        <td>variable</td>\n        <td>This should inform the directive of the number of items each page will contain. If a page contains less than the\n          specified number of items then it will be assumed that it is the last page and no more should be loaded.</td>\n        <td>false</td>\n      </tr>\n      <tr>\n        <td class="attribute">page-fn</td>\n        <td>boolean</td>\n        <td>variable</td>\n        <td>This function will be called when a page of data is required. The function will be called with three arguments, the\n          first will be the number representing which page to load, the second will be the number of items expected to be\n          in each page and the third will be the search query if one was specified. This function should either return an\n          array containing the data for the associated page, or a <code>$q.defer().promise</code> if data is not immediately\n          available.</td>\n        <td>false</td>\n      </tr>\n      <tr>\n        <td class="attribute">page-position</td>\n        <td>number</td>\n        <td>variable</td>\n        <td>Represents the point at which the next page should be loaded. This number is a represents a percentage so the value\n          should be between 1 - 100. The default behavior will attempt to load the next page when the scroll handle reaches\n          85% of the way down the track.</td>\n        <td>true</td>\n      </tr>\n      <tr>\n        <td class="attribute">item-template</td>\n        <td>string</td>\n        <td>variable</td>\n        <td>The url of the template for each item in the list. Each item in the list will have the same template, when an item\n          is added to the list it is created with a scope containing a <code>data</code> property that holds the data associated\n          with that item.</td>\n        <td>false</td>\n      </tr>\n      <tr>\n        <td class="attribute">container-id</td>\n        <td>string</td>\n        <td>variable</td>\n        <td>If the list items should be added to a different element than the one this directive is added to, this should be\n          used to identify the element. This should be used with the <code>infinite-scroll-container</code> directive, see\n          example code for more information. This is particularly useful when using a infinite scrolling with custom scrollbars.</td>\n        <td>true</td>\n      </tr>\n      <tr>\n        <td class="attribute">show-loading</td>\n        <td>boolean</td>\n        <td>variable</td>\n        <td>This specifies whether or not a loading indicator should be shown when a page is loading. Default value is true.</td>\n        <td>true</td>\n      </tr>\n      <tr>\n        <td class="attribute">search-query</td>\n        <td>string</td>\n        <td>variable</td>\n        <td>If specified when this query changes, the list will be cleared and the page function will be called to return results\n          relevant to the search query.</td>\n        <td>true</td>\n      </tr>\n      <tr>\n        <td class="attribute">window-scroll</td>\n        <td>boolean</td>\n        <td>variable</td>\n        <td>If set to true the <code>page-fn</code> will be called when the browser window is scrolled to the <code>page-position</code>\n          rather than binding to the scroll event of the element the directive is on.</td>\n        <td>true</td>\n      </tr>\n      <tr>\n        <td class="attribute">load-more-button</td>\n        <td>object</td>\n        <td>variable</td>\n        <td>If specified this can be used to enable and configure a button to appear at the bottom of the list. Clicking this\n          button will load the next page of items rather than scrolling near the bottom. The following options can be used\n          to configure the button:\n          <ul>\n            <li><code>show</code> - boolean (optional), if set to true a button will be added to the bottom of the list and will\n              be used to load the next page (default: false).</li>\n            <li><code>text</code> - string (optional), if set this will change the text displayed in the button (default: \'Load\n              More\').</li>\n            <li><code>class</code> - string (optional), if set this will allow additional CSS classes to be added to the button\n              which can be used to change the buttons appearance (default: none).</li>\n          </ul>\n        </td>\n        <td>true</td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n<p>The following code was used to create the example above:</p>\n\n<tabset>\n  <tab heading="HTML">\n    <uxd-snippet [content]="snippets.compiled.layoutHtml" language="html"></uxd-snippet>\n  </tab>\n  <tab heading="JavaScript">\n    <uxd-snippet [content]="snippets.compiled.controllerJs" language="javascript"></uxd-snippet>\n  </tab>\n  <tab heading="CSS">\n    <uxd-snippet [content]="snippets.compiled.stylesCss" language="css"></uxd-snippet>\n  </tab>\n  <tab heading="Item Template HTML">\n    <uxd-snippet [content]="snippets.compiled.itemTemplateHtml" language="html"></uxd-snippet>\n  </tab>\n</tabset>'},2733:function(e,t){e.exports="angular.module('app').controller('CustomScrollbarDemoCtrl', CustomScrollbarDemoCtrl);\n\nfunction CustomScrollbarDemoCtrl() {\n    var vm = this;\n\n    vm.scrollBarConfig = {\n        resizeSensor: true,\n        showOnlyOnHover: false,\n        enableKeyboardNavigation: true,\n        isScrollableH: false,\n        scrollMargin: 5\n    };\n}"},2734:function(e,t){e.exports='<div class="scroll-example" scroll-config="vm.scrollBarConfig"\n    scroll-pane scroll-name="uxd-scroll-example">\n\n    <h4>Custom scrollbar example</h4>\n    <p>Lorem ipsum dolor sit amet...</p>\n\n</div>'},2735:function(e,t){e.exports='<div class="scroll-example" scroll-config="vm.scrollBarConfig" scroll-pane scroll-name="uxd-scroll-example">\n    <h4>Custom scrollbar example</h4>\n    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec in ligula id sem tristique ultrices eget id neque. Duis\n        enim turpis, tempus at accumsan vitae, lobortis id sapien. Pellentesque nec orci mi, in pharetra ligula. Nulla facilisi.\n        Nulla facilisi. Mauris convallis venenatis massa, quis consectetur felis ornare quis. Sed aliquet nunc ac ante molestie\n        ultricies. Nam pulvinar ultricies bibendum. Vivamus diam leo, faucibus et vehicula eu, molestie sit amet dui. Proin\n        nec orci et elit semper ultrices. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus\n        mus. Sed quis urna mi, ac dignissim mauris. Quisque mollis ornare mauris, sed laoreet diam malesuada quis. Proin\n        vel elementum ante. Donec hendrerit arcu ac odio tincidunt posuere. Vestibulum nec risus eu lacus semper viverra.\n    </p>\n    <p>\n        Vestibulum dictum consectetur magna eu egestas. Praesent molestie dapibus erat, sit amet sodales lectus congue ut. Nam adipiscing,\n        tortor ac blandit egestas, lorem ligula posuere ipsum, nec faucibus nisl enim eu purus. Quisque bibendum diam quis\n        nunc eleifend at molestie libero tincidunt. Quisque tincidunt sapien a sapien pellentesque consequat. Mauris adipiscing\n        venenatis augue ut tempor. Donec auctor mattis quam quis aliquam. Nullam ultrices erat in dolor pharetra bibendum.\n        Suspendisse eget odio ut libero imperdiet rhoncus. Curabitur aliquet, ipsum sit amet aliquet varius, est urna ullamcorper\n        magna, sed eleifend libero nunc non erat. Vivamus semper turpis ac turpis volutpat non cursus velit aliquam. Fusce\n        id tortor id sapien porta egestas. Nulla venenatis luctus libero et suscipit. Sed sed purus risus. Donec auctor,\n        leo nec eleifend vehicula, lacus felis sollicitudin est, vitae lacinia lectus urna nec libero. Aliquam pellentesque,\n        arcu condimentum pharetra vestibulum, lectus felis malesuada felis, vel fringilla dolor dui tempus nisi. In hac habitasse\n        platea dictumst. Ut imperdiet mauris vitae eros varius eget accumsan lectus adipiscing.\n    </p>\n    <p>\n        Quisque et massa leo, sit amet adipiscing nisi. Mauris vel condimentum dolor. Duis quis ullamcorper eros. Proin metus dui,\n        facilisis id bibendum sed, aliquet non ipsum. Aenean pulvinar risus eu nisi dictum eleifend. Maecenas mattis dolor\n        eget lectus pretium eget molestie libero auctor. Praesent sit amet tellus sed nibh convallis semper. Curabitur nisl\n        odio, feugiat non dapibus sed, tincidunt ut est. Nullam erat velit, suscipit aliquet commodo sit amet, mollis in\n        mauris. Curabitur pharetra dictum interdum. In posuere pretium ultricies. Curabitur volutpat eros vehicula quam ultrices\n        varius. Proin volutpat enim a massa tempor ornare. Sed ullamcorper fermentum nisl, ac hendrerit sem feugiat ac. Donec\n        porttitor ullamcorper quam. Morbi pretium adipiscing quam, quis bibendum diam congue eget. Sed at lectus at est malesuada\n        iaculis. Sed fermentum quam dui. Donec eget ipsum dolor, id mollis nisi. Donec fermentum vehicula porta.\n    </p>\n    <p>\n        Quisque et massa leo, sit amet adipiscing nisi. Mauris vel condimentum dolor. Duis quis ullamcorper eros. Proin metus dui,\n        facilisis id bibendum sed, aliquet non ipsum. Aenean pulvinar risus eu nisi dictum eleifend. Maecenas mattis dolor\n        eget lectus pretium eget molestie libero auctor. Praesent sit amet tellus sed nibh convallis semper. Curabitur nisl\n        odio, feugiat non dapibus sed, tincidunt ut est. Nullam erat velit, suscipit aliquet commodo sit amet, mollis in\n        mauris. Curabitur pharetra dictum interdum. In posuere pretium ultricies. Curabitur volutpat eros vehicula quam ultrices\n        varius. Proin volutpat enim a massa tempor ornare. Sed ullamcorper fermentum nisl, ac hendrerit sem feugiat ac. Donec\n        porttitor ullamcorper quam. Morbi pretium adipiscing quam, quis bibendum diam congue eget. Sed at lectus at est malesuada\n        iaculis. Sed fermentum quam dui. Donec eget ipsum dolor, id mollis nisi. Donec fermentum vehicula porta.\n    </p>\n</div>'},2736:function(e,t){e.exports=".scroll-example {\n    overflow: auto;\n    height: 300px;\n    border: 1px solid #e7eaec;\n}\n\n.scroll-example h4 {\n    margin-top: 0;\n}"},2737:function(e,t){e.exports="angular.module('app').controller('InfiniteScrollLoadMoreDemoCtrl', InfiniteScrollLoadMoreDemoCtrl);\n\nInfiniteScrollLoadMoreDemoCtrl.$inject = ['$scope', '$q', 'safeTimeout'];\n\nfunction InfiniteScrollLoadMoreDemoCtrl($scope, $q, safeTimeout) {\n    var vm = this;\n\n    var safeTimeoutInstance = safeTimeout.create($scope);\n    var departments = ['Finance', 'Operations', 'Investor Relations', 'Technical', 'Auditing', 'Labs'];\n\n    vm.infiniteScrollbarConfig = {\n        resizeSensor: true,\n        enableKeyboardNavigation: true\n    };\n\n    vm.pageSize = 20;\n    vm.scrollPosition = 95;\n    vm.containerId = 'user-container';\n    vm.itemTemplate = 'itemTemplate.html';\n    vm.loadMoreButton = {\n        show: true\n    };\n\n    vm.pageFunction = function (pageNumber, pageSize) {\n\n        //create a deferred object\n        var defer = $q.defer();\n\n        //use a timeout to simulate server request\n        safeTimeoutInstance.timeout(function () {\n            //create an array contain user name, department and email address\n            var users = [];\n\n            //generate user information\n            for (var i = 0; i < pageSize; i++) {\n                var name = chance.name();\n\n                users.push({\n                    id: (pageNumber * pageSize) + i + 1,\n                    name: name,\n                    email: nameToEmail(name),\n                    department: departments[Math.floor(Math.random() * 6)]\n                });\n            }\n\n            defer.resolve(users);\n        }, 1000);\n\n        return defer.promise;\n    };\n\n    function nameToEmail(name) {\n        return name.toLowerCase().replace(' ', '.') + '@business.com';\n    }\n}"},2738:function(e,t){e.exports='<div class="row">\n    <div class="col-md-6">\n        <div class="employee-list-container">\n            <div class="employee-list" scroll-pane scroll-config="vm.infiniteScrollbarConfig"\n                scroll-name="infiniteScrollExample"\n                infinite-scroll page-size="vm.pageSize" page-fn="vm.pageFunction"\n                page-position="vm.scrollPosition" container-id="vm.containerId"\n                item-template="vm.itemTemplate" load-more-button="vm.loadMoreButton">\n\n                \x3c!-- Users will be added to this element --\x3e\n                <div infinite-scroll-container="user-container"></div>\n            </div>\n        </div>\n    </div>\n</div>'},2739:function(e,t){e.exports=".employee-list-container {\n  border: 1px solid #ddd;\n  padding: 5px;\n  padding-left: 0;  \n}\n\n.employee-list {\n  width: 100%;\n  height: 250px;\n}\n\n.employee-item {\n  width: 100%;\n  height: 65px;\n  padding: 10px 20px;\n  border-bottom: 1px solid #eee;\n}\n\n.body-dark .employee-list {\n  border: 1px solid #666666;\n}\n\n.body-dark .employee-item {\n  border-bottom: 1px solid #666666;\n}\n\n.body-dark .employee-item .text-black {\n  color: #fff !important;\n}"},2740:function(e,t){e.exports="angular.module('app').controller('InfiniteScrollDemoCtrl', InfiniteScrollDemoCtrl);\n\nInfiniteScrollDemoCtrl.$inject = ['$scope', '$q', 'safeTimeout'];\n\nfunction InfiniteScrollDemoCtrl($scope, $q, safeTimeout) {\n    var vm = this;\n\n    var safeTimeoutInstance = safeTimeout.create($scope);\n    var departments = ['Finance', 'Operations', 'Investor Relations', 'Technical', 'Auditing', 'Labs'];\n\n    vm.infiniteScrollbarConfig = {\n        resizeSensor: true,\n        enableKeyboardNavigation: true\n    };\n\n    vm.pageSize = 20;\n    vm.scrollPosition = 95;\n    vm.containerId = 'user-container';\n    vm.itemTemplate = 'itemTemplate.html';\n    vm.loadMoreButton = {\n        show: false\n    };\n\n    vm.pageFunction = function (pageNumber, pageSize) {\n\n        //create a deferred object\n        var defer = $q.defer();\n\n        //use a timeout to simulate server request\n        safeTimeoutInstance.timeout(function () {\n            //create an array contain user name, department and email address\n            var users = [];\n\n            //generate user information\n            for (var i = 0; i < pageSize; i++) {\n                var name = chance.name();\n\n                users.push({\n                    id: (pageNumber * pageSize) + i + 1,\n                    name: name,\n                    email: nameToEmail(name),\n                    department: departments[Math.floor(Math.random() * 6)]\n                });\n            }\n\n            defer.resolve(users);\n        }, 1000);\n\n        return defer.promise;\n    };\n\n    function nameToEmail(name) {\n        return name.toLowerCase().replace(' ', '.') + '@business.com';\n    }\n}"},2741:function(e,t){e.exports='<div class="row">\n    <div class="col-md-6">\n        <div class="employee-list-container">\n            <div class="employee-list" scroll-pane scroll-config="vm.infiniteScrollbarConfig"\n                scroll-name="infiniteScrollExample"\n                infinite-scroll page-size="vm.pageSize" page-fn="vm.pageFunction"\n                page-position="vm.scrollPosition" container-id="vm.containerId"\n                item-template="vm.itemTemplate" load-more-button="vm.loadMoreButton">\n\n                \x3c!-- Users will be added to this element --\x3e\n                <div infinite-scroll-container="user-container"></div>\n            </div>\n        </div>\n    </div>\n</div>'},2742:function(e,t){e.exports=".employee-list-container {\n  border: 1px solid #ddd;\n  padding: 5px;\n  padding-left: 0;  \n}\n\n.employee-list {\n  width: 100%;\n  height: 250px;\n}\n\n.employee-item {\n  width: 100%;\n  height: 65px;\n  padding: 10px 20px;\n  border-bottom: 1px solid #eee;\n}\n\n.body-dark .employee-list {\n  border: 1px solid #666666;\n}\n\n.body-dark .employee-item {\n  border-bottom: 1px solid #666666;\n}\n\n.body-dark .employee-item .text-black {\n  color: #fff !important;\n}"},3075:function(e,t,n){var o=n(2100);e.exports="string"==typeof o?o:o.toString()},3076:function(e,t,n){var o=n(2101);e.exports="string"==typeof o?o:o.toString()},3077:function(e,t,n){var o=n(2102);e.exports="string"==typeof o?o:o.toString()}});