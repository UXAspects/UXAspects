webpackJsonp([38],{1559:function(t,e,n){"use strict";!function(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}(n(1560))},1560:function(t,e,n){"use strict";function o(t,e){return"rgba("+t.concat(e).join(",")+")"}function r(t,e){return Math.floor(Math.random()*(e-t+1))+t}function a(t){return{backgroundColor:o(t,.4),borderColor:o(t,1),pointBackgroundColor:o(t,1),pointBorderColor:"#fff",pointHoverBackgroundColor:"#fff",pointHoverBorderColor:o(t,.8)}}function s(t){return{backgroundColor:o(t,.6),borderColor:o(t,1),hoverBackgroundColor:o(t,.8),hoverBorderColor:o(t,1)}}function i(t){return{backgroundColor:t.map(function(t){return o(t,.6)}),borderColor:t.map(function(){return"#fff"}),pointBackgroundColor:t.map(function(t){return o(t,1)}),pointBorderColor:t.map(function(){return"#fff"}),pointHoverBackgroundColor:t.map(function(t){return o(t,1)}),pointHoverBorderColor:t.map(function(t){return o(t,1)})}}function l(t){return{backgroundColor:t.map(function(t){return o(t,.6)}),borderColor:t.map(function(t){return o(t,1)}),hoverBackgroundColor:t.map(function(t){return o(t,.8)}),hoverBorderColor:t.map(function(t){return o(t,1)})}}function c(){return[r(0,255),r(0,255),r(0,255)]}function h(t){return C.defaultColors[t]||c()}function d(t){for(var e=new Array(t),n=0;n<t;n++)e[n]=C.defaultColors[n]||c();return e}function p(t,e,n){return"pie"===t||"doughnut"===t?i(d(n)):"polarArea"===t?l(d(n)):"line"===t||"radar"===t?a(h(e)):"bar"===t||"horizontalBar"===t?s(h(e)):h(e)}var u=this&&this.__decorate||function(t,e,n,o){var r,a=arguments.length,s=a<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,o);else for(var i=t.length-1;i>=0;i--)(r=t[i])&&(s=(a<3?r(s):a>3?r(e,n,s):r(e,n))||s);return a>3&&s&&Object.defineProperty(e,n,s),s},b=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},g=n(0),f=n(1562),C=function(){function t(t){this.labels=[],this.options={},this.chartClick=new g.EventEmitter,this.chartHover=new g.EventEmitter,this.initFlag=!1,this.element=t}return t.prototype.ngOnInit=function(){this.ctx=this.element.nativeElement.getContext("2d"),this.cvs=this.element.nativeElement,this.initFlag=!0,(this.data||this.datasets)&&this.refresh()},t.prototype.ngOnChanges=function(t){this.initFlag&&(t.hasOwnProperty("data")||t.hasOwnProperty("datasets")?(t.data?this.updateChartData(t.data.currentValue):this.updateChartData(t.datasets.currentValue),this.chart.update()):this.refresh())},t.prototype.ngOnDestroy=function(){this.chart&&(this.chart.destroy(),this.chart=void 0)},t.prototype.getChartBuilder=function(t){var e=this,n=this.getDatasets(),o=Object.assign({},this.options);!1===this.legend&&(o.legend={display:!1}),o.hover=o.hover||{},o.hover.onHover||(o.hover.onHover=function(t){t&&!t.length||e.chartHover.emit({active:t})}),o.onClick||(o.onClick=function(t,n){e.chartClick.emit({event:t,active:n})});var r={type:this.chartType,data:{labels:this.labels,datasets:n},options:o};return new f.Chart(t,r)},t.prototype.updateChartData=function(t){Array.isArray(t[0].data)?this.chart.data.datasets.forEach(function(e,n){e.data=t[n].data,t[n].label&&(e.label=t[n].label)}):this.chart.data.datasets[0].data=t},t.prototype.getDatasets=function(){var t=this,e=void 0;if((!this.datasets||!this.datasets.length&&this.data&&this.data.length)&&(e=Array.isArray(this.data[0])?this.data.map(function(e,n){return{data:e,label:t.labels[n]||"Label "+n}}):[{data:this.data,label:"Label 0"}]),(this.datasets&&this.datasets.length||e&&e.length)&&(e=(this.datasets||e).map(function(e,n){var o=Object.assign({},e);return t.colors&&t.colors.length?Object.assign(o,t.colors[n]):Object.assign(o,p(t.chartType,n,o.data.length)),o})),!e)throw new Error("ng-charts configuration error,\n      data or datasets field are required to render char "+this.chartType);return e},t.prototype.refresh=function(){this.ngOnDestroy(),this.chart=this.getChartBuilder(this.ctx)},t}();C.defaultColors=[[255,99,132],[54,162,235],[255,206,86],[231,233,237],[75,192,192],[151,187,205],[220,220,220],[247,70,74],[70,191,189],[253,180,92],[148,159,177],[77,83,96]],u([g.Input(),b("design:type",Array)],C.prototype,"data",void 0),u([g.Input(),b("design:type",Array)],C.prototype,"datasets",void 0),u([g.Input(),b("design:type",Array)],C.prototype,"labels",void 0),u([g.Input(),b("design:type",Object)],C.prototype,"options",void 0),u([g.Input(),b("design:type",String)],C.prototype,"chartType",void 0),u([g.Input(),b("design:type",Array)],C.prototype,"colors",void 0),u([g.Input(),b("design:type",Boolean)],C.prototype,"legend",void 0),u([g.Output(),b("design:type",g.EventEmitter)],C.prototype,"chartClick",void 0),u([g.Output(),b("design:type",g.EventEmitter)],C.prototype,"chartHover",void 0),C=u([g.Directive({selector:"canvas[baseChart]",exportAs:"base-chart"}),b("design:paramtypes",[g.ElementRef])],C),e.BaseChartDirective=C;var v=function(){function t(){}return t}();v=u([g.NgModule({declarations:[C],exports:[C],imports:[]})],v),e.ChartsModule=v},1677:function(t,e){t.exports=".demo-chart-container {\n    display: block;\n    position: relative;\n    height: 200px;\n}\n\n.chart-scroll-previous-btn,\n.chart-scroll-next-btn {\n  position: absolute;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 25px;\n  height: 25px;\n  background-color: #00a7a2;\n  border-radius: 50%;\n  opacity: 0.7;\n  cursor: pointer;\n  transition: opacity 0.3s ease-in-out;\n  top: calc(50% - 22px);\n  color: #fff;\n  font-size: 13px;\n}\n\n.chart-scroll-previous-btn:hover,\n.chart-scroll-next-btn:hover {\n  opacity: 0.9;\n}\n\n.chart-scroll-previous-btn {\n  left: 32px;\n  padding-right: 1px;\n}\n\n.chart-scroll-next-btn {\n  right: 10px;\n  padding-left: 2px;\n}\n"},1678:function(t,e){t.exports='<div class="demo-chart-container">\n\n    <div class="chart-scroll-previous-btn" *ngIf="hasPreviousPage()" (click)="goToPreviousPage()">\n        <i class="hpe-icon hpe-previous"></i>\n    </div>\n\n    <canvas baseChart \n            [datasets]="barChartData"\n            [labels]="barChartLabels"\n            [options]="barChartOptions"\n            [legend]="barChartLegend"\n            [colors]="barChartColors"\n            chartType="bar">\n    </canvas>\n\n    <div class="chart-scroll-next-btn" *ngIf="hasNextPage()" (click)="goToNextPage()">\n        <i class="hpe-icon hpe-next"></i>        \n    </div>\n\n</div>'},1679:function(t,e){t.exports="import { Component } from '@angular/core';\nimport { ColorService } from 'ux-aspects';\nimport { BaseChartDirective } from 'ng2-charts';\nimport { Chart } from 'chart.js';\n\n@Component({\n    selector: 'app',\n    templateUrl: './src/app.component.html',\n    styleUrls: ['./src/app.component.css']\n})\nexport class AppComponent {\n\n    // configure the directive data\n    barChartData: Chart.ChartData;\n\n    barChartLabels: string[];\n    barChartOptions: Chart.ChartOptions;\n    barChartLegend: boolean = false;\n    barChartColors: any;\n\n    private labels: string[] = [\n        '.doc', '.ppt', '.pdf', '.xls', '.html', '.txt',\n        '.png', '.bmp', '.gif', '.svg', '.ttf', '.wav'\n    ];\n    private data: number[] = [34, 25, 19, 34, 32, 44, 12, 27, 15, 48, 40, 36];\n\n    private page: number = 0;\n    private pageSize: number = 4;\n\n    constructor(colorService: ColorService) {\n\n        this.barChartLabels = this.getPageLabels();\n\n        this.barChartData = [{\n            data: this.getPageData(),\n            borderWidth: 1\n        }];\n\n        // Prepare colors used in chart\n        let gridColor = colorService.getColor('grey6').toHex();\n        let barBackgroundColor = colorService.getColor('chart1').setAlpha(0.1).toRgba();\n        let barHoverBackgroundColor = colorService.getColor('chart1').setAlpha(0.2).toRgba();\n        let barBorderColor = colorService.getColor('chart1').toHex();\n        let tooltipBackgroundColor = colorService.getColor('grey2').toHex();\n\n        this.barChartOptions = {\n            maintainAspectRatio: false,\n            responsive: true,\n            animation: false,\n            scales: {\n                xAxes: [{\n                    barPercentage: 0.5,\n                    categoryPercentage: 1,\n                    gridLines: {\n                        color: 'transparent'\n                    }\n                }],\n                yAxes: [{\n                    gridLines: {\n                        color: gridColor\n                    },\n                    ticks: {\n                        min: 0,\n                        max: 50,\n                        stepSize: 10\n                    } as Chart.LinearTickOptions\n                }]\n            },\n            tooltips: {\n                backgroundColor: tooltipBackgroundColor,\n                cornerRadius: 0,\n                callbacks: {\n                    title: (item: Chart.ChartTooltipItem[]) => {\n                        return;\n                    },\n                    label: (item: Chart.ChartTooltipItem) => {\n                        return `x: ${item.xLabel}, y: ${item.yLabel}`;\n                    }\n                },\n                displayColors: false\n            } as any\n        };\n\n        this.barChartColors = [\n            {\n                backgroundColor: barBackgroundColor,\n                hoverBackgroundColor: barHoverBackgroundColor,\n                borderColor: barBorderColor\n            }\n        ];\n\n    }\n\n    getPageData(): number[] {\n        let startIdx = this.page * this.pageSize;\n        let endIdx = startIdx + this.pageSize;\n\n        return this.data.slice(startIdx, endIdx);\n    }\n\n    getPageLabels(): string[] {\n        let startIdx = this.page * this.pageSize;\n        let endIdx = startIdx + this.pageSize;\n\n        return this.labels.slice(startIdx, endIdx);\n    }\n\n    goToPreviousPage(): void {\n\n        if (this.hasPreviousPage()) {\n            this.page -= 1;\n\n            // get the data and labels for the new page\n            this.barChartLabels = this.getPageLabels();\n            this.barChartData[0].data = this.getPageData();\n        }\n\n    }\n\n    goToNextPage(): void {\n\n        if (this.hasNextPage()) {\n            this.page += 1;\n\n            // get the data and labels for the new page\n            this.barChartLabels = this.getPageLabels();\n            this.barChartData[0].data = this.getPageData();\n        }\n\n    }\n\n    hasNextPage(): boolean {\n        // get the index of the next page\n        let nextPageIndex = (this.page + 1) * this.pageSize;\n\n        // check if this index is out of bounds\n        return nextPageIndex < this.data.length;\n    }\n\n    hasPreviousPage(): boolean {\n        return this.page > 0;\n    }\n\n}"},1839:function(t,e,n){"use strict";var o=this&&this.__decorate||function(t,e,n,o){var r,a=arguments.length,s=a<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,o);else for(var i=t.length-1;i>=0;i--)(r=t[i])&&(s=(a<3?r(s):a>3?r(e,n,s):r(e,n))||s);return a>3&&s&&Object.defineProperty(e,n,s),s},r=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)};Object.defineProperty(e,"__esModule",{value:!0});var a=n(0),s=n(299),i=n(159),l=function(){function t(t){this.htmlCode=n(2546),this.jsCode=n(2547),this.optionsJs=n(2548),this.codepen={html:this.htmlCode,htmlAttributes:{"ng-controller":"ScrollableChartCtrl as sc"},js:[this.jsCode]};var e={chartColor:t.getColor("chart1").toRgb(),chartHover:t.getColor("chart2").setAlpha(.2).toRgba(),gridColor:t.getColor("grey4").toHex(),tickColor:t.getColor("grey6").toHex(),borderColor:t.getColor("grey2").setAlpha(.5).toRgba(),white:"#fff"};this.data=[{label:"bar",data:[[1,34],[2,25],[3,19],[4,34],[5,32],[6,44],[7,12],[8,27],[9,15],[10,48],[11,40],[12,36]]}],this.options={series:{bars:{show:!0,fill:!0,fillColor:{colors:[{opacity:.1},{opacity:.1}]},barWidth:.5,lineWidth:1,align:"center"},highlightColor:[e.chartHover]},xaxis:{tickDecimals:0,color:[e.white],ticks:[[1,".doc"],[2,".ppt"],[3,".pdf"],[4,".xls"],[5,".html"],[6,".txt"],[7,".png"],[8,".bmp"],[9,".gif"],[10,".svg"],[11,".ttf"],[12,".wav"]],scrollable:{enabled:!0,range:4,lowerBound:.5,upperBound:12.5,color:[e.chartColor],callback:function(){}}},colors:[e.chartColor],grid:{color:[e.gridColor],hoverable:!0,clickable:!0,borderWidth:{left:1,bottom:1,right:0,top:0},borderColor:{left:[e.borderColor],bottom:[e.borderColor]}},legend:{show:!1},tooltip:{show:!0,shifts:{x:0,y:-30},content:function(t,e,n){return"x: %x, y: "+n}}}}return t}();l=o([a.Component({selector:"uxd-charts-scrollable-chart-ng1",template:n(2209),changeDetection:a.ChangeDetectionStrategy.OnPush}),s.DocumentationSectionComponent("ChartsScrollableChartNg1Component"),r("design:paramtypes",[i.ColorService])],l),e.ChartsScrollableChartNg1Component=l},1840:function(t,e,n){"use strict";var o=this&&this.__decorate||function(t,e,n,o){var r,a=arguments.length,s=a<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,o);else for(var i=t.length-1;i>=0;i--)(r=t[i])&&(s=(a<3?r(s):a>3?r(e,n,s):r(e,n))||s);return a>3&&s&&Object.defineProperty(e,n,s),s},r=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)};Object.defineProperty(e,"__esModule",{value:!0});var a=n(0),s=n(9),i=n(20),l=n(1839),c=n(158),h=n(301),d=n(300),p=n(303),u=n(1841),b=n(1559),g=n(302),f=[l.ChartsScrollableChartNg1Component,u.ChartsScrollableChartComponent],C=[{path:"**",component:h.DocumentationCategoryComponent,data:{category:c.ResolverService.resolveCategoryData(c.DocumentationPage.Charts,"Scrollable Chart")}}],v=function(){function t(t,e){e.registerResolver(t)}return t}();v=o([a.NgModule({imports:[p.WrappersModule,b.ChartsModule,s.CommonModule,g.TabsModule,d.DocumentationComponentsModule,i.RouterModule.forChild(C)],exports:f,declarations:f,entryComponents:f}),r("design:paramtypes",[a.ComponentFactoryResolver,c.ResolverService])],v),e.ChartsScrollableChartModule=v},1841:function(t,e,n){"use strict";var o=this&&this.__decorate||function(t,e,n,o){var r,a=arguments.length,s=a<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,o);else for(var i=t.length-1;i>=0;i--)(r=t[i])&&(s=(a<3?r(s):a>3?r(e,n,s):r(e,n))||s);return a>3&&s&&Object.defineProperty(e,n,s),s},r=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)};Object.defineProperty(e,"__esModule",{value:!0});var a=n(0),s=n(299),i=n(159),l=function(){function t(t){this.plunk={files:{"app.component.ts":n(1679),"app.component.html":n(1678),"app.component.css":n(1677)},modules:[{library:"chart.js"},{imports:["ChartsModule"],library:"ng2-charts"},{imports:["ColorServiceModule"],library:"ux-aspects"}],mappings:[{alias:"chart.js",source:"https://unpkg.com/chart.js@2.5.0/dist/Chart.min.js"},{alias:"ng2-charts",source:"https://unpkg.com/ng2-charts@1.5.0/bundles/ng2-charts.umd.min.js"}]},this.barChartLegend=!1,this.labels=[".doc",".ppt",".pdf",".xls",".html",".txt",".png",".bmp",".gif",".svg",".ttf",".wav"],this.data=[34,25,19,34,32,44,12,27,15,48,40,36],this.page=0,this.pageSize=4,this.htmlCode=n(1678),this.tsCode=n(1679),this.cssCode=n(1677),this.barChartLabels=this.getPageLabels(),this.barChartData=[{data:this.getPageData(),borderWidth:1}];var e=t.getColor("grey6").toHex(),o=t.getColor("chart1").setAlpha(.1).toRgba(),r=t.getColor("chart1").setAlpha(.2).toRgba(),a=t.getColor("chart1").toHex(),s=t.getColor("grey2").toHex();this.barChartOptions={maintainAspectRatio:!1,responsive:!0,animation:!1,scales:{xAxes:[{barPercentage:.5,categoryPercentage:1,gridLines:{color:"transparent"}}],yAxes:[{gridLines:{color:e},ticks:{min:0,max:50,stepSize:10}}]},tooltips:{backgroundColor:s,cornerRadius:0,callbacks:{title:function(t){},label:function(t){return"x: "+t.xLabel+", y: "+t.yLabel}},displayColors:!1}},this.barChartColors=[{backgroundColor:o,hoverBackgroundColor:r,borderColor:a}]}return t.prototype.getPageData=function(){var t=this.page*this.pageSize,e=t+this.pageSize;return this.data.slice(t,e)},t.prototype.getPageLabels=function(){var t=this.page*this.pageSize,e=t+this.pageSize;return this.labels.slice(t,e)},t.prototype.goToPreviousPage=function(){this.hasPreviousPage()&&(this.page-=1,this.barChartLabels=this.getPageLabels(),this.barChartData[0].data=this.getPageData())},t.prototype.goToNextPage=function(){this.hasNextPage()&&(this.page+=1,this.barChartLabels=this.getPageLabels(),this.barChartData[0].data=this.getPageData())},t.prototype.hasNextPage=function(){return(this.page+1)*this.pageSize<this.data.length},t.prototype.hasPreviousPage=function(){return this.page>0},t}();l=o([a.Component({selector:"uxd-charts-scrollable-chart",template:n(2210),styles:[n(3134)]}),s.DocumentationSectionComponent("ChartsScrollableChartComponent"),r("design:paramtypes",[i.ColorService])],l),e.ChartsScrollableChartComponent=l},2132:function(t,e,n){e=t.exports=n(10)(void 0),e.push([t.i,".chart-scroll-previous-btn,\n.chart-scroll-next-btn {\n  position: absolute;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 25px;\n  height: 25px;\n  background-color: #00a7a2;\n  border-radius: 50%;\n  opacity: 0.7;\n  cursor: pointer;\n  transition: opacity 0.3s ease-in-out;\n  top: calc(50% - 22px);\n  color: #fff;\n  font-size: 13px;\n}\n.chart-scroll-previous-btn:hover,\n.chart-scroll-next-btn:hover {\n  opacity: 0.9;\n}\n.chart-scroll-previous-btn {\n  left: 32px;\n  padding-right: 1px;\n}\n.chart-scroll-next-btn {\n  right: 10px;\n  padding-left: 2px;\n}\n",""])},2209:function(t,e){t.exports='<div class="flot-chart">\n  <ux-flot-ng1 [dataset]="data" [options]="options"></ux-flot-ng1>\n</div>\n\n<hr>\n\n<p>Bar charts and line charts can be extended to have scrolling capabilities for cases when the chart has to display large amounts of data.</p>\n\n<p>To make a chart scrollable we need to define a <code>scrollable</code> object under the xaxis options.</p>\n\n<uxd-snippet language="javascript" [code]="optionsJs"></uxd-snippet>\n\n<hr>\n\n<div class="demo-attributes table-responsive">\n<table class="table">\n  <tbody><tr>\n    <th>Property</th>\n    <th>Type</th>\n    <th>Description</th>\n    <th>Optional</th>\n  </tr>\n  <tr>\n    <td class="attribute">scrollable</td>\n    <td>array</td>\n    <td>Helps configure the scrolling behavior.</td>\n    <td>true</td>\n  </tr>\n</tbody></table>\n</div>\n\n<hr>\n\n<p>The following attributes should be defined within <code>scrollable</code></p>\n\n<div class="demo-attributes table-responsive">\n<table class="table">\n  <tbody><tr>\n    <th>Property</th>\n    <th>Type</th>\n    <th>Description</th>\n    <th>Optional</th>\n  </tr>\n  <tr>\n    <td class="attribute">enabled</td>\n    <td>boolean</td>\n    <td>Set to true if scrolling will be enabled.</td>\n    <td>true</td>\n  </tr>\n  <tr>\n    <td class="attribute">range</td>\n    <td>number</td>\n    <td>Represents the size of each page in relation to the points on the x-axis. For example, in the chart above a value of 4 will initially show any points between 0.5 and 4.5. When the next button is clicked it will show points between 4.5 and 8.5</td>\n    <td>true</td>\n  </tr>\n  <tr>\n    <td class="attribute">lowerBound</td>\n    <td>number</td>\n    <td>Represents the minimum point on the x-axis that can be scrolled to. Once the chart is at this position the scroll left button will be hidden.</td>\n    <td>true</td>\n  </tr>\n  <tr>\n    <td class="attribute">upperBound</td>\n    <td>number</td>\n    <td>Represents the maximum point on the x-axis that can be scrolled to. Once the chart is at this point the scroll right button will be hidden.</td>\n    <td>true</td>\n  </tr>\n  <tr>\n    <td class="attribute">color</td>\n    <td>color</td>\n    <td>Sets the color of the scroll buttons.</td>\n    <td>true</td>\n  </tr>\n  <tr>\n    <td class="attribute">callback</td>\n    <td>function</td>\n    <td>Will be called when the chart is scrolled. It should take in one parameter that will contain two properties.</td>\n    <td>true</td>\n  </tr>\n</tbody></table>\n</div>\n\n<hr>\n\n<p>The following attributes should be defined within <code>callback</code></p>\n\n<div class="demo-attributes table-responsive">\n<table class="table">\n  <tbody><tr>\n    <th>Property</th>\n    <th>Type</th>\n    <th>Description</th>\n    <th>Optional</th>\n  </tr>\n  <tr>\n    <td class="attribute">start</td>\n    <td>number</td>\n    <td>Contains the minimum value on the x-axis that is currently visible.</td>\n    <td>true</td>\n  </tr>\n  <tr>\n    <td class="attribute">end</td>\n    <td>number</td>\n    <td>Contains the maximum value on the x-axis that is currently visible.</td>\n    <td>true</td>\n  </tr>\n</tbody></table>\n</div>\n\n<blockquote>\n  <p><strong>Note</strong>: Refer to the <a routerLink="/charts/flot-options">Flot Options</a> page for details of chart options.</p>\n</blockquote>\n\n<p>Scrollable charts are an enhanced version of bar/line charts. For more information on adding a bar or line chart, refer to the appropriate chart documentation.</p>\n\n<blockquote>\n    <p><strong>Note</strong>: To upgrade this component to use in an Angular 4 application use: <code>upgradeAdapter.upgradeNg1Component(\'uxFlotNg1\')</code></p>\n</blockquote>'},2210:function(t,e){t.exports='<div class="demo-chart-container">\n\n    <div class="chart-scroll-previous-btn" *ngIf="hasPreviousPage()" (click)="goToPreviousPage()">\n        <i class="hpe-icon hpe-previous"></i>\n    </div>\n\n    <canvas baseChart \n            [datasets]="barChartData"\n            [labels]="barChartLabels"\n            [options]="barChartOptions"\n            [legend]="barChartLegend"\n            [colors]="barChartColors"\n            chartType="bar">\n    </canvas>\n\n    <div class="chart-scroll-next-btn" *ngIf="hasNextPage()" (click)="goToNextPage()">\n        <i class="hpe-icon hpe-next"></i>        \n    </div>\n\n</div>\n\n<hr>\n\n<p>\n    Scrollable Charts can be added using the <code>ng2-charts</code> library. \n    The <code>chart.js</code> library needs to be imported and the <code>ChartsModule</code> needs to be added to the appropriate NgModule.\n</p>\n\n<br>\n\n<p>The <code>baseChart</code> directive should be added to a <code>canvas</code> element and the following attributes can be used to customize the chart behavior and appearance:</p>\n\n\n<table class="table">\n\n    <thead>\n        <tr>\n            <th>Name</th>\n            <th>Type</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n\n    <tbody>\n\n        <tr>\n            <td><b>@Input</b> datasets</td>\n            <td><b>object[]</b></td>\n            <td>Contains the data and properties for each data set to be displayed in the chart.</td>\n        </tr>\n\n        <tr>\n            <td><b>@Input</b> chartType</td>\n            <td><b>string</b></td>\n            <td>Indicates the type of the chart. Possible options are: <code>line</code>, <code>bar</code>, <code>radar</code>, <code>pie</code>, <code>polarArea</code>, <code>doughnut</code></td>\n        </tr>\n\n        <tr>\n            <td><b>@Input</b> options</td>\n            <td><b>ChartOptions</b></td>\n            <td>Configures the appearance and behavior of all aspects of the chart.</td>\n        </tr>\n\n        <tr>\n            <td><b>@Input</b> colors</td>\n            <td><b>object[]</b></td>\n            <td>Configure the color values to be used within the chart.</td>\n        </tr>\n\n        <tr>\n            <td><b>@Input</b> legend</td>\n            <td><b>boolean</b></td>\n            <td>Determines whether or not the legend should be displayed.</td>\n        </tr>\n\n        <tr>\n            <td><b>@Output</b> chartClick</td>\n            <td></td>\n            <td>Fires when click on a chart has occurred, returns information regarding active points and labels</td>\n        </tr>\n\n        <tr>\n            <td><b>@Output</b> chartHover</td>\n            <td></td>\n            <td>Fires when mousemove (hover) on a chart has occurred, returns information regarding active points and labels.</td>\n        </tr>\n\n    </tbody>\n</table>\n\n<p>Complete documentation on the directive and chart options can be found at the documentation links below.</p>\n\n<p>The following code can be used to create the example above: </p>\n\n<tabset>\n\n    <tab heading="HTML">\n        <uxd-snippet language="html" [code]="htmlCode"></uxd-snippet>\n    </tab>\n    \n    <tab heading="TypeScript">\n        <uxd-snippet language="javascript" [code]="tsCode"></uxd-snippet>\n    </tab>\n    \n    <tab heading="CSS">\n        <uxd-snippet language="css" [code]="cssCode"></uxd-snippet>\n    </tab>\n\n</tabset>\n\n<br>\n\n<p>\n    The effect of scrolling on a chart can be achieved by simply displaying only a subset of the dataset at a time. \n    We can add \'previous\' and \'next\' buttons to allow easy navigation between the different pages of data.\n</p>\n\n<p>\n    In the example above, we store the entire dataset in an array. We also store an array containing all the labels for each data point. \n    By defining several variables (<code>pageSize</code> &amp; <code>pageNumber</code>) we can easily control the datasets shown.\n</p>\n\n<p>\n    We then add several functions:\n</p>\n\n<ul>\n    <li><code>getPageData</code> - this returns a subset of the complete dataset based on the current page number and page size.</li>\n    <li><code>getPageLabels</code> - this returns the labels to be displayed on the x-axis that correspond to the data points shown on the page.</li>\n    <li><code>goToPreviousPage</code> - this will decrement the current page number. It will then update the dataset and labels using methods described above.</li>\n    <li><code>hasPreviousPage</code> - this will determine whether we are on the first page or not.</li>\n    <li><code>hasNextPage</code> - this will determine whether we are on the last page or not.</li>\n</ul>\n\n<blockquote>\n\n    <p class="m-b-nil">\n        <b>Dependencies: </b>\n        <a class="hyperlink" href="https://www.npmjs.com/package/ng2-charts">ng2-charts</a>, \n        <a class="hyperlink" href="https://www.npmjs.com/package/chart.js">chart.js</a>\n    </p>\n\n    <p class="m-b-nil">\n        <b>Type Definitions: </b>\n        <a class="hyperlink" href="https://www.npmjs.com/package/@types/chart.js">@types/chart.js</a>\n    </p>\n\n    <p class="m-b-nil">\n        <b>Modules: </b>\n        <span>ChartsModule</span>\n    </p>\n\n\n    <p class="m-b-nil">\n        <b>Documentation: </b>\n        <a class="hyperlink" href="http://valor-software.com/ng2-charts/">Angular Directive Documentation</a>, \n        <a class="hyperlink" href="http://www.chartjs.org/docs/">Chart Library Documentation</a>\n    </p>\n</blockquote>'},2546:function(t,e){t.exports='<div class="container-fluid">\n  <div class="row">\n    <div class="col-md-12 m-t-md">\n      <div class="flot-chart">\n        <flot dataset="sc.scrollChart.data" options="sc.scrollChart.baroptions"></flot>\n        <span tabindex="0" class="sr-only">\n          <span ng-repeat="item in sc.barChart.data[0].data">,</span>\n        </span>\n      </div>\n    </div>\n  </div>\n</div>'},2547:function(t,e){t.exports='angular.module(\'app\').controller(\'ScrollableChartCtrl\', ScrollableChartCtrl);\n\nScrollableChartCtrl.$inject = [\'$colorService\'];\n\nfunction ScrollableChartCtrl($colorService) {\n    var sc = this;\n\n    var flotChartColors = {\n        chartColor: $colorService.getColor(\'chart1\').toRgb(),\n        chartHover: $colorService.getColor(\'chart2\').setAlpha(0.2).toRgba(),\n        gridColor: $colorService.getColor(\'grey4\').toHex(),\n        tickColor: $colorService.getColor(\'grey6\').toHex(),\n        borderColor: $colorService.getColor(\'grey2\').setAlpha().toRgba(),\n        white: "#FFFFFF"\n    };\n\n    sc.scrollChart = {\n        data: [{\n            label: "bar",\n            data: [\n                [1, 34],\n                [2, 25],\n                [3, 19],\n                [4, 34],\n                [5, 32],\n                [6, 44],\n                [7, 12],\n                [8, 27],\n                [9, 15],\n                [10, 48],\n                [11, 40],\n                [12, 36]\n            ]\n        }],\n        baroptions: {\n            series: {\n                bars: {\n                    show: true,\n                    fill: true,\n                    fillColor: {\n                        colors: [{\n                            opacity: 0.1\n                        }, {\n                            opacity: 0.1\n                        }]\n                    },\n                    barWidth: 0.5,\n                    lineWidth: 1,\n                    \'align\': "center"\n                },\n                highlightColor: [flotChartColors.chartHover]\n            },\n            xaxis: {\n                tickDecimals: 0,\n                color: [flotChartColors.white],\n                ticks: [\n                    [1, ".doc"],\n                    [2, ".ppt"],\n                    [3, ".pdf"],\n                    [4, ".xls"],\n                    [5, ".html"],\n                    [6, ".txt"],\n                    [7, ".png"],\n                    [8, ".bmp"],\n                    [9, ".gif"],\n                    [10, ".svg"],\n                    [11, ".ttf"],\n                    [12, ".wav"]\n                ],\n                scrollable: {\n                    enabled: true,\n                    range: 4,\n                    lowerBound: 0.5,\n                    upperBound: 12.5,\n                    color: [flotChartColors.chartColor],\n                    callback: function () {\n                        //do stuff in here when scrolled\n                    }\n                }\n\n            },\n            colors: [flotChartColors.chartColor],\n            grid: {\n                color: [flotChartColors.gridColor],\n                hoverable: true,\n                clickable: true,\n                borderWidth: {\n                    "left": 1,\n                    "bottom": 1,\n                    "right": 0,\n                    "top": 0\n                },\n                borderColor: {\n                    "left": [flotChartColors.borderColor],\n                    "bottom": [flotChartColors.borderColor]\n                }\n            },\n            legend: {\n                show: false\n            },\n            tooltip: {\n                show: true,\n                shifts: {\n                    x: 0,\n                    y: -30\n                },\n                content: function (label, xval, yval) {\n                    var content = "x: " + "%x" + ", y: " + yval;\n                    return content;\n                }\n            }\n        }\n    };\n}'},2548:function(t,e){t.exports="xaxis: {\n    scrollable: {\n        enabled: true,\n        range: 4,\n        lowerBound: 0.5,\n        upperBound: 12.5,\n        color: '#614767',\n        callback: function(position) {\n            //do stuff in here when scrolled\n        }\n    }\n}"},3134:function(t,e,n){var o=n(2132);t.exports="string"==typeof o?o:o.toString()}});